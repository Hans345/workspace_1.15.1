
109_Sinusmodulation_1-3Stufen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010220  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001320  08010400  08010400  00011400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011720  08011720  000131dc  2**0
                  CONTENTS
  4 .ARM          00000008  08011720  08011720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011728  08011728  000131dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011728  08011728  00012728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801172c  0801172c  0001272c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08011730  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  200001dc  0801190c  000131dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  0801190c  00013a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8bd  00000000  00000000  0001320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e0  00000000  00000000  00030ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  000342b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143b  00000000  00000000  00035cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa86  00000000  00000000  000370eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee39  00000000  00000000  00061b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118065  00000000  00000000  000809aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00198a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082f4  00000000  00000000  00198a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  001a0d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	080103e8 	.word	0x080103e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	080103e8 	.word	0x080103e8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	88b9      	ldrh	r1, [r7, #4]
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fab5 	bl	8001510 <ST7735_DrawPixel>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000fae:	b590      	push	{r4, r7, lr}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af02      	add	r7, sp, #8
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4611      	mov	r1, r2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4623      	mov	r3, r4
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	80bb      	strh	r3, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	88b9      	ldrh	r1, [r7, #4]
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	883c      	ldrh	r4, [r7, #0]
 8000fd4:	8b3b      	ldrh	r3, [r7, #24]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4623      	mov	r3, r4
 8000fda:	f000 fba3 	bl	8001724 <ST7735_FillRectangle>
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	80bb      	strh	r3, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffc0 	bl	8000f88 <drawPixel>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	4603      	mov	r3, r0
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	4613      	mov	r3, r2
 800102c:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800102e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800103c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001040:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001048:	1acb      	subs	r3, r1, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	bfb8      	it	lt
 800104e:	425b      	neglt	r3, r3
 8001050:	429a      	cmp	r2, r3
 8001052:	bfcc      	ite	gt
 8001054:	2301      	movgt	r3, #1
 8001056:	2300      	movle	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800105c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	833b      	strh	r3, [r7, #24]
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	82fb      	strh	r3, [r7, #22]
 8001074:	883b      	ldrh	r3, [r7, #0]
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	8afb      	ldrh	r3, [r7, #22]
 800107a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800107c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001080:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001084:	429a      	cmp	r2, r3
 8001086:	dd0b      	ble.n	80010a0 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	82bb      	strh	r3, [r7, #20]
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	8abb      	ldrh	r3, [r7, #20]
 8001092:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	827b      	strh	r3, [r7, #18]
 8001098:	883b      	ldrh	r3, [r7, #0]
 800109a:	80bb      	strh	r3, [r7, #4]
 800109c:	8a7b      	ldrh	r3, [r7, #18]
 800109e:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80010a0:	887a      	ldrh	r2, [r7, #2]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80010aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80010ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bfb8      	it	lt
 80010b8:	425b      	neglt	r3, r3
 80010ba:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80010bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010c0:	0fda      	lsrs	r2, r3, #31
 80010c2:	4413      	add	r3, r2
 80010c4:	105b      	asrs	r3, r3, #1
 80010c6:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80010c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	da02      	bge.n	80010da <writeLine+0xca>
        ystep = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	83bb      	strh	r3, [r7, #28]
 80010d8:	e031      	b.n	800113e <writeLine+0x12e>
    } else {
        ystep = -1;
 80010da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010de:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80010e0:	e02d      	b.n	800113e <writeLine+0x12e>
        if (steep) {
 80010e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <writeLine+0xec>
            writePixel(y0, x0, color);
 80010ea:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff76 	bl	8000fe6 <writePixel>
 80010fa:	e007      	b.n	800110c <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 80010fc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff6d 	bl	8000fe6 <writePixel>
        }
        err -= dy;
 800110c:	8bfa      	ldrh	r2, [r7, #30]
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8001116:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800111a:	2b00      	cmp	r3, #0
 800111c:	da09      	bge.n	8001132 <writeLine+0x122>
            y0 += ystep;
 800111e:	88ba      	ldrh	r2, [r7, #4]
 8001120:	8bbb      	ldrh	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	b29b      	uxth	r3, r3
 8001126:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001128:	8bfa      	ldrh	r2, [r7, #30]
 800112a:	8a3b      	ldrh	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	b29b      	uxth	r3, r3
 8001138:	3301      	adds	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001146:	429a      	cmp	r2, r3
 8001148:	ddcb      	ble.n	80010e2 <writeLine+0xd2>
        }
    }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3724      	adds	r7, #36	@ 0x24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}

08001154 <drawFastHLine>:
void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	writeLine(x, y, x, y + h - 1, color);
}
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af02      	add	r7, sp, #8
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	b21a      	sxth	r2, r3
 8001180:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001184:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001188:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4623      	mov	r3, r4
 8001192:	f7ff ff3d 	bl	8001010 <writeLine>
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
	...

080011a0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <fillScreen+0x2c>)
 80011ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <fillScreen+0x30>)
 80011b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fef5 	bl	8000fae <fillRect>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001f8 	.word	0x200001f8
 80011d0:	200001fa 	.word	0x200001fa

080011d4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e2:	f006 ff45 	bl	8008070 <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ST7735_Unselect>:

void ST7735_Unselect()
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f006 ff3a 	bl	8008070 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <ST7735_Reset>:

void ST7735_Reset()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2140      	movs	r1, #64	@ 0x40
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f006 ff30 	bl	8008070 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001210:	2005      	movs	r0, #5
 8001212:	f004 fbff 	bl	8005a14 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f006 ff27 	bl	8008070 <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001238:	4806      	ldr	r0, [pc, #24]	@ (8001254 <ST7735_WriteCommand+0x2c>)
 800123a:	f006 ff19 	bl	8008070 <HAL_GPIO_WritePin>
		{

		}
	#endif
	#ifdef WITHOUT_DMA
		HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800123e:	1df9      	adds	r1, r7, #7
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	2201      	movs	r2, #1
 8001246:	4804      	ldr	r0, [pc, #16]	@ (8001258 <ST7735_WriteCommand+0x30>)
 8001248:	f008 f837 	bl	80092ba <HAL_SPI_Transmit>
	#endif
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	48000400 	.word	0x48000400
 8001258:	2000039c 	.word	0x2000039c

0800125c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <ST7735_WriteData+0x30>)
 800126e:	f006 feff 	bl	8008070 <HAL_GPIO_WritePin>
    	{

    	}
	#endif
	#ifdef WITHOUT_DMA
    	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b29a      	uxth	r2, r3
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <ST7735_WriteData+0x34>)
 800127e:	f008 f81c 	bl	80092ba <HAL_SPI_Transmit>
	#endif
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	48000400 	.word	0x48000400
 8001290:	2000039c 	.word	0x2000039c

08001294 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80012a6:	e034      	b.n	8001312 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffb7 	bl	8001228 <ST7735_WriteCommand>

        numArgs = *addr++;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80012c4:	7abb      	ldrb	r3, [r7, #10]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012cc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80012dc:	7abb      	ldrb	r3, [r7, #10]
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffbb 	bl	800125c <ST7735_WriteData>
            addr += numArgs;
 80012e6:	7abb      	ldrb	r3, [r7, #10]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80012ee:	89bb      	ldrh	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00e      	beq.n	8001312 <DisplayInit+0x7e>
            ms = *addr++;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80012fe:	89bb      	ldrh	r3, [r7, #12]
 8001300:	2bff      	cmp	r3, #255	@ 0xff
 8001302:	d102      	bne.n	800130a <DisplayInit+0x76>
 8001304:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001308:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	f004 fb81 	bl	8005a14 <HAL_Delay>
    while(numCommands--) {
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	73fa      	strb	r2, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1c5      	bne.n	80012a8 <DisplayInit+0x14>
        }
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001346:	202a      	movs	r0, #42	@ 0x2a
 8001348:	f7ff ff6e 	bl	8001228 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800134c:	2300      	movs	r3, #0
 800134e:	733b      	strb	r3, [r7, #12]
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4413      	add	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	737b      	strb	r3, [r7, #13]
 800135c:	2300      	movs	r3, #0
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	797b      	ldrb	r3, [r7, #5]
 8001366:	4413      	add	r3, r2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff72 	bl	800125c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001378:	202b      	movs	r0, #43	@ 0x2b
 800137a:	f7ff ff55 	bl	8001228 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	4413      	add	r3, r2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	793b      	ldrb	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2104      	movs	r1, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5d 	bl	800125c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80013a2:	202c      	movs	r0, #44	@ 0x2c
 80013a4:	f7ff ff40 	bl	8001228 <ST7735_WriteCommand>
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	200001ff 	.word	0x200001ff
 80013b4:	20000200 	.word	0x20000200

080013b8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80013c2:	f7ff ff07 	bl	80011d4 <ST7735_Select>
    ST7735_Reset();
 80013c6:	f7ff ff1b 	bl	8001200 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80013ca:	480c      	ldr	r0, [pc, #48]	@ (80013fc <ST7735_Init+0x44>)
 80013cc:	f7ff ff62 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds2);
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <ST7735_Init+0x48>)
 80013d2:	f7ff ff5f 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds3);
 80013d6:	480b      	ldr	r0, [pc, #44]	@ (8001404 <ST7735_Init+0x4c>)
 80013d8:	f7ff ff5c 	bl	8001294 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <ST7735_Init+0x50>)
 80013de:	2202      	movs	r2, #2
 80013e0:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <ST7735_Init+0x54>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f810 	bl	8001410 <ST7735_SetRotation>
    ST7735_Unselect();
 80013f0:	f7ff fefb 	bl	80011ea <ST7735_Unselect>

}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	080107bc 	.word	0x080107bc
 8001400:	080107f4 	.word	0x080107f4
 8001404:	08010804 	.word	0x08010804
 8001408:	200001fd 	.word	0x200001fd
 800140c:	200001fe 	.word	0x200001fe

08001410 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 8001428:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800142a:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d84e      	bhi.n	80014d0 <ST7735_SetRotation+0xc0>
 8001432:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <ST7735_SetRotation+0x28>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	0800146b 	.word	0x0800146b
 8001440:	0800148d 	.word	0x0800148d
 8001444:	080014af 	.word	0x080014af
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001448:	23c0      	movs	r3, #192	@ 0xc0
 800144a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <ST7735_SetRotation+0xf4>)
 800145e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001466:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001468:	e032      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800146a:	23a0      	movs	r3, #160	@ 0xa0
 800146c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001476:	2280      	movs	r2, #128	@ 0x80
 8001478:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001480:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <ST7735_SetRotation+0xf4>)
 8001488:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800148a:	e021      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014a2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014aa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ac:	e010      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80014ae:	2360      	movs	r3, #96	@ 0x60
 80014b0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <ST7735_SetRotation+0xec>)
 80014b4:	2280      	movs	r2, #128	@ 0x80
 80014b6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <ST7735_SetRotation+0xf0>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014c4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014cc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ce:	bf00      	nop
  }
  ST7735_Select();
 80014d0:	f7ff fe80 	bl	80011d4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80014d4:	2036      	movs	r0, #54	@ 0x36
 80014d6:	f7ff fea7 	bl	8001228 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80014da:	f107 030f 	add.w	r3, r7, #15
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff febb 	bl	800125c <ST7735_WriteData>
  ST7735_Unselect();
 80014e6:	f7ff fe80 	bl	80011ea <ST7735_Unselect>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200001fc 	.word	0x200001fc
 80014f8:	200001fa 	.word	0x200001fa
 80014fc:	200001f8 	.word	0x200001f8
 8001500:	200001fd 	.word	0x200001fd
 8001504:	200001ff 	.word	0x200001ff
 8001508:	200001fe 	.word	0x200001fe
 800150c:	20000200 	.word	0x20000200

08001510 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	460b      	mov	r3, r1
 800151c:	80bb      	strh	r3, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <ST7735_DrawPixel+0x74>)
 8001526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800152a:	4293      	cmp	r3, r2
 800152c:	da26      	bge.n	800157c <ST7735_DrawPixel+0x6c>
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	4a15      	ldr	r2, [pc, #84]	@ (8001588 <ST7735_DrawPixel+0x78>)
 8001532:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001536:	4293      	cmp	r3, r2
 8001538:	da20      	bge.n	800157c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800153a:	f7ff fe4b 	bl	80011d4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f7ff fee7 	bl	8001328 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	733b      	strb	r3, [r7, #12]
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2102      	movs	r1, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe73 	bl	800125c <ST7735_WriteData>

    ST7735_Unselect();
 8001576:	f7ff fe38 	bl	80011ea <ST7735_Unselect>
 800157a:	e000      	b.n	800157e <ST7735_DrawPixel+0x6e>
        return;
 800157c:	bf00      	nop
}
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200001f8 	.word	0x200001f8
 8001588:	200001fa 	.word	0x200001fa

0800158c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800158c:	b082      	sub	sp, #8
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b089      	sub	sp, #36	@ 0x24
 8001592:	af00      	add	r7, sp, #0
 8001594:	637b      	str	r3, [r7, #52]	@ 0x34
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	460b      	mov	r3, r1
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	b2d8      	uxtb	r0, r3
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	b2d9      	uxtb	r1, r3
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015b2:	4413      	add	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2dc      	uxtb	r4, r3
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4622      	mov	r2, r4
 80015cc:	f7ff feac 	bl	8001328 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e043      	b.n	800165e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80015d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	3b20      	subs	r3, #32
 80015dc:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	440b      	add	r3, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	e029      	b.n	800164c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00e      	beq.n	8001626 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001608:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	743b      	strb	r3, [r7, #16]
 8001612:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001614:	b2db      	uxtb	r3, r3
 8001616:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2102      	movs	r1, #2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fe1c 	bl	800125c <ST7735_WriteData>
 8001624:	e00f      	b.n	8001646 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	733b      	strb	r3, [r7, #12]
 8001632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001636:	b2db      	uxtb	r3, r3
 8001638:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2102      	movs	r1, #2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe0b 	bl	800125c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3301      	adds	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001650:	461a      	mov	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4293      	cmp	r3, r2
 8001656:	d3cf      	bcc.n	80015f8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001662:	461a      	mov	r2, r3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4293      	cmp	r3, r2
 8001668:	d3b5      	bcc.n	80015d6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3724      	adds	r7, #36	@ 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001676:	b002      	add	sp, #8
 8001678:	4770      	bx	lr
	...

0800167c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800167c:	b082      	sub	sp, #8
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af04      	add	r7, sp, #16
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	4603      	mov	r3, r0
 800168a:	80fb      	strh	r3, [r7, #6]
 800168c:	460b      	mov	r3, r1
 800168e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001690:	f7ff fda0 	bl	80011d4 <ST7735_Select>

    while(*str) {
 8001694:	e033      	b.n	80016fe <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	7d3a      	ldrb	r2, [r7, #20]
 800169a:	4413      	add	r3, r2
 800169c:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <ST7735_WriteString+0xa0>)
 800169e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016a2:	4293      	cmp	r3, r2
 80016a4:	db16      	blt.n	80016d4 <ST7735_WriteString+0x58>
            x = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80016aa:	7d7b      	ldrb	r3, [r7, #21]
 80016ac:	461a      	mov	r2, r3
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80016b4:	88bb      	ldrh	r3, [r7, #4]
 80016b6:	7d7a      	ldrb	r2, [r7, #21]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <ST7735_WriteString+0xa4>)
 80016bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	da21      	bge.n	8001708 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d103      	bne.n	80016d4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	603b      	str	r3, [r7, #0]
                continue;
 80016d2:	e014      	b.n	80016fe <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	88b9      	ldrh	r1, [r7, #4]
 80016da:	88f8      	ldrh	r0, [r7, #6]
 80016dc:	8c3b      	ldrh	r3, [r7, #32]
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	8bbb      	ldrh	r3, [r7, #28]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f7ff ff4f 	bl	800158c <ST7735_WriteChar>
        x += font.width;
 80016ee:	7d3b      	ldrb	r3, [r7, #20]
 80016f0:	461a      	mov	r2, r3
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4413      	add	r3, r2
 80016f6:	80fb      	strh	r3, [r7, #6]
        str++;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1c7      	bne.n	8001696 <ST7735_WriteString+0x1a>
 8001706:	e000      	b.n	800170a <ST7735_WriteString+0x8e>
                break;
 8001708:	bf00      	nop
    }

    ST7735_Unselect();
 800170a:	f7ff fd6e 	bl	80011ea <ST7735_Unselect>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001718:	b002      	add	sp, #8
 800171a:	4770      	bx	lr
 800171c:	200001f8 	.word	0x200001f8
 8001720:	200001fa 	.word	0x200001fa

08001724 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	4603      	mov	r3, r0
 8001738:	80bb      	strh	r3, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001746:	f9b2 2000 	ldrsh.w	r2, [r2]
 800174a:	4293      	cmp	r3, r2
 800174c:	da67      	bge.n	800181e <ST7735_FillRectangle+0xfa>
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	4a36      	ldr	r2, [pc, #216]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001752:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001756:	4293      	cmp	r3, r2
 8001758:	da61      	bge.n	800181e <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 800175a:	88fa      	ldrh	r2, [r7, #6]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4413      	add	r3, r2
 8001760:	4a31      	ldr	r2, [pc, #196]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001762:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001766:	4293      	cmp	r3, r2
 8001768:	dd06      	ble.n	8001778 <ST7735_FillRectangle+0x54>
 800176a:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <ST7735_FillRectangle+0x104>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	b29a      	uxth	r2, r3
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	883b      	ldrh	r3, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001780:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001784:	4293      	cmp	r3, r2
 8001786:	dd06      	ble.n	8001796 <ST7735_FillRectangle+0x72>
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <ST7735_FillRectangle+0x108>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b29a      	uxth	r2, r3
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001796:	f7ff fd1d 	bl	80011d4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	b2d8      	uxtb	r0, r3
 800179e:	88bb      	ldrh	r3, [r7, #4]
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b2dc      	uxtb	r4, r3
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	883b      	ldrh	r3, [r7, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4622      	mov	r2, r4
 80017c4:	f7ff fdb0 	bl	8001328 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80017c8:	8c3b      	ldrh	r3, [r7, #32]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	733b      	strb	r3, [r7, #12]
 80017d2:	8c3b      	ldrh	r3, [r7, #32]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017de:	4814      	ldr	r0, [pc, #80]	@ (8001830 <ST7735_FillRectangle+0x10c>)
 80017e0:	f006 fc46 	bl	8008070 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80017e4:	883b      	ldrh	r3, [r7, #0]
 80017e6:	80bb      	strh	r3, [r7, #4]
 80017e8:	e013      	b.n	8001812 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	e00a      	b.n	8001806 <ST7735_FillRectangle+0xe2>
				{

				}
			#endif
			#ifdef WITHOUT_DMA
				HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80017f0:	f107 010c 	add.w	r1, r7, #12
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	2202      	movs	r2, #2
 80017fa:	480e      	ldr	r0, [pc, #56]	@ (8001834 <ST7735_FillRectangle+0x110>)
 80017fc:	f007 fd5d 	bl	80092ba <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	3b01      	subs	r3, #1
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f1      	bne.n	80017f0 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e8      	bne.n	80017ea <ST7735_FillRectangle+0xc6>
			#endif
        }
    }

    ST7735_Unselect();
 8001818:	f7ff fce7 	bl	80011ea <ST7735_Unselect>
 800181c:	e000      	b.n	8001820 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800181e:	bf00      	nop
}
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	200001f8 	.word	0x200001f8
 800182c:	200001fa 	.word	0x200001fa
 8001830:	48000400 	.word	0x48000400
 8001834:	2000039c 	.word	0x2000039c

08001838 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Interrupts *****************************************************************/
// GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b0a0      	sub	sp, #128	@ 0x80
 800183c:	af04      	add	r7, sp, #16
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	// Variables
	uint8_t next_line = get_next_line(); // Offset in pixel
 8001842:	f003 ffbf 	bl	80057c4 <get_next_line>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	char msg_console[80];
	char msg_display[20];
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	// Interrupt Routine
	switch (GPIO_Pin) {
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001852:	d008      	beq.n	8001866 <HAL_GPIO_EXTI_Callback+0x2e>
 8001854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001858:	f300 8097 	bgt.w	800198a <HAL_GPIO_EXTI_Callback+0x152>
 800185c:	2b02      	cmp	r3, #2
 800185e:	d016      	beq.n	800188e <HAL_GPIO_EXTI_Callback+0x56>
 8001860:	2b04      	cmp	r3, #4
 8001862:	d053      	beq.n	800190c <HAL_GPIO_EXTI_Callback+0xd4>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
		HAL_MAX_DELAY);
		break;
	default:
		break;
 8001864:	e091      	b.n	800198a <HAL_GPIO_EXTI_Callback+0x152>
		switch (handler_state) {
 8001866:	4b4b      	ldr	r3, [pc, #300]	@ (8001994 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_GPIO_EXTI_Callback+0x3c>
 800186e:	2b01      	cmp	r3, #1
 8001870:	d004      	beq.n	800187c <HAL_GPIO_EXTI_Callback+0x44>
 8001872:	e007      	b.n	8001884 <HAL_GPIO_EXTI_Callback+0x4c>
			set_handler_state(SINUS_MOD);
 8001874:	2001      	movs	r0, #1
 8001876:	f002 f92b 	bl	8003ad0 <set_handler_state>
			break;
 800187a:	e007      	b.n	800188c <HAL_GPIO_EXTI_Callback+0x54>
			set_handler_state(IDLE);
 800187c:	2000      	movs	r0, #0
 800187e:	f002 f927 	bl	8003ad0 <set_handler_state>
			break;
 8001882:	e003      	b.n	800188c <HAL_GPIO_EXTI_Callback+0x54>
			set_handler_state(IDLE);
 8001884:	2000      	movs	r0, #0
 8001886:	f002 f923 	bl	8003ad0 <set_handler_state>
			break;
 800188a:	bf00      	nop
		break;
 800188c:	e07e      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x154>
		ST7735_FillRectangle(0, 7 * next_line, 0, next_line, BLACK);
 800188e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001892:	b29b      	uxth	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	b299      	uxth	r1, r3
 800189c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	9200      	str	r2, [sp, #0]
 80018a6:	2200      	movs	r2, #0
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff ff3b 	bl	8001724 <ST7735_FillRectangle>
		sprintf(msg_display, "Taster1 gedrueckt!");
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	4939      	ldr	r1, [pc, #228]	@ (8001998 <HAL_GPIO_EXTI_Callback+0x160>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f00b ffe5 	bl	800d884 <siprintf>
		ST7735_WriteString(0, 8 * next_line, msg_display, Font_7x10, GREEN,
 80018ba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018be:	b29b      	uxth	r3, r3
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	b299      	uxth	r1, r3
 80018c4:	4b35      	ldr	r3, [pc, #212]	@ (800199c <HAL_GPIO_EXTI_Callback+0x164>)
 80018c6:	f107 0008 	add.w	r0, r7, #8
 80018ca:	2200      	movs	r2, #0
 80018cc:	9202      	str	r2, [sp, #8]
 80018ce:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80018d2:	9201      	str	r2, [sp, #4]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4602      	mov	r2, r0
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff fecd 	bl	800167c <ST7735_WriteString>
		sprintf(msg_console, "Taster1 gedrückt! \r\n");
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	492e      	ldr	r1, [pc, #184]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x168>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f00b ffcb 	bl	800d884 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fce4 	bl	80002c0 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	f107 011c 	add.w	r1, r7, #28
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	4827      	ldr	r0, [pc, #156]	@ (80019a4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001906:	f00a fb38 	bl	800bf7a <HAL_UART_Transmit>
		break;
 800190a:	e03f      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x154>
		ST7735_FillRectangle(0, 7 * next_line, 0, next_line, BLACK);
 800190c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001910:	b29b      	uxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	00d2      	lsls	r2, r2, #3
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	b299      	uxth	r1, r3
 800191a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800191e:	b29b      	uxth	r3, r3
 8001920:	2200      	movs	r2, #0
 8001922:	9200      	str	r2, [sp, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff fefc 	bl	8001724 <ST7735_FillRectangle>
		sprintf(msg_display, "Taster2 gedrueckt!");
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	491d      	ldr	r1, [pc, #116]	@ (80019a8 <HAL_GPIO_EXTI_Callback+0x170>)
 8001932:	4618      	mov	r0, r3
 8001934:	f00b ffa6 	bl	800d884 <siprintf>
		ST7735_WriteString(0, 8 * next_line, msg_display, Font_7x10, GREEN,
 8001938:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800193c:	b29b      	uxth	r3, r3
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	b299      	uxth	r1, r3
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_GPIO_EXTI_Callback+0x164>)
 8001944:	f107 0008 	add.w	r0, r7, #8
 8001948:	2200      	movs	r2, #0
 800194a:	9202      	str	r2, [sp, #8]
 800194c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001950:	9201      	str	r2, [sp, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4602      	mov	r2, r0
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fe8e 	bl	800167c <ST7735_WriteString>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4911      	ldr	r1, [pc, #68]	@ (80019ac <HAL_GPIO_EXTI_Callback+0x174>)
 8001966:	4618      	mov	r0, r3
 8001968:	f00b ff8c 	bl	800d884 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fca5 	bl	80002c0 <strlen>
 8001976:	4603      	mov	r3, r0
 8001978:	b29a      	uxth	r2, r3
 800197a:	f107 011c 	add.w	r1, r7, #28
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001984:	f00a faf9 	bl	800bf7a <HAL_UART_Transmit>
		break;
 8001988:	e000      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x154>
		break;
 800198a:	bf00      	nop
	}
}
 800198c:	bf00      	nop
 800198e:	3770      	adds	r7, #112	@ 0x70
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200008a4 	.word	0x200008a4
 8001998:	08010400 	.word	0x08010400
 800199c:	20000000 	.word	0x20000000
 80019a0:	08010414 	.word	0x08010414
 80019a4:	20000808 	.word	0x20000808
 80019a8:	0801042c 	.word	0x0801042c
 80019ac:	08010440 	.word	0x08010440

080019b0 <HAL_TIM_PeriodElapsedCallback>:

// Timer timeout Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b0a6      	sub	sp, #152	@ 0x98
 80019b6:	af06      	add	r7, sp, #24
 80019b8:	6078      	str	r0, [r7, #4]
	// Variables
	uint8_t next_line = get_next_line(); // Offset in pixel
 80019ba:	f003 ff03 	bl	80057c4 <get_next_line>
 80019be:	4603      	mov	r3, r0
 80019c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	char msg_console[80];
	char msg_display[20];
	uint32_t f0 = get_f0();
 80019c4:	f003 ff06 	bl	80057d4 <get_f0>
 80019c8:	67b8      	str	r0, [r7, #120]	@ 0x78
	float A0 = get_A0();
 80019ca:	f003 ff0b 	bl	80057e4 <get_A0>
 80019ce:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	// Überprüfe welcher Timer diese callback Funktion aufruft
	// time_val um 100ms inkrementieren
	if (htim == &htim16) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a83      	ldr	r2, [pc, #524]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d108      	bne.n	80019ec <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (handler_state == SINUS_MOD) {
 80019da:	4b83      	ldr	r3, [pc, #524]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80fb 	bne.w	8001bda <HAL_TIM_PeriodElapsedCallback+0x22a>
			inc_handler_currentTime(100);
 80019e4:	2064      	movs	r0, #100	@ 0x64
 80019e6:	f002 f891 	bl	8003b0c <inc_handler_currentTime>
		default:
			set_handler_state(IDLE);
			break;
		}
	}
}
 80019ea:	e0f6      	b.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x22a>
	else if (htim == &htim17) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a7f      	ldr	r2, [pc, #508]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	f040 80f2 	bne.w	8001bda <HAL_TIM_PeriodElapsedCallback+0x22a>
		switch (handler_state) {
 80019f6:	4b7c      	ldr	r3, [pc, #496]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x54>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d027      	beq.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8001a02:	e0e6      	b.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0x222>
			ST7735_WriteString(0, 4 * next_line, "Poti1: xx", Font_7x10, GREEN,
 8001a04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	4b78      	ldr	r3, [pc, #480]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	9202      	str	r2, [sp, #8]
 8001a14:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a18:	9201      	str	r2, [sp, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	9200      	str	r2, [sp, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a74      	ldr	r2, [pc, #464]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fe2a 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 5 * next_line, "Poti2: xx", Font_7x10, GREEN,
 8001a28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	b299      	uxth	r1, r3
 8001a36:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	9202      	str	r2, [sp, #8]
 8001a3c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a40:	9201      	str	r2, [sp, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6b      	ldr	r2, [pc, #428]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fe16 	bl	800167c <ST7735_WriteString>
			break;
 8001a50:	e0c3      	b.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x22a>
			adc_values *ptr = get_adc_values();
 8001a52:	f002 f86f 	bl	8003b34 <get_adc_values>
 8001a56:	6738      	str	r0, [r7, #112]	@ 0x70
			sprintf(msg_display, "Poti1: %2.2fV", ptr->poti1_Vf);
 8001a58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd9b 	bl	8000598 <__aeabi_f2d>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	f107 000c 	add.w	r0, r7, #12
 8001a6a:	4964      	ldr	r1, [pc, #400]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001a6c:	f00b ff0a 	bl	800d884 <siprintf>
			ST7735_WriteString(0, 4 * next_line, msg_display, Font_7x10, GREEN,
 8001a70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001a7c:	f107 000c 	add.w	r0, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	9202      	str	r2, [sp, #8]
 8001a84:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a88:	9201      	str	r2, [sp, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	9200      	str	r2, [sp, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4602      	mov	r2, r0
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fdf2 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "Poti2: %2.2fV", ptr->poti2_Vf);
 8001a98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd7b 	bl	8000598 <__aeabi_f2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	f107 000c 	add.w	r0, r7, #12
 8001aaa:	4955      	ldr	r1, [pc, #340]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001aac:	f00b feea 	bl	800d884 <siprintf>
			ST7735_WriteString(0, 5 * next_line, msg_display, Font_7x10, GREEN,
 8001ab0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	b299      	uxth	r1, r3
 8001abe:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001ac0:	f107 000c 	add.w	r0, r7, #12
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	9202      	str	r2, [sp, #8]
 8001ac8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001acc:	9201      	str	r2, [sp, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fdd0 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "f0 =%4luHz", f0);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001ae2:	4948      	ldr	r1, [pc, #288]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00b fecd 	bl	800d884 <siprintf>
			ST7735_WriteString(0, 6 * next_line, msg_display, Font_7x10, GREEN,
 8001aea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	0052      	lsls	r2, r2, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	b299      	uxth	r1, r3
 8001afa:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001afc:	f107 000c 	add.w	r0, r7, #12
 8001b00:	2200      	movs	r2, #0
 8001b02:	9202      	str	r2, [sp, #8]
 8001b04:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b08:	9201      	str	r2, [sp, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4602      	mov	r2, r0
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fdb2 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "A0 =  %2.0f%%", 100.0 * A0);
 8001b18:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001b1a:	f7fe fd3d 	bl	8000598 <__aeabi_f2d>
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	4b39      	ldr	r3, [pc, #228]	@ (8001c08 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001b24:	f7fe fd90 	bl	8000648 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	f107 000c 	add.w	r0, r7, #12
 8001b30:	4936      	ldr	r1, [pc, #216]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001b32:	f00b fea7 	bl	800d884 <siprintf>
			ST7735_WriteString(0, 7 * next_line, msg_display, Font_7x10, GREEN,
 8001b36:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	00d2      	lsls	r2, r2, #3
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	b299      	uxth	r1, r3
 8001b44:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001b46:	f107 000c 	add.w	r0, r7, #12
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	9202      	str	r2, [sp, #8]
 8001b4e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b52:	9201      	str	r2, [sp, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fd8d 	bl	800167c <ST7735_WriteString>
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 8001b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b64:	681b      	ldr	r3, [r3, #0]
			sprintf(msg_console,
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fd16 	bl	8000598 <__aeabi_f2d>
 8001b6c:	4682      	mov	sl, r0
 8001b6e:	468b      	mov	fp, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 8001b70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b72:	685b      	ldr	r3, [r3, #4]
			sprintf(msg_console,
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fd0f 	bl	8000598 <__aeabi_f2d>
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	460d      	mov	r5, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 8001b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b80:	689b      	ldr	r3, [r3, #8]
			sprintf(msg_console,
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fd08 	bl	8000598 <__aeabi_f2d>
 8001b88:	4680      	mov	r8, r0
 8001b8a:	4689      	mov	r9, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 8001b8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b8e:	68db      	ldr	r3, [r3, #12]
			sprintf(msg_console,
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fd01 	bl	8000598 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	f107 0020 	add.w	r0, r7, #32
 8001b9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ba2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ba6:	e9cd 4500 	strd	r4, r5, [sp]
 8001baa:	4652      	mov	r2, sl
 8001bac:	465b      	mov	r3, fp
 8001bae:	4918      	ldr	r1, [pc, #96]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bb0:	f00b fe68 	bl	800d884 <siprintf>
					strlen(msg_console), HAL_MAX_DELAY);
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fb81 	bl	80002c0 <strlen>
 8001bbe:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	f107 0120 	add.w	r1, r7, #32
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	4812      	ldr	r0, [pc, #72]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001bcc:	f00a f9d5 	bl	800bf7a <HAL_UART_Transmit>
			break;
 8001bd0:	e003      	b.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x22a>
			set_handler_state(IDLE);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f001 ff7c 	bl	8003ad0 <set_handler_state>
			break;
 8001bd8:	bf00      	nop
}
 8001bda:	bf00      	nop
 8001bdc:	3780      	adds	r7, #128	@ 0x80
 8001bde:	46bd      	mov	sp, r7
 8001be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001be4:	200004e4 	.word	0x200004e4
 8001be8:	200008a4 	.word	0x200008a4
 8001bec:	20000530 	.word	0x20000530
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	08010458 	.word	0x08010458
 8001bf8:	08010464 	.word	0x08010464
 8001bfc:	08010470 	.word	0x08010470
 8001c00:	08010480 	.word	0x08010480
 8001c04:	08010490 	.word	0x08010490
 8001c08:	40590000 	.word	0x40590000
 8001c0c:	0801049c 	.word	0x0801049c
 8001c10:	080104ac 	.word	0x080104ac
 8001c14:	20000808 	.word	0x20000808

08001c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1c:	f003 fe89 	bl	8005932 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c20:	f000 f824 	bl	8001c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c24:	f000 fee8 	bl	80029f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c28:	f000 fe78 	bl	800291c <MX_DMA_Init>
  MX_SPI1_Init();
 8001c2c:	f000 f968 	bl	8001f00 <MX_SPI1_Init>
  MX_TIM16_Init();
 8001c30:	f000 fd26 	bl	8002680 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001c34:	f000 f866 	bl	8001d04 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001c38:	f000 fe24 	bl	8002884 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001c3c:	f000 fd48 	bl	80026d0 <MX_TIM17_Init>
  MX_ADC2_Init();
 8001c40:	f000 f8f8 	bl	8001e34 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001c44:	f000 f99a 	bl	8001f7c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001c48:	f000 fb98 	bl	800237c <MX_TIM8_Init>
  MX_TIM15_Init();
 8001c4c:	f000 fcc6 	bl	80025dc <MX_TIM15_Init>
  MX_TIM20_Init();
 8001c50:	f000 fd66 	bl	8002720 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */

	// Display Init
	ST7735_Init(1);
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7ff fbaf 	bl	80013b8 <ST7735_Init>
	fillScreen(BLACK);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7ff faa0 	bl	80011a0 <fillScreen>

	// Set first State
	set_handler_state(IDLE);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f001 ff35 	bl	8003ad0 <set_handler_state>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Run StateMachine
		handler_task();
 8001c66:	f001 ff27 	bl	8003ab8 <handler_task>
 8001c6a:	e7fc      	b.n	8001c66 <main+0x4e>

08001c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b094      	sub	sp, #80	@ 0x50
 8001c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	2238      	movs	r2, #56	@ 0x38
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00b fe65 	bl	800d94a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c8e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c92:	f006 fa37 	bl	8008104 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ca0:	2340      	movs	r3, #64	@ 0x40
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001cac:	2304      	movs	r3, #4
 8001cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001cb0:	234b      	movs	r3, #75	@ 0x4b
 8001cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f006 fad1 	bl	800826c <HAL_RCC_OscConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001cd0:	f000 ff58 	bl	8002b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2104      	movs	r1, #4
 8001cec:	4618      	mov	r0, r3
 8001cee:	f006 fdcf 	bl	8008890 <HAL_RCC_ClockConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001cf8:	f000 ff44 	bl	8002b84 <Error_Handler>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3750      	adds	r7, #80	@ 0x50
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	@ 0x30
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2220      	movs	r2, #32
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00b fe14 	bl	800d94a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d22:	4b40      	ldr	r3, [pc, #256]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d24:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d2c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d32:	4b3c      	ldr	r3, [pc, #240]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d38:	4b3a      	ldr	r3, [pc, #232]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001d3e:	4b39      	ldr	r3, [pc, #228]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d44:	4b37      	ldr	r3, [pc, #220]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d4a:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d50:	4b34      	ldr	r3, [pc, #208]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d56:	4b33      	ldr	r3, [pc, #204]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001d5c:	4b31      	ldr	r3, [pc, #196]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d5e:	2203      	movs	r2, #3
 8001d60:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d62:	4b30      	ldr	r3, [pc, #192]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d70:	4b2c      	ldr	r3, [pc, #176]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d76:	4b2b      	ldr	r3, [pc, #172]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d7e:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001d84:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d8c:	4825      	ldr	r0, [pc, #148]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001d8e:	f004 f8cf 	bl	8005f30 <HAL_ADC_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001d98:	f000 fef4 	bl	8002b84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da4:	4619      	mov	r1, r3
 8001da6:	481f      	ldr	r0, [pc, #124]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001da8:	f005 fa7e 	bl	80072a8 <HAL_ADCEx_MultiModeConfigChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001db2:	f000 fee7 	bl	8002b84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <MX_ADC1_Init+0x124>)
 8001db8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dba:	2306      	movs	r3, #6
 8001dbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dc2:	237f      	movs	r3, #127	@ 0x7f
 8001dc4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4814      	ldr	r0, [pc, #80]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001dd4:	f004 fbbc 	bl	8006550 <HAL_ADC_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001dde:	f000 fed1 	bl	8002b84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001de2:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <MX_ADC1_Init+0x128>)
 8001de4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001de6:	230c      	movs	r3, #12
 8001de8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	480d      	ldr	r0, [pc, #52]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001df0:	f004 fbae 	bl	8006550 <HAL_ADC_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001dfa:	f000 fec3 	bl	8002b84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <MX_ADC1_Init+0x12c>)
 8001e00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e02:	2312      	movs	r3, #18
 8001e04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4806      	ldr	r0, [pc, #24]	@ (8001e24 <MX_ADC1_Init+0x120>)
 8001e0c:	f004 fba0 	bl	8006550 <HAL_ADC_ConfigChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001e16:	f000 feb5 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	3730      	adds	r7, #48	@ 0x30
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000204 	.word	0x20000204
 8001e28:	04300002 	.word	0x04300002
 8001e2c:	08600004 	.word	0x08600004
 8001e30:	3ef08000 	.word	0x3ef08000

08001e34 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00b fd82 	bl	800d94a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e46:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e48:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <MX_ADC2_Init+0xc4>)
 8001e4a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e4e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e52:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e54:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001e60:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e66:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e6e:	2208      	movs	r2, #8
 8001e70:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e78:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e92:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001e98:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ea0:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001ea6:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001eae:	4811      	ldr	r0, [pc, #68]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001eb0:	f004 f83e 	bl	8005f30 <HAL_ADC_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001eba:	f000 fe63 	bl	8002b84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <MX_ADC2_Init+0xc8>)
 8001ec0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001eca:	237f      	movs	r3, #127	@ 0x7f
 8001ecc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4806      	ldr	r0, [pc, #24]	@ (8001ef4 <MX_ADC2_Init+0xc0>)
 8001edc:	f004 fb38 	bl	8006550 <HAL_ADC_ConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001ee6:	f000 fe4d 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000270 	.word	0x20000270
 8001ef8:	50000100 	.word	0x50000100
 8001efc:	47520000 	.word	0x47520000

08001f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f06:	4a1c      	ldr	r2, [pc, #112]	@ (8001f78 <MX_SPI1_Init+0x78>)
 8001f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f1a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f36:	2210      	movs	r2, #16
 8001f38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f4e:	2207      	movs	r2, #7
 8001f50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f5e:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <MX_SPI1_Init+0x74>)
 8001f60:	f007 f900 	bl	8009164 <HAL_SPI_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f6a:	f000 fe0b 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000039c 	.word	0x2000039c
 8001f78:	40013000 	.word	0x40013000

08001f7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0b6      	sub	sp, #216	@ 0xd8
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f82:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fac:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
 8001fbc:	615a      	str	r2, [r3, #20]
 8001fbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fc0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001fc4:	2234      	movs	r2, #52	@ 0x34
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00b fcbe 	bl	800d94a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fce:	4bb9      	ldr	r3, [pc, #740]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8001fd0:	4ab9      	ldr	r2, [pc, #740]	@ (80022b8 <MX_TIM1_Init+0x33c>)
 8001fd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fd4:	4bb7      	ldr	r3, [pc, #732]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001fda:	4bb6      	ldr	r3, [pc, #728]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8001fdc:	2240      	movs	r2, #64	@ 0x40
 8001fde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3749;
 8001fe0:	4bb4      	ldr	r3, [pc, #720]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8001fe2:	f640 62a5 	movw	r2, #3749	@ 0xea5
 8001fe6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4bb2      	ldr	r3, [pc, #712]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fee:	4bb1      	ldr	r3, [pc, #708]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ff4:	4baf      	ldr	r3, [pc, #700]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8001ff6:	2280      	movs	r2, #128	@ 0x80
 8001ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ffa:	48ae      	ldr	r0, [pc, #696]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8001ffc:	f007 fc36 	bl	800986c <HAL_TIM_Base_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002006:	f000 fdbd 	bl	8002b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800200e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002012:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002016:	4619      	mov	r1, r3
 8002018:	48a6      	ldr	r0, [pc, #664]	@ (80022b4 <MX_TIM1_Init+0x338>)
 800201a:	f008 fcc3 	bl	800a9a4 <HAL_TIM_ConfigClockSource>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002024:	f000 fdae 	bl	8002b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002028:	48a2      	ldr	r0, [pc, #648]	@ (80022b4 <MX_TIM1_Init+0x338>)
 800202a:	f007 fd1e 	bl	8009a6a <HAL_TIM_PWM_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002034:	f000 fda6 	bl	8002b84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002038:	2306      	movs	r3, #6
 800203a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  sSlaveConfig.InputTrigger = TIM_TS_ITR9;
 800203e:	4b9f      	ldr	r3, [pc, #636]	@ (80022bc <MX_TIM1_Init+0x340>)
 8002040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002044:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002048:	4619      	mov	r1, r3
 800204a:	489a      	ldr	r0, [pc, #616]	@ (80022b4 <MX_TIM1_Init+0x338>)
 800204c:	f008 fdc0 	bl	800abd0 <HAL_TIM_SlaveConfigSynchro>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8002056:	f000 fd95 	bl	8002b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800206c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002070:	4619      	mov	r1, r3
 8002072:	4890      	ldr	r0, [pc, #576]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8002074:	f009 fd9c 	bl	800bbb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800207e:	f000 fd81 	bl	8002b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002082:	2360      	movs	r3, #96	@ 0x60
 8002084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  sConfigOC.Pulse = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800209a:	2304      	movs	r3, #4
 800209c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ac:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	487f      	ldr	r0, [pc, #508]	@ (80022b4 <MX_TIM1_Init+0x338>)
 80020b6:	f008 fb61 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80020c0:	f000 fd60 	bl	8002b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80020c4:	2370      	movs	r3, #112	@ 0x70
 80020c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ca:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80020ce:	2204      	movs	r2, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	4878      	ldr	r0, [pc, #480]	@ (80022b4 <MX_TIM1_Init+0x338>)
 80020d4:	f008 fb52 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 80020de:	f000 fd51 	bl	8002b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e2:	2360      	movs	r3, #96	@ 0x60
 80020e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80020ec:	2208      	movs	r2, #8
 80020ee:	4619      	mov	r1, r3
 80020f0:	4870      	ldr	r0, [pc, #448]	@ (80022b4 <MX_TIM1_Init+0x338>)
 80020f2:	f008 fb43 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 80020fc:	f000 fd42 	bl	8002b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002100:	2370      	movs	r3, #112	@ 0x70
 8002102:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002106:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800210a:	220c      	movs	r2, #12
 800210c:	4619      	mov	r1, r3
 800210e:	4869      	ldr	r0, [pc, #420]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8002110:	f008 fb34 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM1_Init+0x1a2>
  {
    Error_Handler();
 800211a:	f000 fd33 	bl	8002b84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002126:	2300      	movs	r3, #0
 8002128:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakDeadTimeConfig.DeadTime = 139;
 800212a:	238b      	movs	r3, #139	@ 0x8b
 800212c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	663b      	str	r3, [r7, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002132:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002136:	667b      	str	r3, [r7, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	66bb      	str	r3, [r7, #104]	@ 0x68
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800213c:	2300      	movs	r3, #0
 800213e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	673b      	str	r3, [r7, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002144:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002148:	677b      	str	r3, [r7, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2Filter = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	67bb      	str	r3, [r7, #120]	@ 0x78
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800214e:	2300      	movs	r3, #0
 8002150:	67fb      	str	r3, [r7, #124]	@ 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8002152:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002156:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800215a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800215e:	4619      	mov	r1, r3
 8002160:	4854      	ldr	r0, [pc, #336]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8002162:	f009 fdbb 	bl	800bcdc <HAL_TIMEx_ConfigBreakDeadTime>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM1_Init+0x1f4>
  {
    Error_Handler();
 800216c:	f000 fd0a 	bl	8002b84 <Error_Handler>
	//	CH1 = CH2 = PWM Mode 1
	// LEVEL_2
	//	CH1 = PWM Mode 1, CH2 = PWM Mode 2!
	// Variablen
	char msg_console[80]; // array für Ausgabe
	int level = get_level();
 8002170:	f003 fb44 	bl	80057fc <get_level>
 8002174:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	int stufen = get_stufen();
 8002178:	f003 fb48 	bl	800580c <get_stufen>
 800217c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

	switch (stufen) {
 8002180:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002184:	2b03      	cmp	r3, #3
 8002186:	f000 808c 	beq.w	80022a2 <MX_TIM1_Init+0x326>
 800218a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800218e:	2b03      	cmp	r3, #3
 8002190:	f300 80d9 	bgt.w	8002346 <MX_TIM1_Init+0x3ca>
 8002194:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002198:	2b01      	cmp	r3, #1
 800219a:	d004      	beq.n	80021a6 <MX_TIM1_Init+0x22a>
 800219c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d033      	beq.n	800220c <MX_TIM1_Init+0x290>
		default:
			sprintf(msg_console, "Error: Level 2-3 moeglich!");
			break;
		}
	default:
		break;
 80021a4:	e0cf      	b.n	8002346 <MX_TIM1_Init+0x3ca>
 80021a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d004      	beq.n	80021b8 <MX_TIM1_Init+0x23c>
 80021ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d010      	beq.n	80021d8 <MX_TIM1_Init+0x25c>
 80021b6:	e01f      	b.n	80021f8 <MX_TIM1_Init+0x27c>
			sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80021b8:	2370      	movs	r3, #112	@ 0x70
 80021ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80021be:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80021c2:	2204      	movs	r2, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	483b      	ldr	r0, [pc, #236]	@ (80022b4 <MX_TIM1_Init+0x338>)
 80021c8:	f008 fad8 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d018      	beq.n	8002204 <MX_TIM1_Init+0x288>
				Error_Handler();
 80021d2:	f000 fcd7 	bl	8002b84 <Error_Handler>
			break;
 80021d6:	e015      	b.n	8002204 <MX_TIM1_Init+0x288>
			sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021d8:	2360      	movs	r3, #96	@ 0x60
 80021da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80021de:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80021e2:	2204      	movs	r2, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	4833      	ldr	r0, [pc, #204]	@ (80022b4 <MX_TIM1_Init+0x338>)
 80021e8:	f008 fac8 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <MX_TIM1_Init+0x28c>
				Error_Handler();
 80021f2:	f000 fcc7 	bl	8002b84 <Error_Handler>
			break;
 80021f6:	e007      	b.n	8002208 <MX_TIM1_Init+0x28c>
			sprintf(msg_console, "Error: Level 2-3 moeglich!");
 80021f8:	463b      	mov	r3, r7
 80021fa:	4931      	ldr	r1, [pc, #196]	@ (80022c0 <MX_TIM1_Init+0x344>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f00b fb41 	bl	800d884 <siprintf>
			break;
 8002202:	e002      	b.n	800220a <MX_TIM1_Init+0x28e>
			break;
 8002204:	bf00      	nop
 8002206:	e09f      	b.n	8002348 <MX_TIM1_Init+0x3cc>
			break;
 8002208:	bf00      	nop
		break;
 800220a:	e09d      	b.n	8002348 <MX_TIM1_Init+0x3cc>
 800220c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002210:	2b02      	cmp	r3, #2
 8002212:	d004      	beq.n	800221e <MX_TIM1_Init+0x2a2>
 8002214:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002218:	2b03      	cmp	r3, #3
 800221a:	d01c      	beq.n	8002256 <MX_TIM1_Init+0x2da>
 800221c:	e037      	b.n	800228e <MX_TIM1_Init+0x312>
			sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800221e:	2370      	movs	r3, #112	@ 0x70
 8002220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002224:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002228:	2204      	movs	r2, #4
 800222a:	4619      	mov	r1, r3
 800222c:	4821      	ldr	r0, [pc, #132]	@ (80022b4 <MX_TIM1_Init+0x338>)
 800222e:	f008 faa5 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM1_Init+0x2c0>
				Error_Handler();
 8002238:	f000 fca4 	bl	8002b84 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 800223c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002240:	220c      	movs	r2, #12
 8002242:	4619      	mov	r1, r3
 8002244:	481b      	ldr	r0, [pc, #108]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8002246:	f008 fa99 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d024      	beq.n	800229a <MX_TIM1_Init+0x31e>
				Error_Handler();
 8002250:	f000 fc98 	bl	8002b84 <Error_Handler>
			break;
 8002254:	e021      	b.n	800229a <MX_TIM1_Init+0x31e>
			sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002256:	2360      	movs	r3, #96	@ 0x60
 8002258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800225c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002260:	2204      	movs	r2, #4
 8002262:	4619      	mov	r1, r3
 8002264:	4813      	ldr	r0, [pc, #76]	@ (80022b4 <MX_TIM1_Init+0x338>)
 8002266:	f008 fa89 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM1_Init+0x2f8>
				Error_Handler();
 8002270:	f000 fc88 	bl	8002b84 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8002274:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002278:	220c      	movs	r2, #12
 800227a:	4619      	mov	r1, r3
 800227c:	480d      	ldr	r0, [pc, #52]	@ (80022b4 <MX_TIM1_Init+0x338>)
 800227e:	f008 fa7d 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <MX_TIM1_Init+0x322>
				Error_Handler();
 8002288:	f000 fc7c 	bl	8002b84 <Error_Handler>
			break;
 800228c:	e007      	b.n	800229e <MX_TIM1_Init+0x322>
			sprintf(msg_console, "Error: Level 2-3 moeglich!");
 800228e:	463b      	mov	r3, r7
 8002290:	490b      	ldr	r1, [pc, #44]	@ (80022c0 <MX_TIM1_Init+0x344>)
 8002292:	4618      	mov	r0, r3
 8002294:	f00b faf6 	bl	800d884 <siprintf>
			break;
 8002298:	e002      	b.n	80022a0 <MX_TIM1_Init+0x324>
			break;
 800229a:	bf00      	nop
 800229c:	e054      	b.n	8002348 <MX_TIM1_Init+0x3cc>
			break;
 800229e:	bf00      	nop
		break;
 80022a0:	e052      	b.n	8002348 <MX_TIM1_Init+0x3cc>
 80022a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d00c      	beq.n	80022c4 <MX_TIM1_Init+0x348>
 80022aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d024      	beq.n	80022fc <MX_TIM1_Init+0x380>
 80022b2:	e03f      	b.n	8002334 <MX_TIM1_Init+0x3b8>
 80022b4:	20000400 	.word	0x20000400
 80022b8:	40012c00 	.word	0x40012c00
 80022bc:	00100050 	.word	0x00100050
 80022c0:	080104ec 	.word	0x080104ec
			sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80022c4:	2370      	movs	r3, #112	@ 0x70
 80022c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80022ca:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80022ce:	2204      	movs	r2, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4827      	ldr	r0, [pc, #156]	@ (8002370 <MX_TIM1_Init+0x3f4>)
 80022d4:	f008 fa52 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM1_Init+0x366>
				Error_Handler();
 80022de:	f000 fc51 	bl	8002b84 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 80022e2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80022e6:	220c      	movs	r2, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	4821      	ldr	r0, [pc, #132]	@ (8002370 <MX_TIM1_Init+0x3f4>)
 80022ec:	f008 fa46 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d024      	beq.n	8002340 <MX_TIM1_Init+0x3c4>
				Error_Handler();
 80022f6:	f000 fc45 	bl	8002b84 <Error_Handler>
			break;
 80022fa:	e021      	b.n	8002340 <MX_TIM1_Init+0x3c4>
			sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fc:	2360      	movs	r3, #96	@ 0x60
 80022fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002302:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002306:	2204      	movs	r2, #4
 8002308:	4619      	mov	r1, r3
 800230a:	4819      	ldr	r0, [pc, #100]	@ (8002370 <MX_TIM1_Init+0x3f4>)
 800230c:	f008 fa36 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM1_Init+0x39e>
				Error_Handler();
 8002316:	f000 fc35 	bl	8002b84 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 800231a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800231e:	220c      	movs	r2, #12
 8002320:	4619      	mov	r1, r3
 8002322:	4813      	ldr	r0, [pc, #76]	@ (8002370 <MX_TIM1_Init+0x3f4>)
 8002324:	f008 fa2a 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <MX_TIM1_Init+0x3c8>
				Error_Handler();
 800232e:	f000 fc29 	bl	8002b84 <Error_Handler>
			break;
 8002332:	e007      	b.n	8002344 <MX_TIM1_Init+0x3c8>
			sprintf(msg_console, "Error: Level 2-3 moeglich!");
 8002334:	463b      	mov	r3, r7
 8002336:	490f      	ldr	r1, [pc, #60]	@ (8002374 <MX_TIM1_Init+0x3f8>)
 8002338:	4618      	mov	r0, r3
 800233a:	f00b faa3 	bl	800d884 <siprintf>
			break;
 800233e:	e002      	b.n	8002346 <MX_TIM1_Init+0x3ca>
			break;
 8002340:	bf00      	nop
 8002342:	e000      	b.n	8002346 <MX_TIM1_Init+0x3ca>
			break;
 8002344:	bf00      	nop
		break;
 8002346:	bf00      	nop
	}
	// PuTTY Ausgabe
	HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 8002348:	463b      	mov	r3, r7
 800234a:	4618      	mov	r0, r3
 800234c:	f7fd ffb8 	bl	80002c0 <strlen>
 8002350:	4603      	mov	r3, r0
 8002352:	b29a      	uxth	r2, r3
 8002354:	4639      	mov	r1, r7
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	4807      	ldr	r0, [pc, #28]	@ (8002378 <MX_TIM1_Init+0x3fc>)
 800235c:	f009 fe0d 	bl	800bf7a <HAL_UART_Transmit>
			HAL_MAX_DELAY);
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002360:	4803      	ldr	r0, [pc, #12]	@ (8002370 <MX_TIM1_Init+0x3f4>)
 8002362:	f000 ff5b 	bl	800321c <HAL_TIM_MspPostInit>

}
 8002366:	bf00      	nop
 8002368:	37d8      	adds	r7, #216	@ 0xd8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000400 	.word	0x20000400
 8002374:	080104ec 	.word	0x080104ec
 8002378:	20000808 	.word	0x20000808

0800237c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0b6      	sub	sp, #216	@ 0xd8
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002390:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ac:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
 80023bc:	615a      	str	r2, [r3, #20]
 80023be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023c0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80023c4:	2234      	movs	r2, #52	@ 0x34
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f00b fabe 	bl	800d94a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80023ce:	4b7f      	ldr	r3, [pc, #508]	@ (80025cc <MX_TIM8_Init+0x250>)
 80023d0:	4a7f      	ldr	r2, [pc, #508]	@ (80025d0 <MX_TIM8_Init+0x254>)
 80023d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80023d4:	4b7d      	ldr	r3, [pc, #500]	@ (80025cc <MX_TIM8_Init+0x250>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80023da:	4b7c      	ldr	r3, [pc, #496]	@ (80025cc <MX_TIM8_Init+0x250>)
 80023dc:	2240      	movs	r2, #64	@ 0x40
 80023de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3749;
 80023e0:	4b7a      	ldr	r3, [pc, #488]	@ (80025cc <MX_TIM8_Init+0x250>)
 80023e2:	f640 62a5 	movw	r2, #3749	@ 0xea5
 80023e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e8:	4b78      	ldr	r3, [pc, #480]	@ (80025cc <MX_TIM8_Init+0x250>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80023ee:	4b77      	ldr	r3, [pc, #476]	@ (80025cc <MX_TIM8_Init+0x250>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023f4:	4b75      	ldr	r3, [pc, #468]	@ (80025cc <MX_TIM8_Init+0x250>)
 80023f6:	2280      	movs	r2, #128	@ 0x80
 80023f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80023fa:	4874      	ldr	r0, [pc, #464]	@ (80025cc <MX_TIM8_Init+0x250>)
 80023fc:	f007 fa36 	bl	800986c <HAL_TIM_Base_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8002406:	f000 fbbd 	bl	8002b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800240e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002412:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002416:	4619      	mov	r1, r3
 8002418:	486c      	ldr	r0, [pc, #432]	@ (80025cc <MX_TIM8_Init+0x250>)
 800241a:	f008 fac3 	bl	800a9a4 <HAL_TIM_ConfigClockSource>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM8_Init+0xac>
  {
    Error_Handler();
 8002424:	f000 fbae 	bl	8002b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002428:	4868      	ldr	r0, [pc, #416]	@ (80025cc <MX_TIM8_Init+0x250>)
 800242a:	f007 fb1e 	bl	8009a6a <HAL_TIM_PWM_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8002434:	f000 fba6 	bl	8002b84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002438:	2306      	movs	r3, #6
 800243a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  sSlaveConfig.InputTrigger = TIM_TS_ITR9;
 800243e:	4b65      	ldr	r3, [pc, #404]	@ (80025d4 <MX_TIM8_Init+0x258>)
 8002440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002444:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002448:	4619      	mov	r1, r3
 800244a:	4860      	ldr	r0, [pc, #384]	@ (80025cc <MX_TIM8_Init+0x250>)
 800244c:	f008 fbc0 	bl	800abd0 <HAL_TIM_SlaveConfigSynchro>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8002456:	f000 fb95 	bl	8002b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800246c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002470:	4619      	mov	r1, r3
 8002472:	4856      	ldr	r0, [pc, #344]	@ (80025cc <MX_TIM8_Init+0x250>)
 8002474:	f009 fb9c 	bl	800bbb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800247e:	f000 fb81 	bl	8002b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002482:	2360      	movs	r3, #96	@ 0x60
 8002484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  sConfigOC.Pulse = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800249a:	2304      	movs	r3, #4
 800249c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ac:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80024b0:	2200      	movs	r2, #0
 80024b2:	4619      	mov	r1, r3
 80024b4:	4845      	ldr	r0, [pc, #276]	@ (80025cc <MX_TIM8_Init+0x250>)
 80024b6:	f008 f961 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80024c0:	f000 fb60 	bl	8002b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80024c4:	2370      	movs	r3, #112	@ 0x70
 80024c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024ca:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80024ce:	2204      	movs	r2, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	483e      	ldr	r0, [pc, #248]	@ (80025cc <MX_TIM8_Init+0x250>)
 80024d4:	f008 f952 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM8_Init+0x166>
  {
    Error_Handler();
 80024de:	f000 fb51 	bl	8002b84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024ea:	2300      	movs	r3, #0
 80024ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakDeadTimeConfig.DeadTime = 139;
 80024ee:	238b      	movs	r3, #139	@ 0x8b
 80024f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	663b      	str	r3, [r7, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024fa:	667b      	str	r3, [r7, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002500:	2300      	movs	r3, #0
 8002502:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	673b      	str	r3, [r7, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002508:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800250c:	677b      	str	r3, [r7, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2Filter = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	67bb      	str	r3, [r7, #120]	@ 0x78
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002512:	2300      	movs	r3, #0
 8002514:	67fb      	str	r3, [r7, #124]	@ 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8002516:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800251a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800251e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002522:	4619      	mov	r1, r3
 8002524:	4829      	ldr	r0, [pc, #164]	@ (80025cc <MX_TIM8_Init+0x250>)
 8002526:	f009 fbd9 	bl	800bcdc <HAL_TIMEx_ConfigBreakDeadTime>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM8_Init+0x1b8>
  {
    Error_Handler();
 8002530:	f000 fb28 	bl	8002b84 <Error_Handler>
	//	CH1 = CH2 = PWM Mode 1
	// LEVEL_2
	//	CH1 = PWM Mode 1, CH2 = PWM Mode 2!
	// Variablen
  	char msg_console[80]; // array für Ausgabe
	int level = get_level();
 8002534:	f003 f962 	bl	80057fc <get_level>
 8002538:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	int stufen = get_stufen();
 800253c:	f003 f966 	bl	800580c <get_stufen>
 8002540:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
	switch (stufen) {
 8002544:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002548:	2b03      	cmp	r3, #3
 800254a:	d004      	beq.n	8002556 <MX_TIM8_Init+0x1da>
 800254c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002550:	2b04      	cmp	r3, #4
 8002552:	d033      	beq.n	80025bc <MX_TIM8_Init+0x240>
		}
		break;
	case 4:
		break;
	default:
		break;
 8002554:	e033      	b.n	80025be <MX_TIM8_Init+0x242>
 8002556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800255a:	2b02      	cmp	r3, #2
 800255c:	d004      	beq.n	8002568 <MX_TIM8_Init+0x1ec>
 800255e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002562:	2b03      	cmp	r3, #3
 8002564:	d010      	beq.n	8002588 <MX_TIM8_Init+0x20c>
 8002566:	e01f      	b.n	80025a8 <MX_TIM8_Init+0x22c>
			sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002568:	2370      	movs	r3, #112	@ 0x70
 800256a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800256e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002572:	2204      	movs	r2, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4815      	ldr	r0, [pc, #84]	@ (80025cc <MX_TIM8_Init+0x250>)
 8002578:	f008 f900 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d018      	beq.n	80025b4 <MX_TIM8_Init+0x238>
				Error_Handler();
 8002582:	f000 faff 	bl	8002b84 <Error_Handler>
			break;
 8002586:	e015      	b.n	80025b4 <MX_TIM8_Init+0x238>
			sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002588:	2360      	movs	r3, #96	@ 0x60
 800258a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800258e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002592:	2204      	movs	r2, #4
 8002594:	4619      	mov	r1, r3
 8002596:	480d      	ldr	r0, [pc, #52]	@ (80025cc <MX_TIM8_Init+0x250>)
 8002598:	f008 f8f0 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <MX_TIM8_Init+0x23c>
				Error_Handler();
 80025a2:	f000 faef 	bl	8002b84 <Error_Handler>
			break;
 80025a6:	e007      	b.n	80025b8 <MX_TIM8_Init+0x23c>
			sprintf(msg_console, "Error: Level 2-3 moeglich!");
 80025a8:	463b      	mov	r3, r7
 80025aa:	490b      	ldr	r1, [pc, #44]	@ (80025d8 <MX_TIM8_Init+0x25c>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00b f969 	bl	800d884 <siprintf>
			break;
 80025b2:	e002      	b.n	80025ba <MX_TIM8_Init+0x23e>
			break;
 80025b4:	bf00      	nop
 80025b6:	e002      	b.n	80025be <MX_TIM8_Init+0x242>
			break;
 80025b8:	bf00      	nop
		break;
 80025ba:	e000      	b.n	80025be <MX_TIM8_Init+0x242>
		break;
 80025bc:	bf00      	nop
	}
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80025be:	4803      	ldr	r0, [pc, #12]	@ (80025cc <MX_TIM8_Init+0x250>)
 80025c0:	f000 fe2c 	bl	800321c <HAL_TIM_MspPostInit>

}
 80025c4:	bf00      	nop
 80025c6:	37d8      	adds	r7, #216	@ 0xd8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2000044c 	.word	0x2000044c
 80025d0:	40013400 	.word	0x40013400
 80025d4:	00100050 	.word	0x00100050
 80025d8:	080104ec 	.word	0x080104ec

080025dc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e2:	f107 0310 	add.w	r3, r7, #16
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80025fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002678 <MX_TIM15_Init+0x9c>)
 80025fc:	4a1f      	ldr	r2, [pc, #124]	@ (800267c <MX_TIM15_Init+0xa0>)
 80025fe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002600:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <MX_TIM15_Init+0x9c>)
 8002602:	2200      	movs	r2, #0
 8002604:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002606:	4b1c      	ldr	r3, [pc, #112]	@ (8002678 <MX_TIM15_Init+0x9c>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 7499;
 800260c:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <MX_TIM15_Init+0x9c>)
 800260e:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 8002612:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002614:	4b18      	ldr	r3, [pc, #96]	@ (8002678 <MX_TIM15_Init+0x9c>)
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800261a:	4b17      	ldr	r3, [pc, #92]	@ (8002678 <MX_TIM15_Init+0x9c>)
 800261c:	2200      	movs	r2, #0
 800261e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002620:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <MX_TIM15_Init+0x9c>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002626:	4814      	ldr	r0, [pc, #80]	@ (8002678 <MX_TIM15_Init+0x9c>)
 8002628:	f007 f920 	bl	800986c <HAL_TIM_Base_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002632:	f000 faa7 	bl	8002b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	4619      	mov	r1, r3
 8002642:	480d      	ldr	r0, [pc, #52]	@ (8002678 <MX_TIM15_Init+0x9c>)
 8002644:	f008 f9ae 	bl	800a9a4 <HAL_TIM_ConfigClockSource>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800264e:	f000 fa99 	bl	8002b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002652:	2320      	movs	r3, #32
 8002654:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4806      	ldr	r0, [pc, #24]	@ (8002678 <MX_TIM15_Init+0x9c>)
 8002660:	f009 faa6 	bl	800bbb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800266a:	f000 fa8b 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000498 	.word	0x20000498
 800267c:	40014000 	.word	0x40014000

08002680 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002684:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <MX_TIM16_Init+0x48>)
 8002686:	4a11      	ldr	r2, [pc, #68]	@ (80026cc <MX_TIM16_Init+0x4c>)
 8002688:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15000 - 1;
 800268a:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <MX_TIM16_Init+0x48>)
 800268c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002690:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002692:	4b0d      	ldr	r3, [pc, #52]	@ (80026c8 <MX_TIM16_Init+0x48>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <MX_TIM16_Init+0x48>)
 800269a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800269e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <MX_TIM16_Init+0x48>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80026a6:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <MX_TIM16_Init+0x48>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <MX_TIM16_Init+0x48>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80026b2:	4805      	ldr	r0, [pc, #20]	@ (80026c8 <MX_TIM16_Init+0x48>)
 80026b4:	f007 f8da 	bl	800986c <HAL_TIM_Base_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80026be:	f000 fa61 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200004e4 	.word	0x200004e4
 80026cc:	40014400 	.word	0x40014400

080026d0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80026d4:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <MX_TIM17_Init+0x48>)
 80026d6:	4a11      	ldr	r2, [pc, #68]	@ (800271c <MX_TIM17_Init+0x4c>)
 80026d8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15000-1;
 80026da:	4b0f      	ldr	r3, [pc, #60]	@ (8002718 <MX_TIM17_Init+0x48>)
 80026dc:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80026e0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <MX_TIM17_Init+0x48>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <MX_TIM17_Init+0x48>)
 80026ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ee:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f0:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <MX_TIM17_Init+0x48>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80026f6:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <MX_TIM17_Init+0x48>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fc:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <MX_TIM17_Init+0x48>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002702:	4805      	ldr	r0, [pc, #20]	@ (8002718 <MX_TIM17_Init+0x48>)
 8002704:	f007 f8b2 	bl	800986c <HAL_TIM_Base_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800270e:	f000 fa39 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000530 	.word	0x20000530
 800271c:	40014800 	.word	0x40014800

08002720 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b09c      	sub	sp, #112	@ 0x70
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002726:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002734:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002740:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
 8002750:	615a      	str	r2, [r3, #20]
 8002752:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	2234      	movs	r2, #52	@ 0x34
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f00b f8f5 	bl	800d94a <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002760:	4b46      	ldr	r3, [pc, #280]	@ (800287c <MX_TIM20_Init+0x15c>)
 8002762:	4a47      	ldr	r2, [pc, #284]	@ (8002880 <MX_TIM20_Init+0x160>)
 8002764:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002766:	4b45      	ldr	r3, [pc, #276]	@ (800287c <MX_TIM20_Init+0x15c>)
 8002768:	2200      	movs	r2, #0
 800276a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800276c:	4b43      	ldr	r3, [pc, #268]	@ (800287c <MX_TIM20_Init+0x15c>)
 800276e:	2240      	movs	r2, #64	@ 0x40
 8002770:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 3749;
 8002772:	4b42      	ldr	r3, [pc, #264]	@ (800287c <MX_TIM20_Init+0x15c>)
 8002774:	f640 62a5 	movw	r2, #3749	@ 0xea5
 8002778:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277a:	4b40      	ldr	r3, [pc, #256]	@ (800287c <MX_TIM20_Init+0x15c>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8002780:	4b3e      	ldr	r3, [pc, #248]	@ (800287c <MX_TIM20_Init+0x15c>)
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002786:	4b3d      	ldr	r3, [pc, #244]	@ (800287c <MX_TIM20_Init+0x15c>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 800278c:	483b      	ldr	r0, [pc, #236]	@ (800287c <MX_TIM20_Init+0x15c>)
 800278e:	f007 f86d 	bl	800986c <HAL_TIM_Base_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8002798:	f000 f9f4 	bl	8002b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800279c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80027a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80027a6:	4619      	mov	r1, r3
 80027a8:	4834      	ldr	r0, [pc, #208]	@ (800287c <MX_TIM20_Init+0x15c>)
 80027aa:	f008 f8fb 	bl	800a9a4 <HAL_TIM_ConfigClockSource>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80027b4:	f000 f9e6 	bl	8002b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80027b8:	4830      	ldr	r0, [pc, #192]	@ (800287c <MX_TIM20_Init+0x15c>)
 80027ba:	f007 f956 	bl	8009a6a <HAL_TIM_PWM_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 80027c4:	f000 f9de 	bl	8002b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80027c8:	2310      	movs	r3, #16
 80027ca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80027d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027d8:	4619      	mov	r1, r3
 80027da:	4828      	ldr	r0, [pc, #160]	@ (800287c <MX_TIM20_Init+0x15c>)
 80027dc:	f009 f9e8 	bl	800bbb0 <HAL_TIMEx_MasterConfigSynchronization>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 80027e6:	f000 f9cd 	bl	8002b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ea:	2360      	movs	r3, #96	@ 0x60
 80027ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1874;
 80027ee:	f240 7352 	movw	r3, #1874	@ 0x752
 80027f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80027f4:	2302      	movs	r3, #2
 80027f6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027f8:	2300      	movs	r3, #0
 80027fa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002804:	2300      	movs	r3, #0
 8002806:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002808:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800280c:	2208      	movs	r2, #8
 800280e:	4619      	mov	r1, r3
 8002810:	481a      	ldr	r0, [pc, #104]	@ (800287c <MX_TIM20_Init+0x15c>)
 8002812:	f007 ffb3 	bl	800a77c <HAL_TIM_PWM_ConfigChannel>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM20_Init+0x100>
  {
    Error_Handler();
 800281c:	f000 f9b2 	bl	8002b84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002834:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002838:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002846:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800284a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002850:	2300      	movs	r3, #0
 8002852:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	4619      	mov	r1, r3
 800285c:	4807      	ldr	r0, [pc, #28]	@ (800287c <MX_TIM20_Init+0x15c>)
 800285e:	f009 fa3d 	bl	800bcdc <HAL_TIMEx_ConfigBreakDeadTime>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM20_Init+0x14c>
  {
    Error_Handler();
 8002868:	f000 f98c 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800286c:	4803      	ldr	r0, [pc, #12]	@ (800287c <MX_TIM20_Init+0x15c>)
 800286e:	f000 fcd5 	bl	800321c <HAL_TIM_MspPostInit>

}
 8002872:	bf00      	nop
 8002874:	3770      	adds	r7, #112	@ 0x70
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2000057c 	.word	0x2000057c
 8002880:	40015000 	.word	0x40015000

08002884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002888:	4b22      	ldr	r3, [pc, #136]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 800288a:	4a23      	ldr	r2, [pc, #140]	@ (8002918 <MX_USART2_UART_Init+0x94>)
 800288c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800288e:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 8002890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002896:	4b1f      	ldr	r3, [pc, #124]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800289c:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 800289e:	2200      	movs	r2, #0
 80028a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028aa:	220c      	movs	r2, #12
 80028ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ae:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b4:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ba:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028c0:	4b14      	ldr	r3, [pc, #80]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c6:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028cc:	4811      	ldr	r0, [pc, #68]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028ce:	f009 fb04 	bl	800beda <HAL_UART_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028d8:	f000 f954 	bl	8002b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028dc:	2100      	movs	r1, #0
 80028de:	480d      	ldr	r0, [pc, #52]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028e0:	f00a f92e 	bl	800cb40 <HAL_UARTEx_SetTxFifoThreshold>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028ea:	f000 f94b 	bl	8002b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ee:	2100      	movs	r1, #0
 80028f0:	4808      	ldr	r0, [pc, #32]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028f2:	f00a f963 	bl	800cbbc <HAL_UARTEx_SetRxFifoThreshold>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028fc:	f000 f942 	bl	8002b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002900:	4804      	ldr	r0, [pc, #16]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 8002902:	f00a f8e4 	bl	800cace <HAL_UARTEx_DisableFifoMode>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800290c:	f000 f93a 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000808 	.word	0x20000808
 8002918:	40004400 	.word	0x40004400

0800291c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002922:	4b34      	ldr	r3, [pc, #208]	@ (80029f4 <MX_DMA_Init+0xd8>)
 8002924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002926:	4a33      	ldr	r2, [pc, #204]	@ (80029f4 <MX_DMA_Init+0xd8>)
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	6493      	str	r3, [r2, #72]	@ 0x48
 800292e:	4b31      	ldr	r3, [pc, #196]	@ (80029f4 <MX_DMA_Init+0xd8>)
 8002930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800293a:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <MX_DMA_Init+0xd8>)
 800293c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293e:	4a2d      	ldr	r2, [pc, #180]	@ (80029f4 <MX_DMA_Init+0xd8>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	6493      	str	r3, [r2, #72]	@ 0x48
 8002946:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <MX_DMA_Init+0xd8>)
 8002948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002952:	4b28      	ldr	r3, [pc, #160]	@ (80029f4 <MX_DMA_Init+0xd8>)
 8002954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002956:	4a27      	ldr	r2, [pc, #156]	@ (80029f4 <MX_DMA_Init+0xd8>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6493      	str	r3, [r2, #72]	@ 0x48
 800295e:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <MX_DMA_Init+0xd8>)
 8002960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	200b      	movs	r0, #11
 8002970:	f004 fe7d 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002974:	200b      	movs	r0, #11
 8002976:	f004 fe94 	bl	80076a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	200c      	movs	r0, #12
 8002980:	f004 fe75 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002984:	200c      	movs	r0, #12
 8002986:	f004 fe8c 	bl	80076a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	200d      	movs	r0, #13
 8002990:	f004 fe6d 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002994:	200d      	movs	r0, #13
 8002996:	f004 fe84 	bl	80076a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2100      	movs	r1, #0
 800299e:	200e      	movs	r0, #14
 80029a0:	f004 fe65 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80029a4:	200e      	movs	r0, #14
 80029a6:	f004 fe7c 	bl	80076a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	200f      	movs	r0, #15
 80029b0:	f004 fe5d 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80029b4:	200f      	movs	r0, #15
 80029b6:	f004 fe74 	bl	80076a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2100      	movs	r1, #0
 80029be:	2010      	movs	r0, #16
 80029c0:	f004 fe55 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80029c4:	2010      	movs	r0, #16
 80029c6:	f004 fe6c 	bl	80076a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	2011      	movs	r0, #17
 80029d0:	f004 fe4d 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80029d4:	2011      	movs	r0, #17
 80029d6:	f004 fe64 	bl	80076a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	2038      	movs	r0, #56	@ 0x38
 80029e0:	f004 fe45 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80029e4:	2038      	movs	r0, #56	@ 0x38
 80029e6:	f004 fe5c 	bl	80076a2 <HAL_NVIC_EnableIRQ>

}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000

080029f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	@ 0x28
 80029fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a12:	4a59      	ldr	r2, [pc, #356]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a1a:	4b57      	ldr	r3, [pc, #348]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a26:	4b54      	ldr	r3, [pc, #336]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	4a53      	ldr	r2, [pc, #332]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a2c:	f043 0320 	orr.w	r3, r3, #32
 8002a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a32:	4b51      	ldr	r3, [pc, #324]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a42:	4a4d      	ldr	r2, [pc, #308]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	4b48      	ldr	r3, [pc, #288]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5a:	4a47      	ldr	r2, [pc, #284]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a62:	4b45      	ldr	r3, [pc, #276]	@ (8002b78 <MX_GPIO_Init+0x180>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2118      	movs	r1, #24
 8002a72:	4842      	ldr	r0, [pc, #264]	@ (8002b7c <MX_GPIO_Init+0x184>)
 8002a74:	f005 fafc 	bl	8008070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI1_RST_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f248 0160 	movw	r1, #32864	@ 0x8060
 8002a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a82:	f005 faf5 	bl	8008070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_DC_GPIO_Port, SPI1_DC_Pin, GPIO_PIN_RESET);
 8002a86:	2200      	movs	r2, #0
 8002a88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a8c:	483c      	ldr	r0, [pc, #240]	@ (8002b80 <MX_GPIO_Init+0x188>)
 8002a8e:	f005 faef 	bl	8008070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_EXTI13_Pin */
  GPIO_InitStruct.Pin = B1_EXTI13_Pin;
 8002a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4834      	ldr	r0, [pc, #208]	@ (8002b7c <MX_GPIO_Init+0x184>)
 8002aaa:	f005 f947 	bl	8007d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002aae:	2308      	movs	r3, #8
 8002ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	482d      	ldr	r0, [pc, #180]	@ (8002b7c <MX_GPIO_Init+0x184>)
 8002ac6:	f005 f939 	bl	8007d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI1_RST_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI1_RST_Pin|SPI1_CS_Pin;
 8002aca:	f248 0360 	movw	r3, #32864	@ 0x8060
 8002ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ae6:	f005 f929 	bl	8007d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002aea:	2310      	movs	r3, #16
 8002aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	4619      	mov	r1, r3
 8002b00:	481e      	ldr	r0, [pc, #120]	@ (8002b7c <MX_GPIO_Init+0x184>)
 8002b02:	f005 f91b 	bl	8007d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Tast1_EXTI1_Pin Tast2_EXTI2_Pin */
  GPIO_InitStruct.Pin = Tast1_EXTI1_Pin|Tast2_EXTI2_Pin;
 8002b06:	2306      	movs	r3, #6
 8002b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b10:	2302      	movs	r3, #2
 8002b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4819      	ldr	r0, [pc, #100]	@ (8002b80 <MX_GPIO_Init+0x188>)
 8002b1c:	f005 f90e 	bl	8007d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8002b20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4811      	ldr	r0, [pc, #68]	@ (8002b80 <MX_GPIO_Init+0x188>)
 8002b3a:	f005 f8ff 	bl	8007d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2007      	movs	r0, #7
 8002b44:	f004 fd93 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b48:	2007      	movs	r0, #7
 8002b4a:	f004 fdaa 	bl	80076a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	2008      	movs	r0, #8
 8002b54:	f004 fd8b 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b58:	2008      	movs	r0, #8
 8002b5a:	f004 fda2 	bl	80076a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	2028      	movs	r0, #40	@ 0x28
 8002b64:	f004 fd83 	bl	800766e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b68:	2028      	movs	r0, #40	@ 0x28
 8002b6a:	f004 fd9a 	bl	80076a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	@ 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	48000800 	.word	0x48000800
 8002b80:	48000400 	.word	0x48000400

08002b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b88:	b672      	cpsid	i
}
 8002b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <Error_Handler+0x8>

08002b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	4a08      	ldr	r2, [pc, #32]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002bc6:	f005 fb41 	bl	800824c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b0a2      	sub	sp, #136	@ 0x88
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf0:	f107 0320 	add.w	r3, r7, #32
 8002bf4:	2254      	movs	r2, #84	@ 0x54
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f00a fea6 	bl	800d94a <memset>
  if(hadc->Instance==ADC1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c06:	f040 8082 	bne.w	8002d0e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c0e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002c10:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c14:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c16:	f107 0320 	add.w	r3, r7, #32
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f006 f854 	bl	8008cc8 <HAL_RCCEx_PeriphCLKConfig>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002c26:	f7ff ffad 	bl	8002b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002c2a:	4b72      	ldr	r3, [pc, #456]	@ (8002df4 <HAL_ADC_MspInit+0x21c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4a70      	ldr	r2, [pc, #448]	@ (8002df4 <HAL_ADC_MspInit+0x21c>)
 8002c32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002c34:	4b6f      	ldr	r3, [pc, #444]	@ (8002df4 <HAL_ADC_MspInit+0x21c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d10b      	bne.n	8002c54 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c40:	4a6d      	ldr	r2, [pc, #436]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002c42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c48:	4b6b      	ldr	r3, [pc, #428]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c54:	4b68      	ldr	r3, [pc, #416]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c58:	4a67      	ldr	r2, [pc, #412]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c60:	4b65      	ldr	r3, [pc, #404]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6c:	4b62      	ldr	r3, [pc, #392]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c70:	4a61      	ldr	r2, [pc, #388]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002c72:	f043 0302 	orr.w	r3, r3, #2
 8002c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c78:	4b5f      	ldr	r3, [pc, #380]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Poti1_Pin|ADC1_IN2_Poti2_Pin;
 8002c84:	2303      	movs	r3, #3
 8002c86:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c90:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002c94:	4619      	mov	r1, r3
 8002c96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c9a:	f005 f84f 	bl	8007d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002caa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4852      	ldr	r0, [pc, #328]	@ (8002dfc <HAL_ADC_MspInit+0x224>)
 8002cb2:	f005 f843 	bl	8007d3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8002cb6:	4b52      	ldr	r3, [pc, #328]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002cb8:	4a52      	ldr	r2, [pc, #328]	@ (8002e04 <HAL_ADC_MspInit+0x22c>)
 8002cba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002cbc:	4b50      	ldr	r3, [pc, #320]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002cbe:	2205      	movs	r2, #5
 8002cc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cce:	4b4c      	ldr	r3, [pc, #304]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002cd0:	2280      	movs	r2, #128	@ 0x80
 8002cd2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cdc:	4b48      	ldr	r3, [pc, #288]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ce2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ce4:	4b46      	ldr	r3, [pc, #280]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cea:	4b45      	ldr	r3, [pc, #276]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002cf0:	4843      	ldr	r0, [pc, #268]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002cf2:	f004 fcf1 	bl	80076d8 <HAL_DMA_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8002cfc:	f7ff ff42 	bl	8002b84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a3f      	ldr	r2, [pc, #252]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002d04:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d06:	4a3e      	ldr	r2, [pc, #248]	@ (8002e00 <HAL_ADC_MspInit+0x228>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002d0c:	e06d      	b.n	8002dea <HAL_ADC_MspInit+0x212>
  else if(hadc->Instance==ADC2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a3d      	ldr	r2, [pc, #244]	@ (8002e08 <HAL_ADC_MspInit+0x230>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d168      	bne.n	8002dea <HAL_ADC_MspInit+0x212>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002d18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d1c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002d1e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002d22:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d24:	f107 0320 	add.w	r3, r7, #32
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f005 ffcd 	bl	8008cc8 <HAL_RCCEx_PeriphCLKConfig>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8002d34:	f7ff ff26 	bl	8002b84 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002d38:	4b2e      	ldr	r3, [pc, #184]	@ (8002df4 <HAL_ADC_MspInit+0x21c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002df4 <HAL_ADC_MspInit+0x21c>)
 8002d40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002d42:	4b2c      	ldr	r3, [pc, #176]	@ (8002df4 <HAL_ADC_MspInit+0x21c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d10b      	bne.n	8002d62 <HAL_ADC_MspInit+0x18a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002d50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d56:	4b28      	ldr	r3, [pc, #160]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d62:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	4a24      	ldr	r2, [pc, #144]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d6e:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <HAL_ADC_MspInit+0x220>)
 8002d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d7a:	2310      	movs	r3, #16
 8002d7c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d86:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d90:	f004 ffd4 	bl	8007d3c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002d96:	4a1e      	ldr	r2, [pc, #120]	@ (8002e10 <HAL_ADC_MspInit+0x238>)
 8002d98:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002d9c:	2224      	movs	r2, #36	@ 0x24
 8002d9e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002da6:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002dac:	4b17      	ldr	r3, [pc, #92]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002dae:	2280      	movs	r2, #128	@ 0x80
 8002db0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002db2:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002dba:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002dbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dc0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002dc8:	4b10      	ldr	r3, [pc, #64]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002dce:	480f      	ldr	r0, [pc, #60]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002dd0:	f004 fc82 	bl	80076d8 <HAL_DMA_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_ADC_MspInit+0x206>
      Error_Handler();
 8002dda:	f7ff fed3 	bl	8002b84 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002de2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002de4:	4a09      	ldr	r2, [pc, #36]	@ (8002e0c <HAL_ADC_MspInit+0x234>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002dea:	bf00      	nop
 8002dec:	3788      	adds	r7, #136	@ 0x88
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	2000089c 	.word	0x2000089c
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	48000400 	.word	0x48000400
 8002e00:	200002dc 	.word	0x200002dc
 8002e04:	40020408 	.word	0x40020408
 8002e08:	50000100 	.word	0x50000100
 8002e0c:	2000033c 	.word	0x2000033c
 8002e10:	40020058 	.word	0x40020058

08002e14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	@ 0x28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a17      	ldr	r2, [pc, #92]	@ (8002e90 <HAL_SPI_MspInit+0x7c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d127      	bne.n	8002e86 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e36:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <HAL_SPI_MspInit+0x80>)
 8002e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3a:	4a16      	ldr	r2, [pc, #88]	@ (8002e94 <HAL_SPI_MspInit+0x80>)
 8002e3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e40:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e42:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <HAL_SPI_MspInit+0x80>)
 8002e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <HAL_SPI_MspInit+0x80>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	4a10      	ldr	r2, [pc, #64]	@ (8002e94 <HAL_SPI_MspInit+0x80>)
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e94 <HAL_SPI_MspInit+0x80>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002e66:	2328      	movs	r3, #40	@ 0x28
 8002e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e76:	2305      	movs	r3, #5
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4805      	ldr	r0, [pc, #20]	@ (8002e98 <HAL_SPI_MspInit+0x84>)
 8002e82:	f004 ff5b 	bl	8007d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e86:	bf00      	nop
 8002e88:	3728      	adds	r7, #40	@ 0x28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40013000 	.word	0x40013000
 8002e94:	40021000 	.word	0x40021000
 8002e98:	48000400 	.word	0x48000400

08002e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a9a      	ldr	r2, [pc, #616]	@ (8003114 <HAL_TIM_Base_MspInit+0x278>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	f040 80c9 	bne.w	8003042 <HAL_TIM_Base_MspInit+0x1a6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eb0:	4b99      	ldr	r3, [pc, #612]	@ (8003118 <HAL_TIM_Base_MspInit+0x27c>)
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb4:	4a98      	ldr	r2, [pc, #608]	@ (8003118 <HAL_TIM_Base_MspInit+0x27c>)
 8002eb6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002eba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ebc:	4b96      	ldr	r3, [pc, #600]	@ (8003118 <HAL_TIM_Base_MspInit+0x27c>)
 8002ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8002ec8:	4b94      	ldr	r3, [pc, #592]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002eca:	4a95      	ldr	r2, [pc, #596]	@ (8003120 <HAL_TIM_Base_MspInit+0x284>)
 8002ecc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8002ece:	4b93      	ldr	r3, [pc, #588]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002ed0:	222a      	movs	r2, #42	@ 0x2a
 8002ed2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ed4:	4b91      	ldr	r3, [pc, #580]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eda:	4b90      	ldr	r3, [pc, #576]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ee0:	4b8e      	ldr	r3, [pc, #568]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002ee2:	2280      	movs	r2, #128	@ 0x80
 8002ee4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eec:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002eee:	4b8b      	ldr	r3, [pc, #556]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002ef0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ef4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002ef6:	4b89      	ldr	r3, [pc, #548]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002ef8:	2220      	movs	r2, #32
 8002efa:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002efc:	4b87      	ldr	r3, [pc, #540]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002f02:	4886      	ldr	r0, [pc, #536]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002f04:	f004 fbe8 	bl	80076d8 <HAL_DMA_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8002f0e:	f7ff fe39 	bl	8002b84 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a81      	ldr	r2, [pc, #516]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002f16:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f18:	4a80      	ldr	r2, [pc, #512]	@ (800311c <HAL_TIM_Base_MspInit+0x280>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 8002f1e:	4b81      	ldr	r3, [pc, #516]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f20:	4a81      	ldr	r2, [pc, #516]	@ (8003128 <HAL_TIM_Base_MspInit+0x28c>)
 8002f22:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8002f24:	4b7f      	ldr	r3, [pc, #508]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f26:	222b      	movs	r2, #43	@ 0x2b
 8002f28:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f30:	4b7c      	ldr	r3, [pc, #496]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002f36:	4b7b      	ldr	r3, [pc, #492]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f38:	2280      	movs	r2, #128	@ 0x80
 8002f3a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f3c:	4b79      	ldr	r3, [pc, #484]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f42:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f44:	4b77      	ldr	r3, [pc, #476]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f4a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8002f4c:	4b75      	ldr	r3, [pc, #468]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f4e:	2220      	movs	r2, #32
 8002f50:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002f52:	4b74      	ldr	r3, [pc, #464]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002f58:	4872      	ldr	r0, [pc, #456]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f5a:	f004 fbbd 	bl	80076d8 <HAL_DMA_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_TIM_Base_MspInit+0xcc>
    {
      Error_Handler();
 8002f64:	f7ff fe0e 	bl	8002b84 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003124 <HAL_TIM_Base_MspInit+0x288>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel3;
 8002f74:	4b6d      	ldr	r3, [pc, #436]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002f76:	4a6e      	ldr	r2, [pc, #440]	@ (8003130 <HAL_TIM_Base_MspInit+0x294>)
 8002f78:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8002f7a:	4b6c      	ldr	r3, [pc, #432]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002f7c:	222c      	movs	r2, #44	@ 0x2c
 8002f7e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f80:	4b6a      	ldr	r3, [pc, #424]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002f82:	2210      	movs	r2, #16
 8002f84:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f86:	4b69      	ldr	r3, [pc, #420]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002f8c:	4b67      	ldr	r3, [pc, #412]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002f8e:	2280      	movs	r2, #128	@ 0x80
 8002f90:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f92:	4b66      	ldr	r3, [pc, #408]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f98:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f9a:	4b64      	ldr	r3, [pc, #400]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002f9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fa0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 8002fa2:	4b62      	ldr	r3, [pc, #392]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002fa8:	4b60      	ldr	r3, [pc, #384]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8002fae:	485f      	ldr	r0, [pc, #380]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002fb0:	f004 fb92 	bl	80076d8 <HAL_DMA_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_TIM_Base_MspInit+0x122>
    {
      Error_Handler();
 8002fba:	f7ff fde3 	bl	8002b84 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a5a      	ldr	r2, [pc, #360]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fc4:	4a59      	ldr	r2, [pc, #356]	@ (800312c <HAL_TIM_Base_MspInit+0x290>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH4 Init */
    hdma_tim1_ch4.Instance = DMA1_Channel4;
 8002fca:	4b5a      	ldr	r3, [pc, #360]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8002fcc:	4a5a      	ldr	r2, [pc, #360]	@ (8003138 <HAL_TIM_Base_MspInit+0x29c>)
 8002fce:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4.Init.Request = DMA_REQUEST_TIM1_CH4;
 8002fd0:	4b58      	ldr	r3, [pc, #352]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8002fd2:	222d      	movs	r2, #45	@ 0x2d
 8002fd4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fd6:	4b57      	ldr	r3, [pc, #348]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8002fd8:	2210      	movs	r2, #16
 8002fda:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fdc:	4b55      	ldr	r3, [pc, #340]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002fe2:	4b54      	ldr	r3, [pc, #336]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8002fe4:	2280      	movs	r2, #128	@ 0x80
 8002fe6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fe8:	4b52      	ldr	r3, [pc, #328]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8002fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fee:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ff0:	4b50      	ldr	r3, [pc, #320]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8002ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ff6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4.Init.Mode = DMA_CIRCULAR;
 8002ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch4) != HAL_OK)
 8003004:	484b      	ldr	r0, [pc, #300]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8003006:	f004 fb67 	bl	80076d8 <HAL_DMA_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_TIM_Base_MspInit+0x178>
    {
      Error_Handler();
 8003010:	f7ff fdb8 	bl	8002b84 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a47      	ldr	r2, [pc, #284]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 8003018:	631a      	str	r2, [r3, #48]	@ 0x30
 800301a:	4a46      	ldr	r2, [pc, #280]	@ (8003134 <HAL_TIM_Base_MspInit+0x298>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	2019      	movs	r0, #25
 8003026:	f004 fb22 	bl	800766e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800302a:	2019      	movs	r0, #25
 800302c:	f004 fb39 	bl	80076a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003030:	2200      	movs	r2, #0
 8003032:	2100      	movs	r1, #0
 8003034:	201a      	movs	r0, #26
 8003036:	f004 fb1a 	bl	800766e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800303a:	201a      	movs	r0, #26
 800303c:	f004 fb31 	bl	80076a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8003040:	e0dd      	b.n	80031fe <HAL_TIM_Base_MspInit+0x362>
  else if(htim_base->Instance==TIM8)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a3d      	ldr	r2, [pc, #244]	@ (800313c <HAL_TIM_Base_MspInit+0x2a0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	f040 8081 	bne.w	8003150 <HAL_TIM_Base_MspInit+0x2b4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800304e:	4b32      	ldr	r3, [pc, #200]	@ (8003118 <HAL_TIM_Base_MspInit+0x27c>)
 8003050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003052:	4a31      	ldr	r2, [pc, #196]	@ (8003118 <HAL_TIM_Base_MspInit+0x27c>)
 8003054:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003058:	6613      	str	r3, [r2, #96]	@ 0x60
 800305a:	4b2f      	ldr	r3, [pc, #188]	@ (8003118 <HAL_TIM_Base_MspInit+0x27c>)
 800305c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	69bb      	ldr	r3, [r7, #24]
    hdma_tim8_ch1.Instance = DMA1_Channel6;
 8003066:	4b36      	ldr	r3, [pc, #216]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 8003068:	4a36      	ldr	r2, [pc, #216]	@ (8003144 <HAL_TIM_Base_MspInit+0x2a8>)
 800306a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 800306c:	4b34      	ldr	r3, [pc, #208]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 800306e:	2231      	movs	r2, #49	@ 0x31
 8003070:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003072:	4b33      	ldr	r3, [pc, #204]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 8003074:	2210      	movs	r2, #16
 8003076:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003078:	4b31      	ldr	r3, [pc, #196]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800307e:	4b30      	ldr	r3, [pc, #192]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 8003080:	2280      	movs	r2, #128	@ 0x80
 8003082:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003084:	4b2e      	ldr	r3, [pc, #184]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 8003086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800308a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800308c:	4b2c      	ldr	r3, [pc, #176]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 800308e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003092:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 8003094:	4b2a      	ldr	r3, [pc, #168]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 8003096:	2220      	movs	r2, #32
 8003098:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800309a:	4b29      	ldr	r3, [pc, #164]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 800309c:	2200      	movs	r2, #0
 800309e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 80030a0:	4827      	ldr	r0, [pc, #156]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 80030a2:	f004 fb19 	bl	80076d8 <HAL_DMA_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_TIM_Base_MspInit+0x214>
      Error_Handler();
 80030ac:	f7ff fd6a 	bl	8002b84 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a23      	ldr	r2, [pc, #140]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80030b6:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <HAL_TIM_Base_MspInit+0x2a4>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim8_ch2.Instance = DMA1_Channel7;
 80030bc:	4b22      	ldr	r3, [pc, #136]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 80030be:	4a23      	ldr	r2, [pc, #140]	@ (800314c <HAL_TIM_Base_MspInit+0x2b0>)
 80030c0:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_TIM8_CH2;
 80030c2:	4b21      	ldr	r3, [pc, #132]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 80030c4:	2232      	movs	r2, #50	@ 0x32
 80030c6:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 80030ca:	2210      	movs	r2, #16
 80030cc:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80030d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 80030d6:	2280      	movs	r2, #128	@ 0x80
 80030d8:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030da:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 80030dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e0:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030e2:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 80030e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030e8:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 80030ea:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 80030ec:	2220      	movs	r2, #32
 80030ee:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80030f0:	4b15      	ldr	r3, [pc, #84]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 80030f6:	4814      	ldr	r0, [pc, #80]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 80030f8:	f004 faee 	bl	80076d8 <HAL_DMA_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_TIM_Base_MspInit+0x26a>
      Error_Handler();
 8003102:	f7ff fd3f 	bl	8002b84 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a0f      	ldr	r2, [pc, #60]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28
 800310c:	4a0e      	ldr	r2, [pc, #56]	@ (8003148 <HAL_TIM_Base_MspInit+0x2ac>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003112:	e074      	b.n	80031fe <HAL_TIM_Base_MspInit+0x362>
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40021000 	.word	0x40021000
 800311c:	200005c8 	.word	0x200005c8
 8003120:	40020008 	.word	0x40020008
 8003124:	20000628 	.word	0x20000628
 8003128:	4002001c 	.word	0x4002001c
 800312c:	20000688 	.word	0x20000688
 8003130:	40020030 	.word	0x40020030
 8003134:	200006e8 	.word	0x200006e8
 8003138:	40020044 	.word	0x40020044
 800313c:	40013400 	.word	0x40013400
 8003140:	20000748 	.word	0x20000748
 8003144:	4002006c 	.word	0x4002006c
 8003148:	200007a8 	.word	0x200007a8
 800314c:	40020080 	.word	0x40020080
  else if(htim_base->Instance==TIM15)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2c      	ldr	r2, [pc, #176]	@ (8003208 <HAL_TIM_Base_MspInit+0x36c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10c      	bne.n	8003174 <HAL_TIM_Base_MspInit+0x2d8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800315a:	4b2c      	ldr	r3, [pc, #176]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 800315c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315e:	4a2b      	ldr	r2, [pc, #172]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003164:	6613      	str	r3, [r2, #96]	@ 0x60
 8003166:	4b29      	ldr	r3, [pc, #164]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 8003168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697b      	ldr	r3, [r7, #20]
}
 8003172:	e044      	b.n	80031fe <HAL_TIM_Base_MspInit+0x362>
  else if(htim_base->Instance==TIM16)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a25      	ldr	r2, [pc, #148]	@ (8003210 <HAL_TIM_Base_MspInit+0x374>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d114      	bne.n	80031a8 <HAL_TIM_Base_MspInit+0x30c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800317e:	4b23      	ldr	r3, [pc, #140]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 8003180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003182:	4a22      	ldr	r2, [pc, #136]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 8003184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003188:	6613      	str	r3, [r2, #96]	@ 0x60
 800318a:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 800318c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2100      	movs	r1, #0
 800319a:	2019      	movs	r0, #25
 800319c:	f004 fa67 	bl	800766e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80031a0:	2019      	movs	r0, #25
 80031a2:	f004 fa7e 	bl	80076a2 <HAL_NVIC_EnableIRQ>
}
 80031a6:	e02a      	b.n	80031fe <HAL_TIM_Base_MspInit+0x362>
  else if(htim_base->Instance==TIM17)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a19      	ldr	r2, [pc, #100]	@ (8003214 <HAL_TIM_Base_MspInit+0x378>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d114      	bne.n	80031dc <HAL_TIM_Base_MspInit+0x340>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80031b2:	4b16      	ldr	r3, [pc, #88]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 80031b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b6:	4a15      	ldr	r2, [pc, #84]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80031be:	4b13      	ldr	r3, [pc, #76]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 80031c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	201a      	movs	r0, #26
 80031d0:	f004 fa4d 	bl	800766e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80031d4:	201a      	movs	r0, #26
 80031d6:	f004 fa64 	bl	80076a2 <HAL_NVIC_EnableIRQ>
}
 80031da:	e010      	b.n	80031fe <HAL_TIM_Base_MspInit+0x362>
  else if(htim_base->Instance==TIM20)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003218 <HAL_TIM_Base_MspInit+0x37c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10b      	bne.n	80031fe <HAL_TIM_Base_MspInit+0x362>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80031e6:	4b09      	ldr	r3, [pc, #36]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 80031e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ea:	4a08      	ldr	r2, [pc, #32]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 80031ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_TIM_Base_MspInit+0x370>)
 80031f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
}
 80031fe:	bf00      	nop
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40014000 	.word	0x40014000
 800320c:	40021000 	.word	0x40021000
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800
 8003218:	40015000 	.word	0x40015000

0800321c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08c      	sub	sp, #48	@ 0x30
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 031c 	add.w	r3, r7, #28
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a6b      	ldr	r2, [pc, #428]	@ (80033e8 <HAL_TIM_MspPostInit+0x1cc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	f040 808b 	bne.w	8003356 <HAL_TIM_MspPostInit+0x13a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003240:	4b6a      	ldr	r3, [pc, #424]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 8003242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003244:	4a69      	ldr	r2, [pc, #420]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800324c:	4b67      	ldr	r3, [pc, #412]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 800324e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003258:	4b64      	ldr	r3, [pc, #400]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 800325a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325c:	4a63      	ldr	r2, [pc, #396]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003264:	4b61      	ldr	r3, [pc, #388]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 8003266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003270:	4b5e      	ldr	r3, [pc, #376]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003274:	4a5d      	ldr	r2, [pc, #372]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800327c:	4b5b      	ldr	r3, [pc, #364]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 800327e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = TIM1_CH3_NMOS1_HS_Pin;
 8003288:	2304      	movs	r3, #4
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003290:	2302      	movs	r3, #2
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003298:	2302      	movs	r3, #2
 800329a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM1_CH3_NMOS1_HS_GPIO_Port, &GPIO_InitStruct);
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	4619      	mov	r1, r3
 80032a2:	4853      	ldr	r0, [pc, #332]	@ (80033f0 <HAL_TIM_MspPostInit+0x1d4>)
 80032a4:	f004 fd4a 	bl	8007d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH1N_NMOS2_LS_Pin|TIM1_CH1_NMOS1_HS_Pin|TIM1_CH2_NMOS3_HS_Pin;
 80032a8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80032ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032b2:	2302      	movs	r3, #2
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80032ba:	2306      	movs	r3, #6
 80032bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	f107 031c 	add.w	r3, r7, #28
 80032c2:	4619      	mov	r1, r3
 80032c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032c8:	f004 fd38 	bl	8007d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH4N_NMOS4_LS_Pin;
 80032cc:	2320      	movs	r3, #32
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032d4:	2302      	movs	r3, #2
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80032dc:	2306      	movs	r3, #6
 80032de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM1_CH4N_NMOS4_LS_GPIO_Port, &GPIO_InitStruct);
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	4619      	mov	r1, r3
 80032e6:	4842      	ldr	r0, [pc, #264]	@ (80033f0 <HAL_TIM_MspPostInit+0x1d4>)
 80032e8:	f004 fd28 	bl	8007d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH2N_NMOS4_LS_Pin;
 80032ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032f6:	2302      	movs	r3, #2
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fa:	2300      	movs	r3, #0
 80032fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80032fe:	2306      	movs	r3, #6
 8003300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM1_CH2N_NMOS4_LS_GPIO_Port, &GPIO_InitStruct);
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	4619      	mov	r1, r3
 8003308:	483a      	ldr	r0, [pc, #232]	@ (80033f4 <HAL_TIM_MspPostInit+0x1d8>)
 800330a:	f004 fd17 	bl	8007d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH4_NMOS3_HS_Pin;
 800330e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003318:	2302      	movs	r3, #2
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8003320:	230b      	movs	r3, #11
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM1_CH4_NMOS3_HS_GPIO_Port, &GPIO_InitStruct);
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4619      	mov	r1, r3
 800332a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800332e:	f004 fd05 	bl	8007d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH3N_NMOS2_LS_Pin;
 8003332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	2302      	movs	r3, #2
 800333a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800333c:	2302      	movs	r3, #2
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003340:	2300      	movs	r3, #0
 8003342:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8003344:	230c      	movs	r3, #12
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM1_CH3N_NMOS2_LS_GPIO_Port, &GPIO_InitStruct);
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	4619      	mov	r1, r3
 800334e:	4829      	ldr	r0, [pc, #164]	@ (80033f4 <HAL_TIM_MspPostInit+0x1d8>)
 8003350:	f004 fcf4 	bl	8007d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8003354:	e044      	b.n	80033e0 <HAL_TIM_MspPostInit+0x1c4>
  else if(htim->Instance==TIM8)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a27      	ldr	r2, [pc, #156]	@ (80033f8 <HAL_TIM_MspPostInit+0x1dc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d11d      	bne.n	800339c <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003360:	4b22      	ldr	r3, [pc, #136]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 8003362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003364:	4a21      	ldr	r2, [pc, #132]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800336c:	4b1f      	ldr	r3, [pc, #124]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 800336e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_NMOS1_HS_Pin|TIM8_CH2_NMOS3_HS_Pin|TIM8_CH1N_NMOS2_LS_Pin|TIM8_CH2N_NMOS4_LS_Pin;
 8003378:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003382:	2302      	movs	r3, #2
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800338a:	2304      	movs	r3, #4
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800338e:	f107 031c 	add.w	r3, r7, #28
 8003392:	4619      	mov	r1, r3
 8003394:	4816      	ldr	r0, [pc, #88]	@ (80033f0 <HAL_TIM_MspPostInit+0x1d4>)
 8003396:	f004 fcd1 	bl	8007d3c <HAL_GPIO_Init>
}
 800339a:	e021      	b.n	80033e0 <HAL_TIM_MspPostInit+0x1c4>
  else if(htim->Instance==TIM20)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a16      	ldr	r2, [pc, #88]	@ (80033fc <HAL_TIM_MspPostInit+0x1e0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d11c      	bne.n	80033e0 <HAL_TIM_MspPostInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a6:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 80033a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033aa:	4a10      	ldr	r2, [pc, #64]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <HAL_TIM_MspPostInit+0x1d0>)
 80033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM20_CH3_Master_Pin;
 80033be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033c8:	2301      	movs	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 80033d0:	2306      	movs	r3, #6
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM20_CH3_Master_GPIO_Port, &GPIO_InitStruct);
 80033d4:	f107 031c 	add.w	r3, r7, #28
 80033d8:	4619      	mov	r1, r3
 80033da:	4805      	ldr	r0, [pc, #20]	@ (80033f0 <HAL_TIM_MspPostInit+0x1d4>)
 80033dc:	f004 fcae 	bl	8007d3c <HAL_GPIO_Init>
}
 80033e0:	bf00      	nop
 80033e2:	3730      	adds	r7, #48	@ 0x30
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40021000 	.word	0x40021000
 80033f0:	48000800 	.word	0x48000800
 80033f4:	48000400 	.word	0x48000400
 80033f8:	40013400 	.word	0x40013400
 80033fc:	40015000 	.word	0x40015000

08003400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b09e      	sub	sp, #120	@ 0x78
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003418:	f107 0310 	add.w	r3, r7, #16
 800341c:	2254      	movs	r2, #84	@ 0x54
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f00a fa92 	bl	800d94a <memset>
  if(huart->Instance==USART2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1f      	ldr	r2, [pc, #124]	@ (80034a8 <HAL_UART_MspInit+0xa8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d136      	bne.n	800349e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003430:	2302      	movs	r3, #2
 8003432:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003438:	f107 0310 	add.w	r3, r7, #16
 800343c:	4618      	mov	r0, r3
 800343e:	f005 fc43 	bl	8008cc8 <HAL_RCCEx_PeriphCLKConfig>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003448:	f7ff fb9c 	bl	8002b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800344c:	4b17      	ldr	r3, [pc, #92]	@ (80034ac <HAL_UART_MspInit+0xac>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	4a16      	ldr	r2, [pc, #88]	@ (80034ac <HAL_UART_MspInit+0xac>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003456:	6593      	str	r3, [r2, #88]	@ 0x58
 8003458:	4b14      	ldr	r3, [pc, #80]	@ (80034ac <HAL_UART_MspInit+0xac>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003464:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <HAL_UART_MspInit+0xac>)
 8003466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003468:	4a10      	ldr	r2, [pc, #64]	@ (80034ac <HAL_UART_MspInit+0xac>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003470:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <HAL_UART_MspInit+0xac>)
 8003472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800347c:	230c      	movs	r3, #12
 800347e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2300      	movs	r3, #0
 800348a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800348c:	2307      	movs	r3, #7
 800348e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003490:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003494:	4619      	mov	r1, r3
 8003496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800349a:	f004 fc4f 	bl	8007d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800349e:	bf00      	nop
 80034a0:	3778      	adds	r7, #120	@ 0x78
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40004400 	.word	0x40004400
 80034ac:	40021000 	.word	0x40021000

080034b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034b4:	bf00      	nop
 80034b6:	e7fd      	b.n	80034b4 <NMI_Handler+0x4>

080034b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <HardFault_Handler+0x4>

080034c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c4:	bf00      	nop
 80034c6:	e7fd      	b.n	80034c4 <MemManage_Handler+0x4>

080034c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <BusFault_Handler+0x4>

080034d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <UsageFault_Handler+0x4>

080034d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003506:	f002 fa67 	bl	80059d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}

0800350e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast1_EXTI1_Pin);
 8003512:	2002      	movs	r0, #2
 8003514:	f004 fdde 	bl	80080d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}

0800351c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast2_EXTI2_Pin);
 8003520:	2004      	movs	r0, #4
 8003522:	f004 fdd7 	bl	80080d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003530:	4802      	ldr	r0, [pc, #8]	@ (800353c <DMA1_Channel1_IRQHandler+0x10>)
 8003532:	f004 fab4 	bl	8007a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	200005c8 	.word	0x200005c8

08003540 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8003544:	4802      	ldr	r0, [pc, #8]	@ (8003550 <DMA1_Channel2_IRQHandler+0x10>)
 8003546:	f004 faaa 	bl	8007a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000628 	.word	0x20000628

08003554 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8003558:	4802      	ldr	r0, [pc, #8]	@ (8003564 <DMA1_Channel3_IRQHandler+0x10>)
 800355a:	f004 faa0 	bl	8007a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000688 	.word	0x20000688

08003568 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4);
 800356c:	4802      	ldr	r0, [pc, #8]	@ (8003578 <DMA1_Channel4_IRQHandler+0x10>)
 800356e:	f004 fa96 	bl	8007a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	200006e8 	.word	0x200006e8

0800357c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003580:	4802      	ldr	r0, [pc, #8]	@ (800358c <DMA1_Channel5_IRQHandler+0x10>)
 8003582:	f004 fa8c 	bl	8007a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	2000033c 	.word	0x2000033c

08003590 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8003594:	4802      	ldr	r0, [pc, #8]	@ (80035a0 <DMA1_Channel6_IRQHandler+0x10>)
 8003596:	f004 fa82 	bl	8007a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000748 	.word	0x20000748

080035a4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 80035a8:	4802      	ldr	r0, [pc, #8]	@ (80035b4 <DMA1_Channel7_IRQHandler+0x10>)
 80035aa:	f004 fa78 	bl	8007a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200007a8 	.word	0x200007a8

080035b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035bc:	4803      	ldr	r0, [pc, #12]	@ (80035cc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80035be:	f006 ff8d 	bl	800a4dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80035c2:	4803      	ldr	r0, [pc, #12]	@ (80035d0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80035c4:	f006 ff8a 	bl	800a4dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80035c8:	bf00      	nop
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000400 	.word	0x20000400
 80035d0:	200004e4 	.word	0x200004e4

080035d4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035d8:	4803      	ldr	r0, [pc, #12]	@ (80035e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80035da:	f006 ff7f 	bl	800a4dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80035de:	4803      	ldr	r0, [pc, #12]	@ (80035ec <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80035e0:	f006 ff7c 	bl	800a4dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000400 	.word	0x20000400
 80035ec:	20000530 	.word	0x20000530

080035f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_EXTI13_Pin);
 80035f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80035f8:	f004 fd6c 	bl	80080d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}

08003600 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003604:	4802      	ldr	r0, [pc, #8]	@ (8003610 <DMA2_Channel1_IRQHandler+0x10>)
 8003606:	f004 fa4a 	bl	8007a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200002dc 	.word	0x200002dc

08003614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return 1;
 8003618:	2301      	movs	r3, #1
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_kill>:

int _kill(int pid, int sig)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800362e:	f00a f9ef 	bl	800da10 <__errno>
 8003632:	4603      	mov	r3, r0
 8003634:	2216      	movs	r2, #22
 8003636:	601a      	str	r2, [r3, #0]
  return -1;
 8003638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <_exit>:

void _exit (int status)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800364c:	f04f 31ff 	mov.w	r1, #4294967295
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ffe7 	bl	8003624 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003656:	bf00      	nop
 8003658:	e7fd      	b.n	8003656 <_exit+0x12>

0800365a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e00a      	b.n	8003682 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800366c:	f3af 8000 	nop.w
 8003670:	4601      	mov	r1, r0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	60ba      	str	r2, [r7, #8]
 8003678:	b2ca      	uxtb	r2, r1
 800367a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3301      	adds	r3, #1
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	dbf0      	blt.n	800366c <_read+0x12>
  }

  return len;
 800368a:	687b      	ldr	r3, [r7, #4]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	e009      	b.n	80036ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	60ba      	str	r2, [r7, #8]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3301      	adds	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	dbf1      	blt.n	80036a6 <_write+0x12>
  }
  return len;
 80036c2:	687b      	ldr	r3, [r7, #4]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_close>:

int _close(int file)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036f4:	605a      	str	r2, [r3, #4]
  return 0;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <_isatty>:

int _isatty(int file)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800370c:	2301      	movs	r3, #1
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800373c:	4a14      	ldr	r2, [pc, #80]	@ (8003790 <_sbrk+0x5c>)
 800373e:	4b15      	ldr	r3, [pc, #84]	@ (8003794 <_sbrk+0x60>)
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003748:	4b13      	ldr	r3, [pc, #76]	@ (8003798 <_sbrk+0x64>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003750:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <_sbrk+0x64>)
 8003752:	4a12      	ldr	r2, [pc, #72]	@ (800379c <_sbrk+0x68>)
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003756:	4b10      	ldr	r3, [pc, #64]	@ (8003798 <_sbrk+0x64>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	429a      	cmp	r2, r3
 8003762:	d207      	bcs.n	8003774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003764:	f00a f954 	bl	800da10 <__errno>
 8003768:	4603      	mov	r3, r0
 800376a:	220c      	movs	r2, #12
 800376c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
 8003772:	e009      	b.n	8003788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003774:	4b08      	ldr	r3, [pc, #32]	@ (8003798 <_sbrk+0x64>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800377a:	4b07      	ldr	r3, [pc, #28]	@ (8003798 <_sbrk+0x64>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	4a05      	ldr	r2, [pc, #20]	@ (8003798 <_sbrk+0x64>)
 8003784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003786:	68fb      	ldr	r3, [r7, #12]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20020000 	.word	0x20020000
 8003794:	00000400 	.word	0x00000400
 8003798:	200008a0 	.word	0x200008a0
 800379c:	20000a38 	.word	0x20000a38

080037a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037a4:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <SystemInit+0x20>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037aa:	4a05      	ldr	r2, [pc, #20]	@ (80037c0 <SystemInit+0x20>)
 80037ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <enter_handler_state>:
const int level = 3;
const uint32_t fPWM = 20000;	// Schaltfrequenz in [Hz]
const uint32_t f0 = 100;		// Zu modulierende Frequenz [Hz]
const float A0 = 1.0;			// Zu modulierende Amplitude [0...1.5]

void enter_handler_state(int state) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af04      	add	r7, sp, #16
 80037ca:	6078      	str	r0, [r7, #4]
	switch (state) {
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <enter_handler_state+0x16>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d023      	beq.n	8003820 <enter_handler_state+0x5c>
		// PWM Timer mit DMA starten
		start_pwm(stufen, level);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 80037d8:	e04e      	b.n	8003878 <enter_handler_state+0xb4>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80037da:	2200      	movs	r2, #0
 80037dc:	2120      	movs	r1, #32
 80037de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037e2:	f004 fc45 	bl	8008070 <HAL_GPIO_WritePin>
		handler_state = IDLE;
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <enter_handler_state+0xbc>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
		fillScreen(BLACK);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f7fd fcd7 	bl	80011a0 <fillScreen>
		ST7735_WriteString(0, 0, "State: IDLE", Font_7x10, GREEN, BLACK);
 80037f2:	4b24      	ldr	r3, [pc, #144]	@ (8003884 <enter_handler_state+0xc0>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	9202      	str	r2, [sp, #8]
 80037f8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80037fc:	9201      	str	r2, [sp, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	9200      	str	r2, [sp, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a20      	ldr	r2, [pc, #128]	@ (8003888 <enter_handler_state+0xc4>)
 8003806:	2100      	movs	r1, #0
 8003808:	2000      	movs	r0, #0
 800380a:	f7fd ff37 	bl	800167c <ST7735_WriteString>
		drawFastHLine(0, next_line, 128, WHITE);
 800380e:	230c      	movs	r3, #12
 8003810:	b219      	sxth	r1, r3
 8003812:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003816:	2280      	movs	r2, #128	@ 0x80
 8003818:	2000      	movs	r0, #0
 800381a:	f7fd fc9b 	bl	8001154 <drawFastHLine>
		break;
 800381e:	e02b      	b.n	8003878 <enter_handler_state+0xb4>
		time_val = 0;
 8003820:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <enter_handler_state+0xc8>)
 8003822:	2200      	movs	r2, #0
 8003824:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003826:	2201      	movs	r2, #1
 8003828:	2120      	movs	r1, #32
 800382a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800382e:	f004 fc1f 	bl	8008070 <HAL_GPIO_WritePin>
		set_display(stufen, level);
 8003832:	2303      	movs	r3, #3
 8003834:	2203      	movs	r2, #3
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f001 ff65 	bl	8005708 <set_display>
		HAL_TIM_Base_Start_IT(&htim17);
 800383e:	4814      	ldr	r0, [pc, #80]	@ (8003890 <enter_handler_state+0xcc>)
 8003840:	f006 f86c 	bl	800991c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim16);
 8003844:	4813      	ldr	r0, [pc, #76]	@ (8003894 <enter_handler_state+0xd0>)
 8003846:	f006 f869 	bl	800991c <HAL_TIM_Base_Start_IT>
		HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER_ADC1, 3);
 800384a:	2203      	movs	r2, #3
 800384c:	4912      	ldr	r1, [pc, #72]	@ (8003898 <enter_handler_state+0xd4>)
 800384e:	4813      	ldr	r0, [pc, #76]	@ (800389c <enter_handler_state+0xd8>)
 8003850:	f002 fd2a 	bl	80062a8 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(&hadc2, AD_RES_BUFFER_ADC2, 1);
 8003854:	2201      	movs	r2, #1
 8003856:	4912      	ldr	r1, [pc, #72]	@ (80038a0 <enter_handler_state+0xdc>)
 8003858:	4812      	ldr	r0, [pc, #72]	@ (80038a4 <enter_handler_state+0xe0>)
 800385a:	f002 fd25 	bl	80062a8 <HAL_ADC_Start_DMA>
		set_pwm_values(stufen, level);
 800385e:	2303      	movs	r3, #3
 8003860:	2203      	movs	r2, #3
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f96f 	bl	8003b48 <set_pwm_values>
		start_pwm(stufen, level);
 800386a:	2303      	movs	r3, #3
 800386c:	2203      	movs	r2, #3
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fd4d 	bl	8005310 <start_pwm>
		break;
 8003876:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	200008a4 	.word	0x200008a4
 8003884:	20000000 	.word	0x20000000
 8003888:	08010508 	.word	0x08010508
 800388c:	200008a6 	.word	0x200008a6
 8003890:	20000530 	.word	0x20000530
 8003894:	200004e4 	.word	0x200004e4
 8003898:	200008c0 	.word	0x200008c0
 800389c:	20000204 	.word	0x20000204
 80038a0:	200008cc 	.word	0x200008cc
 80038a4:	20000270 	.word	0x20000270

080038a8 <exec_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(int state) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	switch (state) {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80b9 	beq.w	8003a2a <exec_handler_state+0x182>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d000      	beq.n	80038c0 <exec_handler_state+0x18>

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 80038be:	e0b5      	b.n	8003a2c <exec_handler_state+0x184>
		if (time_val > 250) {
 80038c0:	4b61      	ldr	r3, [pc, #388]	@ (8003a48 <exec_handler_state+0x1a0>)
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	2bfa      	cmp	r3, #250	@ 0xfa
 80038c6:	d907      	bls.n	80038d8 <exec_handler_state+0x30>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80038c8:	2120      	movs	r1, #32
 80038ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038ce:	f004 fbe7 	bl	80080a0 <HAL_GPIO_TogglePin>
			time_val = 0;
 80038d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a48 <exec_handler_state+0x1a0>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 80038d8:	2110      	movs	r1, #16
 80038da:	485c      	ldr	r0, [pc, #368]	@ (8003a4c <exec_handler_state+0x1a4>)
 80038dc:	f004 fbe0 	bl	80080a0 <HAL_GPIO_TogglePin>
		adc_raw_values1.poti1_V = (AD_RES_BUFFER_ADC1[0] << 4); // Map 12 Bit to 16 Bit values
 80038e0:	4b5b      	ldr	r3, [pc, #364]	@ (8003a50 <exec_handler_state+0x1a8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003a54 <exec_handler_state+0x1ac>)
 80038ec:	801a      	strh	r2, [r3, #0]
		adc_values1.poti1_Vf = (3.3 * (float) adc_raw_values1.poti1_V) / 65535;
 80038ee:	4b59      	ldr	r3, [pc, #356]	@ (8003a54 <exec_handler_state+0x1ac>)
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	ee17 0a90 	vmov	r0, s15
 80038fe:	f7fc fe4b 	bl	8000598 <__aeabi_f2d>
 8003902:	a34d      	add	r3, pc, #308	@ (adr r3, 8003a38 <exec_handler_state+0x190>)
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f7fc fe9e 	bl	8000648 <__aeabi_dmul>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4610      	mov	r0, r2
 8003912:	4619      	mov	r1, r3
 8003914:	a34a      	add	r3, pc, #296	@ (adr r3, 8003a40 <exec_handler_state+0x198>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f7fc ffbf 	bl	800089c <__aeabi_ddiv>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	f7fd f967 	bl	8000bf8 <__aeabi_d2f>
 800392a:	4603      	mov	r3, r0
 800392c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a58 <exec_handler_state+0x1b0>)
 800392e:	6013      	str	r3, [r2, #0]
		adc_raw_values1.poti2_V = (AD_RES_BUFFER_ADC1[1] << 4);
 8003930:	4b47      	ldr	r3, [pc, #284]	@ (8003a50 <exec_handler_state+0x1a8>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	b29b      	uxth	r3, r3
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	b29a      	uxth	r2, r3
 800393a:	4b46      	ldr	r3, [pc, #280]	@ (8003a54 <exec_handler_state+0x1ac>)
 800393c:	805a      	strh	r2, [r3, #2]
		adc_values1.poti2_Vf = (3.3 * (float) adc_raw_values1.poti2_V) / 65535;
 800393e:	4b45      	ldr	r3, [pc, #276]	@ (8003a54 <exec_handler_state+0x1ac>)
 8003940:	885b      	ldrh	r3, [r3, #2]
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	ee17 0a90 	vmov	r0, s15
 800394e:	f7fc fe23 	bl	8000598 <__aeabi_f2d>
 8003952:	a339      	add	r3, pc, #228	@ (adr r3, 8003a38 <exec_handler_state+0x190>)
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f7fc fe76 	bl	8000648 <__aeabi_dmul>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	a336      	add	r3, pc, #216	@ (adr r3, 8003a40 <exec_handler_state+0x198>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f7fc ff97 	bl	800089c <__aeabi_ddiv>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	f7fd f93f 	bl	8000bf8 <__aeabi_d2f>
 800397a:	4603      	mov	r3, r0
 800397c:	4a36      	ldr	r2, [pc, #216]	@ (8003a58 <exec_handler_state+0x1b0>)
 800397e:	6053      	str	r3, [r2, #4]
		adc_raw_values1.bnc1_V = (AD_RES_BUFFER_ADC1[2] << 4);
 8003980:	4b33      	ldr	r3, [pc, #204]	@ (8003a50 <exec_handler_state+0x1a8>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	b29b      	uxth	r3, r3
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	b29a      	uxth	r2, r3
 800398a:	4b32      	ldr	r3, [pc, #200]	@ (8003a54 <exec_handler_state+0x1ac>)
 800398c:	809a      	strh	r2, [r3, #4]
		adc_values1.bnc1_Vf = (3.3 * (float) adc_raw_values1.bnc1_V) / 65535;
 800398e:	4b31      	ldr	r3, [pc, #196]	@ (8003a54 <exec_handler_state+0x1ac>)
 8003990:	889b      	ldrh	r3, [r3, #4]
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399a:	ee17 0a90 	vmov	r0, s15
 800399e:	f7fc fdfb 	bl	8000598 <__aeabi_f2d>
 80039a2:	a325      	add	r3, pc, #148	@ (adr r3, 8003a38 <exec_handler_state+0x190>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f7fc fe4e 	bl	8000648 <__aeabi_dmul>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	a322      	add	r3, pc, #136	@ (adr r3, 8003a40 <exec_handler_state+0x198>)
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	f7fc ff6f 	bl	800089c <__aeabi_ddiv>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	f7fd f917 	bl	8000bf8 <__aeabi_d2f>
 80039ca:	4603      	mov	r3, r0
 80039cc:	4a22      	ldr	r2, [pc, #136]	@ (8003a58 <exec_handler_state+0x1b0>)
 80039ce:	6093      	str	r3, [r2, #8]
		adc_raw_values1.bnc2_V = (AD_RES_BUFFER_ADC2[0] << 4);
 80039d0:	4b22      	ldr	r3, [pc, #136]	@ (8003a5c <exec_handler_state+0x1b4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b1e      	ldr	r3, [pc, #120]	@ (8003a54 <exec_handler_state+0x1ac>)
 80039dc:	80da      	strh	r2, [r3, #6]
		adc_values1.bnc2_Vf = (3.3 * (float) adc_raw_values1.bnc2_V) / 65535;
 80039de:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <exec_handler_state+0x1ac>)
 80039e0:	88db      	ldrh	r3, [r3, #6]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	ee17 0a90 	vmov	r0, s15
 80039ee:	f7fc fdd3 	bl	8000598 <__aeabi_f2d>
 80039f2:	a311      	add	r3, pc, #68	@ (adr r3, 8003a38 <exec_handler_state+0x190>)
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f7fc fe26 	bl	8000648 <__aeabi_dmul>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	a30e      	add	r3, pc, #56	@ (adr r3, 8003a40 <exec_handler_state+0x198>)
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f7fc ff47 	bl	800089c <__aeabi_ddiv>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	f7fd f8ef 	bl	8000bf8 <__aeabi_d2f>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a58 <exec_handler_state+0x1b0>)
 8003a1e:	60d3      	str	r3, [r2, #12]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8003a20:	2110      	movs	r1, #16
 8003a22:	480a      	ldr	r0, [pc, #40]	@ (8003a4c <exec_handler_state+0x1a4>)
 8003a24:	f004 fb3c 	bl	80080a0 <HAL_GPIO_TogglePin>
		break;
 8003a28:	e000      	b.n	8003a2c <exec_handler_state+0x184>
		break;
 8003a2a:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	f3af 8000 	nop.w
 8003a38:	66666666 	.word	0x66666666
 8003a3c:	400a6666 	.word	0x400a6666
 8003a40:	00000000 	.word	0x00000000
 8003a44:	40efffe0 	.word	0x40efffe0
 8003a48:	200008a6 	.word	0x200008a6
 8003a4c:	48000800 	.word	0x48000800
 8003a50:	200008c0 	.word	0x200008c0
 8003a54:	200008a8 	.word	0x200008a8
 8003a58:	200008b0 	.word	0x200008b0
 8003a5c:	200008cc 	.word	0x200008cc

08003a60 <leave_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	switch (state) {
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <leave_handler_state+0x3c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d000      	beq.n	8003a76 <leave_handler_state+0x16>
		// PWM Timer mit DMA stoppen
		stopp_pwm(stufen, level);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8003a74:	e013      	b.n	8003a9e <leave_handler_state+0x3e>
		HAL_TIM_Base_Stop_IT(&htim17);
 8003a76:	480c      	ldr	r0, [pc, #48]	@ (8003aa8 <leave_handler_state+0x48>)
 8003a78:	f005 ffc8 	bl	8009a0c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim16);
 8003a7c:	480b      	ldr	r0, [pc, #44]	@ (8003aac <leave_handler_state+0x4c>)
 8003a7e:	f005 ffc5 	bl	8009a0c <HAL_TIM_Base_Stop_IT>
		HAL_ADC_Stop_DMA(&hadc1);
 8003a82:	480b      	ldr	r0, [pc, #44]	@ (8003ab0 <leave_handler_state+0x50>)
 8003a84:	f002 fce4 	bl	8006450 <HAL_ADC_Stop_DMA>
		HAL_ADC_Stop_DMA(&hadc2);
 8003a88:	480a      	ldr	r0, [pc, #40]	@ (8003ab4 <leave_handler_state+0x54>)
 8003a8a:	f002 fce1 	bl	8006450 <HAL_ADC_Stop_DMA>
		stopp_pwm(stufen, level);
 8003a8e:	2303      	movs	r3, #3
 8003a90:	2203      	movs	r2, #3
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fa49 	bl	8004f2c <stopp_pwm>
		break;
 8003a9a:	e000      	b.n	8003a9e <leave_handler_state+0x3e>
		break;
 8003a9c:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000530 	.word	0x20000530
 8003aac:	200004e4 	.word	0x200004e4
 8003ab0:	20000204 	.word	0x20000204
 8003ab4:	20000270 	.word	0x20000270

08003ab8 <handler_task>:

//-----------------------------------------------------------------------------------------------------------------------

void handler_task(void) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
	exec_handler_state(handler_state);
 8003abc:	4b03      	ldr	r3, [pc, #12]	@ (8003acc <handler_task+0x14>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fef1 	bl	80038a8 <exec_handler_state>
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200008a4 	.word	0x200008a4

08003ad0 <set_handler_state>:

void set_handler_state(uint8_t state) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
	prev_handler_state = handler_state;
 8003ada:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <set_handler_state+0x34>)
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <set_handler_state+0x38>)
 8003ae0:	701a      	strb	r2, [r3, #0]
	handler_state = state;
 8003ae2:	4a08      	ldr	r2, [pc, #32]	@ (8003b04 <set_handler_state+0x34>)
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	7013      	strb	r3, [r2, #0]
	leave_handler_state(prev_handler_state);
 8003ae8:	4b07      	ldr	r3, [pc, #28]	@ (8003b08 <set_handler_state+0x38>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ffb7 	bl	8003a60 <leave_handler_state>
	enter_handler_state(state);
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fe65 	bl	80037c4 <enter_handler_state>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200008a4 	.word	0x200008a4
 8003b08:	200008a5 	.word	0x200008a5

08003b0c <inc_handler_currentTime>:

uint8_t get_handler_state(void) {
	return handler_state;
}

void inc_handler_currentTime(uint16_t dT) {
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	80fb      	strh	r3, [r7, #6]
	time_val = time_val + dT;
 8003b16:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <inc_handler_currentTime+0x24>)
 8003b18:	881a      	ldrh	r2, [r3, #0]
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	4b03      	ldr	r3, [pc, #12]	@ (8003b30 <inc_handler_currentTime+0x24>)
 8003b22:	801a      	strh	r2, [r3, #0]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	200008a6 	.word	0x200008a6

08003b34 <get_adc_values>:

adc_values* get_adc_values(void) {
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
	return &adc_values1;
 8003b38:	4b02      	ldr	r3, [pc, #8]	@ (8003b44 <get_adc_values+0x10>)
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	200008b0 	.word	0x200008b0

08003b48 <set_pwm_values>:

void set_pwm_values(const int stufen, const int level) {
 8003b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4a:	b0d7      	sub	sp, #348	@ 0x15c
 8003b4c:	af0a      	add	r7, sp, #40	@ 0x28
 8003b4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003b52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003b56:	6018      	str	r0, [r3, #0]
 8003b58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003b5c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003b60:	6019      	str	r1, [r3, #0]
	// Char array für Ausgabe
	char msg_console[250] = "";
 8003b62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003b66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	22f6      	movs	r2, #246	@ 0xf6
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f009 fee8 	bl	800d94a <memset>
	// clear console output
	sprintf(msg_console, "\033[2J\033[H");
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	499c      	ldr	r1, [pc, #624]	@ (8003df0 <set_pwm_values+0x2a8>)
 8003b80:	4618      	mov	r0, r3
 8003b82:	f009 fe7f 	bl	800d884 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_console, strlen(msg_console), HAL_MAX_DELAY);
 8003b86:	f107 0308 	add.w	r3, r7, #8
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fc fb98 	bl	80002c0 <strlen>
 8003b90:	4603      	mov	r3, r0
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	f107 0108 	add.w	r1, r7, #8
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9c:	4895      	ldr	r0, [pc, #596]	@ (8003df4 <set_pwm_values+0x2ac>)
 8003b9e:	f008 f9ec 	bl	800bf7a <HAL_UART_Transmit>
	// Konstanten
	const float pi = M_PI;
 8003ba2:	4b95      	ldr	r3, [pc, #596]	@ (8003df8 <set_pwm_values+0x2b0>)
 8003ba4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	const uint32_t sz = (uint32_t)(fPWM/f0);
 8003ba8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003bac:	2364      	movs	r3, #100	@ 0x64
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	const float dRad = (2 * pi) / (sz - 1);	// Winkelschritt [rad]
 8003bb6:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8003bba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003bbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd0:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c
	const float norm0 = ((TIM1->ARR) / 2) + 1;
 8003bd4:	4b89      	ldr	r3, [pc, #548]	@ (8003dfc <set_pwm_values+0x2b4>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	085b      	lsrs	r3, r3, #1
 8003bda:	3301      	adds	r3, #1
 8003bdc:	ee07 3a90 	vmov	s15, r3
 8003be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be4:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
	const float posOffset0 = 1;
 8003be8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003bec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	// Variablen
	uint32_t i = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	float sin_val = 0;
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	float posOffsetCurr_1 = 0;
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	float normCurr_1 = 0;
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	// Speicher dynamisch allozieren
	switch (stufen) {
 8003c0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003c12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	f201 8168 	bhi.w	8004ef0 <set_pwm_values+0x13a8>
 8003c20:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <set_pwm_values+0xe0>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c39 	.word	0x08003c39
 8003c2c:	08003f29 	.word	0x08003f29
 8003c30:	0800455b 	.word	0x0800455b
 8003c34:	08004ebf 	.word	0x08004ebf
 8003c38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003c3c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d008      	beq.n	8003c58 <set_pwm_values+0x110>
 8003c46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003c4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	f000 8082 	beq.w	8003d5a <set_pwm_values+0x212>
 8003c56:	e15e      	b.n	8003f16 <set_pwm_values+0x3ce>
	case 1:
		switch (level) {
		case 2:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003c58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f009 f837 	bl	800ccd4 <malloc>
 8003c66:	4603      	mov	r3, r0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4b65      	ldr	r3, [pc, #404]	@ (8003e00 <set_pwm_values+0x2b8>)
 8003c6c:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 8003c6e:	4b64      	ldr	r3, [pc, #400]	@ (8003e00 <set_pwm_values+0x2b8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003c76:	601a      	str	r2, [r3, #0]
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003c7e:	e065      	b.n	8003d4c <set_pwm_values+0x204>
				if (i == 0) {
 8003c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10d      	bne.n	8003ca4 <set_pwm_values+0x15c>
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) norm0;
 8003c88:	4b5d      	ldr	r3, [pc, #372]	@ (8003e00 <set_pwm_values+0x2b8>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c94:	ee17 1a90 	vmov	r1, s15
 8003c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	6059      	str	r1, [r3, #4]
 8003ca2:	e032      	b.n	8003d0a <set_pwm_values+0x1c2>
				} else {
					sin_val = A0 * sinf(i * dRad);
 8003ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cb0:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8003cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cbc:	f00b fe5a 	bl	800f974 <sinf>
 8003cc0:	eef0 7a40 	vmov.f32	s15, s0
 8003cc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ccc:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
					posOffsetCurr_1 = posOffset0 + sin_val;
 8003cd0:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 8003cd4:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8003cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cdc:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
					normCurr_1 = norm0 * posOffsetCurr_1;
 8003ce0:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8003ce4:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8003ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cec:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) normCurr_1;
 8003cf0:	4b43      	ldr	r3, [pc, #268]	@ (8003e00 <set_pwm_values+0x2b8>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8003cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cfc:	ee17 1a90 	vmov	r1, s15
 8003d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	6059      	str	r1, [r3, #4]
				}
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,"pwmPtr_m1p->ccr_arr[%lu]: %3lu\r\n",i, pwmPtr_m1p->ccr_arr[i]);
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e00 <set_pwm_values+0x2b8>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f107 0008 	add.w	r0, r7, #8
 8003d1c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8003d20:	4938      	ldr	r1, [pc, #224]	@ (8003e04 <set_pwm_values+0x2bc>)
 8003d22:	f009 fdaf 	bl	800d884 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
 8003d26:	f107 0308 	add.w	r3, r7, #8
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc fac8 	bl	80002c0 <strlen>
 8003d30:	4603      	mov	r3, r0
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	f107 0108 	add.w	r1, r7, #8
 8003d38:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3c:	482d      	ldr	r0, [pc, #180]	@ (8003df4 <set_pwm_values+0x2ac>)
 8003d3e:	f008 f91c 	bl	800bf7a <HAL_UART_Transmit>
			for (i = 0; i < sz; i++) {
 8003d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d46:	3301      	adds	r3, #1
 8003d48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003d4c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8003d50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d393      	bcc.n	8003c80 <set_pwm_values+0x138>
			}
			break;
 8003d58:	e0e4      	b.n	8003f24 <set_pwm_values+0x3dc>
		case 3:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003d5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d5e:	3301      	adds	r3, #1
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f008 ffb6 	bl	800ccd4 <malloc>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b24      	ldr	r3, [pc, #144]	@ (8003e00 <set_pwm_values+0x2b8>)
 8003d6e:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 8003d70:	4b23      	ldr	r3, [pc, #140]	@ (8003e00 <set_pwm_values+0x2b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003d78:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003d7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d7e:	3301      	adds	r3, #1
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f008 ffa6 	bl	800ccd4 <malloc>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e08 <set_pwm_values+0x2c0>)
 8003d8e:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n->NrOfEl = sz;
 8003d90:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <set_pwm_values+0x2c0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003d98:	601a      	str	r2, [r3, #0]
			// Variablen
			float posOffsetCurr_2 = 0;
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
			float normCurr_2 = 0;
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 8003daa:	2300      	movs	r3, #0
 8003dac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003db0:	e0a9      	b.n	8003f06 <set_pwm_values+0x3be>
				if (i == 0) {
 8003db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d128      	bne.n	8003e0c <set_pwm_values+0x2c4>
					// m1+, m1-
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) norm0;
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <set_pwm_values+0x2b8>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc6:	ee17 1a90 	vmov	r1, s15
 8003dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	6059      	str	r1, [r3, #4]
					pwmPtr_m1n->ccr_arr[i] = (uint32_t) norm0;
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <set_pwm_values+0x2c0>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de0:	ee17 1a90 	vmov	r1, s15
 8003de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	6059      	str	r1, [r3, #4]
 8003dee:	e05d      	b.n	8003eac <set_pwm_values+0x364>
 8003df0:	08010514 	.word	0x08010514
 8003df4:	20000808 	.word	0x20000808
 8003df8:	40490fdb 	.word	0x40490fdb
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	200008d0 	.word	0x200008d0
 8003e04:	0801051c 	.word	0x0801051c
 8003e08:	200008d4 	.word	0x200008d4
				} else {
					// m1+
					sin_val = A0 * sinf(i * dRad);
 8003e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e18:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8003e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e20:	eeb0 0a67 	vmov.f32	s0, s15
 8003e24:	f00b fda6 	bl	800f974 <sinf>
 8003e28:	eef0 7a40 	vmov.f32	s15, s0
 8003e2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e34:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
					posOffsetCurr_1 = posOffset0 + sin_val;
 8003e38:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 8003e3c:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8003e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e44:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
					normCurr_1 = norm0 * posOffsetCurr_1;
 8003e48:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8003e4c:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8003e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e54:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) normCurr_1;
 8003e58:	4bae      	ldr	r3, [pc, #696]	@ (8004114 <set_pwm_values+0x5cc>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8003e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e64:	ee17 1a90 	vmov	r1, s15
 8003e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	6059      	str	r1, [r3, #4]
					// m1-
					posOffsetCurr_2 = posOffset0 - sin_val; // Sinusreferenz für 3-Stufen hier MINUS!
 8003e72:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 8003e76:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8003e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e7e:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
					normCurr_2 = norm0 * posOffsetCurr_2;
 8003e82:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8003e86:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8003e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8e:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
					pwmPtr_m1n->ccr_arr[i] = (uint32_t) normCurr_2;
 8003e92:	4ba1      	ldr	r3, [pc, #644]	@ (8004118 <set_pwm_values+0x5d0>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8003e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e9e:	ee17 1a90 	vmov	r1, s15
 8003ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	6059      	str	r1, [r3, #4]
				}
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,"pwmPtr_m1p[%lu]: %3lu  |  pwmPtr_m1n[%lu]: %3lu\r\n",
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i]);
 8003eac:	4b99      	ldr	r3, [pc, #612]	@ (8004114 <set_pwm_values+0x5cc>)
 8003eae:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,"pwmPtr_m1p[%lu]: %3lu  |  pwmPtr_m1n[%lu]: %3lu\r\n",
 8003eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	6859      	ldr	r1, [r3, #4]
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i]);
 8003eba:	4b97      	ldr	r3, [pc, #604]	@ (8004118 <set_pwm_values+0x5d0>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,"pwmPtr_m1p[%lu]: %3lu  |  pwmPtr_m1n[%lu]: %3lu\r\n",
 8003ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f107 0008 	add.w	r0, r7, #8
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8003eda:	4990      	ldr	r1, [pc, #576]	@ (800411c <set_pwm_values+0x5d4>)
 8003edc:	f009 fcd2 	bl	800d884 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
 8003ee0:	f107 0308 	add.w	r3, r7, #8
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fc f9eb 	bl	80002c0 <strlen>
 8003eea:	4603      	mov	r3, r0
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	f107 0108 	add.w	r1, r7, #8
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef6:	488a      	ldr	r0, [pc, #552]	@ (8004120 <set_pwm_values+0x5d8>)
 8003ef8:	f008 f83f 	bl	800bf7a <HAL_UART_Transmit>
			for (i = 0; i < sz; i++) {
 8003efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003f00:	3301      	adds	r3, #1
 8003f02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003f06:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8003f0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	f4ff af4f 	bcc.w	8003db2 <set_pwm_values+0x26a>
			}
			break;
 8003f14:	e006      	b.n	8003f24 <set_pwm_values+0x3dc>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8003f16:	f107 0308 	add.w	r3, r7, #8
 8003f1a:	4982      	ldr	r1, [pc, #520]	@ (8004124 <set_pwm_values+0x5dc>)
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f009 fcb1 	bl	800d884 <siprintf>
			break;
 8003f22:	bf00      	nop
		}
		break;
 8003f24:	f000 bfeb 	b.w	8004efe <set_pwm_values+0x13b6>
 8003f28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003f2c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d008      	beq.n	8003f48 <set_pwm_values+0x400>
 8003f36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003f3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	f000 814a 	beq.w	80041da <set_pwm_values+0x692>
 8003f46:	e2ff      	b.n	8004548 <set_pwm_values+0xa00>
	case 2:
		switch (level){
		case 2:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003f48:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f008 febf 	bl	800ccd4 <malloc>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004114 <set_pwm_values+0x5cc>)
 8003f5c:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 8003f5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004114 <set_pwm_values+0x5cc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003f66:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003f68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f008 feaf 	bl	800ccd4 <malloc>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b6b      	ldr	r3, [pc, #428]	@ (8004128 <set_pwm_values+0x5e0>)
 8003f7c:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p->NrOfEl = sz;
 8003f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004128 <set_pwm_values+0x5e0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003f86:	601a      	str	r2, [r3, #0]
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003f8e:	e11c      	b.n	80041ca <set_pwm_values+0x682>
				if (i == 0) {
 8003f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d15b      	bne.n	8004050 <set_pwm_values+0x508>
					// m1p
					pwmPtr_m1p->ccr_arr[i] = (uint32_t)(norm0*stufen);
 8003f98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003f9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003faa:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb2:	4b58      	ldr	r3, [pc, #352]	@ (8004114 <set_pwm_values+0x5cc>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fba:	ee17 1a90 	vmov	r1, s15
 8003fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	6059      	str	r1, [r3, #4]
					// m2p
					if(norm0*stufen - (float)TIM1->ARR < 0)
 8003fc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003fcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fda:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fe2:	4b52      	ldr	r3, [pc, #328]	@ (800412c <set_pwm_values+0x5e4>)
 8003fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ff2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffa:	d508      	bpl.n	800400e <set_pwm_values+0x4c6>
					{
						pwmPtr_m2p->ccr_arr[i] = 0;
 8003ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8004128 <set_pwm_values+0x5e0>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	2200      	movs	r2, #0
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	e0b0      	b.n	8004170 <set_pwm_values+0x628>
					}
					else{
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(norm0*stufen - TIM1->ARR);
 800400e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004012:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004020:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8004024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004028:	4b40      	ldr	r3, [pc, #256]	@ (800412c <set_pwm_values+0x5e4>)
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	ee07 3a90 	vmov	s15, r3
 8004030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004038:	4b3b      	ldr	r3, [pc, #236]	@ (8004128 <set_pwm_values+0x5e0>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004040:	ee17 1a90 	vmov	r1, s15
 8004044:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	6059      	str	r1, [r3, #4]
 800404e:	e08f      	b.n	8004170 <set_pwm_values+0x628>
					}
				} else {
					sin_val = A0 * sinf(i * dRad);
 8004050:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800405c:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8004060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004064:	eeb0 0a67 	vmov.f32	s0, s15
 8004068:	f00b fc84 	bl	800f974 <sinf>
 800406c:	eef0 7a40 	vmov.f32	s15, s0
 8004070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004078:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
					posOffsetCurr_1 = posOffset0 + sin_val;
 800407c:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 8004080:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8004084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004088:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
					normCurr_1 = norm0 * posOffsetCurr_1;
 800408c:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8004090:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8004094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004098:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128
					// m1p
					pwmPtr_m1p->ccr_arr[i] = (uint32_t)(normCurr_1*stufen);
 800409c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80040a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ae:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 80040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b6:	4b17      	ldr	r3, [pc, #92]	@ (8004114 <set_pwm_values+0x5cc>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040be:	ee17 1a90 	vmov	r1, s15
 80040c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	6059      	str	r1, [r3, #4]
					// m2p
					if(normCurr_1*stufen - (float)TIM1->ARR < 0)
 80040cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80040d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040de:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 80040e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e6:	4b11      	ldr	r3, [pc, #68]	@ (800412c <set_pwm_values+0x5e4>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fe:	d517      	bpl.n	8004130 <set_pwm_values+0x5e8>
					{
						pwmPtr_m2p->ccr_arr[i] = 0;
 8004100:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <set_pwm_values+0x5e0>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	e02e      	b.n	8004170 <set_pwm_values+0x628>
 8004112:	bf00      	nop
 8004114:	200008d0 	.word	0x200008d0
 8004118:	200008d4 	.word	0x200008d4
 800411c:	08010540 	.word	0x08010540
 8004120:	20000808 	.word	0x20000808
 8004124:	08010574 	.word	0x08010574
 8004128:	200008d8 	.word	0x200008d8
 800412c:	40012c00 	.word	0x40012c00
					}
					else{
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(normCurr_1*stufen - TIM1->ARR);
 8004130:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004134:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004142:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8004146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800414a:	4ba4      	ldr	r3, [pc, #656]	@ (80043dc <set_pwm_values+0x894>)
 800414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415a:	4ba1      	ldr	r3, [pc, #644]	@ (80043e0 <set_pwm_values+0x898>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004162:	ee17 1a90 	vmov	r1, s15
 8004166:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	6059      	str	r1, [r3, #4]
					}
				}
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu\r\n",
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m2p->ccr_arr[i]);
 8004170:	4b9c      	ldr	r3, [pc, #624]	@ (80043e4 <set_pwm_values+0x89c>)
 8004172:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu\r\n",
 8004174:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	6859      	ldr	r1, [r3, #4]
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m2p->ccr_arr[i]);
 800417e:	4b98      	ldr	r3, [pc, #608]	@ (80043e0 <set_pwm_values+0x898>)
 8004180:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu\r\n",
 8004182:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f107 0008 	add.w	r0, r7, #8
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	460b      	mov	r3, r1
 800419a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800419e:	4992      	ldr	r1, [pc, #584]	@ (80043e8 <set_pwm_values+0x8a0>)
 80041a0:	f009 fb70 	bl	800d884 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
 80041a4:	f107 0308 	add.w	r3, r7, #8
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fc f889 	bl	80002c0 <strlen>
 80041ae:	4603      	mov	r3, r0
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	f107 0108 	add.w	r1, r7, #8
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	488c      	ldr	r0, [pc, #560]	@ (80043ec <set_pwm_values+0x8a4>)
 80041bc:	f007 fedd 	bl	800bf7a <HAL_UART_Transmit>
			for (i = 0; i < sz; i++) {
 80041c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80041c4:	3301      	adds	r3, #1
 80041c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80041ca:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80041ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041d2:	429a      	cmp	r2, r3
 80041d4:	f4ff aedc 	bcc.w	8003f90 <set_pwm_values+0x448>
			}
			break;
 80041d8:	e1bd      	b.n	8004556 <set_pwm_values+0xa0e>
		case 3:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 80041da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041de:	3301      	adds	r3, #1
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f008 fd76 	bl	800ccd4 <malloc>
 80041e8:	4603      	mov	r3, r0
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b7d      	ldr	r3, [pc, #500]	@ (80043e4 <set_pwm_values+0x89c>)
 80041ee:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 80041f0:	4b7c      	ldr	r3, [pc, #496]	@ (80043e4 <set_pwm_values+0x89c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80041f8:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 80041fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041fe:	3301      	adds	r3, #1
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4618      	mov	r0, r3
 8004204:	f008 fd66 	bl	800ccd4 <malloc>
 8004208:	4603      	mov	r3, r0
 800420a:	461a      	mov	r2, r3
 800420c:	4b78      	ldr	r3, [pc, #480]	@ (80043f0 <set_pwm_values+0x8a8>)
 800420e:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n->NrOfEl = sz;
 8004210:	4b77      	ldr	r3, [pc, #476]	@ (80043f0 <set_pwm_values+0x8a8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004218:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 800421a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800421e:	3301      	adds	r3, #1
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4618      	mov	r0, r3
 8004224:	f008 fd56 	bl	800ccd4 <malloc>
 8004228:	4603      	mov	r3, r0
 800422a:	461a      	mov	r2, r3
 800422c:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <set_pwm_values+0x898>)
 800422e:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p->NrOfEl = sz;
 8004230:	4b6b      	ldr	r3, [pc, #428]	@ (80043e0 <set_pwm_values+0x898>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004238:	601a      	str	r2, [r3, #0]
			pwmPtr_m2n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 800423a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800423e:	3301      	adds	r3, #1
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4618      	mov	r0, r3
 8004244:	f008 fd46 	bl	800ccd4 <malloc>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	4b69      	ldr	r3, [pc, #420]	@ (80043f4 <set_pwm_values+0x8ac>)
 800424e:	601a      	str	r2, [r3, #0]
			pwmPtr_m2n->NrOfEl = sz;
 8004250:	4b68      	ldr	r3, [pc, #416]	@ (80043f4 <set_pwm_values+0x8ac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004258:	601a      	str	r2, [r3, #0]
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 800425a:	2300      	movs	r3, #0
 800425c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004260:	e10b      	b.n	800447a <set_pwm_values+0x932>
				if (i == 0) {
 8004262:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d157      	bne.n	800431a <set_pwm_values+0x7d2>
					// m1p
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) norm0 * stufen;
 800426a:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 800426e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004272:	ee17 0a90 	vmov	r0, s15
 8004276:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800427a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a58      	ldr	r2, [pc, #352]	@ (80043e4 <set_pwm_values+0x89c>)
 8004282:	6811      	ldr	r1, [r2, #0]
 8004284:	fb03 f200 	mul.w	r2, r3, r0
 8004288:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	605a      	str	r2, [r3, #4]
					// m2p
					if ((norm0*stufen) - (float)TIM1->ARR < 0) {
 8004292:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004296:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	ee07 3a90 	vmov	s15, r3
 80042a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042a4:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80042a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ac:	4b4b      	ldr	r3, [pc, #300]	@ (80043dc <set_pwm_values+0x894>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c4:	d508      	bpl.n	80042d8 <set_pwm_values+0x790>
						pwmPtr_m2p->ccr_arr[i] = 0;
 80042c6:	4b46      	ldr	r3, [pc, #280]	@ (80043e0 <set_pwm_values+0x898>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	e0af      	b.n	8004438 <set_pwm_values+0x8f0>
					} else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(norm0 * stufen
 80042d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80042dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042ea:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80042ee:	ee27 7a27 	vmul.f32	s14, s14, s15
								- TIM1->ARR);
 80042f2:	4b3a      	ldr	r3, [pc, #232]	@ (80043dc <set_pwm_values+0x894>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	ee77 7a67 	vsub.f32	s15, s14, s15
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(norm0 * stufen
 8004302:	4b37      	ldr	r3, [pc, #220]	@ (80043e0 <set_pwm_values+0x898>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800430a:	ee17 1a90 	vmov	r1, s15
 800430e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	6059      	str	r1, [r3, #4]
 8004318:	e08e      	b.n	8004438 <set_pwm_values+0x8f0>
					}
				} else {
					sin_val = A0 * sinf(i * dRad);
 800431a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004326:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	eeb0 0a67 	vmov.f32	s0, s15
 8004332:	f00b fb1f 	bl	800f974 <sinf>
 8004336:	eef0 7a40 	vmov.f32	s15, s0
 800433a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800433e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004342:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
					posOffsetCurr_1 = posOffset0 + sin_val;
 8004346:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 800434a:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 800434e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004352:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
					normCurr_1 = norm0 * posOffsetCurr_1;
 8004356:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 800435a:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 800435e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004362:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128
					// m1p
					pwmPtr_m1p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen);
 8004366:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800436a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004378:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 800437c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004380:	4b18      	ldr	r3, [pc, #96]	@ (80043e4 <set_pwm_values+0x89c>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004388:	ee17 1a90 	vmov	r1, s15
 800438c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	6059      	str	r1, [r3, #4]
					// m2p
					if ((normCurr_1*stufen) - (float)TIM1->ARR < 0) {
 8004396:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800439a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043a8:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 80043ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043b0:	4b0a      	ldr	r3, [pc, #40]	@ (80043dc <set_pwm_values+0x894>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	ee07 3a90 	vmov	s15, r3
 80043b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	d516      	bpl.n	80043f8 <set_pwm_values+0x8b0>
						pwmPtr_m2p->ccr_arr[i] = 0;
 80043ca:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <set_pwm_values+0x898>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	2200      	movs	r2, #0
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	e02d      	b.n	8004438 <set_pwm_values+0x8f0>
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	200008d8 	.word	0x200008d8
 80043e4:	200008d0 	.word	0x200008d0
 80043e8:	080105a0 	.word	0x080105a0
 80043ec:	20000808 	.word	0x20000808
 80043f0:	200008d4 	.word	0x200008d4
 80043f4:	200008dc 	.word	0x200008dc
					} else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen
 80043f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80043fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800440a:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 800440e:	ee27 7a27 	vmul.f32	s14, s14, s15
								- TIM1->ARR);
 8004412:	4bc7      	ldr	r3, [pc, #796]	@ (8004730 <set_pwm_values+0xbe8>)
 8004414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441e:	ee77 7a67 	vsub.f32	s15, s14, s15
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen
 8004422:	4bc4      	ldr	r3, [pc, #784]	@ (8004734 <set_pwm_values+0xbec>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442a:	ee17 1a90 	vmov	r1, s15
 800442e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	6059      	str	r1, [r3, #4]
					}
				}
				// m1n, m2n, Werte kopieren
				pwmPtr_m1n->ccr_arr[i] = pwmPtr_m2p->ccr_arr[i];
 8004438:	4bbe      	ldr	r3, [pc, #760]	@ (8004734 <set_pwm_values+0xbec>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4bbe      	ldr	r3, [pc, #760]	@ (8004738 <set_pwm_values+0xbf0>)
 800443e:	6819      	ldr	r1, [r3, #0]
 8004440:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	605a      	str	r2, [r3, #4]
				pwmPtr_m2n->ccr_arr[i] = pwmPtr_m1p->ccr_arr[i];
 8004454:	4bb9      	ldr	r3, [pc, #740]	@ (800473c <set_pwm_values+0xbf4>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4bb9      	ldr	r3, [pc, #740]	@ (8004740 <set_pwm_values+0xbf8>)
 800445a:	6819      	ldr	r1, [r3, #0]
 800445c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	605a      	str	r2, [r3, #4]
			for (i = 0; i < sz; i++) {
 8004470:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004474:	3301      	adds	r3, #1
 8004476:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800447a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800447e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004482:	429a      	cmp	r2, r3
 8004484:	f4ff aeed 	bcc.w	8004262 <set_pwm_values+0x71a>
			}
			// m1n, m2n, Array drehen
			flip(pwmPtr_m1n->ccr_arr, sz);
 8004488:	4bab      	ldr	r3, [pc, #684]	@ (8004738 <set_pwm_values+0xbf0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3304      	adds	r3, #4
 800448e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f001 f9c1 	bl	800581c <flip>
			flip(pwmPtr_m2n->ccr_arr, sz);
 800449a:	4ba9      	ldr	r3, [pc, #676]	@ (8004740 <set_pwm_values+0xbf8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3304      	adds	r3, #4
 80044a0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 f9b8 	bl	800581c <flip>
			// Werte Ausgeben
			for (i = 0; i < sz; i++){
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80044b2:	e042      	b.n	800453a <set_pwm_values+0x9f2>
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,
						"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m1n->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu | pwmPtr_m2n->ccr_arr[%lu]: %3lu\r\n",
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i],
 80044b4:	4ba1      	ldr	r3, [pc, #644]	@ (800473c <set_pwm_values+0xbf4>)
 80044b6:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 80044b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	685c      	ldr	r4, [r3, #4]
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i],
 80044c2:	4b9d      	ldr	r3, [pc, #628]	@ (8004738 <set_pwm_values+0xbf0>)
 80044c4:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 80044c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	685a      	ldr	r2, [r3, #4]
						i, pwmPtr_m2p->ccr_arr[i], i, pwmPtr_m2n->ccr_arr[i]);
 80044d0:	4b98      	ldr	r3, [pc, #608]	@ (8004734 <set_pwm_values+0xbec>)
 80044d2:	6819      	ldr	r1, [r3, #0]
				sprintf(msg_console,
 80044d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	6859      	ldr	r1, [r3, #4]
						i, pwmPtr_m2p->ccr_arr[i], i, pwmPtr_m2n->ccr_arr[i]);
 80044de:	4b98      	ldr	r3, [pc, #608]	@ (8004740 <set_pwm_values+0xbf8>)
 80044e0:	6818      	ldr	r0, [r3, #0]
				sprintf(msg_console,
 80044e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4403      	add	r3, r0
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f107 0008 	add.w	r0, r7, #8
 80044f0:	9305      	str	r3, [sp, #20]
 80044f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	9103      	str	r1, [sp, #12]
 80044fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80044fe:	9302      	str	r3, [sp, #8]
 8004500:	9201      	str	r2, [sp, #4]
 8004502:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	4623      	mov	r3, r4
 800450a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800450e:	498d      	ldr	r1, [pc, #564]	@ (8004744 <set_pwm_values+0xbfc>)
 8004510:	f009 f9b8 	bl	800d884 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
						strlen(msg_console), HAL_MAX_DELAY);
 8004514:	f107 0308 	add.w	r3, r7, #8
 8004518:	4618      	mov	r0, r3
 800451a:	f7fb fed1 	bl	80002c0 <strlen>
 800451e:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
 8004520:	b29a      	uxth	r2, r3
 8004522:	f107 0108 	add.w	r1, r7, #8
 8004526:	f04f 33ff 	mov.w	r3, #4294967295
 800452a:	4887      	ldr	r0, [pc, #540]	@ (8004748 <set_pwm_values+0xc00>)
 800452c:	f007 fd25 	bl	800bf7a <HAL_UART_Transmit>
			for (i = 0; i < sz; i++){
 8004530:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004534:	3301      	adds	r3, #1
 8004536:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800453a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800453e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004542:	429a      	cmp	r2, r3
 8004544:	d3b6      	bcc.n	80044b4 <set_pwm_values+0x96c>
			}
			break;
 8004546:	e006      	b.n	8004556 <set_pwm_values+0xa0e>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004548:	f107 0308 	add.w	r3, r7, #8
 800454c:	497f      	ldr	r1, [pc, #508]	@ (800474c <set_pwm_values+0xc04>)
 800454e:	4618      	mov	r0, r3
 8004550:	f009 f998 	bl	800d884 <siprintf>
			break;
 8004554:	bf00      	nop
		}
		break;
 8004556:	f000 bcd2 	b.w	8004efe <set_pwm_values+0x13b6>
 800455a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800455e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d009      	beq.n	800457c <set_pwm_values+0xa34>
 8004568:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800456c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b03      	cmp	r3, #3
 8004574:	f000 81f4 	beq.w	8004960 <set_pwm_values+0xe18>
 8004578:	f000 bc99 	b.w	8004eae <set_pwm_values+0x1366>
	case 3:
		switch (level){
		case 2:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 800457c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004580:	3301      	adds	r3, #1
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f008 fba5 	bl	800ccd4 <malloc>
 800458a:	4603      	mov	r3, r0
 800458c:	461a      	mov	r2, r3
 800458e:	4b6b      	ldr	r3, [pc, #428]	@ (800473c <set_pwm_values+0xbf4>)
 8004590:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 8004592:	4b6a      	ldr	r3, [pc, #424]	@ (800473c <set_pwm_values+0xbf4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800459a:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 800459c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045a0:	3301      	adds	r3, #1
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f008 fb95 	bl	800ccd4 <malloc>
 80045aa:	4603      	mov	r3, r0
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b61      	ldr	r3, [pc, #388]	@ (8004734 <set_pwm_values+0xbec>)
 80045b0:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p->NrOfEl = sz;
 80045b2:	4b60      	ldr	r3, [pc, #384]	@ (8004734 <set_pwm_values+0xbec>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80045ba:	601a      	str	r2, [r3, #0]
			pwmPtr_m3p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 80045bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045c0:	3301      	adds	r3, #1
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f008 fb85 	bl	800ccd4 <malloc>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461a      	mov	r2, r3
 80045ce:	4b60      	ldr	r3, [pc, #384]	@ (8004750 <set_pwm_values+0xc08>)
 80045d0:	601a      	str	r2, [r3, #0]
			pwmPtr_m3p->NrOfEl = sz;
 80045d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004750 <set_pwm_values+0xc08>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80045da:	601a      	str	r2, [r3, #0]
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80045e2:	e1b5      	b.n	8004950 <set_pwm_values+0xe08>
				if (i == 0) {
 80045e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 80b3 	bne.w	8004754 <set_pwm_values+0xc0c>
					// m1p
					pwmPtr_m1p->ccr_arr[i] = (uint32_t)(norm0 * stufen);
 80045ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80045f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004600:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8004604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004608:	4b4c      	ldr	r3, [pc, #304]	@ (800473c <set_pwm_values+0xbf4>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004610:	ee17 1a90 	vmov	r1, s15
 8004614:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	6059      	str	r1, [r3, #4]
					// m2p
					if (norm0 * stufen - (float)TIM1->ARR < 0) {
 800461e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004622:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004630:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8004634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004638:	4b3d      	ldr	r3, [pc, #244]	@ (8004730 <set_pwm_values+0xbe8>)
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	ee07 3a90 	vmov	s15, r3
 8004640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800464c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004650:	d508      	bpl.n	8004664 <set_pwm_values+0xb1c>
						pwmPtr_m2p->ccr_arr[i] = 0;
 8004652:	4b38      	ldr	r3, [pc, #224]	@ (8004734 <set_pwm_values+0xbec>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	2200      	movs	r2, #0
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	e01f      	b.n	80046a4 <set_pwm_values+0xb5c>
					} else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(norm0 * stufen
 8004664:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004668:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004676:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 800467a:	ee27 7a27 	vmul.f32	s14, s14, s15
								- TIM1->ARR);
 800467e:	4b2c      	ldr	r3, [pc, #176]	@ (8004730 <set_pwm_values+0xbe8>)
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	ee77 7a67 	vsub.f32	s15, s14, s15
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(norm0 * stufen
 800468e:	4b29      	ldr	r3, [pc, #164]	@ (8004734 <set_pwm_values+0xbec>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004696:	ee17 1a90 	vmov	r1, s15
 800469a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	6059      	str	r1, [r3, #4]
					}
					// m3p
					if (normCurr_1 * stufen - (float)(2 * TIM1->ARR) < 0) {
 80046a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80046a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046b6:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 80046ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046be:	4b1c      	ldr	r3, [pc, #112]	@ (8004730 <set_pwm_values+0xbe8>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	ee07 3a90 	vmov	s15, r3
 80046c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d8:	d508      	bpl.n	80046ec <set_pwm_values+0xba4>
						pwmPtr_m3p->ccr_arr[i] = 0;
 80046da:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <set_pwm_values+0xc08>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	2200      	movs	r2, #0
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e0f9      	b.n	80048e0 <set_pwm_values+0xd98>
					} else {
						pwmPtr_m3p->ccr_arr[i] = (uint32_t)(norm0 * stufen
 80046ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80046f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046fe:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8004702:	ee27 7a27 	vmul.f32	s14, s14, s15
								- 2 * TIM1->ARR);
 8004706:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <set_pwm_values+0xbe8>)
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004714:	ee77 7a67 	vsub.f32	s15, s14, s15
						pwmPtr_m3p->ccr_arr[i] = (uint32_t)(norm0 * stufen
 8004718:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <set_pwm_values+0xc08>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004720:	ee17 1a90 	vmov	r1, s15
 8004724:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	6059      	str	r1, [r3, #4]
 800472e:	e0d7      	b.n	80048e0 <set_pwm_values+0xd98>
 8004730:	40012c00 	.word	0x40012c00
 8004734:	200008d8 	.word	0x200008d8
 8004738:	200008d4 	.word	0x200008d4
 800473c:	200008d0 	.word	0x200008d0
 8004740:	200008dc 	.word	0x200008dc
 8004744:	080105e4 	.word	0x080105e4
 8004748:	20000808 	.word	0x20000808
 800474c:	08010574 	.word	0x08010574
 8004750:	200008e0 	.word	0x200008e0
					}
				} else {
					sin_val = A0 * sinf(i * dRad);
 8004754:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004760:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8004764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004768:	eeb0 0a67 	vmov.f32	s0, s15
 800476c:	f00b f902 	bl	800f974 <sinf>
 8004770:	eef0 7a40 	vmov.f32	s15, s0
 8004774:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800477c:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
					posOffsetCurr_1 = posOffset0 + sin_val;
 8004780:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 8004784:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8004788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800478c:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
					normCurr_1 = norm0 * posOffsetCurr_1;
 8004790:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8004794:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8004798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479c:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128
					// m1p
					pwmPtr_m1p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen);
 80047a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80047a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047b2:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 80047b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ba:	4bbb      	ldr	r3, [pc, #748]	@ (8004aa8 <set_pwm_values+0xf60>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c2:	ee17 1a90 	vmov	r1, s15
 80047c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	6059      	str	r1, [r3, #4]
					// m2p
					if (normCurr_1 * stufen - (float)TIM1->ARR < 0) {
 80047d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80047d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047e2:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 80047e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047ea:	4bb0      	ldr	r3, [pc, #704]	@ (8004aac <set_pwm_values+0xf64>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004802:	d508      	bpl.n	8004816 <set_pwm_values+0xcce>
						pwmPtr_m2p->ccr_arr[i] = 0;
 8004804:	4baa      	ldr	r3, [pc, #680]	@ (8004ab0 <set_pwm_values+0xf68>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	2200      	movs	r2, #0
 8004812:	605a      	str	r2, [r3, #4]
 8004814:	e01f      	b.n	8004856 <set_pwm_values+0xd0e>
					}
					else{
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen
 8004816:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800481a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	ee07 3a90 	vmov	s15, r3
 8004824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004828:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 800482c:	ee27 7a27 	vmul.f32	s14, s14, s15
								- TIM1->ARR);
 8004830:	4b9e      	ldr	r3, [pc, #632]	@ (8004aac <set_pwm_values+0xf64>)
 8004832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483c:	ee77 7a67 	vsub.f32	s15, s14, s15
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen
 8004840:	4b9b      	ldr	r3, [pc, #620]	@ (8004ab0 <set_pwm_values+0xf68>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004848:	ee17 1a90 	vmov	r1, s15
 800484c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	6059      	str	r1, [r3, #4]
					}
					// m3p
					if (normCurr_1 * stufen - (float)(2 * TIM1->ARR) < 0) {
 8004856:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800485a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004868:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 800486c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004870:	4b8e      	ldr	r3, [pc, #568]	@ (8004aac <set_pwm_values+0xf64>)
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004882:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488a:	d508      	bpl.n	800489e <set_pwm_values+0xd56>
						pwmPtr_m3p->ccr_arr[i] = 0;
 800488c:	4b89      	ldr	r3, [pc, #548]	@ (8004ab4 <set_pwm_values+0xf6c>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	2200      	movs	r2, #0
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	e020      	b.n	80048e0 <set_pwm_values+0xd98>
					} else {
						pwmPtr_m3p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen
 800489e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80048a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048b0:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 80048b4:	ee27 7a27 	vmul.f32	s14, s14, s15
								- 2 * TIM1->ARR);
 80048b8:	4b7c      	ldr	r3, [pc, #496]	@ (8004aac <set_pwm_values+0xf64>)
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c6:	ee77 7a67 	vsub.f32	s15, s14, s15
						pwmPtr_m3p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen
 80048ca:	4b7a      	ldr	r3, [pc, #488]	@ (8004ab4 <set_pwm_values+0xf6c>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d2:	ee17 1a90 	vmov	r1, s15
 80048d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	6059      	str	r1, [r3, #4]
					}
				}
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,
						"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu | pwmPtr_m3p->ccr_arr[%lu]: %3lu\r\n",
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m2p->ccr_arr[i],
 80048e0:	4b71      	ldr	r3, [pc, #452]	@ (8004aa8 <set_pwm_values+0xf60>)
 80048e2:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 80048e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	685c      	ldr	r4, [r3, #4]
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m2p->ccr_arr[i],
 80048ee:	4b70      	ldr	r3, [pc, #448]	@ (8004ab0 <set_pwm_values+0xf68>)
 80048f0:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 80048f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	685a      	ldr	r2, [r3, #4]
						i, pwmPtr_m3p->ccr_arr[i]);
 80048fc:	4b6d      	ldr	r3, [pc, #436]	@ (8004ab4 <set_pwm_values+0xf6c>)
 80048fe:	6819      	ldr	r1, [r3, #0]
				sprintf(msg_console,
 8004900:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f107 0008 	add.w	r0, r7, #8
 800490e:	9303      	str	r3, [sp, #12]
 8004910:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004914:	9302      	str	r3, [sp, #8]
 8004916:	9201      	str	r2, [sp, #4]
 8004918:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	4623      	mov	r3, r4
 8004920:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8004924:	4964      	ldr	r1, [pc, #400]	@ (8004ab8 <set_pwm_values+0xf70>)
 8004926:	f008 ffad 	bl	800d884 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
						strlen(msg_console), HAL_MAX_DELAY);
 800492a:	f107 0308 	add.w	r3, r7, #8
 800492e:	4618      	mov	r0, r3
 8004930:	f7fb fcc6 	bl	80002c0 <strlen>
 8004934:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
 8004936:	b29a      	uxth	r2, r3
 8004938:	f107 0108 	add.w	r1, r7, #8
 800493c:	f04f 33ff 	mov.w	r3, #4294967295
 8004940:	485e      	ldr	r0, [pc, #376]	@ (8004abc <set_pwm_values+0xf74>)
 8004942:	f007 fb1a 	bl	800bf7a <HAL_UART_Transmit>
			for (i = 0; i < sz; i++) {
 8004946:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800494a:	3301      	adds	r3, #1
 800494c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004950:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8004954:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004958:	429a      	cmp	r2, r3
 800495a:	f4ff ae43 	bcc.w	80045e4 <set_pwm_values+0xa9c>
			}
			break;
 800495e:	e2ad      	b.n	8004ebc <set_pwm_values+0x1374>
		case 3:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004960:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004964:	3301      	adds	r3, #1
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4618      	mov	r0, r3
 800496a:	f008 f9b3 	bl	800ccd4 <malloc>
 800496e:	4603      	mov	r3, r0
 8004970:	461a      	mov	r2, r3
 8004972:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa8 <set_pwm_values+0xf60>)
 8004974:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 8004976:	4b4c      	ldr	r3, [pc, #304]	@ (8004aa8 <set_pwm_values+0xf60>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800497e:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004980:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004984:	3301      	adds	r3, #1
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4618      	mov	r0, r3
 800498a:	f008 f9a3 	bl	800ccd4 <malloc>
 800498e:	4603      	mov	r3, r0
 8004990:	461a      	mov	r2, r3
 8004992:	4b4b      	ldr	r3, [pc, #300]	@ (8004ac0 <set_pwm_values+0xf78>)
 8004994:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n->NrOfEl = sz;
 8004996:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac0 <set_pwm_values+0xf78>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800499e:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 80049a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80049a4:	3301      	adds	r3, #1
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f008 f993 	bl	800ccd4 <malloc>
 80049ae:	4603      	mov	r3, r0
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab0 <set_pwm_values+0xf68>)
 80049b4:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p->NrOfEl = sz;
 80049b6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ab0 <set_pwm_values+0xf68>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80049be:	601a      	str	r2, [r3, #0]
			pwmPtr_m2n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 80049c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80049c4:	3301      	adds	r3, #1
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f008 f983 	bl	800ccd4 <malloc>
 80049ce:	4603      	mov	r3, r0
 80049d0:	461a      	mov	r2, r3
 80049d2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ac4 <set_pwm_values+0xf7c>)
 80049d4:	601a      	str	r2, [r3, #0]
			pwmPtr_m2n->NrOfEl = sz;
 80049d6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac4 <set_pwm_values+0xf7c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80049de:	601a      	str	r2, [r3, #0]
			pwmPtr_m3p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 80049e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80049e4:	3301      	adds	r3, #1
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f008 f973 	bl	800ccd4 <malloc>
 80049ee:	4603      	mov	r3, r0
 80049f0:	461a      	mov	r2, r3
 80049f2:	4b30      	ldr	r3, [pc, #192]	@ (8004ab4 <set_pwm_values+0xf6c>)
 80049f4:	601a      	str	r2, [r3, #0]
			pwmPtr_m3p->NrOfEl = sz;
 80049f6:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab4 <set_pwm_values+0xf6c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80049fe:	601a      	str	r2, [r3, #0]
			pwmPtr_m3n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004a00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004a04:	3301      	adds	r3, #1
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f008 f963 	bl	800ccd4 <malloc>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	461a      	mov	r2, r3
 8004a12:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac8 <set_pwm_values+0xf80>)
 8004a14:	601a      	str	r2, [r3, #0]
			pwmPtr_m3n->NrOfEl = sz;
 8004a16:	4b2c      	ldr	r3, [pc, #176]	@ (8004ac8 <set_pwm_values+0xf80>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004a1e:	601a      	str	r2, [r3, #0]
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 8004a20:	2300      	movs	r3, #0
 8004a22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004a26:	e1ac      	b.n	8004d82 <set_pwm_values+0x123a>
				if (i == 0) {
 8004a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 80b3 	bne.w	8004b98 <set_pwm_values+0x1050>
					// m1p
					pwmPtr_m1p->ccr_arr[i] = (uint32_t)(norm0 * stufen);
 8004a32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004a36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	ee07 3a90 	vmov	s15, r3
 8004a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a44:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8004a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4c:	4b16      	ldr	r3, [pc, #88]	@ (8004aa8 <set_pwm_values+0xf60>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a54:	ee17 1a90 	vmov	r1, s15
 8004a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	6059      	str	r1, [r3, #4]
					// m2p
					if (norm0 * stufen - (float)TIM1->ARR < 0) {
 8004a62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004a66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a74:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8004a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <set_pwm_values+0xf64>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a94:	d51a      	bpl.n	8004acc <set_pwm_values+0xf84>
						pwmPtr_m2p->ccr_arr[i] = 0;
 8004a96:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <set_pwm_values+0xf68>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	605a      	str	r2, [r3, #4]
 8004aa6:	e031      	b.n	8004b0c <set_pwm_values+0xfc4>
 8004aa8:	200008d0 	.word	0x200008d0
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	200008d8 	.word	0x200008d8
 8004ab4:	200008e0 	.word	0x200008e0
 8004ab8:	08010668 	.word	0x08010668
 8004abc:	20000808 	.word	0x20000808
 8004ac0:	200008d4 	.word	0x200008d4
 8004ac4:	200008dc 	.word	0x200008dc
 8004ac8:	200008e4 	.word	0x200008e4
					} else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(norm0 * stufen
 8004acc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ad0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ade:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8004ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
								- TIM1->ARR);
 8004ae6:	4bba      	ldr	r3, [pc, #744]	@ (8004dd0 <set_pwm_values+0x1288>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	ee77 7a67 	vsub.f32	s15, s14, s15
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(norm0 * stufen
 8004af6:	4bb7      	ldr	r3, [pc, #732]	@ (8004dd4 <set_pwm_values+0x128c>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afe:	ee17 1a90 	vmov	r1, s15
 8004b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	6059      	str	r1, [r3, #4]
					}
					// m3p
					if (normCurr_1 * stufen - (float)(2 * TIM1->ARR) < 0) {
 8004b0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004b10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b1e:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8004b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b26:	4baa      	ldr	r3, [pc, #680]	@ (8004dd0 <set_pwm_values+0x1288>)
 8004b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b40:	d508      	bpl.n	8004b54 <set_pwm_values+0x100c>
						pwmPtr_m3p->ccr_arr[i] = 0;
 8004b42:	4ba5      	ldr	r3, [pc, #660]	@ (8004dd8 <set_pwm_values+0x1290>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	2200      	movs	r2, #0
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	e0e7      	b.n	8004d24 <set_pwm_values+0x11dc>
					} else {
						pwmPtr_m3p->ccr_arr[i] = (uint32_t)(norm0 * stufen
 8004b54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004b58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b66:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8004b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
								- 2 * TIM1->ARR);
 8004b6e:	4b98      	ldr	r3, [pc, #608]	@ (8004dd0 <set_pwm_values+0x1288>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
						pwmPtr_m3p->ccr_arr[i] = (uint32_t)(norm0 * stufen
 8004b80:	4b95      	ldr	r3, [pc, #596]	@ (8004dd8 <set_pwm_values+0x1290>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b88:	ee17 1a90 	vmov	r1, s15
 8004b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	6059      	str	r1, [r3, #4]
 8004b96:	e0c5      	b.n	8004d24 <set_pwm_values+0x11dc>
					}
				} else {
					sin_val = A0 * sinf(i * dRad);
 8004b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ba4:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8004ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bac:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb0:	f00a fee0 	bl	800f974 <sinf>
 8004bb4:	eef0 7a40 	vmov.f32	s15, s0
 8004bb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bc0:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
					posOffsetCurr_1 = posOffset0 + sin_val;
 8004bc4:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 8004bc8:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8004bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bd0:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
					normCurr_1 = norm0 * posOffsetCurr_1;
 8004bd4:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8004bd8:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8004bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be0:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128
					// m1p
					pwmPtr_m1p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen);
 8004be4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004be8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bf6:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	4b77      	ldr	r3, [pc, #476]	@ (8004ddc <set_pwm_values+0x1294>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c06:	ee17 1a90 	vmov	r1, s15
 8004c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	6059      	str	r1, [r3, #4]
					// m2p
					if (normCurr_1 * stufen - (float)TIM1->ARR < 0) {
 8004c14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c26:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8004c2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c2e:	4b68      	ldr	r3, [pc, #416]	@ (8004dd0 <set_pwm_values+0x1288>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	d508      	bpl.n	8004c5a <set_pwm_values+0x1112>
						pwmPtr_m2p->ccr_arr[i] = 0;
 8004c48:	4b62      	ldr	r3, [pc, #392]	@ (8004dd4 <set_pwm_values+0x128c>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	2200      	movs	r2, #0
 8004c56:	605a      	str	r2, [r3, #4]
 8004c58:	e01f      	b.n	8004c9a <set_pwm_values+0x1152>
					} else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen
 8004c5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c6c:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8004c70:	ee27 7a27 	vmul.f32	s14, s14, s15
								- TIM1->ARR);
 8004c74:	4b56      	ldr	r3, [pc, #344]	@ (8004dd0 <set_pwm_values+0x1288>)
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	ee07 3a90 	vmov	s15, r3
 8004c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c80:	ee77 7a67 	vsub.f32	s15, s14, s15
						pwmPtr_m2p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen
 8004c84:	4b53      	ldr	r3, [pc, #332]	@ (8004dd4 <set_pwm_values+0x128c>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8c:	ee17 1a90 	vmov	r1, s15
 8004c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	6059      	str	r1, [r3, #4]
					// m3p
					}
					if (normCurr_1 * stufen - (float)(2 * TIM1->ARR) < 0) {
 8004c9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cac:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8004cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cb4:	4b46      	ldr	r3, [pc, #280]	@ (8004dd0 <set_pwm_values+0x1288>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	d508      	bpl.n	8004ce2 <set_pwm_values+0x119a>
						pwmPtr_m3p->ccr_arr[i] = 0;
 8004cd0:	4b41      	ldr	r3, [pc, #260]	@ (8004dd8 <set_pwm_values+0x1290>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	2200      	movs	r2, #0
 8004cde:	605a      	str	r2, [r3, #4]
 8004ce0:	e020      	b.n	8004d24 <set_pwm_values+0x11dc>
					} else {
						pwmPtr_m3p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen
 8004ce2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ce6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	ee07 3a90 	vmov	s15, r3
 8004cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cf4:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8004cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
								- 2 * TIM1->ARR);
 8004cfc:	4b34      	ldr	r3, [pc, #208]	@ (8004dd0 <set_pwm_values+0x1288>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
						pwmPtr_m3p->ccr_arr[i] = (uint32_t)(normCurr_1 * stufen
 8004d0e:	4b32      	ldr	r3, [pc, #200]	@ (8004dd8 <set_pwm_values+0x1290>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d16:	ee17 1a90 	vmov	r1, s15
 8004d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	6059      	str	r1, [r3, #4]
					}
				}
				// m1n, m2n, m3n, Werte kopieren
				pwmPtr_m1n->ccr_arr[i] = pwmPtr_m3p->ccr_arr[i];
 8004d24:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd8 <set_pwm_values+0x1290>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4b2d      	ldr	r3, [pc, #180]	@ (8004de0 <set_pwm_values+0x1298>)
 8004d2a:	6819      	ldr	r1, [r3, #0]
 8004d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	605a      	str	r2, [r3, #4]
				pwmPtr_m2n->ccr_arr[i] = pwmPtr_m2p->ccr_arr[i];
 8004d40:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <set_pwm_values+0x128c>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b27      	ldr	r3, [pc, #156]	@ (8004de4 <set_pwm_values+0x129c>)
 8004d46:	6819      	ldr	r1, [r3, #0]
 8004d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	605a      	str	r2, [r3, #4]
				pwmPtr_m3n->ccr_arr[i] = pwmPtr_m1p->ccr_arr[i];
 8004d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004ddc <set_pwm_values+0x1294>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b21      	ldr	r3, [pc, #132]	@ (8004de8 <set_pwm_values+0x12a0>)
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	605a      	str	r2, [r3, #4]
			for (i = 0; i < sz; i++) {
 8004d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004d82:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8004d86:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f4ff ae4c 	bcc.w	8004a28 <set_pwm_values+0xee0>
			}
			// m1n, m2n, m3n, Array drehen
			flip(pwmPtr_m1n->ccr_arr, sz);
 8004d90:	4b13      	ldr	r3, [pc, #76]	@ (8004de0 <set_pwm_values+0x1298>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3304      	adds	r3, #4
 8004d96:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fd3d 	bl	800581c <flip>
			flip(pwmPtr_m2n->ccr_arr, sz);
 8004da2:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <set_pwm_values+0x129c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3304      	adds	r3, #4
 8004da8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004dac:	4611      	mov	r1, r2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fd34 	bl	800581c <flip>
			flip(pwmPtr_m3n->ccr_arr, sz);
 8004db4:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <set_pwm_values+0x12a0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3304      	adds	r3, #4
 8004dba:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fd2b 	bl	800581c <flip>
			// Werte Ausgeben
			for (i = 0; i < sz; i++){
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004dcc:	e068      	b.n	8004ea0 <set_pwm_values+0x1358>
 8004dce:	bf00      	nop
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	200008d8 	.word	0x200008d8
 8004dd8:	200008e0 	.word	0x200008e0
 8004ddc:	200008d0 	.word	0x200008d0
 8004de0:	200008d4 	.word	0x200008d4
 8004de4:	200008dc 	.word	0x200008dc
 8004de8:	200008e4 	.word	0x200008e4
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,
						"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m1n->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu | pwmPtr_m2n->ccr_arr[%lu]: %3lu | pwmPtr_m3p->ccr_arr[%lu]: %3lu | pwmPtr_m3n->ccr_arr[%lu]: %3lu\r\n",
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i],
 8004dec:	4b46      	ldr	r3, [pc, #280]	@ (8004f08 <set_pwm_values+0x13c0>)
 8004dee:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 8004df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	685e      	ldr	r6, [r3, #4]
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i],
 8004dfa:	4b44      	ldr	r3, [pc, #272]	@ (8004f0c <set_pwm_values+0x13c4>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 8004dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	685a      	ldr	r2, [r3, #4]
						i, pwmPtr_m2p->ccr_arr[i], i, pwmPtr_m2n->ccr_arr[i],
 8004e08:	4b41      	ldr	r3, [pc, #260]	@ (8004f10 <set_pwm_values+0x13c8>)
 8004e0a:	6819      	ldr	r1, [r3, #0]
				sprintf(msg_console,
 8004e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	6859      	ldr	r1, [r3, #4]
						i, pwmPtr_m2p->ccr_arr[i], i, pwmPtr_m2n->ccr_arr[i],
 8004e16:	4b3f      	ldr	r3, [pc, #252]	@ (8004f14 <set_pwm_values+0x13cc>)
 8004e18:	6818      	ldr	r0, [r3, #0]
				sprintf(msg_console,
 8004e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4403      	add	r3, r0
 8004e22:	6858      	ldr	r0, [r3, #4]
						i, pwmPtr_m3p->ccr_arr[i], i, pwmPtr_m3n->ccr_arr[i]);
 8004e24:	4b3c      	ldr	r3, [pc, #240]	@ (8004f18 <set_pwm_values+0x13d0>)
 8004e26:	681c      	ldr	r4, [r3, #0]
				sprintf(msg_console,
 8004e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4423      	add	r3, r4
 8004e30:	685c      	ldr	r4, [r3, #4]
						i, pwmPtr_m3p->ccr_arr[i], i, pwmPtr_m3n->ccr_arr[i]);
 8004e32:	4b3a      	ldr	r3, [pc, #232]	@ (8004f1c <set_pwm_values+0x13d4>)
 8004e34:	681d      	ldr	r5, [r3, #0]
				sprintf(msg_console,
 8004e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	442b      	add	r3, r5
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f107 0508 	add.w	r5, r7, #8
 8004e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e4a:	9308      	str	r3, [sp, #32]
 8004e4c:	9407      	str	r4, [sp, #28]
 8004e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e52:	9306      	str	r3, [sp, #24]
 8004e54:	9005      	str	r0, [sp, #20]
 8004e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e5a:	9304      	str	r3, [sp, #16]
 8004e5c:	9103      	str	r1, [sp, #12]
 8004e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e62:	9302      	str	r3, [sp, #8]
 8004e64:	9201      	str	r2, [sp, #4]
 8004e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	4633      	mov	r3, r6
 8004e6e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8004e72:	492b      	ldr	r1, [pc, #172]	@ (8004f20 <set_pwm_values+0x13d8>)
 8004e74:	4628      	mov	r0, r5
 8004e76:	f008 fd05 	bl	800d884 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
						strlen(msg_console), HAL_MAX_DELAY);
 8004e7a:	f107 0308 	add.w	r3, r7, #8
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb fa1e 	bl	80002c0 <strlen>
 8004e84:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	f107 0108 	add.w	r1, r7, #8
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e90:	4824      	ldr	r0, [pc, #144]	@ (8004f24 <set_pwm_values+0x13dc>)
 8004e92:	f007 f872 	bl	800bf7a <HAL_UART_Transmit>
			for (i = 0; i < sz; i++){
 8004e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004ea0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8004ea4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d39f      	bcc.n	8004dec <set_pwm_values+0x12a4>
			}
			break;
 8004eac:	e006      	b.n	8004ebc <set_pwm_values+0x1374>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	491d      	ldr	r1, [pc, #116]	@ (8004f28 <set_pwm_values+0x13e0>)
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f008 fce5 	bl	800d884 <siprintf>
			break;
 8004eba:	bf00      	nop
		}
		break;
 8004ebc:	e01f      	b.n	8004efe <set_pwm_values+0x13b6>
 8004ebe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ec2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d00d      	beq.n	8004ee8 <set_pwm_values+0x13a0>
 8004ecc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ed0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d008      	beq.n	8004eec <set_pwm_values+0x13a4>
		case 2:
			break;
		case 3:
			break;
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004eda:	f107 0308 	add.w	r3, r7, #8
 8004ede:	4912      	ldr	r1, [pc, #72]	@ (8004f28 <set_pwm_values+0x13e0>)
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f008 fccf 	bl	800d884 <siprintf>
			break;
 8004ee6:	e002      	b.n	8004eee <set_pwm_values+0x13a6>
			break;
 8004ee8:	bf00      	nop
 8004eea:	e008      	b.n	8004efe <set_pwm_values+0x13b6>
			break;
 8004eec:	bf00      	nop
		}
		break;
 8004eee:	e006      	b.n	8004efe <set_pwm_values+0x13b6>
	default:
		sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004ef0:	f107 0308 	add.w	r3, r7, #8
 8004ef4:	490c      	ldr	r1, [pc, #48]	@ (8004f28 <set_pwm_values+0x13e0>)
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f008 fcc4 	bl	800d884 <siprintf>
		break;
 8004efc:	bf00      	nop
	}
}
 8004efe:	bf00      	nop
 8004f00:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f08:	200008d0 	.word	0x200008d0
 8004f0c:	200008d4 	.word	0x200008d4
 8004f10:	200008d8 	.word	0x200008d8
 8004f14:	200008dc 	.word	0x200008dc
 8004f18:	200008e0 	.word	0x200008e0
 8004f1c:	200008e4 	.word	0x200008e4
 8004f20:	080106cc 	.word	0x080106cc
 8004f24:	20000808 	.word	0x20000808
 8004f28:	08010574 	.word	0x08010574

08004f2c <stopp_pwm>:

void stopp_pwm(const int stufen, const int level) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b098      	sub	sp, #96	@ 0x60
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	// Debug
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8004f36:	2201      	movs	r2, #1
 8004f38:	2108      	movs	r1, #8
 8004f3a:	48b5      	ldr	r0, [pc, #724]	@ (8005210 <stopp_pwm+0x2e4>)
 8004f3c:	f003 f898 	bl	8008070 <HAL_GPIO_WritePin>
	// Variablen
	char msg_console[80] = ""; // array für Ausgabe
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	f107 0310 	add.w	r3, r7, #16
 8004f48:	224c      	movs	r2, #76	@ 0x4c
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f008 fcfc 	bl	800d94a <memset>
	uint16_t gpio_state = GPIO_PIN_SET;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	switch(stufen){
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	f000 80dd 	beq.w	800511a <stopp_pwm+0x1ee>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	f300 819d 	bgt.w	80052a2 <stopp_pwm+0x376>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d00b      	beq.n	8004f86 <stopp_pwm+0x5a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d051      	beq.n	8005018 <stopp_pwm+0xec>
 8004f74:	e195      	b.n	80052a2 <stopp_pwm+0x376>
	case 1:

		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH1N_NMOS2_LS_GPIO_Port,
 8004f76:	2180      	movs	r1, #128	@ 0x80
 8004f78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f7c:	f003 f860 	bl	8008040 <HAL_GPIO_ReadPin>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004f86:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f3      	bne.n	8004f76 <stopp_pwm+0x4a>
			TIM1_CH1N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8004f8e:	2100      	movs	r1, #0
 8004f90:	48a0      	ldr	r0, [pc, #640]	@ (8005214 <stopp_pwm+0x2e8>)
 8004f92:	f006 fdaf 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8004f96:	2100      	movs	r1, #0
 8004f98:	489e      	ldr	r0, [pc, #632]	@ (8005214 <stopp_pwm+0x2e8>)
 8004f9a:	f005 f9a1 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8004f9e:	e007      	b.n	8004fb0 <stopp_pwm+0x84>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH2N_NMOS4_LS_GPIO_Port,
 8004fa0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fa4:	489c      	ldr	r0, [pc, #624]	@ (8005218 <stopp_pwm+0x2ec>)
 8004fa6:	f003 f84b 	bl	8008040 <HAL_GPIO_ReadPin>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004fb0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1f3      	bne.n	8004fa0 <stopp_pwm+0x74>
			TIM1_CH2N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8004fb8:	2104      	movs	r1, #4
 8004fba:	4896      	ldr	r0, [pc, #600]	@ (8005214 <stopp_pwm+0x2e8>)
 8004fbc:	f006 fd9a 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8004fc0:	2104      	movs	r1, #4
 8004fc2:	4894      	ldr	r0, [pc, #592]	@ (8005214 <stopp_pwm+0x2e8>)
 8004fc4:	f005 f98c 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d003      	beq.n	8004fd6 <stopp_pwm+0xaa>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d006      	beq.n	8004fe2 <stopp_pwm+0xb6>
 8004fd4:	e010      	b.n	8004ff8 <stopp_pwm+0xcc>

		// dynamisch allozierter Speicher freigeben
		switch(level){
		case 2:
			free(pwmPtr_m1p);
 8004fd6:	4b91      	ldr	r3, [pc, #580]	@ (800521c <stopp_pwm+0x2f0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f007 fe82 	bl	800cce4 <free>
			break;
 8004fe0:	e011      	b.n	8005006 <stopp_pwm+0xda>
		case 3:
			free(pwmPtr_m1p);
 8004fe2:	4b8e      	ldr	r3, [pc, #568]	@ (800521c <stopp_pwm+0x2f0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f007 fe7c 	bl	800cce4 <free>
			free(pwmPtr_m1n);
 8004fec:	4b8c      	ldr	r3, [pc, #560]	@ (8005220 <stopp_pwm+0x2f4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f007 fe77 	bl	800cce4 <free>
			break;
 8004ff6:	e006      	b.n	8005006 <stopp_pwm+0xda>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004ff8:	f107 030c 	add.w	r3, r7, #12
 8004ffc:	4989      	ldr	r1, [pc, #548]	@ (8005224 <stopp_pwm+0x2f8>)
 8004ffe:	4618      	mov	r0, r3
 8005000:	f008 fc40 	bl	800d884 <siprintf>
			break;
 8005004:	bf00      	nop
		}
		break;
 8005006:	e153      	b.n	80052b0 <stopp_pwm+0x384>
	case 2:

		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH1N_NMOS2_LS_GPIO_Port,
 8005008:	2180      	movs	r1, #128	@ 0x80
 800500a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800500e:	f003 f817 	bl	8008040 <HAL_GPIO_ReadPin>
 8005012:	4603      	mov	r3, r0
 8005014:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8005018:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f3      	bne.n	8005008 <stopp_pwm+0xdc>
			TIM1_CH1N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8005020:	2100      	movs	r1, #0
 8005022:	487c      	ldr	r0, [pc, #496]	@ (8005214 <stopp_pwm+0x2e8>)
 8005024:	f006 fd66 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8005028:	2100      	movs	r1, #0
 800502a:	487a      	ldr	r0, [pc, #488]	@ (8005214 <stopp_pwm+0x2e8>)
 800502c:	f005 f958 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8005030:	e007      	b.n	8005042 <stopp_pwm+0x116>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH2N_NMOS4_LS_GPIO_Port,
 8005032:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005036:	4878      	ldr	r0, [pc, #480]	@ (8005218 <stopp_pwm+0x2ec>)
 8005038:	f003 f802 	bl	8008040 <HAL_GPIO_ReadPin>
 800503c:	4603      	mov	r3, r0
 800503e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8005042:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f3      	bne.n	8005032 <stopp_pwm+0x106>
			TIM1_CH2N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800504a:	2104      	movs	r1, #4
 800504c:	4871      	ldr	r0, [pc, #452]	@ (8005214 <stopp_pwm+0x2e8>)
 800504e:	f006 fd51 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8005052:	2104      	movs	r1, #4
 8005054:	486f      	ldr	r0, [pc, #444]	@ (8005214 <stopp_pwm+0x2e8>)
 8005056:	f005 f943 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>

		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
 800505a:	e007      	b.n	800506c <stopp_pwm+0x140>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH3N_NMOS2_LS_GPIO_Port,
 800505c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005060:	486d      	ldr	r0, [pc, #436]	@ (8005218 <stopp_pwm+0x2ec>)
 8005062:	f002 ffed 	bl	8008040 <HAL_GPIO_ReadPin>
 8005066:	4603      	mov	r3, r0
 8005068:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 800506c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f3      	bne.n	800505c <stopp_pwm+0x130>
			TIM1_CH3N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8005074:	2108      	movs	r1, #8
 8005076:	4867      	ldr	r0, [pc, #412]	@ (8005214 <stopp_pwm+0x2e8>)
 8005078:	f006 fd3c 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 800507c:	2108      	movs	r1, #8
 800507e:	4865      	ldr	r0, [pc, #404]	@ (8005214 <stopp_pwm+0x2e8>)
 8005080:	f005 f92e 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8005084:	e006      	b.n	8005094 <stopp_pwm+0x168>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH4N_NMOS4_LS_GPIO_Port,
 8005086:	2120      	movs	r1, #32
 8005088:	4861      	ldr	r0, [pc, #388]	@ (8005210 <stopp_pwm+0x2e4>)
 800508a:	f002 ffd9 	bl	8008040 <HAL_GPIO_ReadPin>
 800508e:	4603      	mov	r3, r0
 8005090:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8005094:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f4      	bne.n	8005086 <stopp_pwm+0x15a>
			TIM1_CH4N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 800509c:	210c      	movs	r1, #12
 800509e:	485d      	ldr	r0, [pc, #372]	@ (8005214 <stopp_pwm+0x2e8>)
 80050a0:	f006 fd28 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_4);
 80050a4:	210c      	movs	r1, #12
 80050a6:	485b      	ldr	r0, [pc, #364]	@ (8005214 <stopp_pwm+0x2e8>)
 80050a8:	f005 f91a 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d003      	beq.n	80050ba <stopp_pwm+0x18e>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d00b      	beq.n	80050d0 <stopp_pwm+0x1a4>
 80050b8:	e01f      	b.n	80050fa <stopp_pwm+0x1ce>

		// dynamisch allozierter Speicher freigeben
		switch(level){
		case 2:
			free(pwmPtr_m1p);
 80050ba:	4b58      	ldr	r3, [pc, #352]	@ (800521c <stopp_pwm+0x2f0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f007 fe10 	bl	800cce4 <free>
			free(pwmPtr_m2p);
 80050c4:	4b58      	ldr	r3, [pc, #352]	@ (8005228 <stopp_pwm+0x2fc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f007 fe0b 	bl	800cce4 <free>
			break;
 80050ce:	e01b      	b.n	8005108 <stopp_pwm+0x1dc>
		case 3:
			free(pwmPtr_m1p);
 80050d0:	4b52      	ldr	r3, [pc, #328]	@ (800521c <stopp_pwm+0x2f0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f007 fe05 	bl	800cce4 <free>
			free(pwmPtr_m1n);
 80050da:	4b51      	ldr	r3, [pc, #324]	@ (8005220 <stopp_pwm+0x2f4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f007 fe00 	bl	800cce4 <free>
			free(pwmPtr_m2p);
 80050e4:	4b50      	ldr	r3, [pc, #320]	@ (8005228 <stopp_pwm+0x2fc>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f007 fdfb 	bl	800cce4 <free>
			free(pwmPtr_m2n);
 80050ee:	4b4f      	ldr	r3, [pc, #316]	@ (800522c <stopp_pwm+0x300>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f007 fdf6 	bl	800cce4 <free>
			break;
 80050f8:	e006      	b.n	8005108 <stopp_pwm+0x1dc>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 80050fa:	f107 030c 	add.w	r3, r7, #12
 80050fe:	4949      	ldr	r1, [pc, #292]	@ (8005224 <stopp_pwm+0x2f8>)
 8005100:	4618      	mov	r0, r3
 8005102:	f008 fbbf 	bl	800d884 <siprintf>
			break;
 8005106:	bf00      	nop
		}
		break;
 8005108:	e0d2      	b.n	80052b0 <stopp_pwm+0x384>
	case 3:
		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH1N_NMOS2_LS_GPIO_Port,
 800510a:	2180      	movs	r1, #128	@ 0x80
 800510c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005110:	f002 ff96 	bl	8008040 <HAL_GPIO_ReadPin>
 8005114:	4603      	mov	r3, r0
 8005116:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 800511a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f3      	bne.n	800510a <stopp_pwm+0x1de>
			TIM1_CH1N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8005122:	2100      	movs	r1, #0
 8005124:	483b      	ldr	r0, [pc, #236]	@ (8005214 <stopp_pwm+0x2e8>)
 8005126:	f006 fce5 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800512a:	2100      	movs	r1, #0
 800512c:	4839      	ldr	r0, [pc, #228]	@ (8005214 <stopp_pwm+0x2e8>)
 800512e:	f005 f8d7 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8005132:	e007      	b.n	8005144 <stopp_pwm+0x218>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH2N_NMOS4_LS_GPIO_Port,
 8005134:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005138:	4837      	ldr	r0, [pc, #220]	@ (8005218 <stopp_pwm+0x2ec>)
 800513a:	f002 ff81 	bl	8008040 <HAL_GPIO_ReadPin>
 800513e:	4603      	mov	r3, r0
 8005140:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8005144:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f3      	bne.n	8005134 <stopp_pwm+0x208>
			TIM1_CH2N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800514c:	2104      	movs	r1, #4
 800514e:	4831      	ldr	r0, [pc, #196]	@ (8005214 <stopp_pwm+0x2e8>)
 8005150:	f006 fcd0 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8005154:	2104      	movs	r1, #4
 8005156:	482f      	ldr	r0, [pc, #188]	@ (8005214 <stopp_pwm+0x2e8>)
 8005158:	f005 f8c2 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>

		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
 800515c:	e007      	b.n	800516e <stopp_pwm+0x242>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH3N_NMOS2_LS_GPIO_Port,
 800515e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005162:	482d      	ldr	r0, [pc, #180]	@ (8005218 <stopp_pwm+0x2ec>)
 8005164:	f002 ff6c 	bl	8008040 <HAL_GPIO_ReadPin>
 8005168:	4603      	mov	r3, r0
 800516a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 800516e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f3      	bne.n	800515e <stopp_pwm+0x232>
			TIM1_CH3N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8005176:	2108      	movs	r1, #8
 8005178:	4826      	ldr	r0, [pc, #152]	@ (8005214 <stopp_pwm+0x2e8>)
 800517a:	f006 fcbb 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 800517e:	2108      	movs	r1, #8
 8005180:	4824      	ldr	r0, [pc, #144]	@ (8005214 <stopp_pwm+0x2e8>)
 8005182:	f005 f8ad 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8005186:	e006      	b.n	8005196 <stopp_pwm+0x26a>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH4N_NMOS4_LS_GPIO_Port,
 8005188:	2120      	movs	r1, #32
 800518a:	4821      	ldr	r0, [pc, #132]	@ (8005210 <stopp_pwm+0x2e4>)
 800518c:	f002 ff58 	bl	8008040 <HAL_GPIO_ReadPin>
 8005190:	4603      	mov	r3, r0
 8005192:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8005196:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f4      	bne.n	8005188 <stopp_pwm+0x25c>
			TIM1_CH4N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 800519e:	210c      	movs	r1, #12
 80051a0:	481c      	ldr	r0, [pc, #112]	@ (8005214 <stopp_pwm+0x2e8>)
 80051a2:	f006 fca7 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_4);
 80051a6:	210c      	movs	r1, #12
 80051a8:	481a      	ldr	r0, [pc, #104]	@ (8005214 <stopp_pwm+0x2e8>)
 80051aa:	f005 f899 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>

		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
 80051ae:	e007      	b.n	80051c0 <stopp_pwm+0x294>
			gpio_state = HAL_GPIO_ReadPin(TIM8_CH1N_NMOS2_LS_GPIO_Port,
 80051b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80051b4:	4816      	ldr	r0, [pc, #88]	@ (8005210 <stopp_pwm+0x2e4>)
 80051b6:	f002 ff43 	bl	8008040 <HAL_GPIO_ReadPin>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 80051c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f3      	bne.n	80051b0 <stopp_pwm+0x284>
			TIM8_CH1N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80051c8:	2100      	movs	r1, #0
 80051ca:	4819      	ldr	r0, [pc, #100]	@ (8005230 <stopp_pwm+0x304>)
 80051cc:	f006 fc92 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
 80051d0:	2100      	movs	r1, #0
 80051d2:	4817      	ldr	r0, [pc, #92]	@ (8005230 <stopp_pwm+0x304>)
 80051d4:	f005 f884 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 80051d8:	e007      	b.n	80051ea <stopp_pwm+0x2be>
			gpio_state = HAL_GPIO_ReadPin(TIM8_CH2N_NMOS4_LS_GPIO_Port,
 80051da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051de:	480c      	ldr	r0, [pc, #48]	@ (8005210 <stopp_pwm+0x2e4>)
 80051e0:	f002 ff2e 	bl	8008040 <HAL_GPIO_ReadPin>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 80051ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f3      	bne.n	80051da <stopp_pwm+0x2ae>
			TIM8_CH2N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 80051f2:	2104      	movs	r1, #4
 80051f4:	480e      	ldr	r0, [pc, #56]	@ (8005230 <stopp_pwm+0x304>)
 80051f6:	f006 fc7d 	bl	800baf4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_2);
 80051fa:	2104      	movs	r1, #4
 80051fc:	480c      	ldr	r0, [pc, #48]	@ (8005230 <stopp_pwm+0x304>)
 80051fe:	f005 f86f 	bl	800a2e0 <HAL_TIM_PWM_Stop_DMA>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d015      	beq.n	8005234 <stopp_pwm+0x308>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b03      	cmp	r3, #3
 800520c:	d022      	beq.n	8005254 <stopp_pwm+0x328>
 800520e:	e040      	b.n	8005292 <stopp_pwm+0x366>
 8005210:	48000800 	.word	0x48000800
 8005214:	20000400 	.word	0x20000400
 8005218:	48000400 	.word	0x48000400
 800521c:	200008d0 	.word	0x200008d0
 8005220:	200008d4 	.word	0x200008d4
 8005224:	08010574 	.word	0x08010574
 8005228:	200008d8 	.word	0x200008d8
 800522c:	200008dc 	.word	0x200008dc
 8005230:	2000044c 	.word	0x2000044c

		// dynamisch allozierter Speicher freigeben
		switch(level){
		case 2:
			free(pwmPtr_m1p);
 8005234:	4b2c      	ldr	r3, [pc, #176]	@ (80052e8 <stopp_pwm+0x3bc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f007 fd53 	bl	800cce4 <free>
			free(pwmPtr_m2p);
 800523e:	4b2b      	ldr	r3, [pc, #172]	@ (80052ec <stopp_pwm+0x3c0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f007 fd4e 	bl	800cce4 <free>
			free(pwmPtr_m3p);
 8005248:	4b29      	ldr	r3, [pc, #164]	@ (80052f0 <stopp_pwm+0x3c4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f007 fd49 	bl	800cce4 <free>
			break;
 8005252:	e025      	b.n	80052a0 <stopp_pwm+0x374>
		case 3:
			free(pwmPtr_m1p);
 8005254:	4b24      	ldr	r3, [pc, #144]	@ (80052e8 <stopp_pwm+0x3bc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f007 fd43 	bl	800cce4 <free>
			free(pwmPtr_m1n);
 800525e:	4b25      	ldr	r3, [pc, #148]	@ (80052f4 <stopp_pwm+0x3c8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f007 fd3e 	bl	800cce4 <free>
			free(pwmPtr_m2p);
 8005268:	4b20      	ldr	r3, [pc, #128]	@ (80052ec <stopp_pwm+0x3c0>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f007 fd39 	bl	800cce4 <free>
			free(pwmPtr_m2n);
 8005272:	4b21      	ldr	r3, [pc, #132]	@ (80052f8 <stopp_pwm+0x3cc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f007 fd34 	bl	800cce4 <free>
			free(pwmPtr_m3p);
 800527c:	4b1c      	ldr	r3, [pc, #112]	@ (80052f0 <stopp_pwm+0x3c4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f007 fd2f 	bl	800cce4 <free>
			free(pwmPtr_m3n);
 8005286:	4b1d      	ldr	r3, [pc, #116]	@ (80052fc <stopp_pwm+0x3d0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f007 fd2a 	bl	800cce4 <free>
			break;
 8005290:	e006      	b.n	80052a0 <stopp_pwm+0x374>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8005292:	f107 030c 	add.w	r3, r7, #12
 8005296:	491a      	ldr	r1, [pc, #104]	@ (8005300 <stopp_pwm+0x3d4>)
 8005298:	4618      	mov	r0, r3
 800529a:	f008 faf3 	bl	800d884 <siprintf>
			break;
 800529e:	bf00      	nop
		}
		break;
 80052a0:	e006      	b.n	80052b0 <stopp_pwm+0x384>
	case 4:
	default:
		sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 80052a2:	f107 030c 	add.w	r3, r7, #12
 80052a6:	4916      	ldr	r1, [pc, #88]	@ (8005300 <stopp_pwm+0x3d4>)
 80052a8:	4618      	mov	r0, r3
 80052aa:	f008 faeb 	bl	800d884 <siprintf>
		break;
 80052ae:	bf00      	nop
	}
	// Stopp Master Timer
	HAL_TIM_PWM_Stop(&htim20, TIM_CHANNEL_3);
 80052b0:	2108      	movs	r1, #8
 80052b2:	4814      	ldr	r0, [pc, #80]	@ (8005304 <stopp_pwm+0x3d8>)
 80052b4:	f004 fd4c 	bl	8009d50 <HAL_TIM_PWM_Stop>
	// Debug
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80052b8:	2200      	movs	r2, #0
 80052ba:	2108      	movs	r1, #8
 80052bc:	4812      	ldr	r0, [pc, #72]	@ (8005308 <stopp_pwm+0x3dc>)
 80052be:	f002 fed7 	bl	8008070 <HAL_GPIO_WritePin>
	// PuTTY Ausgabe
	HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
 80052c2:	f107 030c 	add.w	r3, r7, #12
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fa fffa 	bl	80002c0 <strlen>
 80052cc:	4603      	mov	r3, r0
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f107 010c 	add.w	r1, r7, #12
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	480c      	ldr	r0, [pc, #48]	@ (800530c <stopp_pwm+0x3e0>)
 80052da:	f006 fe4e 	bl	800bf7a <HAL_UART_Transmit>
}
 80052de:	bf00      	nop
 80052e0:	3760      	adds	r7, #96	@ 0x60
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	200008d0 	.word	0x200008d0
 80052ec:	200008d8 	.word	0x200008d8
 80052f0:	200008e0 	.word	0x200008e0
 80052f4:	200008d4 	.word	0x200008d4
 80052f8:	200008dc 	.word	0x200008dc
 80052fc:	200008e4 	.word	0x200008e4
 8005300:	08010574 	.word	0x08010574
 8005304:	2000057c 	.word	0x2000057c
 8005308:	48000800 	.word	0x48000800
 800530c:	20000808 	.word	0x20000808

08005310 <start_pwm>:

void start_pwm(const int stufen, const int level)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b096      	sub	sp, #88	@ 0x58
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
	// Variablen
	char msg_console[80] = ""; // array für Ausgabe
 800531a:	2300      	movs	r3, #0
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	f107 030c 	add.w	r3, r7, #12
 8005322:	224c      	movs	r2, #76	@ 0x4c
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f008 fb0f 	bl	800d94a <memset>

	switch (stufen) {
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b03      	cmp	r3, #3
 8005330:	f000 80e1 	beq.w	80054f6 <start_pwm+0x1e6>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b03      	cmp	r3, #3
 8005338:	f300 81b3 	bgt.w	80056a2 <start_pwm+0x392>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d003      	beq.n	800534a <start_pwm+0x3a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d04d      	beq.n	80053e4 <start_pwm+0xd4>
 8005348:	e1ab      	b.n	80056a2 <start_pwm+0x392>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d003      	beq.n	8005358 <start_pwm+0x48>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d01f      	beq.n	8005396 <start_pwm+0x86>
 8005356:	e03d      	b.n	80053d4 <start_pwm+0xc4>
	case 1:
		switch (level) {
		case 2:
			// TIM1_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8005358:	4b98      	ldr	r3, [pc, #608]	@ (80055bc <start_pwm+0x2ac>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	1d1a      	adds	r2, r3, #4
 800535e:	4b97      	ldr	r3, [pc, #604]	@ (80055bc <start_pwm+0x2ac>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 8005364:	b29b      	uxth	r3, r3
 8005366:	2100      	movs	r1, #0
 8005368:	4895      	ldr	r0, [pc, #596]	@ (80055c0 <start_pwm+0x2b0>)
 800536a:	f004 fd8d 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800536e:	2100      	movs	r1, #0
 8005370:	4893      	ldr	r0, [pc, #588]	@ (80055c0 <start_pwm+0x2b0>)
 8005372:	f006 fafd 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8005376:	4b91      	ldr	r3, [pc, #580]	@ (80055bc <start_pwm+0x2ac>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1d1a      	adds	r2, r3, #4
 800537c:	4b8f      	ldr	r3, [pc, #572]	@ (80055bc <start_pwm+0x2ac>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 8005382:	b29b      	uxth	r3, r3
 8005384:	2104      	movs	r1, #4
 8005386:	488e      	ldr	r0, [pc, #568]	@ (80055c0 <start_pwm+0x2b0>)
 8005388:	f004 fd7e 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800538c:	2104      	movs	r1, #4
 800538e:	488c      	ldr	r0, [pc, #560]	@ (80055c0 <start_pwm+0x2b0>)
 8005390:	f006 faee 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			break;
 8005394:	e025      	b.n	80053e2 <start_pwm+0xd2>
		case 3:
			// TIM1 CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8005396:	4b89      	ldr	r3, [pc, #548]	@ (80055bc <start_pwm+0x2ac>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	1d1a      	adds	r2, r3, #4
 800539c:	4b87      	ldr	r3, [pc, #540]	@ (80055bc <start_pwm+0x2ac>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2100      	movs	r1, #0
 80053a6:	4886      	ldr	r0, [pc, #536]	@ (80055c0 <start_pwm+0x2b0>)
 80053a8:	f004 fd6e 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80053ac:	2100      	movs	r1, #0
 80053ae:	4884      	ldr	r0, [pc, #528]	@ (80055c0 <start_pwm+0x2b0>)
 80053b0:	f006 fade 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1n->ccr_arr, pwmPtr_m1n->NrOfEl);
 80053b4:	4b83      	ldr	r3, [pc, #524]	@ (80055c4 <start_pwm+0x2b4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	1d1a      	adds	r2, r3, #4
 80053ba:	4b82      	ldr	r3, [pc, #520]	@ (80055c4 <start_pwm+0x2b4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2104      	movs	r1, #4
 80053c4:	487e      	ldr	r0, [pc, #504]	@ (80055c0 <start_pwm+0x2b0>)
 80053c6:	f004 fd5f 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80053ca:	2104      	movs	r1, #4
 80053cc:	487c      	ldr	r0, [pc, #496]	@ (80055c0 <start_pwm+0x2b0>)
 80053ce:	f006 facf 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			break;
 80053d2:	e006      	b.n	80053e2 <start_pwm+0xd2>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 80053d4:	f107 0308 	add.w	r3, r7, #8
 80053d8:	497b      	ldr	r1, [pc, #492]	@ (80055c8 <start_pwm+0x2b8>)
 80053da:	4618      	mov	r0, r3
 80053dc:	f008 fa52 	bl	800d884 <siprintf>
			break;
 80053e0:	bf00      	nop
		}
		break;
 80053e2:	e165      	b.n	80056b0 <start_pwm+0x3a0>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d003      	beq.n	80053f2 <start_pwm+0xe2>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d03d      	beq.n	800546c <start_pwm+0x15c>
 80053f0:	e079      	b.n	80054e6 <start_pwm+0x1d6>
	case 2:
		switch (level) {
		case 2:
			// TIM1_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 80053f2:	4b72      	ldr	r3, [pc, #456]	@ (80055bc <start_pwm+0x2ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	1d1a      	adds	r2, r3, #4
 80053f8:	4b70      	ldr	r3, [pc, #448]	@ (80055bc <start_pwm+0x2ac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2100      	movs	r1, #0
 8005402:	486f      	ldr	r0, [pc, #444]	@ (80055c0 <start_pwm+0x2b0>)
 8005404:	f004 fd40 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8005408:	2100      	movs	r1, #0
 800540a:	486d      	ldr	r0, [pc, #436]	@ (80055c0 <start_pwm+0x2b0>)
 800540c:	f006 fab0 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8005410:	4b6a      	ldr	r3, [pc, #424]	@ (80055bc <start_pwm+0x2ac>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	1d1a      	adds	r2, r3, #4
 8005416:	4b69      	ldr	r3, [pc, #420]	@ (80055bc <start_pwm+0x2ac>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 800541c:	b29b      	uxth	r3, r3
 800541e:	2104      	movs	r1, #4
 8005420:	4867      	ldr	r0, [pc, #412]	@ (80055c0 <start_pwm+0x2b0>)
 8005422:	f004 fd31 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8005426:	2104      	movs	r1, #4
 8005428:	4865      	ldr	r0, [pc, #404]	@ (80055c0 <start_pwm+0x2b0>)
 800542a:	f006 faa1 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1_CH3 & CH3N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 800542e:	4b67      	ldr	r3, [pc, #412]	@ (80055cc <start_pwm+0x2bc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	1d1a      	adds	r2, r3, #4
 8005434:	4b65      	ldr	r3, [pc, #404]	@ (80055cc <start_pwm+0x2bc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
 800543a:	b29b      	uxth	r3, r3
 800543c:	2108      	movs	r1, #8
 800543e:	4860      	ldr	r0, [pc, #384]	@ (80055c0 <start_pwm+0x2b0>)
 8005440:	f004 fd22 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8005444:	2108      	movs	r1, #8
 8005446:	485e      	ldr	r0, [pc, #376]	@ (80055c0 <start_pwm+0x2b0>)
 8005448:	f006 fa92 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1 CH4 & CH4N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 800544c:	4b5f      	ldr	r3, [pc, #380]	@ (80055cc <start_pwm+0x2bc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	4b5e      	ldr	r3, [pc, #376]	@ (80055cc <start_pwm+0x2bc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
 8005458:	b29b      	uxth	r3, r3
 800545a:	210c      	movs	r1, #12
 800545c:	4858      	ldr	r0, [pc, #352]	@ (80055c0 <start_pwm+0x2b0>)
 800545e:	f004 fd13 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 8005462:	210c      	movs	r1, #12
 8005464:	4856      	ldr	r0, [pc, #344]	@ (80055c0 <start_pwm+0x2b0>)
 8005466:	f006 fa83 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			break;
 800546a:	e043      	b.n	80054f4 <start_pwm+0x1e4>
		case 3:
			// TIM1_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 800546c:	4b53      	ldr	r3, [pc, #332]	@ (80055bc <start_pwm+0x2ac>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	1d1a      	adds	r2, r3, #4
 8005472:	4b52      	ldr	r3, [pc, #328]	@ (80055bc <start_pwm+0x2ac>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 8005478:	b29b      	uxth	r3, r3
 800547a:	2100      	movs	r1, #0
 800547c:	4850      	ldr	r0, [pc, #320]	@ (80055c0 <start_pwm+0x2b0>)
 800547e:	f004 fd03 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8005482:	2100      	movs	r1, #0
 8005484:	484e      	ldr	r0, [pc, #312]	@ (80055c0 <start_pwm+0x2b0>)
 8005486:	f006 fa73 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1n->ccr_arr, pwmPtr_m1n->NrOfEl);
 800548a:	4b4e      	ldr	r3, [pc, #312]	@ (80055c4 <start_pwm+0x2b4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	4b4c      	ldr	r3, [pc, #304]	@ (80055c4 <start_pwm+0x2b4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 8005496:	b29b      	uxth	r3, r3
 8005498:	2104      	movs	r1, #4
 800549a:	4849      	ldr	r0, [pc, #292]	@ (80055c0 <start_pwm+0x2b0>)
 800549c:	f004 fcf4 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80054a0:	2104      	movs	r1, #4
 80054a2:	4847      	ldr	r0, [pc, #284]	@ (80055c0 <start_pwm+0x2b0>)
 80054a4:	f006 fa64 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1_CH3 & CH3N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 80054a8:	4b48      	ldr	r3, [pc, #288]	@ (80055cc <start_pwm+0x2bc>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	1d1a      	adds	r2, r3, #4
 80054ae:	4b47      	ldr	r3, [pc, #284]	@ (80055cc <start_pwm+0x2bc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2108      	movs	r1, #8
 80054b8:	4841      	ldr	r0, [pc, #260]	@ (80055c0 <start_pwm+0x2b0>)
 80054ba:	f004 fce5 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80054be:	2108      	movs	r1, #8
 80054c0:	483f      	ldr	r0, [pc, #252]	@ (80055c0 <start_pwm+0x2b0>)
 80054c2:	f006 fa55 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1 CH4 & CH4N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
					(uint32_t*) pwmPtr_m2n->ccr_arr, pwmPtr_m2n->NrOfEl);
 80054c6:	4b42      	ldr	r3, [pc, #264]	@ (80055d0 <start_pwm+0x2c0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	1d1a      	adds	r2, r3, #4
 80054cc:	4b40      	ldr	r3, [pc, #256]	@ (80055d0 <start_pwm+0x2c0>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	210c      	movs	r1, #12
 80054d6:	483a      	ldr	r0, [pc, #232]	@ (80055c0 <start_pwm+0x2b0>)
 80054d8:	f004 fcd6 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 80054dc:	210c      	movs	r1, #12
 80054de:	4838      	ldr	r0, [pc, #224]	@ (80055c0 <start_pwm+0x2b0>)
 80054e0:	f006 fa46 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			break;
 80054e4:	e006      	b.n	80054f4 <start_pwm+0x1e4>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	4937      	ldr	r1, [pc, #220]	@ (80055c8 <start_pwm+0x2b8>)
 80054ec:	4618      	mov	r0, r3
 80054ee:	f008 f9c9 	bl	800d884 <siprintf>
			break;
 80054f2:	bf00      	nop
		}
		break;
 80054f4:	e0dc      	b.n	80056b0 <start_pwm+0x3a0>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d003      	beq.n	8005504 <start_pwm+0x1f4>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d06c      	beq.n	80055dc <start_pwm+0x2cc>
 8005502:	e0c6      	b.n	8005692 <start_pwm+0x382>
	case 3:
		switch (level) {
		case 2:
			// TIM1_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8005504:	4b2d      	ldr	r3, [pc, #180]	@ (80055bc <start_pwm+0x2ac>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	1d1a      	adds	r2, r3, #4
 800550a:	4b2c      	ldr	r3, [pc, #176]	@ (80055bc <start_pwm+0x2ac>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 8005510:	b29b      	uxth	r3, r3
 8005512:	2100      	movs	r1, #0
 8005514:	482a      	ldr	r0, [pc, #168]	@ (80055c0 <start_pwm+0x2b0>)
 8005516:	f004 fcb7 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800551a:	2100      	movs	r1, #0
 800551c:	4828      	ldr	r0, [pc, #160]	@ (80055c0 <start_pwm+0x2b0>)
 800551e:	f006 fa27 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8005522:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <start_pwm+0x2ac>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	1d1a      	adds	r2, r3, #4
 8005528:	4b24      	ldr	r3, [pc, #144]	@ (80055bc <start_pwm+0x2ac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 800552e:	b29b      	uxth	r3, r3
 8005530:	2104      	movs	r1, #4
 8005532:	4823      	ldr	r0, [pc, #140]	@ (80055c0 <start_pwm+0x2b0>)
 8005534:	f004 fca8 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8005538:	2104      	movs	r1, #4
 800553a:	4821      	ldr	r0, [pc, #132]	@ (80055c0 <start_pwm+0x2b0>)
 800553c:	f006 fa18 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1_CH3 & CH3N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 8005540:	4b22      	ldr	r3, [pc, #136]	@ (80055cc <start_pwm+0x2bc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	1d1a      	adds	r2, r3, #4
 8005546:	4b21      	ldr	r3, [pc, #132]	@ (80055cc <start_pwm+0x2bc>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
 800554c:	b29b      	uxth	r3, r3
 800554e:	2108      	movs	r1, #8
 8005550:	481b      	ldr	r0, [pc, #108]	@ (80055c0 <start_pwm+0x2b0>)
 8005552:	f004 fc99 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8005556:	2108      	movs	r1, #8
 8005558:	4819      	ldr	r0, [pc, #100]	@ (80055c0 <start_pwm+0x2b0>)
 800555a:	f006 fa09 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1 CH4 & CH4N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 800555e:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <start_pwm+0x2bc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	1d1a      	adds	r2, r3, #4
 8005564:	4b19      	ldr	r3, [pc, #100]	@ (80055cc <start_pwm+0x2bc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
 800556a:	b29b      	uxth	r3, r3
 800556c:	210c      	movs	r1, #12
 800556e:	4814      	ldr	r0, [pc, #80]	@ (80055c0 <start_pwm+0x2b0>)
 8005570:	f004 fc8a 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 8005574:	210c      	movs	r1, #12
 8005576:	4812      	ldr	r0, [pc, #72]	@ (80055c0 <start_pwm+0x2b0>)
 8005578:	f006 f9fa 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM8_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m3p->ccr_arr, pwmPtr_m3p->NrOfEl);
 800557c:	4b15      	ldr	r3, [pc, #84]	@ (80055d4 <start_pwm+0x2c4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	1d1a      	adds	r2, r3, #4
 8005582:	4b14      	ldr	r3, [pc, #80]	@ (80055d4 <start_pwm+0x2c4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1,
 8005588:	b29b      	uxth	r3, r3
 800558a:	2100      	movs	r1, #0
 800558c:	4812      	ldr	r0, [pc, #72]	@ (80055d8 <start_pwm+0x2c8>)
 800558e:	f004 fc7b 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8005592:	2100      	movs	r1, #0
 8005594:	4810      	ldr	r0, [pc, #64]	@ (80055d8 <start_pwm+0x2c8>)
 8005596:	f006 f9eb 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM8 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m3p->ccr_arr, pwmPtr_m3p->NrOfEl);
 800559a:	4b0e      	ldr	r3, [pc, #56]	@ (80055d4 <start_pwm+0x2c4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	1d1a      	adds	r2, r3, #4
 80055a0:	4b0c      	ldr	r3, [pc, #48]	@ (80055d4 <start_pwm+0x2c4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2,
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2104      	movs	r1, #4
 80055aa:	480b      	ldr	r0, [pc, #44]	@ (80055d8 <start_pwm+0x2c8>)
 80055ac:	f004 fc6c 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80055b0:	2104      	movs	r1, #4
 80055b2:	4809      	ldr	r0, [pc, #36]	@ (80055d8 <start_pwm+0x2c8>)
 80055b4:	f006 f9dc 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			break;
 80055b8:	e072      	b.n	80056a0 <start_pwm+0x390>
 80055ba:	bf00      	nop
 80055bc:	200008d0 	.word	0x200008d0
 80055c0:	20000400 	.word	0x20000400
 80055c4:	200008d4 	.word	0x200008d4
 80055c8:	08010574 	.word	0x08010574
 80055cc:	200008d8 	.word	0x200008d8
 80055d0:	200008dc 	.word	0x200008dc
 80055d4:	200008e0 	.word	0x200008e0
 80055d8:	2000044c 	.word	0x2000044c
		case 3:
			// TIM1_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 80055dc:	4b3f      	ldr	r3, [pc, #252]	@ (80056dc <start_pwm+0x3cc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	1d1a      	adds	r2, r3, #4
 80055e2:	4b3e      	ldr	r3, [pc, #248]	@ (80056dc <start_pwm+0x3cc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2100      	movs	r1, #0
 80055ec:	483c      	ldr	r0, [pc, #240]	@ (80056e0 <start_pwm+0x3d0>)
 80055ee:	f004 fc4b 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80055f2:	2100      	movs	r1, #0
 80055f4:	483a      	ldr	r0, [pc, #232]	@ (80056e0 <start_pwm+0x3d0>)
 80055f6:	f006 f9bb 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1n->ccr_arr, pwmPtr_m1n->NrOfEl);
 80055fa:	4b3a      	ldr	r3, [pc, #232]	@ (80056e4 <start_pwm+0x3d4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	1d1a      	adds	r2, r3, #4
 8005600:	4b38      	ldr	r3, [pc, #224]	@ (80056e4 <start_pwm+0x3d4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 8005606:	b29b      	uxth	r3, r3
 8005608:	2104      	movs	r1, #4
 800560a:	4835      	ldr	r0, [pc, #212]	@ (80056e0 <start_pwm+0x3d0>)
 800560c:	f004 fc3c 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8005610:	2104      	movs	r1, #4
 8005612:	4833      	ldr	r0, [pc, #204]	@ (80056e0 <start_pwm+0x3d0>)
 8005614:	f006 f9ac 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1_CH3 & CH3N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 8005618:	4b33      	ldr	r3, [pc, #204]	@ (80056e8 <start_pwm+0x3d8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	1d1a      	adds	r2, r3, #4
 800561e:	4b32      	ldr	r3, [pc, #200]	@ (80056e8 <start_pwm+0x3d8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
 8005624:	b29b      	uxth	r3, r3
 8005626:	2108      	movs	r1, #8
 8005628:	482d      	ldr	r0, [pc, #180]	@ (80056e0 <start_pwm+0x3d0>)
 800562a:	f004 fc2d 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800562e:	2108      	movs	r1, #8
 8005630:	482b      	ldr	r0, [pc, #172]	@ (80056e0 <start_pwm+0x3d0>)
 8005632:	f006 f99d 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM1 CH4 & CH4N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
					(uint32_t*) pwmPtr_m2n->ccr_arr, pwmPtr_m2n->NrOfEl);
 8005636:	4b2d      	ldr	r3, [pc, #180]	@ (80056ec <start_pwm+0x3dc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	1d1a      	adds	r2, r3, #4
 800563c:	4b2b      	ldr	r3, [pc, #172]	@ (80056ec <start_pwm+0x3dc>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
 8005642:	b29b      	uxth	r3, r3
 8005644:	210c      	movs	r1, #12
 8005646:	4826      	ldr	r0, [pc, #152]	@ (80056e0 <start_pwm+0x3d0>)
 8005648:	f004 fc1e 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 800564c:	210c      	movs	r1, #12
 800564e:	4824      	ldr	r0, [pc, #144]	@ (80056e0 <start_pwm+0x3d0>)
 8005650:	f006 f98e 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM8_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m3p->ccr_arr, pwmPtr_m3p->NrOfEl);
 8005654:	4b26      	ldr	r3, [pc, #152]	@ (80056f0 <start_pwm+0x3e0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	1d1a      	adds	r2, r3, #4
 800565a:	4b25      	ldr	r3, [pc, #148]	@ (80056f0 <start_pwm+0x3e0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1,
 8005660:	b29b      	uxth	r3, r3
 8005662:	2100      	movs	r1, #0
 8005664:	4823      	ldr	r0, [pc, #140]	@ (80056f4 <start_pwm+0x3e4>)
 8005666:	f004 fc0f 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 800566a:	2100      	movs	r1, #0
 800566c:	4821      	ldr	r0, [pc, #132]	@ (80056f4 <start_pwm+0x3e4>)
 800566e:	f006 f97f 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			// TIM8 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m3n->ccr_arr, pwmPtr_m3n->NrOfEl);
 8005672:	4b21      	ldr	r3, [pc, #132]	@ (80056f8 <start_pwm+0x3e8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1d1a      	adds	r2, r3, #4
 8005678:	4b1f      	ldr	r3, [pc, #124]	@ (80056f8 <start_pwm+0x3e8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2,
 800567e:	b29b      	uxth	r3, r3
 8005680:	2104      	movs	r1, #4
 8005682:	481c      	ldr	r0, [pc, #112]	@ (80056f4 <start_pwm+0x3e4>)
 8005684:	f004 fc00 	bl	8009e88 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8005688:	2104      	movs	r1, #4
 800568a:	481a      	ldr	r0, [pc, #104]	@ (80056f4 <start_pwm+0x3e4>)
 800568c:	f006 f970 	bl	800b970 <HAL_TIMEx_PWMN_Start>
			break;
 8005690:	e006      	b.n	80056a0 <start_pwm+0x390>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8005692:	f107 0308 	add.w	r3, r7, #8
 8005696:	4919      	ldr	r1, [pc, #100]	@ (80056fc <start_pwm+0x3ec>)
 8005698:	4618      	mov	r0, r3
 800569a:	f008 f8f3 	bl	800d884 <siprintf>
			break;
 800569e:	bf00      	nop
		}
		break;
 80056a0:	e006      	b.n	80056b0 <start_pwm+0x3a0>
	case 4:
	default:
		sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 80056a2:	f107 0308 	add.w	r3, r7, #8
 80056a6:	4915      	ldr	r1, [pc, #84]	@ (80056fc <start_pwm+0x3ec>)
 80056a8:	4618      	mov	r0, r3
 80056aa:	f008 f8eb 	bl	800d884 <siprintf>
		break;
 80056ae:	bf00      	nop
	}
	// Start Master Timer for Synchronisation
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 80056b0:	2108      	movs	r1, #8
 80056b2:	4813      	ldr	r0, [pc, #76]	@ (8005700 <start_pwm+0x3f0>)
 80056b4:	f004 fa3a 	bl	8009b2c <HAL_TIM_PWM_Start>
	// PuTTY Ausgabe
	HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
 80056b8:	f107 0308 	add.w	r3, r7, #8
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fa fdff 	bl	80002c0 <strlen>
 80056c2:	4603      	mov	r3, r0
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	f107 0108 	add.w	r1, r7, #8
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295
 80056ce:	480d      	ldr	r0, [pc, #52]	@ (8005704 <start_pwm+0x3f4>)
 80056d0:	f006 fc53 	bl	800bf7a <HAL_UART_Transmit>
}
 80056d4:	bf00      	nop
 80056d6:	3758      	adds	r7, #88	@ 0x58
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	200008d0 	.word	0x200008d0
 80056e0:	20000400 	.word	0x20000400
 80056e4:	200008d4 	.word	0x200008d4
 80056e8:	200008d8 	.word	0x200008d8
 80056ec:	200008dc 	.word	0x200008dc
 80056f0:	200008e0 	.word	0x200008e0
 80056f4:	2000044c 	.word	0x2000044c
 80056f8:	200008e4 	.word	0x200008e4
 80056fc:	08010574 	.word	0x08010574
 8005700:	2000057c 	.word	0x2000057c
 8005704:	20000808 	.word	0x20000808

08005708 <set_display>:

void set_display(const int stufen, const int level){
 8005708:	b580      	push	{r7, lr}
 800570a:	b08c      	sub	sp, #48	@ 0x30
 800570c:	af04      	add	r7, sp, #16
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	// Ausgabe Display
	char msg_display[20];
	fillScreen(BLACK);
 8005712:	2000      	movs	r0, #0
 8005714:	f7fb fd44 	bl	80011a0 <fillScreen>

	ST7735_WriteString(0, 0, "State: SINUS", Font_7x10, GREEN, BLACK);
 8005718:	4b26      	ldr	r3, [pc, #152]	@ (80057b4 <set_display+0xac>)
 800571a:	2200      	movs	r2, #0
 800571c:	9202      	str	r2, [sp, #8]
 800571e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8005722:	9201      	str	r2, [sp, #4]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	9200      	str	r2, [sp, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a23      	ldr	r2, [pc, #140]	@ (80057b8 <set_display+0xb0>)
 800572c:	2100      	movs	r1, #0
 800572e:	2000      	movs	r0, #0
 8005730:	f7fb ffa4 	bl	800167c <ST7735_WriteString>
	drawFastHLine(0, next_line, 128, WHITE);
 8005734:	230c      	movs	r3, #12
 8005736:	b219      	sxth	r1, r3
 8005738:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800573c:	2280      	movs	r2, #128	@ 0x80
 800573e:	2000      	movs	r0, #0
 8005740:	f7fb fd08 	bl	8001154 <drawFastHLine>

	sprintf(msg_display, "Stufen: %u", stufen);
 8005744:	f107 030c 	add.w	r3, r7, #12
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	491c      	ldr	r1, [pc, #112]	@ (80057bc <set_display+0xb4>)
 800574c:	4618      	mov	r0, r3
 800574e:	f008 f899 	bl	800d884 <siprintf>
	ST7735_WriteString(0, 2*next_line, msg_display, Font_7x10, GREEN, BLACK);
 8005752:	230c      	movs	r3, #12
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	b299      	uxth	r1, r3
 8005758:	4b16      	ldr	r3, [pc, #88]	@ (80057b4 <set_display+0xac>)
 800575a:	f107 000c 	add.w	r0, r7, #12
 800575e:	2200      	movs	r2, #0
 8005760:	9202      	str	r2, [sp, #8]
 8005762:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8005766:	9201      	str	r2, [sp, #4]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	9200      	str	r2, [sp, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4602      	mov	r2, r0
 8005770:	2000      	movs	r0, #0
 8005772:	f7fb ff83 	bl	800167c <ST7735_WriteString>

	sprintf(msg_display, "Level:  %u", level);
 8005776:	f107 030c 	add.w	r3, r7, #12
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	4910      	ldr	r1, [pc, #64]	@ (80057c0 <set_display+0xb8>)
 800577e:	4618      	mov	r0, r3
 8005780:	f008 f880 	bl	800d884 <siprintf>
	ST7735_WriteString(0, 3*next_line, msg_display, Font_7x10, GREEN, BLACK);
 8005784:	230c      	movs	r3, #12
 8005786:	461a      	mov	r2, r3
 8005788:	0052      	lsls	r2, r2, #1
 800578a:	4413      	add	r3, r2
 800578c:	b299      	uxth	r1, r3
 800578e:	4b09      	ldr	r3, [pc, #36]	@ (80057b4 <set_display+0xac>)
 8005790:	f107 000c 	add.w	r0, r7, #12
 8005794:	2200      	movs	r2, #0
 8005796:	9202      	str	r2, [sp, #8]
 8005798:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800579c:	9201      	str	r2, [sp, #4]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	9200      	str	r2, [sp, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4602      	mov	r2, r0
 80057a6:	2000      	movs	r0, #0
 80057a8:	f7fb ff68 	bl	800167c <ST7735_WriteString>
}
 80057ac:	bf00      	nop
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000000 	.word	0x20000000
 80057b8:	08010794 	.word	0x08010794
 80057bc:	080107a4 	.word	0x080107a4
 80057c0:	080107b0 	.word	0x080107b0

080057c4 <get_next_line>:

uint8_t get_next_line(void){
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
	return next_line;
 80057c8:	230c      	movs	r3, #12
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <get_f0>:

uint32_t get_f0(void) {
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
	return f0;
 80057d8:	2364      	movs	r3, #100	@ 0x64
}
 80057da:	4618      	mov	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <get_A0>:

float get_A0(void) {
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
	return A0;
 80057e8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80057ec:	ee07 3a90 	vmov	s15, r3
}
 80057f0:	eeb0 0a67 	vmov.f32	s0, s15
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <get_level>:

int get_level(void) {
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
	return level;
 8005800:	2303      	movs	r3, #3
}
 8005802:	4618      	mov	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <get_stufen>:

int get_stufen(void) {
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
	return stufen;
 8005810:	2303      	movs	r3, #3
}
 8005812:	4618      	mov	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <flip>:
    }
}

// Function to flip array values
void flip(uint32_t arr[], const int n)
{
 800581c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8005820:	b087      	sub	sp, #28
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
 8005828:	466b      	mov	r3, sp
 800582a:	4618      	mov	r0, r3
	// Storing fliped version of array
	uint32_t temp[n];
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	3b01      	subs	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2200      	movs	r2, #0
 8005836:	4698      	mov	r8, r3
 8005838:	4691      	mov	r9, r2
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8005846:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800584a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2200      	movs	r2, #0
 8005852:	461c      	mov	r4, r3
 8005854:	4615      	mov	r5, r2
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	016b      	lsls	r3, r5, #5
 8005860:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8005864:	0162      	lsls	r2, r4, #5
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	3307      	adds	r3, #7
 800586c:	08db      	lsrs	r3, r3, #3
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	ebad 0d03 	sub.w	sp, sp, r3
 8005874:	466b      	mov	r3, sp
 8005876:	3303      	adds	r3, #3
 8005878:	089b      	lsrs	r3, r3, #2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	60bb      	str	r3, [r7, #8]

	// Storing the n - d elements of
	// array arr[] to the front of temp[]
	for (int i = 0; i < n; i++) {
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	e00e      	b.n	80058a2 <flip+0x86>
		temp[n-i-1] = arr[i];
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	4413      	add	r3, r2
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	1a8a      	subs	r2, r1, r2
 8005892:	3a01      	subs	r2, #1
 8005894:	6819      	ldr	r1, [r3, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < n; i++) {
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	3301      	adds	r3, #1
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	dbec      	blt.n	8005884 <flip+0x68>
	}

	// Copying the elements of temp[] in arr[]
	// to get the final rotated array
	for (int i = 0; i < n; i++) {
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	e00b      	b.n	80058c8 <flip+0xac>
		arr[i] = temp[i];
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4413      	add	r3, r2
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	6939      	ldr	r1, [r7, #16]
 80058bc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80058c0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	3301      	adds	r3, #1
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	dbef      	blt.n	80058b0 <flip+0x94>
 80058d0:	4685      	mov	sp, r0
	}
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80058dc:	4770      	bx	lr
	...

080058e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80058e0:	480d      	ldr	r0, [pc, #52]	@ (8005918 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80058e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80058e4:	f7fd ff5c 	bl	80037a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058e8:	480c      	ldr	r0, [pc, #48]	@ (800591c <LoopForever+0x6>)
  ldr r1, =_edata
 80058ea:	490d      	ldr	r1, [pc, #52]	@ (8005920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80058ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005924 <LoopForever+0xe>)
  movs r3, #0
 80058ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80058f0:	e002      	b.n	80058f8 <LoopCopyDataInit>

080058f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058f6:	3304      	adds	r3, #4

080058f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058fc:	d3f9      	bcc.n	80058f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005900:	4c0a      	ldr	r4, [pc, #40]	@ (800592c <LoopForever+0x16>)
  movs r3, #0
 8005902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005904:	e001      	b.n	800590a <LoopFillZerobss>

08005906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005908:	3204      	adds	r2, #4

0800590a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800590a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800590c:	d3fb      	bcc.n	8005906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800590e:	f008 f885 	bl	800da1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005912:	f7fc f981 	bl	8001c18 <main>

08005916 <LoopForever>:

LoopForever:
    b LoopForever
 8005916:	e7fe      	b.n	8005916 <LoopForever>
  ldr   r0, =_estack
 8005918:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800591c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005920:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8005924:	08011730 	.word	0x08011730
  ldr r2, =_sbss
 8005928:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800592c:	20000a38 	.word	0x20000a38

08005930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005930:	e7fe      	b.n	8005930 <ADC1_2_IRQHandler>

08005932 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800593c:	2003      	movs	r0, #3
 800593e:	f001 fe8b 	bl	8007658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005942:	200f      	movs	r0, #15
 8005944:	f000 f80e 	bl	8005964 <HAL_InitTick>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	71fb      	strb	r3, [r7, #7]
 8005952:	e001      	b.n	8005958 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005954:	f7fd f91c 	bl	8002b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005958:	79fb      	ldrb	r3, [r7, #7]

}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005970:	4b16      	ldr	r3, [pc, #88]	@ (80059cc <HAL_InitTick+0x68>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d022      	beq.n	80059be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005978:	4b15      	ldr	r3, [pc, #84]	@ (80059d0 <HAL_InitTick+0x6c>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b13      	ldr	r3, [pc, #76]	@ (80059cc <HAL_InitTick+0x68>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005984:	fbb1 f3f3 	udiv	r3, r1, r3
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	4618      	mov	r0, r3
 800598e:	f001 fe96 	bl	80076be <HAL_SYSTICK_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10f      	bne.n	80059b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b0f      	cmp	r3, #15
 800599c:	d809      	bhi.n	80059b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800599e:	2200      	movs	r2, #0
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	f04f 30ff 	mov.w	r0, #4294967295
 80059a6:	f001 fe62 	bl	800766e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80059aa:	4a0a      	ldr	r2, [pc, #40]	@ (80059d4 <HAL_InitTick+0x70>)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	e007      	b.n	80059c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
 80059b6:	e004      	b.n	80059c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
 80059bc:	e001      	b.n	80059c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20000010 	.word	0x20000010
 80059d0:	20000008 	.word	0x20000008
 80059d4:	2000000c 	.word	0x2000000c

080059d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059dc:	4b05      	ldr	r3, [pc, #20]	@ (80059f4 <HAL_IncTick+0x1c>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	4b05      	ldr	r3, [pc, #20]	@ (80059f8 <HAL_IncTick+0x20>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4413      	add	r3, r2
 80059e6:	4a03      	ldr	r2, [pc, #12]	@ (80059f4 <HAL_IncTick+0x1c>)
 80059e8:	6013      	str	r3, [r2, #0]
}
 80059ea:	bf00      	nop
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	200008e8 	.word	0x200008e8
 80059f8:	20000010 	.word	0x20000010

080059fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return uwTick;
 8005a00:	4b03      	ldr	r3, [pc, #12]	@ (8005a10 <HAL_GetTick+0x14>)
 8005a02:	681b      	ldr	r3, [r3, #0]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	200008e8 	.word	0x200008e8

08005a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a1c:	f7ff ffee 	bl	80059fc <HAL_GetTick>
 8005a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d004      	beq.n	8005a38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a2e:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <HAL_Delay+0x40>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a38:	bf00      	nop
 8005a3a:	f7ff ffdf 	bl	80059fc <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d8f7      	bhi.n	8005a3a <HAL_Delay+0x26>
  {
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20000010 	.word	0x20000010

08005a58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	609a      	str	r2, [r3, #8]
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	609a      	str	r2, [r3, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3360      	adds	r3, #96	@ 0x60
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	4b08      	ldr	r3, [pc, #32]	@ (8005b04 <LL_ADC_SetOffset+0x44>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	03fff000 	.word	0x03fff000

08005b08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3360      	adds	r3, #96	@ 0x60
 8005b16:	461a      	mov	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3360      	adds	r3, #96	@ 0x60
 8005b44:	461a      	mov	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3360      	adds	r3, #96	@ 0x60
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005b94:	bf00      	nop
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3360      	adds	r3, #96	@ 0x60
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	615a      	str	r2, [r3, #20]
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c10:	2301      	movs	r3, #1
 8005c12:	e000      	b.n	8005c16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b087      	sub	sp, #28
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3330      	adds	r3, #48	@ 0x30
 8005c32:	461a      	mov	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	0a1b      	lsrs	r3, r3, #8
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	f003 030c 	and.w	r3, r3, #12
 8005c3e:	4413      	add	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	211f      	movs	r1, #31
 8005c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c52:	43db      	mvns	r3, r3
 8005c54:	401a      	ands	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	0e9b      	lsrs	r3, r3, #26
 8005c5a:	f003 011f 	and.w	r1, r3, #31
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b087      	sub	sp, #28
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3314      	adds	r3, #20
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	0e5b      	lsrs	r3, r3, #25
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	4413      	add	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	0d1b      	lsrs	r3, r3, #20
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	2107      	movs	r1, #7
 8005ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cac:	43db      	mvns	r3, r3
 8005cae:	401a      	ands	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	0d1b      	lsrs	r3, r3, #20
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f003 0318 	and.w	r3, r3, #24
 8005cf2:	4908      	ldr	r1, [pc, #32]	@ (8005d14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005cf4:	40d9      	lsrs	r1, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	400b      	ands	r3, r1
 8005cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005d06:	bf00      	nop
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	0007ffff 	.word	0x0007ffff

08005d18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 031f 	and.w	r3, r3, #31
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6093      	str	r3, [r2, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d6c:	d101      	bne.n	8005d72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005d90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dbc:	d101      	bne.n	8005dc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005de0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005de4:	f043 0201 	orr.w	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e0c:	f043 0202 	orr.w	r2, r3, #2
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <LL_ADC_IsEnabled+0x18>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <LL_ADC_IsEnabled+0x1a>
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d101      	bne.n	8005e5e <LL_ADC_IsDisableOngoing+0x18>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <LL_ADC_IsDisableOngoing+0x1a>
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e80:	f043 0204 	orr.w	r2, r3, #4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ea4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ea8:	f043 0210 	orr.w	r2, r3, #16
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d101      	bne.n	8005ed4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e000      	b.n	8005ed6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ef2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d101      	bne.n	8005f22 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f30:	b590      	push	{r4, r7, lr}
 8005f32:	b089      	sub	sp, #36	@ 0x24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e1a9      	b.n	800629e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d109      	bne.n	8005f6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fc fe3d 	bl	8002bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fef1 	bl	8005d58 <LL_ADC_IsDeepPowerDownEnabled>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d004      	beq.n	8005f86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fed7 	bl	8005d34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff ff0c 	bl	8005da8 <LL_ADC_IsInternalRegulatorEnabled>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d115      	bne.n	8005fc2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff fef0 	bl	8005d80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fa0:	4b9c      	ldr	r3, [pc, #624]	@ (8006214 <HAL_ADC_Init+0x2e4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	099b      	lsrs	r3, r3, #6
 8005fa6:	4a9c      	ldr	r2, [pc, #624]	@ (8006218 <HAL_ADC_Init+0x2e8>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	099b      	lsrs	r3, r3, #6
 8005fae:	3301      	adds	r3, #1
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005fb4:	e002      	b.n	8005fbc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f9      	bne.n	8005fb6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff feee 	bl	8005da8 <LL_ADC_IsInternalRegulatorEnabled>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10d      	bne.n	8005fee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd6:	f043 0210 	orr.w	r2, r3, #16
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe2:	f043 0201 	orr.w	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff ff62 	bl	8005ebc <LL_ADC_REG_IsConversionOngoing>
 8005ff8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	f040 8142 	bne.w	800628c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	f040 813e 	bne.w	800628c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006014:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006018:	f043 0202 	orr.w	r2, r3, #2
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fefb 	bl	8005e20 <LL_ADC_IsEnabled>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d141      	bne.n	80060b4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006038:	d004      	beq.n	8006044 <HAL_ADC_Init+0x114>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a77      	ldr	r2, [pc, #476]	@ (800621c <HAL_ADC_Init+0x2ec>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d10f      	bne.n	8006064 <HAL_ADC_Init+0x134>
 8006044:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006048:	f7ff feea 	bl	8005e20 <LL_ADC_IsEnabled>
 800604c:	4604      	mov	r4, r0
 800604e:	4873      	ldr	r0, [pc, #460]	@ (800621c <HAL_ADC_Init+0x2ec>)
 8006050:	f7ff fee6 	bl	8005e20 <LL_ADC_IsEnabled>
 8006054:	4603      	mov	r3, r0
 8006056:	4323      	orrs	r3, r4
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf0c      	ite	eq
 800605c:	2301      	moveq	r3, #1
 800605e:	2300      	movne	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	e012      	b.n	800608a <HAL_ADC_Init+0x15a>
 8006064:	486e      	ldr	r0, [pc, #440]	@ (8006220 <HAL_ADC_Init+0x2f0>)
 8006066:	f7ff fedb 	bl	8005e20 <LL_ADC_IsEnabled>
 800606a:	4604      	mov	r4, r0
 800606c:	486d      	ldr	r0, [pc, #436]	@ (8006224 <HAL_ADC_Init+0x2f4>)
 800606e:	f7ff fed7 	bl	8005e20 <LL_ADC_IsEnabled>
 8006072:	4603      	mov	r3, r0
 8006074:	431c      	orrs	r4, r3
 8006076:	486c      	ldr	r0, [pc, #432]	@ (8006228 <HAL_ADC_Init+0x2f8>)
 8006078:	f7ff fed2 	bl	8005e20 <LL_ADC_IsEnabled>
 800607c:	4603      	mov	r3, r0
 800607e:	4323      	orrs	r3, r4
 8006080:	2b00      	cmp	r3, #0
 8006082:	bf0c      	ite	eq
 8006084:	2301      	moveq	r3, #1
 8006086:	2300      	movne	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d012      	beq.n	80060b4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006096:	d004      	beq.n	80060a2 <HAL_ADC_Init+0x172>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a5f      	ldr	r2, [pc, #380]	@ (800621c <HAL_ADC_Init+0x2ec>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d101      	bne.n	80060a6 <HAL_ADC_Init+0x176>
 80060a2:	4a62      	ldr	r2, [pc, #392]	@ (800622c <HAL_ADC_Init+0x2fc>)
 80060a4:	e000      	b.n	80060a8 <HAL_ADC_Init+0x178>
 80060a6:	4a62      	ldr	r2, [pc, #392]	@ (8006230 <HAL_ADC_Init+0x300>)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f7ff fcd2 	bl	8005a58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7f5b      	ldrb	r3, [r3, #29]
 80060b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80060be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80060c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80060ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80060d4:	4313      	orrs	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d106      	bne.n	80060f0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e6:	3b01      	subs	r3, #1
 80060e8:	045b      	lsls	r3, r3, #17
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006104:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4313      	orrs	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	4b48      	ldr	r3, [pc, #288]	@ (8006234 <HAL_ADC_Init+0x304>)
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	69b9      	ldr	r1, [r7, #24]
 800611c:	430b      	orrs	r3, r1
 800611e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fee5 	bl	8005f0a <LL_ADC_INJ_IsConversionOngoing>
 8006140:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d17f      	bne.n	8006248 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d17c      	bne.n	8006248 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006152:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800615a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800615c:	4313      	orrs	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800616a:	f023 0302 	bic.w	r3, r3, #2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	69b9      	ldr	r1, [r7, #24]
 8006174:	430b      	orrs	r3, r1
 8006176:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d017      	beq.n	80061b0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800618e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006198:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800619c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6911      	ldr	r1, [r2, #16]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	430b      	orrs	r3, r1
 80061aa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80061ae:	e013      	b.n	80061d8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691a      	ldr	r2, [r3, #16]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80061be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6812      	ldr	r2, [r2, #0]
 80061cc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80061d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80061d4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d12a      	bne.n	8006238 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80061ec:	f023 0304 	bic.w	r3, r3, #4
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80061f8:	4311      	orrs	r1, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80061fe:	4311      	orrs	r1, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006204:	430a      	orrs	r2, r1
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0201 	orr.w	r2, r2, #1
 8006210:	611a      	str	r2, [r3, #16]
 8006212:	e019      	b.n	8006248 <HAL_ADC_Init+0x318>
 8006214:	20000008 	.word	0x20000008
 8006218:	053e2d63 	.word	0x053e2d63
 800621c:	50000100 	.word	0x50000100
 8006220:	50000400 	.word	0x50000400
 8006224:	50000500 	.word	0x50000500
 8006228:	50000600 	.word	0x50000600
 800622c:	50000300 	.word	0x50000300
 8006230:	50000700 	.word	0x50000700
 8006234:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0201 	bic.w	r2, r2, #1
 8006246:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10c      	bne.n	800626a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006256:	f023 010f 	bic.w	r1, r3, #15
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	1e5a      	subs	r2, r3, #1
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	631a      	str	r2, [r3, #48]	@ 0x30
 8006268:	e007      	b.n	800627a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 020f 	bic.w	r2, r2, #15
 8006278:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	f043 0201 	orr.w	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	65da      	str	r2, [r3, #92]	@ 0x5c
 800628a:	e007      	b.n	800629c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006290:	f043 0210 	orr.w	r2, r3, #16
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800629c:	7ffb      	ldrb	r3, [r7, #31]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3724      	adds	r7, #36	@ 0x24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd90      	pop	{r4, r7, pc}
 80062a6:	bf00      	nop

080062a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062bc:	d004      	beq.n	80062c8 <HAL_ADC_Start_DMA+0x20>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a5a      	ldr	r2, [pc, #360]	@ (800642c <HAL_ADC_Start_DMA+0x184>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d101      	bne.n	80062cc <HAL_ADC_Start_DMA+0x24>
 80062c8:	4b59      	ldr	r3, [pc, #356]	@ (8006430 <HAL_ADC_Start_DMA+0x188>)
 80062ca:	e000      	b.n	80062ce <HAL_ADC_Start_DMA+0x26>
 80062cc:	4b59      	ldr	r3, [pc, #356]	@ (8006434 <HAL_ADC_Start_DMA+0x18c>)
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fd22 	bl	8005d18 <LL_ADC_GetMultimode>
 80062d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff fdee 	bl	8005ebc <LL_ADC_REG_IsConversionOngoing>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 809b 	bne.w	800641e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_ADC_Start_DMA+0x4e>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e096      	b.n	8006424 <HAL_ADC_Start_DMA+0x17c>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a4d      	ldr	r2, [pc, #308]	@ (8006438 <HAL_ADC_Start_DMA+0x190>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d008      	beq.n	800631a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b05      	cmp	r3, #5
 8006312:	d002      	beq.n	800631a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b09      	cmp	r3, #9
 8006318:	d17a      	bne.n	8006410 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fe14 	bl	8006f48 <ADC_Enable>
 8006320:	4603      	mov	r3, r0
 8006322:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d16d      	bne.n	8006406 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a3a      	ldr	r2, [pc, #232]	@ (800642c <HAL_ADC_Start_DMA+0x184>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d009      	beq.n	800635c <HAL_ADC_Start_DMA+0xb4>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a3b      	ldr	r2, [pc, #236]	@ (800643c <HAL_ADC_Start_DMA+0x194>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d002      	beq.n	8006358 <HAL_ADC_Start_DMA+0xb0>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	e003      	b.n	8006360 <HAL_ADC_Start_DMA+0xb8>
 8006358:	4b39      	ldr	r3, [pc, #228]	@ (8006440 <HAL_ADC_Start_DMA+0x198>)
 800635a:	e001      	b.n	8006360 <HAL_ADC_Start_DMA+0xb8>
 800635c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	4293      	cmp	r3, r2
 8006366:	d002      	beq.n	800636e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d105      	bne.n	800637a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006372:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d006      	beq.n	8006394 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800638a:	f023 0206 	bic.w	r2, r3, #6
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	661a      	str	r2, [r3, #96]	@ 0x60
 8006392:	e002      	b.n	800639a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639e:	4a29      	ldr	r2, [pc, #164]	@ (8006444 <HAL_ADC_Start_DMA+0x19c>)
 80063a0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a6:	4a28      	ldr	r2, [pc, #160]	@ (8006448 <HAL_ADC_Start_DMA+0x1a0>)
 80063a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ae:	4a27      	ldr	r2, [pc, #156]	@ (800644c <HAL_ADC_Start_DMA+0x1a4>)
 80063b0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	221c      	movs	r2, #28
 80063b8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0210 	orr.w	r2, r2, #16
 80063d0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0201 	orr.w	r2, r2, #1
 80063e0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3340      	adds	r3, #64	@ 0x40
 80063ec:	4619      	mov	r1, r3
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f001 fa19 	bl	8007828 <HAL_DMA_Start_IT>
 80063f6:	4603      	mov	r3, r0
 80063f8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff fd34 	bl	8005e6c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006404:	e00d      	b.n	8006422 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800640e:	e008      	b.n	8006422 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800641c:	e001      	b.n	8006422 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800641e:	2302      	movs	r3, #2
 8006420:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	50000100 	.word	0x50000100
 8006430:	50000300 	.word	0x50000300
 8006434:	50000700 	.word	0x50000700
 8006438:	50000600 	.word	0x50000600
 800643c:	50000500 	.word	0x50000500
 8006440:	50000400 	.word	0x50000400
 8006444:	08007133 	.word	0x08007133
 8006448:	0800720b 	.word	0x0800720b
 800644c:	08007227 	.word	0x08007227

08006450 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_ADC_Stop_DMA+0x16>
 8006462:	2302      	movs	r3, #2
 8006464:	e051      	b.n	800650a <HAL_ADC_Stop_DMA+0xba>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800646e:	2103      	movs	r1, #3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fcad 	bl	8006dd0 <ADC_ConversionStop>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d13f      	bne.n	8006500 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0201 	bic.w	r2, r2, #1
 800648e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006494:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d10f      	bne.n	80064be <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 fa3b 	bl	800791e <HAL_DMA_Abort>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0210 	bic.w	r2, r2, #16
 80064cc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fdcd 	bl	8007074 <ADC_Disable>
 80064da:	4603      	mov	r3, r0
 80064dc:	73fb      	strb	r3, [r7, #15]
 80064de:	e002      	b.n	80064e6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fdc7 	bl	8007074 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	f043 0201 	orr.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b0b6      	sub	sp, #216	@ 0xd8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800656a:	2b01      	cmp	r3, #1
 800656c:	d102      	bne.n	8006574 <HAL_ADC_ConfigChannel+0x24>
 800656e:	2302      	movs	r3, #2
 8006570:	f000 bc13 	b.w	8006d9a <HAL_ADC_ConfigChannel+0x84a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff fc9b 	bl	8005ebc <LL_ADC_REG_IsConversionOngoing>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	f040 83f3 	bne.w	8006d74 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f7ff fb41 	bl	8005c22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fc89 	bl	8005ebc <LL_ADC_REG_IsConversionOngoing>
 80065aa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff fca9 	bl	8005f0a <LL_ADC_INJ_IsConversionOngoing>
 80065b8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80065bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f040 81d9 	bne.w	8006978 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80065c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 81d4 	bne.w	8006978 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065d8:	d10f      	bne.n	80065fa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	4619      	mov	r1, r3
 80065e6:	f7ff fb48 	bl	8005c7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff faef 	bl	8005bd6 <LL_ADC_SetSamplingTimeCommonConfig>
 80065f8:	e00e      	b.n	8006618 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6819      	ldr	r1, [r3, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	461a      	mov	r2, r3
 8006608:	f7ff fb37 	bl	8005c7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2100      	movs	r1, #0
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fadf 	bl	8005bd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b04      	cmp	r3, #4
 8006638:	d022      	beq.n	8006680 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6919      	ldr	r1, [r3, #16]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800664a:	f7ff fa39 	bl	8005ac0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6818      	ldr	r0, [r3, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6919      	ldr	r1, [r3, #16]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	461a      	mov	r2, r3
 800665c:	f7ff fa85 	bl	8005b6a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800666c:	2b01      	cmp	r3, #1
 800666e:	d102      	bne.n	8006676 <HAL_ADC_ConfigChannel+0x126>
 8006670:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006674:	e000      	b.n	8006678 <HAL_ADC_ConfigChannel+0x128>
 8006676:	2300      	movs	r3, #0
 8006678:	461a      	mov	r2, r3
 800667a:	f7ff fa91 	bl	8005ba0 <LL_ADC_SetOffsetSaturation>
 800667e:	e17b      	b.n	8006978 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2100      	movs	r1, #0
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fa3e 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 800668c:	4603      	mov	r3, r0
 800668e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10a      	bne.n	80066ac <HAL_ADC_ConfigChannel+0x15c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2100      	movs	r1, #0
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fa33 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 80066a2:	4603      	mov	r3, r0
 80066a4:	0e9b      	lsrs	r3, r3, #26
 80066a6:	f003 021f 	and.w	r2, r3, #31
 80066aa:	e01e      	b.n	80066ea <HAL_ADC_ConfigChannel+0x19a>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2100      	movs	r1, #0
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff fa28 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80066c2:	fa93 f3a3 	rbit	r3, r3
 80066c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80066d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80066da:	2320      	movs	r3, #32
 80066dc:	e004      	b.n	80066e8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80066de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066e2:	fab3 f383 	clz	r3, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d105      	bne.n	8006702 <HAL_ADC_ConfigChannel+0x1b2>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	0e9b      	lsrs	r3, r3, #26
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	e018      	b.n	8006734 <HAL_ADC_ConfigChannel+0x1e4>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800670e:	fa93 f3a3 	rbit	r3, r3
 8006712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800671a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800671e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006726:	2320      	movs	r3, #32
 8006728:	e004      	b.n	8006734 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800672a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800672e:	fab3 f383 	clz	r3, r3
 8006732:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006734:	429a      	cmp	r2, r3
 8006736:	d106      	bne.n	8006746 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2200      	movs	r2, #0
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff f9f7 	bl	8005b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2101      	movs	r1, #1
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff f9db 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 8006752:	4603      	mov	r3, r0
 8006754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <HAL_ADC_ConfigChannel+0x222>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2101      	movs	r1, #1
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff f9d0 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 8006768:	4603      	mov	r3, r0
 800676a:	0e9b      	lsrs	r3, r3, #26
 800676c:	f003 021f 	and.w	r2, r3, #31
 8006770:	e01e      	b.n	80067b0 <HAL_ADC_ConfigChannel+0x260>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2101      	movs	r1, #1
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff f9c5 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 800677e:	4603      	mov	r3, r0
 8006780:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006784:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006788:	fa93 f3a3 	rbit	r3, r3
 800678c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006790:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006794:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80067a0:	2320      	movs	r3, #32
 80067a2:	e004      	b.n	80067ae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80067a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067a8:	fab3 f383 	clz	r3, r3
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d105      	bne.n	80067c8 <HAL_ADC_ConfigChannel+0x278>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	0e9b      	lsrs	r3, r3, #26
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	e018      	b.n	80067fa <HAL_ADC_ConfigChannel+0x2aa>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067d4:	fa93 f3a3 	rbit	r3, r3
 80067d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80067dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80067e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80067e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80067ec:	2320      	movs	r3, #32
 80067ee:	e004      	b.n	80067fa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80067f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067f4:	fab3 f383 	clz	r3, r3
 80067f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d106      	bne.n	800680c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff f994 	bl	8005b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2102      	movs	r1, #2
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff f978 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 8006818:	4603      	mov	r3, r0
 800681a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <HAL_ADC_ConfigChannel+0x2e8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2102      	movs	r1, #2
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff f96d 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 800682e:	4603      	mov	r3, r0
 8006830:	0e9b      	lsrs	r3, r3, #26
 8006832:	f003 021f 	and.w	r2, r3, #31
 8006836:	e01e      	b.n	8006876 <HAL_ADC_ConfigChannel+0x326>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2102      	movs	r1, #2
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff f962 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 8006844:	4603      	mov	r3, r0
 8006846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800684e:	fa93 f3a3 	rbit	r3, r3
 8006852:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006856:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800685a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800685e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006866:	2320      	movs	r3, #32
 8006868:	e004      	b.n	8006874 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800686a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800686e:	fab3 f383 	clz	r3, r3
 8006872:	b2db      	uxtb	r3, r3
 8006874:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800687e:	2b00      	cmp	r3, #0
 8006880:	d105      	bne.n	800688e <HAL_ADC_ConfigChannel+0x33e>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	0e9b      	lsrs	r3, r3, #26
 8006888:	f003 031f 	and.w	r3, r3, #31
 800688c:	e016      	b.n	80068bc <HAL_ADC_ConfigChannel+0x36c>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006896:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800689a:	fa93 f3a3 	rbit	r3, r3
 800689e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80068a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80068a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80068ae:	2320      	movs	r3, #32
 80068b0:	e004      	b.n	80068bc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80068b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068b6:	fab3 f383 	clz	r3, r3
 80068ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80068bc:	429a      	cmp	r2, r3
 80068be:	d106      	bne.n	80068ce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2200      	movs	r2, #0
 80068c6:	2102      	movs	r1, #2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff f933 	bl	8005b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2103      	movs	r1, #3
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff f917 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 80068da:	4603      	mov	r3, r0
 80068dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <HAL_ADC_ConfigChannel+0x3aa>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2103      	movs	r1, #3
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff f90c 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 80068f0:	4603      	mov	r3, r0
 80068f2:	0e9b      	lsrs	r3, r3, #26
 80068f4:	f003 021f 	and.w	r2, r3, #31
 80068f8:	e017      	b.n	800692a <HAL_ADC_ConfigChannel+0x3da>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2103      	movs	r1, #3
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff f901 	bl	8005b08 <LL_ADC_GetOffsetChannel>
 8006906:	4603      	mov	r3, r0
 8006908:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800690a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800690c:	fa93 f3a3 	rbit	r3, r3
 8006910:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006914:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800691c:	2320      	movs	r3, #32
 800691e:	e003      	b.n	8006928 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006922:	fab3 f383 	clz	r3, r3
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006932:	2b00      	cmp	r3, #0
 8006934:	d105      	bne.n	8006942 <HAL_ADC_ConfigChannel+0x3f2>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	0e9b      	lsrs	r3, r3, #26
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	e011      	b.n	8006966 <HAL_ADC_ConfigChannel+0x416>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800694a:	fa93 f3a3 	rbit	r3, r3
 800694e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006952:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800695a:	2320      	movs	r3, #32
 800695c:	e003      	b.n	8006966 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800695e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006960:	fab3 f383 	clz	r3, r3
 8006964:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006966:	429a      	cmp	r2, r3
 8006968:	d106      	bne.n	8006978 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2200      	movs	r2, #0
 8006970:	2103      	movs	r1, #3
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff f8de 	bl	8005b34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff fa4f 	bl	8005e20 <LL_ADC_IsEnabled>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 813d 	bne.w	8006c04 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6819      	ldr	r1, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	461a      	mov	r2, r3
 8006998:	f7ff f99a 	bl	8005cd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4aa2      	ldr	r2, [pc, #648]	@ (8006c2c <HAL_ADC_ConfigChannel+0x6dc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	f040 812e 	bne.w	8006c04 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10b      	bne.n	80069d0 <HAL_ADC_ConfigChannel+0x480>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	0e9b      	lsrs	r3, r3, #26
 80069be:	3301      	adds	r3, #1
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	2b09      	cmp	r3, #9
 80069c6:	bf94      	ite	ls
 80069c8:	2301      	movls	r3, #1
 80069ca:	2300      	movhi	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e019      	b.n	8006a04 <HAL_ADC_ConfigChannel+0x4b4>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069d8:	fa93 f3a3 	rbit	r3, r3
 80069dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80069de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80069e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80069e8:	2320      	movs	r3, #32
 80069ea:	e003      	b.n	80069f4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80069ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069ee:	fab3 f383 	clz	r3, r3
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	3301      	adds	r3, #1
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	2b09      	cmp	r3, #9
 80069fc:	bf94      	ite	ls
 80069fe:	2301      	movls	r3, #1
 8006a00:	2300      	movhi	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d079      	beq.n	8006afc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d107      	bne.n	8006a24 <HAL_ADC_ConfigChannel+0x4d4>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	0e9b      	lsrs	r3, r3, #26
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	069b      	lsls	r3, r3, #26
 8006a1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a22:	e015      	b.n	8006a50 <HAL_ADC_ConfigChannel+0x500>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a2c:	fa93 f3a3 	rbit	r3, r3
 8006a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a34:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	e003      	b.n	8006a48 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a42:	fab3 f383 	clz	r3, r3
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	3301      	adds	r3, #1
 8006a4a:	069b      	lsls	r3, r3, #26
 8006a4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d109      	bne.n	8006a70 <HAL_ADC_ConfigChannel+0x520>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	0e9b      	lsrs	r3, r3, #26
 8006a62:	3301      	adds	r3, #1
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	2101      	movs	r1, #1
 8006a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6e:	e017      	b.n	8006aa0 <HAL_ADC_ConfigChannel+0x550>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a78:	fa93 f3a3 	rbit	r3, r3
 8006a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a80:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006a88:	2320      	movs	r3, #32
 8006a8a:	e003      	b.n	8006a94 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a8e:	fab3 f383 	clz	r3, r3
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	3301      	adds	r3, #1
 8006a96:	f003 031f 	and.w	r3, r3, #31
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa0:	ea42 0103 	orr.w	r1, r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <HAL_ADC_ConfigChannel+0x576>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	0e9b      	lsrs	r3, r3, #26
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	f003 021f 	and.w	r2, r3, #31
 8006abc:	4613      	mov	r3, r2
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	051b      	lsls	r3, r3, #20
 8006ac4:	e018      	b.n	8006af8 <HAL_ADC_ConfigChannel+0x5a8>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	fa93 f3a3 	rbit	r3, r3
 8006ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006ade:	2320      	movs	r3, #32
 8006ae0:	e003      	b.n	8006aea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae4:	fab3 f383 	clz	r3, r3
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	3301      	adds	r3, #1
 8006aec:	f003 021f 	and.w	r2, r3, #31
 8006af0:	4613      	mov	r3, r2
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	4413      	add	r3, r2
 8006af6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006af8:	430b      	orrs	r3, r1
 8006afa:	e07e      	b.n	8006bfa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d107      	bne.n	8006b18 <HAL_ADC_ConfigChannel+0x5c8>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	0e9b      	lsrs	r3, r3, #26
 8006b0e:	3301      	adds	r3, #1
 8006b10:	069b      	lsls	r3, r3, #26
 8006b12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b16:	e015      	b.n	8006b44 <HAL_ADC_ConfigChannel+0x5f4>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b20:	fa93 f3a3 	rbit	r3, r3
 8006b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b28:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006b30:	2320      	movs	r3, #32
 8006b32:	e003      	b.n	8006b3c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b36:	fab3 f383 	clz	r3, r3
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	069b      	lsls	r3, r3, #26
 8006b40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_ADC_ConfigChannel+0x614>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	0e9b      	lsrs	r3, r3, #26
 8006b56:	3301      	adds	r3, #1
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b62:	e017      	b.n	8006b94 <HAL_ADC_ConfigChannel+0x644>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	fa93 f3a3 	rbit	r3, r3
 8006b70:	61fb      	str	r3, [r7, #28]
  return result;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006b7c:	2320      	movs	r3, #32
 8006b7e:	e003      	b.n	8006b88 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	fab3 f383 	clz	r3, r3
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	3301      	adds	r3, #1
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	2101      	movs	r1, #1
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	ea42 0103 	orr.w	r1, r2, r3
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10d      	bne.n	8006bc0 <HAL_ADC_ConfigChannel+0x670>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	0e9b      	lsrs	r3, r3, #26
 8006baa:	3301      	adds	r3, #1
 8006bac:	f003 021f 	and.w	r2, r3, #31
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3b1e      	subs	r3, #30
 8006bb8:	051b      	lsls	r3, r3, #20
 8006bba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006bbe:	e01b      	b.n	8006bf8 <HAL_ADC_ConfigChannel+0x6a8>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	fa93 f3a3 	rbit	r3, r3
 8006bcc:	613b      	str	r3, [r7, #16]
  return result;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006bd8:	2320      	movs	r3, #32
 8006bda:	e003      	b.n	8006be4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	fab3 f383 	clz	r3, r3
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	3301      	adds	r3, #1
 8006be6:	f003 021f 	and.w	r2, r3, #31
 8006bea:	4613      	mov	r3, r2
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	4413      	add	r3, r2
 8006bf0:	3b1e      	subs	r3, #30
 8006bf2:	051b      	lsls	r3, r3, #20
 8006bf4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bf8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bfe:	4619      	mov	r1, r3
 8006c00:	f7ff f83b 	bl	8005c7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	4b09      	ldr	r3, [pc, #36]	@ (8006c30 <HAL_ADC_ConfigChannel+0x6e0>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 80be 	beq.w	8006d8e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c1a:	d004      	beq.n	8006c26 <HAL_ADC_ConfigChannel+0x6d6>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a04      	ldr	r2, [pc, #16]	@ (8006c34 <HAL_ADC_ConfigChannel+0x6e4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d10a      	bne.n	8006c3c <HAL_ADC_ConfigChannel+0x6ec>
 8006c26:	4b04      	ldr	r3, [pc, #16]	@ (8006c38 <HAL_ADC_ConfigChannel+0x6e8>)
 8006c28:	e009      	b.n	8006c3e <HAL_ADC_ConfigChannel+0x6ee>
 8006c2a:	bf00      	nop
 8006c2c:	407f0000 	.word	0x407f0000
 8006c30:	80080000 	.word	0x80080000
 8006c34:	50000100 	.word	0x50000100
 8006c38:	50000300 	.word	0x50000300
 8006c3c:	4b59      	ldr	r3, [pc, #356]	@ (8006da4 <HAL_ADC_ConfigChannel+0x854>)
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe ff30 	bl	8005aa4 <LL_ADC_GetCommonPathInternalCh>
 8006c44:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a56      	ldr	r2, [pc, #344]	@ (8006da8 <HAL_ADC_ConfigChannel+0x858>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d004      	beq.n	8006c5c <HAL_ADC_ConfigChannel+0x70c>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a55      	ldr	r2, [pc, #340]	@ (8006dac <HAL_ADC_ConfigChannel+0x85c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d13a      	bne.n	8006cd2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d134      	bne.n	8006cd2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c70:	d005      	beq.n	8006c7e <HAL_ADC_ConfigChannel+0x72e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a4e      	ldr	r2, [pc, #312]	@ (8006db0 <HAL_ADC_ConfigChannel+0x860>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	f040 8085 	bne.w	8006d88 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c86:	d004      	beq.n	8006c92 <HAL_ADC_ConfigChannel+0x742>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a49      	ldr	r2, [pc, #292]	@ (8006db4 <HAL_ADC_ConfigChannel+0x864>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d101      	bne.n	8006c96 <HAL_ADC_ConfigChannel+0x746>
 8006c92:	4a49      	ldr	r2, [pc, #292]	@ (8006db8 <HAL_ADC_ConfigChannel+0x868>)
 8006c94:	e000      	b.n	8006c98 <HAL_ADC_ConfigChannel+0x748>
 8006c96:	4a43      	ldr	r2, [pc, #268]	@ (8006da4 <HAL_ADC_ConfigChannel+0x854>)
 8006c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f7fe feeb 	bl	8005a7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ca8:	4b44      	ldr	r3, [pc, #272]	@ (8006dbc <HAL_ADC_ConfigChannel+0x86c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	099b      	lsrs	r3, r3, #6
 8006cae:	4a44      	ldr	r2, [pc, #272]	@ (8006dc0 <HAL_ADC_ConfigChannel+0x870>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	099b      	lsrs	r3, r3, #6
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	4613      	mov	r3, r2
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006cc2:	e002      	b.n	8006cca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f9      	bne.n	8006cc4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006cd0:	e05a      	b.n	8006d88 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a3b      	ldr	r2, [pc, #236]	@ (8006dc4 <HAL_ADC_ConfigChannel+0x874>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d125      	bne.n	8006d28 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ce0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d11f      	bne.n	8006d28 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a31      	ldr	r2, [pc, #196]	@ (8006db4 <HAL_ADC_ConfigChannel+0x864>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d104      	bne.n	8006cfc <HAL_ADC_ConfigChannel+0x7ac>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a34      	ldr	r2, [pc, #208]	@ (8006dc8 <HAL_ADC_ConfigChannel+0x878>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d047      	beq.n	8006d8c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d04:	d004      	beq.n	8006d10 <HAL_ADC_ConfigChannel+0x7c0>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8006db4 <HAL_ADC_ConfigChannel+0x864>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d101      	bne.n	8006d14 <HAL_ADC_ConfigChannel+0x7c4>
 8006d10:	4a29      	ldr	r2, [pc, #164]	@ (8006db8 <HAL_ADC_ConfigChannel+0x868>)
 8006d12:	e000      	b.n	8006d16 <HAL_ADC_ConfigChannel+0x7c6>
 8006d14:	4a23      	ldr	r2, [pc, #140]	@ (8006da4 <HAL_ADC_ConfigChannel+0x854>)
 8006d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4610      	mov	r0, r2
 8006d22:	f7fe feac 	bl	8005a7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d26:	e031      	b.n	8006d8c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a27      	ldr	r2, [pc, #156]	@ (8006dcc <HAL_ADC_ConfigChannel+0x87c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d12d      	bne.n	8006d8e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006d32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d127      	bne.n	8006d8e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1c      	ldr	r2, [pc, #112]	@ (8006db4 <HAL_ADC_ConfigChannel+0x864>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d022      	beq.n	8006d8e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d50:	d004      	beq.n	8006d5c <HAL_ADC_ConfigChannel+0x80c>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a17      	ldr	r2, [pc, #92]	@ (8006db4 <HAL_ADC_ConfigChannel+0x864>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d101      	bne.n	8006d60 <HAL_ADC_ConfigChannel+0x810>
 8006d5c:	4a16      	ldr	r2, [pc, #88]	@ (8006db8 <HAL_ADC_ConfigChannel+0x868>)
 8006d5e:	e000      	b.n	8006d62 <HAL_ADC_ConfigChannel+0x812>
 8006d60:	4a10      	ldr	r2, [pc, #64]	@ (8006da4 <HAL_ADC_ConfigChannel+0x854>)
 8006d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f7fe fe86 	bl	8005a7e <LL_ADC_SetCommonPathInternalCh>
 8006d72:	e00c      	b.n	8006d8e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d78:	f043 0220 	orr.w	r2, r3, #32
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006d86:	e002      	b.n	8006d8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006d96:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	37d8      	adds	r7, #216	@ 0xd8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	50000700 	.word	0x50000700
 8006da8:	c3210000 	.word	0xc3210000
 8006dac:	90c00010 	.word	0x90c00010
 8006db0:	50000600 	.word	0x50000600
 8006db4:	50000100 	.word	0x50000100
 8006db8:	50000300 	.word	0x50000300
 8006dbc:	20000008 	.word	0x20000008
 8006dc0:	053e2d63 	.word	0x053e2d63
 8006dc4:	c7520000 	.word	0xc7520000
 8006dc8:	50000500 	.word	0x50000500
 8006dcc:	cb840000 	.word	0xcb840000

08006dd0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff f868 	bl	8005ebc <LL_ADC_REG_IsConversionOngoing>
 8006dec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff f889 	bl	8005f0a <LL_ADC_INJ_IsConversionOngoing>
 8006df8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 8098 	beq.w	8006f38 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d02a      	beq.n	8006e6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7f5b      	ldrb	r3, [r3, #29]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d126      	bne.n	8006e6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7f1b      	ldrb	r3, [r3, #28]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d122      	bne.n	8006e6c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006e26:	2301      	movs	r3, #1
 8006e28:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006e2a:	e014      	b.n	8006e56 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	4a45      	ldr	r2, [pc, #276]	@ (8006f44 <ADC_ConversionStop+0x174>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d90d      	bls.n	8006e50 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e38:	f043 0210 	orr.w	r2, r3, #16
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e44:	f043 0201 	orr.w	r2, r3, #1
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e074      	b.n	8006f3a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	3301      	adds	r3, #1
 8006e54:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e60:	2b40      	cmp	r3, #64	@ 0x40
 8006e62:	d1e3      	bne.n	8006e2c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2240      	movs	r2, #64	@ 0x40
 8006e6a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d014      	beq.n	8006e9c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff f820 	bl	8005ebc <LL_ADC_REG_IsConversionOngoing>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00c      	beq.n	8006e9c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe ffdd 	bl	8005e46 <LL_ADC_IsDisableOngoing>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d104      	bne.n	8006e9c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe fffc 	bl	8005e94 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d014      	beq.n	8006ecc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff f82f 	bl	8005f0a <LL_ADC_INJ_IsConversionOngoing>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00c      	beq.n	8006ecc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe ffc5 	bl	8005e46 <LL_ADC_IsDisableOngoing>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff f80b 	bl	8005ee2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d005      	beq.n	8006ede <ADC_ConversionStop+0x10e>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d105      	bne.n	8006ee4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006ed8:	230c      	movs	r3, #12
 8006eda:	617b      	str	r3, [r7, #20]
        break;
 8006edc:	e005      	b.n	8006eea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006ede:	2308      	movs	r3, #8
 8006ee0:	617b      	str	r3, [r7, #20]
        break;
 8006ee2:	e002      	b.n	8006eea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	617b      	str	r3, [r7, #20]
        break;
 8006ee8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006eea:	f7fe fd87 	bl	80059fc <HAL_GetTick>
 8006eee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006ef0:	e01b      	b.n	8006f2a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006ef2:	f7fe fd83 	bl	80059fc <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b05      	cmp	r3, #5
 8006efe:	d914      	bls.n	8006f2a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00d      	beq.n	8006f2a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f12:	f043 0210 	orr.w	r2, r3, #16
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f1e:	f043 0201 	orr.w	r2, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e007      	b.n	8006f3a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1dc      	bne.n	8006ef2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3720      	adds	r7, #32
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	a33fffff 	.word	0xa33fffff

08006f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe ff61 	bl	8005e20 <LL_ADC_IsEnabled>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d176      	bne.n	8007052 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800705c <ADC_Enable+0x114>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f76:	f043 0210 	orr.w	r2, r3, #16
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f82:	f043 0201 	orr.w	r2, r3, #1
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e062      	b.n	8007054 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe ff1c 	bl	8005dd0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fa0:	d004      	beq.n	8006fac <ADC_Enable+0x64>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2e      	ldr	r2, [pc, #184]	@ (8007060 <ADC_Enable+0x118>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d101      	bne.n	8006fb0 <ADC_Enable+0x68>
 8006fac:	4b2d      	ldr	r3, [pc, #180]	@ (8007064 <ADC_Enable+0x11c>)
 8006fae:	e000      	b.n	8006fb2 <ADC_Enable+0x6a>
 8006fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8007068 <ADC_Enable+0x120>)
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fd76 	bl	8005aa4 <LL_ADC_GetCommonPathInternalCh>
 8006fb8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d013      	beq.n	8006fea <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800706c <ADC_Enable+0x124>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	099b      	lsrs	r3, r3, #6
 8006fc8:	4a29      	ldr	r2, [pc, #164]	@ (8007070 <ADC_Enable+0x128>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	099b      	lsrs	r3, r3, #6
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006fdc:	e002      	b.n	8006fe4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1f9      	bne.n	8006fde <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006fea:	f7fe fd07 	bl	80059fc <HAL_GetTick>
 8006fee:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ff0:	e028      	b.n	8007044 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe ff12 	bl	8005e20 <LL_ADC_IsEnabled>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d104      	bne.n	800700c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fee2 	bl	8005dd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800700c:	f7fe fcf6 	bl	80059fc <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d914      	bls.n	8007044 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b01      	cmp	r3, #1
 8007026:	d00d      	beq.n	8007044 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800702c:	f043 0210 	orr.w	r2, r3, #16
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007038:	f043 0201 	orr.w	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e007      	b.n	8007054 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b01      	cmp	r3, #1
 8007050:	d1cf      	bne.n	8006ff2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	8000003f 	.word	0x8000003f
 8007060:	50000100 	.word	0x50000100
 8007064:	50000300 	.word	0x50000300
 8007068:	50000700 	.word	0x50000700
 800706c:	20000008 	.word	0x20000008
 8007070:	053e2d63 	.word	0x053e2d63

08007074 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe fee0 	bl	8005e46 <LL_ADC_IsDisableOngoing>
 8007086:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fec7 	bl	8005e20 <LL_ADC_IsEnabled>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d047      	beq.n	8007128 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d144      	bne.n	8007128 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 030d 	and.w	r3, r3, #13
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d10c      	bne.n	80070c6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fea1 	bl	8005df8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2203      	movs	r2, #3
 80070bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80070be:	f7fe fc9d 	bl	80059fc <HAL_GetTick>
 80070c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80070c4:	e029      	b.n	800711a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ca:	f043 0210 	orr.w	r2, r3, #16
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d6:	f043 0201 	orr.w	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e023      	b.n	800712a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80070e2:	f7fe fc8b 	bl	80059fc <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d914      	bls.n	800711a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00d      	beq.n	800711a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007102:	f043 0210 	orr.w	r2, r3, #16
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800710e:	f043 0201 	orr.w	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e007      	b.n	800712a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1dc      	bne.n	80070e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007144:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007148:	2b00      	cmp	r3, #0
 800714a:	d14b      	bne.n	80071e4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007150:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d021      	beq.n	80071aa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fd46 	bl	8005bfc <LL_ADC_REG_IsTriggerSourceSWStart>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d032      	beq.n	80071dc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d12b      	bne.n	80071dc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d11f      	bne.n	80071dc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071a0:	f043 0201 	orr.w	r2, r3, #1
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80071a8:	e018      	b.n	80071dc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d111      	bne.n	80071dc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d4:	f043 0201 	orr.w	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff f998 	bl	8006512 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80071e2:	e00e      	b.n	8007202 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff f9a2 	bl	800653a <HAL_ADC_ErrorCallback>
}
 80071f6:	e004      	b.n	8007202 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	4798      	blx	r3
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007216:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff f984 	bl	8006526 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007232:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007238:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007244:	f043 0204 	orr.w	r2, r3, #4
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff f974 	bl	800653a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <LL_ADC_IsEnabled>:
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <LL_ADC_IsEnabled+0x18>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <LL_ADC_IsEnabled+0x1a>
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <LL_ADC_REG_IsConversionOngoing>:
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	2b04      	cmp	r3, #4
 8007292:	d101      	bne.n	8007298 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
	...

080072a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80072a8:	b590      	push	{r4, r7, lr}
 80072aa:	b0a1      	sub	sp, #132	@ 0x84
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e0e7      	b.n	8007496 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80072ce:	2300      	movs	r3, #0
 80072d0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80072d2:	2300      	movs	r3, #0
 80072d4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072de:	d102      	bne.n	80072e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80072e0:	4b6f      	ldr	r3, [pc, #444]	@ (80074a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80072e2:	60bb      	str	r3, [r7, #8]
 80072e4:	e009      	b.n	80072fa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a6e      	ldr	r2, [pc, #440]	@ (80074a4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d102      	bne.n	80072f6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80072f0:	4b6d      	ldr	r3, [pc, #436]	@ (80074a8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	e001      	b.n	80072fa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007304:	f043 0220 	orr.w	r2, r3, #32
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e0be      	b.n	8007496 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff ffb0 	bl	8007280 <LL_ADC_REG_IsConversionOngoing>
 8007320:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff ffaa 	bl	8007280 <LL_ADC_REG_IsConversionOngoing>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	f040 80a0 	bne.w	8007474 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007336:	2b00      	cmp	r3, #0
 8007338:	f040 809c 	bne.w	8007474 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007344:	d004      	beq.n	8007350 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a55      	ldr	r2, [pc, #340]	@ (80074a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d101      	bne.n	8007354 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007350:	4b56      	ldr	r3, [pc, #344]	@ (80074ac <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007352:	e000      	b.n	8007356 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007354:	4b56      	ldr	r3, [pc, #344]	@ (80074b0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007356:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d04b      	beq.n	80073f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	6859      	ldr	r1, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007372:	035b      	lsls	r3, r3, #13
 8007374:	430b      	orrs	r3, r1
 8007376:	431a      	orrs	r2, r3
 8007378:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800737a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007384:	d004      	beq.n	8007390 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a45      	ldr	r2, [pc, #276]	@ (80074a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d10f      	bne.n	80073b0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007390:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007394:	f7ff ff61 	bl	800725a <LL_ADC_IsEnabled>
 8007398:	4604      	mov	r4, r0
 800739a:	4841      	ldr	r0, [pc, #260]	@ (80074a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800739c:	f7ff ff5d 	bl	800725a <LL_ADC_IsEnabled>
 80073a0:	4603      	mov	r3, r0
 80073a2:	4323      	orrs	r3, r4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf0c      	ite	eq
 80073a8:	2301      	moveq	r3, #1
 80073aa:	2300      	movne	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	e012      	b.n	80073d6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80073b0:	483c      	ldr	r0, [pc, #240]	@ (80074a4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80073b2:	f7ff ff52 	bl	800725a <LL_ADC_IsEnabled>
 80073b6:	4604      	mov	r4, r0
 80073b8:	483b      	ldr	r0, [pc, #236]	@ (80074a8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80073ba:	f7ff ff4e 	bl	800725a <LL_ADC_IsEnabled>
 80073be:	4603      	mov	r3, r0
 80073c0:	431c      	orrs	r4, r3
 80073c2:	483c      	ldr	r0, [pc, #240]	@ (80074b4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80073c4:	f7ff ff49 	bl	800725a <LL_ADC_IsEnabled>
 80073c8:	4603      	mov	r3, r0
 80073ca:	4323      	orrs	r3, r4
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bf0c      	ite	eq
 80073d0:	2301      	moveq	r3, #1
 80073d2:	2300      	movne	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d056      	beq.n	8007488 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80073da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80073e2:	f023 030f 	bic.w	r3, r3, #15
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	6811      	ldr	r1, [r2, #0]
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	6892      	ldr	r2, [r2, #8]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	431a      	orrs	r2, r3
 80073f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073f4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80073f6:	e047      	b.n	8007488 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80073f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007400:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007402:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800740c:	d004      	beq.n	8007418 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a23      	ldr	r2, [pc, #140]	@ (80074a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d10f      	bne.n	8007438 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007418:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800741c:	f7ff ff1d 	bl	800725a <LL_ADC_IsEnabled>
 8007420:	4604      	mov	r4, r0
 8007422:	481f      	ldr	r0, [pc, #124]	@ (80074a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007424:	f7ff ff19 	bl	800725a <LL_ADC_IsEnabled>
 8007428:	4603      	mov	r3, r0
 800742a:	4323      	orrs	r3, r4
 800742c:	2b00      	cmp	r3, #0
 800742e:	bf0c      	ite	eq
 8007430:	2301      	moveq	r3, #1
 8007432:	2300      	movne	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	e012      	b.n	800745e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007438:	481a      	ldr	r0, [pc, #104]	@ (80074a4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800743a:	f7ff ff0e 	bl	800725a <LL_ADC_IsEnabled>
 800743e:	4604      	mov	r4, r0
 8007440:	4819      	ldr	r0, [pc, #100]	@ (80074a8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007442:	f7ff ff0a 	bl	800725a <LL_ADC_IsEnabled>
 8007446:	4603      	mov	r3, r0
 8007448:	431c      	orrs	r4, r3
 800744a:	481a      	ldr	r0, [pc, #104]	@ (80074b4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800744c:	f7ff ff05 	bl	800725a <LL_ADC_IsEnabled>
 8007450:	4603      	mov	r3, r0
 8007452:	4323      	orrs	r3, r4
 8007454:	2b00      	cmp	r3, #0
 8007456:	bf0c      	ite	eq
 8007458:	2301      	moveq	r3, #1
 800745a:	2300      	movne	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d012      	beq.n	8007488 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800746a:	f023 030f 	bic.w	r3, r3, #15
 800746e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007470:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007472:	e009      	b.n	8007488 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007478:	f043 0220 	orr.w	r2, r3, #32
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007486:	e000      	b.n	800748a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007488:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007492:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007496:	4618      	mov	r0, r3
 8007498:	3784      	adds	r7, #132	@ 0x84
 800749a:	46bd      	mov	sp, r7
 800749c:	bd90      	pop	{r4, r7, pc}
 800749e:	bf00      	nop
 80074a0:	50000100 	.word	0x50000100
 80074a4:	50000400 	.word	0x50000400
 80074a8:	50000500 	.word	0x50000500
 80074ac:	50000300 	.word	0x50000300
 80074b0:	50000700 	.word	0x50000700
 80074b4:	50000600 	.word	0x50000600

080074b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074c8:	4b0c      	ldr	r3, [pc, #48]	@ (80074fc <__NVIC_SetPriorityGrouping+0x44>)
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80074d4:	4013      	ands	r3, r2
 80074d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80074e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074ea:	4a04      	ldr	r2, [pc, #16]	@ (80074fc <__NVIC_SetPriorityGrouping+0x44>)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	60d3      	str	r3, [r2, #12]
}
 80074f0:	bf00      	nop
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	e000ed00 	.word	0xe000ed00

08007500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007504:	4b04      	ldr	r3, [pc, #16]	@ (8007518 <__NVIC_GetPriorityGrouping+0x18>)
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	0a1b      	lsrs	r3, r3, #8
 800750a:	f003 0307 	and.w	r3, r3, #7
}
 800750e:	4618      	mov	r0, r3
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	e000ed00 	.word	0xe000ed00

0800751c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800752a:	2b00      	cmp	r3, #0
 800752c:	db0b      	blt.n	8007546 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	f003 021f 	and.w	r2, r3, #31
 8007534:	4907      	ldr	r1, [pc, #28]	@ (8007554 <__NVIC_EnableIRQ+0x38>)
 8007536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	2001      	movs	r0, #1
 800753e:	fa00 f202 	lsl.w	r2, r0, r2
 8007542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	e000e100 	.word	0xe000e100

08007558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	6039      	str	r1, [r7, #0]
 8007562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007568:	2b00      	cmp	r3, #0
 800756a:	db0a      	blt.n	8007582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	b2da      	uxtb	r2, r3
 8007570:	490c      	ldr	r1, [pc, #48]	@ (80075a4 <__NVIC_SetPriority+0x4c>)
 8007572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007576:	0112      	lsls	r2, r2, #4
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	440b      	add	r3, r1
 800757c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007580:	e00a      	b.n	8007598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	b2da      	uxtb	r2, r3
 8007586:	4908      	ldr	r1, [pc, #32]	@ (80075a8 <__NVIC_SetPriority+0x50>)
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	3b04      	subs	r3, #4
 8007590:	0112      	lsls	r2, r2, #4
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	440b      	add	r3, r1
 8007596:	761a      	strb	r2, [r3, #24]
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	e000e100 	.word	0xe000e100
 80075a8:	e000ed00 	.word	0xe000ed00

080075ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b089      	sub	sp, #36	@ 0x24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	f1c3 0307 	rsb	r3, r3, #7
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	bf28      	it	cs
 80075ca:	2304      	movcs	r3, #4
 80075cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	3304      	adds	r3, #4
 80075d2:	2b06      	cmp	r3, #6
 80075d4:	d902      	bls.n	80075dc <NVIC_EncodePriority+0x30>
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	3b03      	subs	r3, #3
 80075da:	e000      	b.n	80075de <NVIC_EncodePriority+0x32>
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075e0:	f04f 32ff 	mov.w	r2, #4294967295
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ea:	43da      	mvns	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	401a      	ands	r2, r3
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075f4:	f04f 31ff 	mov.w	r1, #4294967295
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	fa01 f303 	lsl.w	r3, r1, r3
 80075fe:	43d9      	mvns	r1, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007604:	4313      	orrs	r3, r2
         );
}
 8007606:	4618      	mov	r0, r3
 8007608:	3724      	adds	r7, #36	@ 0x24
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
	...

08007614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3b01      	subs	r3, #1
 8007620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007624:	d301      	bcc.n	800762a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007626:	2301      	movs	r3, #1
 8007628:	e00f      	b.n	800764a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800762a:	4a0a      	ldr	r2, [pc, #40]	@ (8007654 <SysTick_Config+0x40>)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3b01      	subs	r3, #1
 8007630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007632:	210f      	movs	r1, #15
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	f7ff ff8e 	bl	8007558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800763c:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <SysTick_Config+0x40>)
 800763e:	2200      	movs	r2, #0
 8007640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007642:	4b04      	ldr	r3, [pc, #16]	@ (8007654 <SysTick_Config+0x40>)
 8007644:	2207      	movs	r2, #7
 8007646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	e000e010 	.word	0xe000e010

08007658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff ff29 	bl	80074b8 <__NVIC_SetPriorityGrouping>
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b086      	sub	sp, #24
 8007672:	af00      	add	r7, sp, #0
 8007674:	4603      	mov	r3, r0
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	607a      	str	r2, [r7, #4]
 800767a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800767c:	f7ff ff40 	bl	8007500 <__NVIC_GetPriorityGrouping>
 8007680:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	6978      	ldr	r0, [r7, #20]
 8007688:	f7ff ff90 	bl	80075ac <NVIC_EncodePriority>
 800768c:	4602      	mov	r2, r0
 800768e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007692:	4611      	mov	r1, r2
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff ff5f 	bl	8007558 <__NVIC_SetPriority>
}
 800769a:	bf00      	nop
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	4603      	mov	r3, r0
 80076aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff ff33 	bl	800751c <__NVIC_EnableIRQ>
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff ffa4 	bl	8007614 <SysTick_Config>
 80076cc:	4603      	mov	r3, r0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e08d      	b.n	8007806 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	4b47      	ldr	r3, [pc, #284]	@ (8007810 <HAL_DMA_Init+0x138>)
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d80f      	bhi.n	8007716 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	4b45      	ldr	r3, [pc, #276]	@ (8007814 <HAL_DMA_Init+0x13c>)
 80076fe:	4413      	add	r3, r2
 8007700:	4a45      	ldr	r2, [pc, #276]	@ (8007818 <HAL_DMA_Init+0x140>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	091b      	lsrs	r3, r3, #4
 8007708:	009a      	lsls	r2, r3, #2
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a42      	ldr	r2, [pc, #264]	@ (800781c <HAL_DMA_Init+0x144>)
 8007712:	641a      	str	r2, [r3, #64]	@ 0x40
 8007714:	e00e      	b.n	8007734 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	4b40      	ldr	r3, [pc, #256]	@ (8007820 <HAL_DMA_Init+0x148>)
 800771e:	4413      	add	r3, r2
 8007720:	4a3d      	ldr	r2, [pc, #244]	@ (8007818 <HAL_DMA_Init+0x140>)
 8007722:	fba2 2303 	umull	r2, r3, r2, r3
 8007726:	091b      	lsrs	r3, r3, #4
 8007728:	009a      	lsls	r2, r3, #2
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a3c      	ldr	r2, [pc, #240]	@ (8007824 <HAL_DMA_Init+0x14c>)
 8007732:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800774a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800774e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fa76 	bl	8007c78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007794:	d102      	bne.n	800779c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80077b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d010      	beq.n	80077dc <HAL_DMA_Init+0x104>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d80c      	bhi.n	80077dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa96 	bl	8007cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80077d8:	605a      	str	r2, [r3, #4]
 80077da:	e008      	b.n	80077ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40020407 	.word	0x40020407
 8007814:	bffdfff8 	.word	0xbffdfff8
 8007818:	cccccccd 	.word	0xcccccccd
 800781c:	40020000 	.word	0x40020000
 8007820:	bffdfbf8 	.word	0xbffdfbf8
 8007824:	40020400 	.word	0x40020400

08007828 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007840:	2b01      	cmp	r3, #1
 8007842:	d101      	bne.n	8007848 <HAL_DMA_Start_IT+0x20>
 8007844:	2302      	movs	r3, #2
 8007846:	e066      	b.n	8007916 <HAL_DMA_Start_IT+0xee>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	d155      	bne.n	8007908 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0201 	bic.w	r2, r2, #1
 8007878:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f9bb 	bl	8007bfc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788a:	2b00      	cmp	r3, #0
 800788c:	d008      	beq.n	80078a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 020e 	orr.w	r2, r2, #14
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e00f      	b.n	80078c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0204 	bic.w	r2, r2, #4
 80078ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 020a 	orr.w	r2, r2, #10
 80078be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0201 	orr.w	r2, r2, #1
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	e005      	b.n	8007914 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007910:	2302      	movs	r3, #2
 8007912:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800791e:	b480      	push	{r7}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d005      	beq.n	8007942 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2204      	movs	r2, #4
 800793a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	73fb      	strb	r3, [r7, #15]
 8007940:	e037      	b.n	80079b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 020e 	bic.w	r2, r2, #14
 8007950:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800795c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007960:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0201 	bic.w	r2, r2, #1
 8007970:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007976:	f003 021f 	and.w	r2, r3, #31
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797e:	2101      	movs	r1, #1
 8007980:	fa01 f202 	lsl.w	r2, r1, r2
 8007984:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800798e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00c      	beq.n	80079b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80079b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d00d      	beq.n	8007a04 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2204      	movs	r2, #4
 80079ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
 8007a02:	e047      	b.n	8007a94 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 020e 	bic.w	r2, r2, #14
 8007a12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0201 	bic.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a38:	f003 021f 	and.w	r2, r3, #31
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a40:	2101      	movs	r1, #1
 8007a42:	fa01 f202 	lsl.w	r2, r1, r2
 8007a46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00c      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007a72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	4798      	blx	r3
    }
  }
  return status;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aba:	f003 031f 	and.w	r3, r3, #31
 8007abe:	2204      	movs	r2, #4
 8007ac0:	409a      	lsls	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d026      	beq.n	8007b18 <HAL_DMA_IRQHandler+0x7a>
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d021      	beq.n	8007b18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d107      	bne.n	8007af2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0204 	bic.w	r2, r2, #4
 8007af0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af6:	f003 021f 	and.w	r2, r3, #31
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afe:	2104      	movs	r1, #4
 8007b00:	fa01 f202 	lsl.w	r2, r1, r2
 8007b04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d071      	beq.n	8007bf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007b16:	e06c      	b.n	8007bf2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b1c:	f003 031f 	and.w	r3, r3, #31
 8007b20:	2202      	movs	r2, #2
 8007b22:	409a      	lsls	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4013      	ands	r3, r2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d02e      	beq.n	8007b8a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d029      	beq.n	8007b8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10b      	bne.n	8007b5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 020a 	bic.w	r2, r2, #10
 8007b52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b60:	f003 021f 	and.w	r2, r3, #31
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b68:	2102      	movs	r1, #2
 8007b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8007b6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d038      	beq.n	8007bf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007b88:	e033      	b.n	8007bf2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b8e:	f003 031f 	and.w	r3, r3, #31
 8007b92:	2208      	movs	r2, #8
 8007b94:	409a      	lsls	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d02a      	beq.n	8007bf4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d025      	beq.n	8007bf4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 020e 	bic.w	r2, r2, #14
 8007bb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bbc:	f003 021f 	and.w	r2, r3, #31
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8007bca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d004      	beq.n	8007bf4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007bf2:	bf00      	nop
 8007bf4:	bf00      	nop
}
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007c24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c2a:	f003 021f 	and.w	r2, r3, #31
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c32:	2101      	movs	r1, #1
 8007c34:	fa01 f202 	lsl.w	r2, r1, r2
 8007c38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	2b10      	cmp	r3, #16
 8007c48:	d108      	bne.n	8007c5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007c5a:	e007      	b.n	8007c6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	60da      	str	r2, [r3, #12]
}
 8007c6c:	bf00      	nop
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	461a      	mov	r2, r3
 8007c86:	4b16      	ldr	r3, [pc, #88]	@ (8007ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d802      	bhi.n	8007c92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007c8c:	4b15      	ldr	r3, [pc, #84]	@ (8007ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e001      	b.n	8007c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007c92:	4b15      	ldr	r3, [pc, #84]	@ (8007ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007c94:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	3b08      	subs	r3, #8
 8007ca2:	4a12      	ldr	r2, [pc, #72]	@ (8007cec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca8:	091b      	lsrs	r3, r3, #4
 8007caa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb0:	089b      	lsrs	r3, r3, #2
 8007cb2:	009a      	lsls	r2, r3, #2
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8007cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	2201      	movs	r2, #1
 8007ccc:	409a      	lsls	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	40020407 	.word	0x40020407
 8007ce4:	40020800 	.word	0x40020800
 8007ce8:	40020820 	.word	0x40020820
 8007cec:	cccccccd 	.word	0xcccccccd
 8007cf0:	40020880 	.word	0x40020880

08007cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	4b0b      	ldr	r3, [pc, #44]	@ (8007d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a08      	ldr	r2, [pc, #32]	@ (8007d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007d16:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	f003 031f 	and.w	r3, r3, #31
 8007d20:	2201      	movs	r2, #1
 8007d22:	409a      	lsls	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007d28:	bf00      	nop
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	1000823f 	.word	0x1000823f
 8007d38:	40020940 	.word	0x40020940

08007d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d4a:	e15a      	b.n	8008002 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	2101      	movs	r1, #1
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	fa01 f303 	lsl.w	r3, r1, r3
 8007d58:	4013      	ands	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 814c 	beq.w	8007ffc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f003 0303 	and.w	r3, r3, #3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d005      	beq.n	8007d7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d130      	bne.n	8007dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	2203      	movs	r2, #3
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	4013      	ands	r3, r2
 8007d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007db2:	2201      	movs	r2, #1
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	43db      	mvns	r3, r3
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	091b      	lsrs	r3, r3, #4
 8007dc8:	f003 0201 	and.w	r2, r3, #1
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d017      	beq.n	8007e1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	2203      	movs	r2, #3
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d123      	bne.n	8007e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	08da      	lsrs	r2, r3, #3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3208      	adds	r2, #8
 8007e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	220f      	movs	r2, #15
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	43db      	mvns	r3, r3
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4013      	ands	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	691a      	ldr	r2, [r3, #16]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	08da      	lsrs	r2, r3, #3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3208      	adds	r2, #8
 8007e68:	6939      	ldr	r1, [r7, #16]
 8007e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	2203      	movs	r2, #3
 8007e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7e:	43db      	mvns	r3, r3
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4013      	ands	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f003 0203 	and.w	r2, r3, #3
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 80a6 	beq.w	8007ffc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8008020 <HAL_GPIO_Init+0x2e4>)
 8007eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eb4:	4a5a      	ldr	r2, [pc, #360]	@ (8008020 <HAL_GPIO_Init+0x2e4>)
 8007eb6:	f043 0301 	orr.w	r3, r3, #1
 8007eba:	6613      	str	r3, [r2, #96]	@ 0x60
 8007ebc:	4b58      	ldr	r3, [pc, #352]	@ (8008020 <HAL_GPIO_Init+0x2e4>)
 8007ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	60bb      	str	r3, [r7, #8]
 8007ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ec8:	4a56      	ldr	r2, [pc, #344]	@ (8008024 <HAL_GPIO_Init+0x2e8>)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	089b      	lsrs	r3, r3, #2
 8007ece:	3302      	adds	r3, #2
 8007ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	220f      	movs	r2, #15
 8007ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee4:	43db      	mvns	r3, r3
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	4013      	ands	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007ef2:	d01f      	beq.n	8007f34 <HAL_GPIO_Init+0x1f8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a4c      	ldr	r2, [pc, #304]	@ (8008028 <HAL_GPIO_Init+0x2ec>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d019      	beq.n	8007f30 <HAL_GPIO_Init+0x1f4>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a4b      	ldr	r2, [pc, #300]	@ (800802c <HAL_GPIO_Init+0x2f0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d013      	beq.n	8007f2c <HAL_GPIO_Init+0x1f0>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a4a      	ldr	r2, [pc, #296]	@ (8008030 <HAL_GPIO_Init+0x2f4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00d      	beq.n	8007f28 <HAL_GPIO_Init+0x1ec>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a49      	ldr	r2, [pc, #292]	@ (8008034 <HAL_GPIO_Init+0x2f8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d007      	beq.n	8007f24 <HAL_GPIO_Init+0x1e8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a48      	ldr	r2, [pc, #288]	@ (8008038 <HAL_GPIO_Init+0x2fc>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d101      	bne.n	8007f20 <HAL_GPIO_Init+0x1e4>
 8007f1c:	2305      	movs	r3, #5
 8007f1e:	e00a      	b.n	8007f36 <HAL_GPIO_Init+0x1fa>
 8007f20:	2306      	movs	r3, #6
 8007f22:	e008      	b.n	8007f36 <HAL_GPIO_Init+0x1fa>
 8007f24:	2304      	movs	r3, #4
 8007f26:	e006      	b.n	8007f36 <HAL_GPIO_Init+0x1fa>
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e004      	b.n	8007f36 <HAL_GPIO_Init+0x1fa>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e002      	b.n	8007f36 <HAL_GPIO_Init+0x1fa>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e000      	b.n	8007f36 <HAL_GPIO_Init+0x1fa>
 8007f34:	2300      	movs	r3, #0
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	f002 0203 	and.w	r2, r2, #3
 8007f3c:	0092      	lsls	r2, r2, #2
 8007f3e:	4093      	lsls	r3, r2
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f46:	4937      	ldr	r1, [pc, #220]	@ (8008024 <HAL_GPIO_Init+0x2e8>)
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	089b      	lsrs	r3, r3, #2
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f54:	4b39      	ldr	r3, [pc, #228]	@ (800803c <HAL_GPIO_Init+0x300>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4013      	ands	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007f78:	4a30      	ldr	r2, [pc, #192]	@ (800803c <HAL_GPIO_Init+0x300>)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800803c <HAL_GPIO_Init+0x300>)
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	43db      	mvns	r3, r3
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007fa2:	4a26      	ldr	r2, [pc, #152]	@ (800803c <HAL_GPIO_Init+0x300>)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007fa8:	4b24      	ldr	r3, [pc, #144]	@ (800803c <HAL_GPIO_Init+0x300>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800803c <HAL_GPIO_Init+0x300>)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800803c <HAL_GPIO_Init+0x300>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007ff6:	4a11      	ldr	r2, [pc, #68]	@ (800803c <HAL_GPIO_Init+0x300>)
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	3301      	adds	r3, #1
 8008000:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	fa22 f303 	lsr.w	r3, r2, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	f47f ae9d 	bne.w	8007d4c <HAL_GPIO_Init+0x10>
  }
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	371c      	adds	r7, #28
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	40021000 	.word	0x40021000
 8008024:	40010000 	.word	0x40010000
 8008028:	48000400 	.word	0x48000400
 800802c:	48000800 	.word	0x48000800
 8008030:	48000c00 	.word	0x48000c00
 8008034:	48001000 	.word	0x48001000
 8008038:	48001400 	.word	0x48001400
 800803c:	40010400 	.word	0x40010400

08008040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	887b      	ldrh	r3, [r7, #2]
 8008052:	4013      	ands	r3, r2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008058:	2301      	movs	r3, #1
 800805a:	73fb      	strb	r3, [r7, #15]
 800805c:	e001      	b.n	8008062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008062:	7bfb      	ldrb	r3, [r7, #15]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	807b      	strh	r3, [r7, #2]
 800807c:	4613      	mov	r3, r2
 800807e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008080:	787b      	ldrb	r3, [r7, #1]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008086:	887a      	ldrh	r2, [r7, #2]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800808c:	e002      	b.n	8008094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800808e:	887a      	ldrh	r2, [r7, #2]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80080b2:	887a      	ldrh	r2, [r7, #2]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4013      	ands	r3, r2
 80080b8:	041a      	lsls	r2, r3, #16
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	43d9      	mvns	r1, r3
 80080be:	887b      	ldrh	r3, [r7, #2]
 80080c0:	400b      	ands	r3, r1
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	619a      	str	r2, [r3, #24]
}
 80080c8:	bf00      	nop
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80080de:	4b08      	ldr	r3, [pc, #32]	@ (8008100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080e0:	695a      	ldr	r2, [r3, #20]
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	4013      	ands	r3, r2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d006      	beq.n	80080f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080ea:	4a05      	ldr	r2, [pc, #20]	@ (8008100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7f9 fba0 	bl	8001838 <HAL_GPIO_EXTI_Callback>
  }
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40010400 	.word	0x40010400

08008104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d141      	bne.n	8008196 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008112:	4b4b      	ldr	r3, [pc, #300]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800811a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800811e:	d131      	bne.n	8008184 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008120:	4b47      	ldr	r3, [pc, #284]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008126:	4a46      	ldr	r2, [pc, #280]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800812c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008130:	4b43      	ldr	r3, [pc, #268]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008138:	4a41      	ldr	r2, [pc, #260]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800813a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800813e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008140:	4b40      	ldr	r3, [pc, #256]	@ (8008244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2232      	movs	r2, #50	@ 0x32
 8008146:	fb02 f303 	mul.w	r3, r2, r3
 800814a:	4a3f      	ldr	r2, [pc, #252]	@ (8008248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800814c:	fba2 2303 	umull	r2, r3, r2, r3
 8008150:	0c9b      	lsrs	r3, r3, #18
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008156:	e002      	b.n	800815e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3b01      	subs	r3, #1
 800815c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800815e:	4b38      	ldr	r3, [pc, #224]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800816a:	d102      	bne.n	8008172 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1f2      	bne.n	8008158 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008172:	4b33      	ldr	r3, [pc, #204]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800817a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800817e:	d158      	bne.n	8008232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e057      	b.n	8008234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008184:	4b2e      	ldr	r3, [pc, #184]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800818a:	4a2d      	ldr	r2, [pc, #180]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800818c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008190:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008194:	e04d      	b.n	8008232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800819c:	d141      	bne.n	8008222 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800819e:	4b28      	ldr	r3, [pc, #160]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80081a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081aa:	d131      	bne.n	8008210 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081ac:	4b24      	ldr	r3, [pc, #144]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b2:	4a23      	ldr	r2, [pc, #140]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80081bc:	4b20      	ldr	r3, [pc, #128]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80081c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80081ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80081cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2232      	movs	r2, #50	@ 0x32
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
 80081d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80081d8:	fba2 2303 	umull	r2, r3, r2, r3
 80081dc:	0c9b      	lsrs	r3, r3, #18
 80081de:	3301      	adds	r3, #1
 80081e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081e2:	e002      	b.n	80081ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081ea:	4b15      	ldr	r3, [pc, #84]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081f6:	d102      	bne.n	80081fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f2      	bne.n	80081e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80081fe:	4b10      	ldr	r3, [pc, #64]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800820a:	d112      	bne.n	8008232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e011      	b.n	8008234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008210:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008216:	4a0a      	ldr	r2, [pc, #40]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800821c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008220:	e007      	b.n	8008232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008222:	4b07      	ldr	r3, [pc, #28]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800822a:	4a05      	ldr	r2, [pc, #20]	@ (8008240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800822c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008230:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	40007000 	.word	0x40007000
 8008244:	20000008 	.word	0x20000008
 8008248:	431bde83 	.word	0x431bde83

0800824c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008250:	4b05      	ldr	r3, [pc, #20]	@ (8008268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	4a04      	ldr	r2, [pc, #16]	@ (8008268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800825a:	6093      	str	r3, [r2, #8]
}
 800825c:	bf00      	nop
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40007000 	.word	0x40007000

0800826c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e2fe      	b.n	800887c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d075      	beq.n	8008376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800828a:	4b97      	ldr	r3, [pc, #604]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f003 030c 	and.w	r3, r3, #12
 8008292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008294:	4b94      	ldr	r3, [pc, #592]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f003 0303 	and.w	r3, r3, #3
 800829c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	2b0c      	cmp	r3, #12
 80082a2:	d102      	bne.n	80082aa <HAL_RCC_OscConfig+0x3e>
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d002      	beq.n	80082b0 <HAL_RCC_OscConfig+0x44>
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d10b      	bne.n	80082c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082b0:	4b8d      	ldr	r3, [pc, #564]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d05b      	beq.n	8008374 <HAL_RCC_OscConfig+0x108>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d157      	bne.n	8008374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e2d9      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082d0:	d106      	bne.n	80082e0 <HAL_RCC_OscConfig+0x74>
 80082d2:	4b85      	ldr	r3, [pc, #532]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a84      	ldr	r2, [pc, #528]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80082d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	e01d      	b.n	800831c <HAL_RCC_OscConfig+0xb0>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082e8:	d10c      	bne.n	8008304 <HAL_RCC_OscConfig+0x98>
 80082ea:	4b7f      	ldr	r3, [pc, #508]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a7e      	ldr	r2, [pc, #504]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80082f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	4b7c      	ldr	r3, [pc, #496]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a7b      	ldr	r2, [pc, #492]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80082fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	e00b      	b.n	800831c <HAL_RCC_OscConfig+0xb0>
 8008304:	4b78      	ldr	r3, [pc, #480]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a77      	ldr	r2, [pc, #476]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 800830a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	4b75      	ldr	r3, [pc, #468]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a74      	ldr	r2, [pc, #464]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800831a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d013      	beq.n	800834c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008324:	f7fd fb6a 	bl	80059fc <HAL_GetTick>
 8008328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800832a:	e008      	b.n	800833e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800832c:	f7fd fb66 	bl	80059fc <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b64      	cmp	r3, #100	@ 0x64
 8008338:	d901      	bls.n	800833e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e29e      	b.n	800887c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800833e:	4b6a      	ldr	r3, [pc, #424]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0f0      	beq.n	800832c <HAL_RCC_OscConfig+0xc0>
 800834a:	e014      	b.n	8008376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834c:	f7fd fb56 	bl	80059fc <HAL_GetTick>
 8008350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008354:	f7fd fb52 	bl	80059fc <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b64      	cmp	r3, #100	@ 0x64
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e28a      	b.n	800887c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008366:	4b60      	ldr	r3, [pc, #384]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1f0      	bne.n	8008354 <HAL_RCC_OscConfig+0xe8>
 8008372:	e000      	b.n	8008376 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d075      	beq.n	800846e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008382:	4b59      	ldr	r3, [pc, #356]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 030c 	and.w	r3, r3, #12
 800838a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800838c:	4b56      	ldr	r3, [pc, #344]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d102      	bne.n	80083a2 <HAL_RCC_OscConfig+0x136>
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d002      	beq.n	80083a8 <HAL_RCC_OscConfig+0x13c>
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d11f      	bne.n	80083e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083a8:	4b4f      	ldr	r3, [pc, #316]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <HAL_RCC_OscConfig+0x154>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d101      	bne.n	80083c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e25d      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c0:	4b49      	ldr	r3, [pc, #292]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	061b      	lsls	r3, r3, #24
 80083ce:	4946      	ldr	r1, [pc, #280]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80083d4:	4b45      	ldr	r3, [pc, #276]	@ (80084ec <HAL_RCC_OscConfig+0x280>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fd fac3 	bl	8005964 <HAL_InitTick>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d043      	beq.n	800846c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e249      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d023      	beq.n	8008438 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083f0:	4b3d      	ldr	r3, [pc, #244]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a3c      	ldr	r2, [pc, #240]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80083f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083fc:	f7fd fafe 	bl	80059fc <HAL_GetTick>
 8008400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008402:	e008      	b.n	8008416 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008404:	f7fd fafa 	bl	80059fc <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e232      	b.n	800887c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008416:	4b34      	ldr	r3, [pc, #208]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f0      	beq.n	8008404 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008422:	4b31      	ldr	r3, [pc, #196]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	061b      	lsls	r3, r3, #24
 8008430:	492d      	ldr	r1, [pc, #180]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008432:	4313      	orrs	r3, r2
 8008434:	604b      	str	r3, [r1, #4]
 8008436:	e01a      	b.n	800846e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008438:	4b2b      	ldr	r3, [pc, #172]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a2a      	ldr	r2, [pc, #168]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 800843e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008444:	f7fd fada 	bl	80059fc <HAL_GetTick>
 8008448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800844c:	f7fd fad6 	bl	80059fc <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e20e      	b.n	800887c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800845e:	4b22      	ldr	r3, [pc, #136]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1f0      	bne.n	800844c <HAL_RCC_OscConfig+0x1e0>
 800846a:	e000      	b.n	800846e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800846c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0308 	and.w	r3, r3, #8
 8008476:	2b00      	cmp	r3, #0
 8008478:	d041      	beq.n	80084fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01c      	beq.n	80084bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008482:	4b19      	ldr	r3, [pc, #100]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 8008484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008488:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 800848a:	f043 0301 	orr.w	r3, r3, #1
 800848e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008492:	f7fd fab3 	bl	80059fc <HAL_GetTick>
 8008496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008498:	e008      	b.n	80084ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800849a:	f7fd faaf 	bl	80059fc <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e1e7      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084ac:	4b0e      	ldr	r3, [pc, #56]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80084ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0ef      	beq.n	800849a <HAL_RCC_OscConfig+0x22e>
 80084ba:	e020      	b.n	80084fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084bc:	4b0a      	ldr	r3, [pc, #40]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80084be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084c2:	4a09      	ldr	r2, [pc, #36]	@ (80084e8 <HAL_RCC_OscConfig+0x27c>)
 80084c4:	f023 0301 	bic.w	r3, r3, #1
 80084c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084cc:	f7fd fa96 	bl	80059fc <HAL_GetTick>
 80084d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084d2:	e00d      	b.n	80084f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084d4:	f7fd fa92 	bl	80059fc <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d906      	bls.n	80084f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e1ca      	b.n	800887c <HAL_RCC_OscConfig+0x610>
 80084e6:	bf00      	nop
 80084e8:	40021000 	.word	0x40021000
 80084ec:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084f0:	4b8c      	ldr	r3, [pc, #560]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80084f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1ea      	bne.n	80084d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80a6 	beq.w	8008658 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800850c:	2300      	movs	r3, #0
 800850e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008510:	4b84      	ldr	r3, [pc, #528]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 8008512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <HAL_RCC_OscConfig+0x2b4>
 800851c:	2301      	movs	r3, #1
 800851e:	e000      	b.n	8008522 <HAL_RCC_OscConfig+0x2b6>
 8008520:	2300      	movs	r3, #0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00d      	beq.n	8008542 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008526:	4b7f      	ldr	r3, [pc, #508]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 8008528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800852a:	4a7e      	ldr	r2, [pc, #504]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 800852c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008530:	6593      	str	r3, [r2, #88]	@ 0x58
 8008532:	4b7c      	ldr	r3, [pc, #496]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 8008534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800853e:	2301      	movs	r3, #1
 8008540:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008542:	4b79      	ldr	r3, [pc, #484]	@ (8008728 <HAL_RCC_OscConfig+0x4bc>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800854a:	2b00      	cmp	r3, #0
 800854c:	d118      	bne.n	8008580 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800854e:	4b76      	ldr	r3, [pc, #472]	@ (8008728 <HAL_RCC_OscConfig+0x4bc>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a75      	ldr	r2, [pc, #468]	@ (8008728 <HAL_RCC_OscConfig+0x4bc>)
 8008554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800855a:	f7fd fa4f 	bl	80059fc <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008560:	e008      	b.n	8008574 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008562:	f7fd fa4b 	bl	80059fc <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e183      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008574:	4b6c      	ldr	r3, [pc, #432]	@ (8008728 <HAL_RCC_OscConfig+0x4bc>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0f0      	beq.n	8008562 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d108      	bne.n	800859a <HAL_RCC_OscConfig+0x32e>
 8008588:	4b66      	ldr	r3, [pc, #408]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 800858a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800858e:	4a65      	ldr	r2, [pc, #404]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008598:	e024      	b.n	80085e4 <HAL_RCC_OscConfig+0x378>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	2b05      	cmp	r3, #5
 80085a0:	d110      	bne.n	80085c4 <HAL_RCC_OscConfig+0x358>
 80085a2:	4b60      	ldr	r3, [pc, #384]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80085a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a8:	4a5e      	ldr	r2, [pc, #376]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80085aa:	f043 0304 	orr.w	r3, r3, #4
 80085ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80085b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80085b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b8:	4a5a      	ldr	r2, [pc, #360]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80085ba:	f043 0301 	orr.w	r3, r3, #1
 80085be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80085c2:	e00f      	b.n	80085e4 <HAL_RCC_OscConfig+0x378>
 80085c4:	4b57      	ldr	r3, [pc, #348]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80085c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ca:	4a56      	ldr	r2, [pc, #344]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80085cc:	f023 0301 	bic.w	r3, r3, #1
 80085d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80085d4:	4b53      	ldr	r3, [pc, #332]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085da:	4a52      	ldr	r2, [pc, #328]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80085dc:	f023 0304 	bic.w	r3, r3, #4
 80085e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d016      	beq.n	800861a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ec:	f7fd fa06 	bl	80059fc <HAL_GetTick>
 80085f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085f2:	e00a      	b.n	800860a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085f4:	f7fd fa02 	bl	80059fc <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008602:	4293      	cmp	r3, r2
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e138      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800860a:	4b46      	ldr	r3, [pc, #280]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0ed      	beq.n	80085f4 <HAL_RCC_OscConfig+0x388>
 8008618:	e015      	b.n	8008646 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800861a:	f7fd f9ef 	bl	80059fc <HAL_GetTick>
 800861e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008620:	e00a      	b.n	8008638 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008622:	f7fd f9eb 	bl	80059fc <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008630:	4293      	cmp	r3, r2
 8008632:	d901      	bls.n	8008638 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e121      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008638:	4b3a      	ldr	r3, [pc, #232]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 800863a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1ed      	bne.n	8008622 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008646:	7ffb      	ldrb	r3, [r7, #31]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d105      	bne.n	8008658 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800864c:	4b35      	ldr	r3, [pc, #212]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 800864e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008650:	4a34      	ldr	r2, [pc, #208]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 8008652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008656:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d03c      	beq.n	80086de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01c      	beq.n	80086a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800866c:	4b2d      	ldr	r3, [pc, #180]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 800866e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008672:	4a2c      	ldr	r2, [pc, #176]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 8008674:	f043 0301 	orr.w	r3, r3, #1
 8008678:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800867c:	f7fd f9be 	bl	80059fc <HAL_GetTick>
 8008680:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008684:	f7fd f9ba 	bl	80059fc <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e0f2      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008696:	4b23      	ldr	r3, [pc, #140]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 8008698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0ef      	beq.n	8008684 <HAL_RCC_OscConfig+0x418>
 80086a4:	e01b      	b.n	80086de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80086a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80086ae:	f023 0301 	bic.w	r3, r3, #1
 80086b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b6:	f7fd f9a1 	bl	80059fc <HAL_GetTick>
 80086ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80086bc:	e008      	b.n	80086d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086be:	f7fd f99d 	bl	80059fc <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e0d5      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80086d0:	4b14      	ldr	r3, [pc, #80]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80086d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1ef      	bne.n	80086be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80c9 	beq.w	800887a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 030c 	and.w	r3, r3, #12
 80086f0:	2b0c      	cmp	r3, #12
 80086f2:	f000 8083 	beq.w	80087fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d15e      	bne.n	80087bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086fe:	4b09      	ldr	r3, [pc, #36]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a08      	ldr	r2, [pc, #32]	@ (8008724 <HAL_RCC_OscConfig+0x4b8>)
 8008704:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870a:	f7fd f977 	bl	80059fc <HAL_GetTick>
 800870e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008710:	e00c      	b.n	800872c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008712:	f7fd f973 	bl	80059fc <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d905      	bls.n	800872c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e0ab      	b.n	800887c <HAL_RCC_OscConfig+0x610>
 8008724:	40021000 	.word	0x40021000
 8008728:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800872c:	4b55      	ldr	r3, [pc, #340]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1ec      	bne.n	8008712 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008738:	4b52      	ldr	r3, [pc, #328]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 800873a:	68da      	ldr	r2, [r3, #12]
 800873c:	4b52      	ldr	r3, [pc, #328]	@ (8008888 <HAL_RCC_OscConfig+0x61c>)
 800873e:	4013      	ands	r3, r2
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6a11      	ldr	r1, [r2, #32]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008748:	3a01      	subs	r2, #1
 800874a:	0112      	lsls	r2, r2, #4
 800874c:	4311      	orrs	r1, r2
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008752:	0212      	lsls	r2, r2, #8
 8008754:	4311      	orrs	r1, r2
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800875a:	0852      	lsrs	r2, r2, #1
 800875c:	3a01      	subs	r2, #1
 800875e:	0552      	lsls	r2, r2, #21
 8008760:	4311      	orrs	r1, r2
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008766:	0852      	lsrs	r2, r2, #1
 8008768:	3a01      	subs	r2, #1
 800876a:	0652      	lsls	r2, r2, #25
 800876c:	4311      	orrs	r1, r2
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008772:	06d2      	lsls	r2, r2, #27
 8008774:	430a      	orrs	r2, r1
 8008776:	4943      	ldr	r1, [pc, #268]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 8008778:	4313      	orrs	r3, r2
 800877a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800877c:	4b41      	ldr	r3, [pc, #260]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a40      	ldr	r2, [pc, #256]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 8008782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008786:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008788:	4b3e      	ldr	r3, [pc, #248]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	4a3d      	ldr	r2, [pc, #244]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 800878e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008792:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008794:	f7fd f932 	bl	80059fc <HAL_GetTick>
 8008798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800879a:	e008      	b.n	80087ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800879c:	f7fd f92e 	bl	80059fc <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e066      	b.n	800887c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087ae:	4b35      	ldr	r3, [pc, #212]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0f0      	beq.n	800879c <HAL_RCC_OscConfig+0x530>
 80087ba:	e05e      	b.n	800887a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087bc:	4b31      	ldr	r3, [pc, #196]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a30      	ldr	r2, [pc, #192]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 80087c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c8:	f7fd f918 	bl	80059fc <HAL_GetTick>
 80087cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087ce:	e008      	b.n	80087e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d0:	f7fd f914 	bl	80059fc <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e04c      	b.n	800887c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087e2:	4b28      	ldr	r3, [pc, #160]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f0      	bne.n	80087d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80087ee:	4b25      	ldr	r3, [pc, #148]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	4924      	ldr	r1, [pc, #144]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 80087f4:	4b25      	ldr	r3, [pc, #148]	@ (800888c <HAL_RCC_OscConfig+0x620>)
 80087f6:	4013      	ands	r3, r2
 80087f8:	60cb      	str	r3, [r1, #12]
 80087fa:	e03e      	b.n	800887a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e039      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008808:	4b1e      	ldr	r3, [pc, #120]	@ (8008884 <HAL_RCC_OscConfig+0x618>)
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f003 0203 	and.w	r2, r3, #3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	429a      	cmp	r2, r3
 800881a:	d12c      	bne.n	8008876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008826:	3b01      	subs	r3, #1
 8008828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800882a:	429a      	cmp	r2, r3
 800882c:	d123      	bne.n	8008876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008838:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800883a:	429a      	cmp	r2, r3
 800883c:	d11b      	bne.n	8008876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008848:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800884a:	429a      	cmp	r2, r3
 800884c:	d113      	bne.n	8008876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008858:	085b      	lsrs	r3, r3, #1
 800885a:	3b01      	subs	r3, #1
 800885c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800885e:	429a      	cmp	r2, r3
 8008860:	d109      	bne.n	8008876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800886c:	085b      	lsrs	r3, r3, #1
 800886e:	3b01      	subs	r3, #1
 8008870:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008872:	429a      	cmp	r2, r3
 8008874:	d001      	beq.n	800887a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e000      	b.n	800887c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	40021000 	.word	0x40021000
 8008888:	019f800c 	.word	0x019f800c
 800888c:	feeefffc 	.word	0xfeeefffc

08008890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e11e      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088a8:	4b91      	ldr	r3, [pc, #580]	@ (8008af0 <HAL_RCC_ClockConfig+0x260>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d910      	bls.n	80088d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088b6:	4b8e      	ldr	r3, [pc, #568]	@ (8008af0 <HAL_RCC_ClockConfig+0x260>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f023 020f 	bic.w	r2, r3, #15
 80088be:	498c      	ldr	r1, [pc, #560]	@ (8008af0 <HAL_RCC_ClockConfig+0x260>)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088c6:	4b8a      	ldr	r3, [pc, #552]	@ (8008af0 <HAL_RCC_ClockConfig+0x260>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d001      	beq.n	80088d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e106      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d073      	beq.n	80089cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d129      	bne.n	8008940 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088ec:	4b81      	ldr	r3, [pc, #516]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e0f4      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80088fc:	f000 f99e 	bl	8008c3c <RCC_GetSysClockFreqFromPLLSource>
 8008900:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	4a7c      	ldr	r2, [pc, #496]	@ (8008af8 <HAL_RCC_ClockConfig+0x268>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d93f      	bls.n	800898a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800890a:	4b7a      	ldr	r3, [pc, #488]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d009      	beq.n	800892a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800891e:	2b00      	cmp	r3, #0
 8008920:	d033      	beq.n	800898a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008926:	2b00      	cmp	r3, #0
 8008928:	d12f      	bne.n	800898a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800892a:	4b72      	ldr	r3, [pc, #456]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008932:	4a70      	ldr	r2, [pc, #448]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008938:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800893a:	2380      	movs	r3, #128	@ 0x80
 800893c:	617b      	str	r3, [r7, #20]
 800893e:	e024      	b.n	800898a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d107      	bne.n	8008958 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008948:	4b6a      	ldr	r3, [pc, #424]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e0c6      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008958:	4b66      	ldr	r3, [pc, #408]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e0be      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008968:	f000 f8ce 	bl	8008b08 <HAL_RCC_GetSysClockFreq>
 800896c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	4a61      	ldr	r2, [pc, #388]	@ (8008af8 <HAL_RCC_ClockConfig+0x268>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d909      	bls.n	800898a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008976:	4b5f      	ldr	r3, [pc, #380]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800897e:	4a5d      	ldr	r2, [pc, #372]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008984:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008986:	2380      	movs	r3, #128	@ 0x80
 8008988:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800898a:	4b5a      	ldr	r3, [pc, #360]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f023 0203 	bic.w	r2, r3, #3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	4957      	ldr	r1, [pc, #348]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008998:	4313      	orrs	r3, r2
 800899a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800899c:	f7fd f82e 	bl	80059fc <HAL_GetTick>
 80089a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089a2:	e00a      	b.n	80089ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089a4:	f7fd f82a 	bl	80059fc <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d901      	bls.n	80089ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e095      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ba:	4b4e      	ldr	r3, [pc, #312]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f003 020c 	and.w	r2, r3, #12
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d1eb      	bne.n	80089a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d023      	beq.n	8008a20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d005      	beq.n	80089f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089e4:	4b43      	ldr	r3, [pc, #268]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	4a42      	ldr	r2, [pc, #264]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 80089ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80089ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0308 	and.w	r3, r3, #8
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d007      	beq.n	8008a0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80089fc:	4b3d      	ldr	r3, [pc, #244]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a04:	4a3b      	ldr	r2, [pc, #236]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008a06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a0c:	4b39      	ldr	r3, [pc, #228]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	4936      	ldr	r1, [pc, #216]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	608b      	str	r3, [r1, #8]
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2b80      	cmp	r3, #128	@ 0x80
 8008a24:	d105      	bne.n	8008a32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008a26:	4b33      	ldr	r3, [pc, #204]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	4a32      	ldr	r2, [pc, #200]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008a2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a32:	4b2f      	ldr	r3, [pc, #188]	@ (8008af0 <HAL_RCC_ClockConfig+0x260>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 030f 	and.w	r3, r3, #15
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d21d      	bcs.n	8008a7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a40:	4b2b      	ldr	r3, [pc, #172]	@ (8008af0 <HAL_RCC_ClockConfig+0x260>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f023 020f 	bic.w	r2, r3, #15
 8008a48:	4929      	ldr	r1, [pc, #164]	@ (8008af0 <HAL_RCC_ClockConfig+0x260>)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a50:	f7fc ffd4 	bl	80059fc <HAL_GetTick>
 8008a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a56:	e00a      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a58:	f7fc ffd0 	bl	80059fc <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e03b      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a6e:	4b20      	ldr	r3, [pc, #128]	@ (8008af0 <HAL_RCC_ClockConfig+0x260>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d1ed      	bne.n	8008a58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d008      	beq.n	8008a9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a88:	4b1a      	ldr	r3, [pc, #104]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	4917      	ldr	r1, [pc, #92]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0308 	and.w	r3, r3, #8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d009      	beq.n	8008aba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008aa6:	4b13      	ldr	r3, [pc, #76]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	00db      	lsls	r3, r3, #3
 8008ab4:	490f      	ldr	r1, [pc, #60]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008aba:	f000 f825 	bl	8008b08 <HAL_RCC_GetSysClockFreq>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8008af4 <HAL_RCC_ClockConfig+0x264>)
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	091b      	lsrs	r3, r3, #4
 8008ac6:	f003 030f 	and.w	r3, r3, #15
 8008aca:	490c      	ldr	r1, [pc, #48]	@ (8008afc <HAL_RCC_ClockConfig+0x26c>)
 8008acc:	5ccb      	ldrb	r3, [r1, r3]
 8008ace:	f003 031f 	and.w	r3, r3, #31
 8008ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8008b00 <HAL_RCC_ClockConfig+0x270>)
 8008ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008ada:	4b0a      	ldr	r3, [pc, #40]	@ (8008b04 <HAL_RCC_ClockConfig+0x274>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fc ff40 	bl	8005964 <HAL_InitTick>
 8008ae4:	4603      	mov	r3, r0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	40022000 	.word	0x40022000
 8008af4:	40021000 	.word	0x40021000
 8008af8:	04c4b400 	.word	0x04c4b400
 8008afc:	08010f9c 	.word	0x08010f9c
 8008b00:	20000008 	.word	0x20000008
 8008b04:	2000000c 	.word	0x2000000c

08008b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8008bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f003 030c 	and.w	r3, r3, #12
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d102      	bne.n	8008b20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8008bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b1c:	613b      	str	r3, [r7, #16]
 8008b1e:	e047      	b.n	8008bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008b20:	4b27      	ldr	r3, [pc, #156]	@ (8008bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 030c 	and.w	r3, r3, #12
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d102      	bne.n	8008b32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b2c:	4b26      	ldr	r3, [pc, #152]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008b2e:	613b      	str	r3, [r7, #16]
 8008b30:	e03e      	b.n	8008bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008b32:	4b23      	ldr	r3, [pc, #140]	@ (8008bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f003 030c 	and.w	r3, r3, #12
 8008b3a:	2b0c      	cmp	r3, #12
 8008b3c:	d136      	bne.n	8008bac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b3e:	4b20      	ldr	r3, [pc, #128]	@ (8008bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f003 0303 	and.w	r3, r3, #3
 8008b46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b48:	4b1d      	ldr	r3, [pc, #116]	@ (8008bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	091b      	lsrs	r3, r3, #4
 8008b4e:	f003 030f 	and.w	r3, r3, #15
 8008b52:	3301      	adds	r3, #1
 8008b54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d10c      	bne.n	8008b76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b64:	4a16      	ldr	r2, [pc, #88]	@ (8008bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b66:	68d2      	ldr	r2, [r2, #12]
 8008b68:	0a12      	lsrs	r2, r2, #8
 8008b6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b6e:	fb02 f303 	mul.w	r3, r2, r3
 8008b72:	617b      	str	r3, [r7, #20]
      break;
 8008b74:	e00c      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b76:	4a13      	ldr	r2, [pc, #76]	@ (8008bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7e:	4a10      	ldr	r2, [pc, #64]	@ (8008bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b80:	68d2      	ldr	r2, [r2, #12]
 8008b82:	0a12      	lsrs	r2, r2, #8
 8008b84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b88:	fb02 f303 	mul.w	r3, r2, r3
 8008b8c:	617b      	str	r3, [r7, #20]
      break;
 8008b8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b90:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	0e5b      	lsrs	r3, r3, #25
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba8:	613b      	str	r3, [r7, #16]
 8008baa:	e001      	b.n	8008bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008bb0:	693b      	ldr	r3, [r7, #16]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	40021000 	.word	0x40021000
 8008bc4:	00f42400 	.word	0x00f42400
 8008bc8:	02dc6c00 	.word	0x02dc6c00

08008bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bd0:	4b03      	ldr	r3, [pc, #12]	@ (8008be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	20000008 	.word	0x20000008

08008be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008be8:	f7ff fff0 	bl	8008bcc <HAL_RCC_GetHCLKFreq>
 8008bec:	4602      	mov	r2, r0
 8008bee:	4b06      	ldr	r3, [pc, #24]	@ (8008c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	0a1b      	lsrs	r3, r3, #8
 8008bf4:	f003 0307 	and.w	r3, r3, #7
 8008bf8:	4904      	ldr	r1, [pc, #16]	@ (8008c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bfa:	5ccb      	ldrb	r3, [r1, r3]
 8008bfc:	f003 031f 	and.w	r3, r3, #31
 8008c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	40021000 	.word	0x40021000
 8008c0c:	08010fac 	.word	0x08010fac

08008c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008c14:	f7ff ffda 	bl	8008bcc <HAL_RCC_GetHCLKFreq>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	4b06      	ldr	r3, [pc, #24]	@ (8008c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	0adb      	lsrs	r3, r3, #11
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	4904      	ldr	r1, [pc, #16]	@ (8008c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c26:	5ccb      	ldrb	r3, [r1, r3]
 8008c28:	f003 031f 	and.w	r3, r3, #31
 8008c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	40021000 	.word	0x40021000
 8008c38:	08010fac 	.word	0x08010fac

08008c3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c42:	4b1e      	ldr	r3, [pc, #120]	@ (8008cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8008cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	091b      	lsrs	r3, r3, #4
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	3301      	adds	r3, #1
 8008c58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	d10c      	bne.n	8008c7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c60:	4a17      	ldr	r2, [pc, #92]	@ (8008cc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c68:	4a14      	ldr	r2, [pc, #80]	@ (8008cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c6a:	68d2      	ldr	r2, [r2, #12]
 8008c6c:	0a12      	lsrs	r2, r2, #8
 8008c6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008c72:	fb02 f303 	mul.w	r3, r2, r3
 8008c76:	617b      	str	r3, [r7, #20]
    break;
 8008c78:	e00c      	b.n	8008c94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c7a:	4a12      	ldr	r2, [pc, #72]	@ (8008cc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c82:	4a0e      	ldr	r2, [pc, #56]	@ (8008cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c84:	68d2      	ldr	r2, [r2, #12]
 8008c86:	0a12      	lsrs	r2, r2, #8
 8008c88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008c8c:	fb02 f303 	mul.w	r3, r2, r3
 8008c90:	617b      	str	r3, [r7, #20]
    break;
 8008c92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c94:	4b09      	ldr	r3, [pc, #36]	@ (8008cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	0e5b      	lsrs	r3, r3, #25
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008cae:	687b      	ldr	r3, [r7, #4]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	371c      	adds	r7, #28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	40021000 	.word	0x40021000
 8008cc0:	02dc6c00 	.word	0x02dc6c00
 8008cc4:	00f42400 	.word	0x00f42400

08008cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 8098 	beq.w	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cea:	4b43      	ldr	r3, [pc, #268]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10d      	bne.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cf6:	4b40      	ldr	r3, [pc, #256]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d02:	4b3d      	ldr	r3, [pc, #244]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d0a:	60bb      	str	r3, [r7, #8]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d12:	4b3a      	ldr	r3, [pc, #232]	@ (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a39      	ldr	r2, [pc, #228]	@ (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d1e:	f7fc fe6d 	bl	80059fc <HAL_GetTick>
 8008d22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d24:	e009      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d26:	f7fc fe69 	bl	80059fc <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d902      	bls.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	74fb      	strb	r3, [r7, #19]
        break;
 8008d38:	e005      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d3a:	4b30      	ldr	r3, [pc, #192]	@ (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0ef      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008d46:	7cfb      	ldrb	r3, [r7, #19]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d159      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d01e      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d019      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d68:	4b23      	ldr	r3, [pc, #140]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d74:	4b20      	ldr	r3, [pc, #128]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d84:	4b1c      	ldr	r3, [pc, #112]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d94:	4a18      	ldr	r2, [pc, #96]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d016      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da6:	f7fc fe29 	bl	80059fc <HAL_GetTick>
 8008daa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dac:	e00b      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dae:	f7fc fe25 	bl	80059fc <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d902      	bls.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	74fb      	strb	r3, [r7, #19]
            break;
 8008dc4:	e006      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d0ec      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008dd4:	7cfb      	ldrb	r3, [r7, #19]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10b      	bne.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dda:	4b07      	ldr	r3, [pc, #28]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008de8:	4903      	ldr	r1, [pc, #12]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008df0:	e008      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008df2:	7cfb      	ldrb	r3, [r7, #19]
 8008df4:	74bb      	strb	r3, [r7, #18]
 8008df6:	e005      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008df8:	40021000 	.word	0x40021000
 8008dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e00:	7cfb      	ldrb	r3, [r7, #19]
 8008e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e04:	7c7b      	ldrb	r3, [r7, #17]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d105      	bne.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e0a:	4ba7      	ldr	r3, [pc, #668]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e0e:	4aa6      	ldr	r2, [pc, #664]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00a      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e22:	4ba1      	ldr	r3, [pc, #644]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e28:	f023 0203 	bic.w	r2, r3, #3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	499d      	ldr	r1, [pc, #628]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00a      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e44:	4b98      	ldr	r3, [pc, #608]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e4a:	f023 020c 	bic.w	r2, r3, #12
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	4995      	ldr	r1, [pc, #596]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0304 	and.w	r3, r3, #4
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e66:	4b90      	ldr	r3, [pc, #576]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	498c      	ldr	r1, [pc, #560]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00a      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e88:	4b87      	ldr	r3, [pc, #540]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	4984      	ldr	r1, [pc, #528]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0310 	and.w	r3, r3, #16
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	497b      	ldr	r1, [pc, #492]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0320 	and.w	r3, r3, #32
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00a      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ecc:	4b76      	ldr	r3, [pc, #472]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	4973      	ldr	r1, [pc, #460]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008eee:	4b6e      	ldr	r3, [pc, #440]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ef4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	496a      	ldr	r1, [pc, #424]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f10:	4b65      	ldr	r3, [pc, #404]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	4962      	ldr	r1, [pc, #392]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f32:	4b5d      	ldr	r3, [pc, #372]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f40:	4959      	ldr	r1, [pc, #356]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00a      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f54:	4b54      	ldr	r3, [pc, #336]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f5a:	f023 0203 	bic.w	r2, r3, #3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f62:	4951      	ldr	r1, [pc, #324]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f76:	4b4c      	ldr	r3, [pc, #304]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f84:	4948      	ldr	r1, [pc, #288]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d015      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f98:	4b43      	ldr	r3, [pc, #268]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa6:	4940      	ldr	r1, [pc, #256]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fb6:	d105      	bne.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	4a3a      	ldr	r2, [pc, #232]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d015      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008fd0:	4b35      	ldr	r3, [pc, #212]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fde:	4932      	ldr	r1, [pc, #200]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fee:	d105      	bne.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ffa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d015      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009008:	4b27      	ldr	r3, [pc, #156]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800900a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800900e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009016:	4924      	ldr	r1, [pc, #144]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009018:	4313      	orrs	r3, r2
 800901a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009026:	d105      	bne.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009028:	4b1f      	ldr	r3, [pc, #124]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	4a1e      	ldr	r2, [pc, #120]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800902e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009032:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d015      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009040:	4b19      	ldr	r3, [pc, #100]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800904e:	4916      	ldr	r1, [pc, #88]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009050:	4313      	orrs	r3, r2
 8009052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800905a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800905e:	d105      	bne.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009060:	4b11      	ldr	r3, [pc, #68]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	4a10      	ldr	r2, [pc, #64]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800906a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d019      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009078:	4b0b      	ldr	r3, [pc, #44]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800907a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800907e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009086:	4908      	ldr	r1, [pc, #32]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009088:	4313      	orrs	r3, r2
 800908a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009096:	d109      	bne.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009098:	4b03      	ldr	r3, [pc, #12]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	4a02      	ldr	r2, [pc, #8]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800909e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090a2:	60d3      	str	r3, [r2, #12]
 80090a4:	e002      	b.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80090a6:	bf00      	nop
 80090a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d015      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80090b8:	4b29      	ldr	r3, [pc, #164]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090c6:	4926      	ldr	r1, [pc, #152]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090d6:	d105      	bne.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80090d8:	4b21      	ldr	r3, [pc, #132]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	4a20      	ldr	r2, [pc, #128]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d015      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80090f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090f6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090fe:	4918      	ldr	r1, [pc, #96]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009100:	4313      	orrs	r3, r2
 8009102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800910a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800910e:	d105      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009110:	4b13      	ldr	r3, [pc, #76]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	4a12      	ldr	r2, [pc, #72]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800911a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d015      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009128:	4b0d      	ldr	r3, [pc, #52]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800912a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800912e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009136:	490a      	ldr	r1, [pc, #40]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009138:	4313      	orrs	r3, r2
 800913a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009146:	d105      	bne.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009148:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	4a04      	ldr	r2, [pc, #16]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800914e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009152:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009154:	7cbb      	ldrb	r3, [r7, #18]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	40021000 	.word	0x40021000

08009164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e09d      	b.n	80092b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917a:	2b00      	cmp	r3, #0
 800917c:	d108      	bne.n	8009190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009186:	d009      	beq.n	800919c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	61da      	str	r2, [r3, #28]
 800918e:	e005      	b.n	800919c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7f9 fe2c 	bl	8002e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2202      	movs	r2, #2
 80091c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80091dc:	d902      	bls.n	80091e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]
 80091e2:	e002      	b.n	80091ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80091e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80091e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80091f2:	d007      	beq.n	8009204 <HAL_SPI_Init+0xa0>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80091fc:	d002      	beq.n	8009204 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009214:	431a      	orrs	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	431a      	orrs	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800923c:	431a      	orrs	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009246:	ea42 0103 	orr.w	r1, r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	0c1b      	lsrs	r3, r3, #16
 8009260:	f003 0204 	and.w	r2, r3, #4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009268:	f003 0310 	and.w	r3, r3, #16
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009280:	ea42 0103 	orr.w	r1, r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69da      	ldr	r2, [r3, #28]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b088      	sub	sp, #32
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	603b      	str	r3, [r7, #0]
 80092c6:	4613      	mov	r3, r2
 80092c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_SPI_Transmit+0x22>
 80092d8:	2302      	movs	r3, #2
 80092da:	e15f      	b.n	800959c <HAL_SPI_Transmit+0x2e2>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092e4:	f7fc fb8a 	bl	80059fc <HAL_GetTick>
 80092e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80092ea:	88fb      	ldrh	r3, [r7, #6]
 80092ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d002      	beq.n	8009300 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80092fa:	2302      	movs	r3, #2
 80092fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092fe:	e148      	b.n	8009592 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <HAL_SPI_Transmit+0x52>
 8009306:	88fb      	ldrh	r3, [r7, #6]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d102      	bne.n	8009312 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009310:	e13f      	b.n	8009592 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2203      	movs	r2, #3
 8009316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	88fa      	ldrh	r2, [r7, #6]
 800932a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	88fa      	ldrh	r2, [r7, #6]
 8009330:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800935c:	d10f      	bne.n	800937e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800936c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800937c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009388:	2b40      	cmp	r3, #64	@ 0x40
 800938a:	d007      	beq.n	800939c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800939a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80093a4:	d94f      	bls.n	8009446 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <HAL_SPI_Transmit+0xfa>
 80093ae:	8afb      	ldrh	r3, [r7, #22]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d142      	bne.n	800943a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b8:	881a      	ldrh	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c4:	1c9a      	adds	r2, r3, #2
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	3b01      	subs	r3, #1
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80093d8:	e02f      	b.n	800943a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d112      	bne.n	800940e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ec:	881a      	ldrh	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f8:	1c9a      	adds	r2, r3, #2
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009402:	b29b      	uxth	r3, r3
 8009404:	3b01      	subs	r3, #1
 8009406:	b29a      	uxth	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800940c:	e015      	b.n	800943a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800940e:	f7fc faf5 	bl	80059fc <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d803      	bhi.n	8009426 <HAL_SPI_Transmit+0x16c>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009424:	d102      	bne.n	800942c <HAL_SPI_Transmit+0x172>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d106      	bne.n	800943a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009438:	e0ab      	b.n	8009592 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800943e:	b29b      	uxth	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1ca      	bne.n	80093da <HAL_SPI_Transmit+0x120>
 8009444:	e080      	b.n	8009548 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d002      	beq.n	8009454 <HAL_SPI_Transmit+0x19a>
 800944e:	8afb      	ldrh	r3, [r7, #22]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d174      	bne.n	800953e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009458:	b29b      	uxth	r3, r3
 800945a:	2b01      	cmp	r3, #1
 800945c:	d912      	bls.n	8009484 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009462:	881a      	ldrh	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946e:	1c9a      	adds	r2, r3, #2
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009478:	b29b      	uxth	r3, r3
 800947a:	3b02      	subs	r3, #2
 800947c:	b29a      	uxth	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009482:	e05c      	b.n	800953e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	330c      	adds	r3, #12
 800948e:	7812      	ldrb	r2, [r2, #0]
 8009490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80094aa:	e048      	b.n	800953e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d12b      	bne.n	8009512 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094be:	b29b      	uxth	r3, r3
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d912      	bls.n	80094ea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c8:	881a      	ldrh	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d4:	1c9a      	adds	r2, r3, #2
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094de:	b29b      	uxth	r3, r3
 80094e0:	3b02      	subs	r3, #2
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80094e8:	e029      	b.n	800953e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	330c      	adds	r3, #12
 80094f4:	7812      	ldrb	r2, [r2, #0]
 80094f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009510:	e015      	b.n	800953e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009512:	f7fc fa73 	bl	80059fc <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	429a      	cmp	r2, r3
 8009520:	d803      	bhi.n	800952a <HAL_SPI_Transmit+0x270>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009528:	d102      	bne.n	8009530 <HAL_SPI_Transmit+0x276>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800953c:	e029      	b.n	8009592 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009542:	b29b      	uxth	r3, r3
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1b1      	bne.n	80094ac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f947 	bl	80097e0 <SPI_EndRxTxTransaction>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2220      	movs	r2, #32
 800955c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10a      	bne.n	800957c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009566:	2300      	movs	r3, #0
 8009568:	613b      	str	r3, [r7, #16]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	613b      	str	r3, [r7, #16]
 800957a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	77fb      	strb	r3, [r7, #31]
 8009588:	e003      	b.n	8009592 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800959a:	7ffb      	ldrb	r3, [r7, #31]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3720      	adds	r7, #32
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	4613      	mov	r3, r2
 80095b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80095b4:	f7fc fa22 	bl	80059fc <HAL_GetTick>
 80095b8:	4602      	mov	r2, r0
 80095ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095bc:	1a9b      	subs	r3, r3, r2
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4413      	add	r3, r2
 80095c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80095c4:	f7fc fa1a 	bl	80059fc <HAL_GetTick>
 80095c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80095ca:	4b39      	ldr	r3, [pc, #228]	@ (80096b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	015b      	lsls	r3, r3, #5
 80095d0:	0d1b      	lsrs	r3, r3, #20
 80095d2:	69fa      	ldr	r2, [r7, #28]
 80095d4:	fb02 f303 	mul.w	r3, r2, r3
 80095d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095da:	e054      	b.n	8009686 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e2:	d050      	beq.n	8009686 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80095e4:	f7fc fa0a 	bl	80059fc <HAL_GetTick>
 80095e8:	4602      	mov	r2, r0
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	69fa      	ldr	r2, [r7, #28]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d902      	bls.n	80095fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d13d      	bne.n	8009676 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009608:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009612:	d111      	bne.n	8009638 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800961c:	d004      	beq.n	8009628 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009626:	d107      	bne.n	8009638 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009636:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009640:	d10f      	bne.n	8009662 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009660:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e017      	b.n	80096a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	3b01      	subs	r3, #1
 8009684:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4013      	ands	r3, r2
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	429a      	cmp	r2, r3
 8009694:	bf0c      	ite	eq
 8009696:	2301      	moveq	r3, #1
 8009698:	2300      	movne	r3, #0
 800969a:	b2db      	uxtb	r3, r3
 800969c:	461a      	mov	r2, r3
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d19b      	bne.n	80095dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3720      	adds	r7, #32
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000008 	.word	0x20000008

080096b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	@ 0x28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80096c6:	f7fc f999 	bl	80059fc <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	4413      	add	r3, r2
 80096d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80096d6:	f7fc f991 	bl	80059fc <HAL_GetTick>
 80096da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	330c      	adds	r3, #12
 80096e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80096e4:	4b3d      	ldr	r3, [pc, #244]	@ (80097dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	4613      	mov	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	00da      	lsls	r2, r3, #3
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	0d1b      	lsrs	r3, r3, #20
 80096f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096f6:	fb02 f303 	mul.w	r3, r2, r3
 80096fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80096fc:	e060      	b.n	80097c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009704:	d107      	bne.n	8009716 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d104      	bne.n	8009716 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009714:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800971c:	d050      	beq.n	80097c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800971e:	f7fc f96d 	bl	80059fc <HAL_GetTick>
 8009722:	4602      	mov	r2, r0
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800972a:	429a      	cmp	r2, r3
 800972c:	d902      	bls.n	8009734 <SPI_WaitFifoStateUntilTimeout+0x80>
 800972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009730:	2b00      	cmp	r3, #0
 8009732:	d13d      	bne.n	80097b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009742:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800974c:	d111      	bne.n	8009772 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009756:	d004      	beq.n	8009762 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009760:	d107      	bne.n	8009772 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009770:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800977a:	d10f      	bne.n	800979c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800979a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e010      	b.n	80097d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	3b01      	subs	r3, #1
 80097be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689a      	ldr	r2, [r3, #8]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	4013      	ands	r3, r2
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d196      	bne.n	80096fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3728      	adds	r7, #40	@ 0x28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000008 	.word	0x20000008

080097e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7ff ff5b 	bl	80096b4 <SPI_WaitFifoStateUntilTimeout>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d007      	beq.n	8009814 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009808:	f043 0220 	orr.w	r2, r3, #32
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e027      	b.n	8009864 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2200      	movs	r2, #0
 800981c:	2180      	movs	r1, #128	@ 0x80
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff fec0 	bl	80095a4 <SPI_WaitFlagStateUntilTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d007      	beq.n	800983a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800982e:	f043 0220 	orr.w	r2, r3, #32
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e014      	b.n	8009864 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2200      	movs	r2, #0
 8009842:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff ff34 	bl	80096b4 <SPI_WaitFifoStateUntilTimeout>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d007      	beq.n	8009862 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009856:	f043 0220 	orr.w	r2, r3, #32
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e000      	b.n	8009864 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e049      	b.n	8009912 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7f9 fb02 	bl	8002e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2202      	movs	r2, #2
 800989c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3304      	adds	r3, #4
 80098a8:	4619      	mov	r1, r3
 80098aa:	4610      	mov	r0, r2
 80098ac:	f001 fae0 	bl	800ae70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b01      	cmp	r3, #1
 800992e:	d001      	beq.n	8009934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e054      	b.n	80099de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0201 	orr.w	r2, r2, #1
 800994a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a26      	ldr	r2, [pc, #152]	@ (80099ec <HAL_TIM_Base_Start_IT+0xd0>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d022      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x80>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800995e:	d01d      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x80>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a22      	ldr	r2, [pc, #136]	@ (80099f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d018      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x80>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a21      	ldr	r2, [pc, #132]	@ (80099f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d013      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x80>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a1f      	ldr	r2, [pc, #124]	@ (80099f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d00e      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x80>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a1e      	ldr	r2, [pc, #120]	@ (80099fc <HAL_TIM_Base_Start_IT+0xe0>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d009      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x80>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a1c      	ldr	r2, [pc, #112]	@ (8009a00 <HAL_TIM_Base_Start_IT+0xe4>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d004      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x80>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a1b      	ldr	r2, [pc, #108]	@ (8009a04 <HAL_TIM_Base_Start_IT+0xe8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d115      	bne.n	80099c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	689a      	ldr	r2, [r3, #8]
 80099a2:	4b19      	ldr	r3, [pc, #100]	@ (8009a08 <HAL_TIM_Base_Start_IT+0xec>)
 80099a4:	4013      	ands	r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b06      	cmp	r3, #6
 80099ac:	d015      	beq.n	80099da <HAL_TIM_Base_Start_IT+0xbe>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099b4:	d011      	beq.n	80099da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f042 0201 	orr.w	r2, r2, #1
 80099c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c6:	e008      	b.n	80099da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f042 0201 	orr.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	e000      	b.n	80099dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40012c00 	.word	0x40012c00
 80099f0:	40000400 	.word	0x40000400
 80099f4:	40000800 	.word	0x40000800
 80099f8:	40000c00 	.word	0x40000c00
 80099fc:	40013400 	.word	0x40013400
 8009a00:	40014000 	.word	0x40014000
 8009a04:	40015000 	.word	0x40015000
 8009a08:	00010007 	.word	0x00010007

08009a0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68da      	ldr	r2, [r3, #12]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 0201 	bic.w	r2, r2, #1
 8009a22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6a1a      	ldr	r2, [r3, #32]
 8009a2a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009a2e:	4013      	ands	r3, r2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10f      	bne.n	8009a54 <HAL_TIM_Base_Stop_IT+0x48>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6a1a      	ldr	r2, [r3, #32]
 8009a3a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009a3e:	4013      	ands	r3, r2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d107      	bne.n	8009a54 <HAL_TIM_Base_Stop_IT+0x48>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0201 	bic.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e049      	b.n	8009b10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d106      	bne.n	8009a96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f841 	bl	8009b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f001 f9e1 	bl	800ae70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d109      	bne.n	8009b50 <HAL_TIM_PWM_Start+0x24>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	bf14      	ite	ne
 8009b48:	2301      	movne	r3, #1
 8009b4a:	2300      	moveq	r3, #0
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	e03c      	b.n	8009bca <HAL_TIM_PWM_Start+0x9e>
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2b04      	cmp	r3, #4
 8009b54:	d109      	bne.n	8009b6a <HAL_TIM_PWM_Start+0x3e>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	bf14      	ite	ne
 8009b62:	2301      	movne	r3, #1
 8009b64:	2300      	moveq	r3, #0
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	e02f      	b.n	8009bca <HAL_TIM_PWM_Start+0x9e>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d109      	bne.n	8009b84 <HAL_TIM_PWM_Start+0x58>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	bf14      	ite	ne
 8009b7c:	2301      	movne	r3, #1
 8009b7e:	2300      	moveq	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	e022      	b.n	8009bca <HAL_TIM_PWM_Start+0x9e>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b0c      	cmp	r3, #12
 8009b88:	d109      	bne.n	8009b9e <HAL_TIM_PWM_Start+0x72>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	bf14      	ite	ne
 8009b96:	2301      	movne	r3, #1
 8009b98:	2300      	moveq	r3, #0
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	e015      	b.n	8009bca <HAL_TIM_PWM_Start+0x9e>
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b10      	cmp	r3, #16
 8009ba2:	d109      	bne.n	8009bb8 <HAL_TIM_PWM_Start+0x8c>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	bf14      	ite	ne
 8009bb0:	2301      	movne	r3, #1
 8009bb2:	2300      	moveq	r3, #0
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	e008      	b.n	8009bca <HAL_TIM_PWM_Start+0x9e>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	bf14      	ite	ne
 8009bc4:	2301      	movne	r3, #1
 8009bc6:	2300      	moveq	r3, #0
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e0a6      	b.n	8009d20 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d104      	bne.n	8009be2 <HAL_TIM_PWM_Start+0xb6>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009be0:	e023      	b.n	8009c2a <HAL_TIM_PWM_Start+0xfe>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d104      	bne.n	8009bf2 <HAL_TIM_PWM_Start+0xc6>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bf0:	e01b      	b.n	8009c2a <HAL_TIM_PWM_Start+0xfe>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d104      	bne.n	8009c02 <HAL_TIM_PWM_Start+0xd6>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c00:	e013      	b.n	8009c2a <HAL_TIM_PWM_Start+0xfe>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b0c      	cmp	r3, #12
 8009c06:	d104      	bne.n	8009c12 <HAL_TIM_PWM_Start+0xe6>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c10:	e00b      	b.n	8009c2a <HAL_TIM_PWM_Start+0xfe>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2b10      	cmp	r3, #16
 8009c16:	d104      	bne.n	8009c22 <HAL_TIM_PWM_Start+0xf6>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c20:	e003      	b.n	8009c2a <HAL_TIM_PWM_Start+0xfe>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2202      	movs	r2, #2
 8009c26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 fe76 	bl	800b924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8009d28 <HAL_TIM_PWM_Start+0x1fc>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d018      	beq.n	8009c74 <HAL_TIM_PWM_Start+0x148>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a39      	ldr	r2, [pc, #228]	@ (8009d2c <HAL_TIM_PWM_Start+0x200>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d013      	beq.n	8009c74 <HAL_TIM_PWM_Start+0x148>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a37      	ldr	r2, [pc, #220]	@ (8009d30 <HAL_TIM_PWM_Start+0x204>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d00e      	beq.n	8009c74 <HAL_TIM_PWM_Start+0x148>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a36      	ldr	r2, [pc, #216]	@ (8009d34 <HAL_TIM_PWM_Start+0x208>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d009      	beq.n	8009c74 <HAL_TIM_PWM_Start+0x148>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a34      	ldr	r2, [pc, #208]	@ (8009d38 <HAL_TIM_PWM_Start+0x20c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d004      	beq.n	8009c74 <HAL_TIM_PWM_Start+0x148>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a33      	ldr	r2, [pc, #204]	@ (8009d3c <HAL_TIM_PWM_Start+0x210>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d101      	bne.n	8009c78 <HAL_TIM_PWM_Start+0x14c>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e000      	b.n	8009c7a <HAL_TIM_PWM_Start+0x14e>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a25      	ldr	r2, [pc, #148]	@ (8009d28 <HAL_TIM_PWM_Start+0x1fc>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d022      	beq.n	8009cde <HAL_TIM_PWM_Start+0x1b2>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ca0:	d01d      	beq.n	8009cde <HAL_TIM_PWM_Start+0x1b2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a26      	ldr	r2, [pc, #152]	@ (8009d40 <HAL_TIM_PWM_Start+0x214>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d018      	beq.n	8009cde <HAL_TIM_PWM_Start+0x1b2>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a24      	ldr	r2, [pc, #144]	@ (8009d44 <HAL_TIM_PWM_Start+0x218>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d013      	beq.n	8009cde <HAL_TIM_PWM_Start+0x1b2>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a23      	ldr	r2, [pc, #140]	@ (8009d48 <HAL_TIM_PWM_Start+0x21c>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d00e      	beq.n	8009cde <HAL_TIM_PWM_Start+0x1b2>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a19      	ldr	r2, [pc, #100]	@ (8009d2c <HAL_TIM_PWM_Start+0x200>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d009      	beq.n	8009cde <HAL_TIM_PWM_Start+0x1b2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a18      	ldr	r2, [pc, #96]	@ (8009d30 <HAL_TIM_PWM_Start+0x204>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d004      	beq.n	8009cde <HAL_TIM_PWM_Start+0x1b2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a18      	ldr	r2, [pc, #96]	@ (8009d3c <HAL_TIM_PWM_Start+0x210>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d115      	bne.n	8009d0a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689a      	ldr	r2, [r3, #8]
 8009ce4:	4b19      	ldr	r3, [pc, #100]	@ (8009d4c <HAL_TIM_PWM_Start+0x220>)
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b06      	cmp	r3, #6
 8009cee:	d015      	beq.n	8009d1c <HAL_TIM_PWM_Start+0x1f0>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cf6:	d011      	beq.n	8009d1c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f042 0201 	orr.w	r2, r2, #1
 8009d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d08:	e008      	b.n	8009d1c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f042 0201 	orr.w	r2, r2, #1
 8009d18:	601a      	str	r2, [r3, #0]
 8009d1a:	e000      	b.n	8009d1e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	40012c00 	.word	0x40012c00
 8009d2c:	40013400 	.word	0x40013400
 8009d30:	40014000 	.word	0x40014000
 8009d34:	40014400 	.word	0x40014400
 8009d38:	40014800 	.word	0x40014800
 8009d3c:	40015000 	.word	0x40015000
 8009d40:	40000400 	.word	0x40000400
 8009d44:	40000800 	.word	0x40000800
 8009d48:	40000c00 	.word	0x40000c00
 8009d4c:	00010007 	.word	0x00010007

08009d50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f001 fdde 	bl	800b924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a40      	ldr	r2, [pc, #256]	@ (8009e70 <HAL_TIM_PWM_Stop+0x120>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d018      	beq.n	8009da4 <HAL_TIM_PWM_Stop+0x54>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a3f      	ldr	r2, [pc, #252]	@ (8009e74 <HAL_TIM_PWM_Stop+0x124>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d013      	beq.n	8009da4 <HAL_TIM_PWM_Stop+0x54>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a3d      	ldr	r2, [pc, #244]	@ (8009e78 <HAL_TIM_PWM_Stop+0x128>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00e      	beq.n	8009da4 <HAL_TIM_PWM_Stop+0x54>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a3c      	ldr	r2, [pc, #240]	@ (8009e7c <HAL_TIM_PWM_Stop+0x12c>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d009      	beq.n	8009da4 <HAL_TIM_PWM_Stop+0x54>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a3a      	ldr	r2, [pc, #232]	@ (8009e80 <HAL_TIM_PWM_Stop+0x130>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d004      	beq.n	8009da4 <HAL_TIM_PWM_Stop+0x54>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a39      	ldr	r2, [pc, #228]	@ (8009e84 <HAL_TIM_PWM_Stop+0x134>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d101      	bne.n	8009da8 <HAL_TIM_PWM_Stop+0x58>
 8009da4:	2301      	movs	r3, #1
 8009da6:	e000      	b.n	8009daa <HAL_TIM_PWM_Stop+0x5a>
 8009da8:	2300      	movs	r3, #0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d017      	beq.n	8009dde <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6a1a      	ldr	r2, [r3, #32]
 8009db4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009db8:	4013      	ands	r3, r2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10f      	bne.n	8009dde <HAL_TIM_PWM_Stop+0x8e>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6a1a      	ldr	r2, [r3, #32]
 8009dc4:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009dc8:	4013      	ands	r3, r2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d107      	bne.n	8009dde <HAL_TIM_PWM_Stop+0x8e>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6a1a      	ldr	r2, [r3, #32]
 8009de4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009de8:	4013      	ands	r3, r2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10f      	bne.n	8009e0e <HAL_TIM_PWM_Stop+0xbe>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6a1a      	ldr	r2, [r3, #32]
 8009df4:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009df8:	4013      	ands	r3, r2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d107      	bne.n	8009e0e <HAL_TIM_PWM_Stop+0xbe>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0201 	bic.w	r2, r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d104      	bne.n	8009e1e <HAL_TIM_PWM_Stop+0xce>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e1c:	e023      	b.n	8009e66 <HAL_TIM_PWM_Stop+0x116>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d104      	bne.n	8009e2e <HAL_TIM_PWM_Stop+0xde>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e2c:	e01b      	b.n	8009e66 <HAL_TIM_PWM_Stop+0x116>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d104      	bne.n	8009e3e <HAL_TIM_PWM_Stop+0xee>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e3c:	e013      	b.n	8009e66 <HAL_TIM_PWM_Stop+0x116>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b0c      	cmp	r3, #12
 8009e42:	d104      	bne.n	8009e4e <HAL_TIM_PWM_Stop+0xfe>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e4c:	e00b      	b.n	8009e66 <HAL_TIM_PWM_Stop+0x116>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b10      	cmp	r3, #16
 8009e52:	d104      	bne.n	8009e5e <HAL_TIM_PWM_Stop+0x10e>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e5c:	e003      	b.n	8009e66 <HAL_TIM_PWM_Stop+0x116>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	40012c00 	.word	0x40012c00
 8009e74:	40013400 	.word	0x40013400
 8009e78:	40014000 	.word	0x40014000
 8009e7c:	40014400 	.word	0x40014400
 8009e80:	40014800 	.word	0x40014800
 8009e84:	40015000 	.word	0x40015000

08009e88 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d109      	bne.n	8009eb4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	bf0c      	ite	eq
 8009eac:	2301      	moveq	r3, #1
 8009eae:	2300      	movne	r3, #0
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	e03c      	b.n	8009f2e <HAL_TIM_PWM_Start_DMA+0xa6>
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d109      	bne.n	8009ece <HAL_TIM_PWM_Start_DMA+0x46>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	bf0c      	ite	eq
 8009ec6:	2301      	moveq	r3, #1
 8009ec8:	2300      	movne	r3, #0
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	e02f      	b.n	8009f2e <HAL_TIM_PWM_Start_DMA+0xa6>
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2b08      	cmp	r3, #8
 8009ed2:	d109      	bne.n	8009ee8 <HAL_TIM_PWM_Start_DMA+0x60>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	bf0c      	ite	eq
 8009ee0:	2301      	moveq	r3, #1
 8009ee2:	2300      	movne	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	e022      	b.n	8009f2e <HAL_TIM_PWM_Start_DMA+0xa6>
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b0c      	cmp	r3, #12
 8009eec:	d109      	bne.n	8009f02 <HAL_TIM_PWM_Start_DMA+0x7a>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	bf0c      	ite	eq
 8009efa:	2301      	moveq	r3, #1
 8009efc:	2300      	movne	r3, #0
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	e015      	b.n	8009f2e <HAL_TIM_PWM_Start_DMA+0xa6>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b10      	cmp	r3, #16
 8009f06:	d109      	bne.n	8009f1c <HAL_TIM_PWM_Start_DMA+0x94>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	bf0c      	ite	eq
 8009f14:	2301      	moveq	r3, #1
 8009f16:	2300      	movne	r3, #0
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	e008      	b.n	8009f2e <HAL_TIM_PWM_Start_DMA+0xa6>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	bf0c      	ite	eq
 8009f28:	2301      	moveq	r3, #1
 8009f2a:	2300      	movne	r3, #0
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8009f32:	2302      	movs	r3, #2
 8009f34:	e1b5      	b.n	800a2a2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d109      	bne.n	8009f50 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	bf0c      	ite	eq
 8009f48:	2301      	moveq	r3, #1
 8009f4a:	2300      	movne	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	e03c      	b.n	8009fca <HAL_TIM_PWM_Start_DMA+0x142>
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	d109      	bne.n	8009f6a <HAL_TIM_PWM_Start_DMA+0xe2>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	bf0c      	ite	eq
 8009f62:	2301      	moveq	r3, #1
 8009f64:	2300      	movne	r3, #0
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	e02f      	b.n	8009fca <HAL_TIM_PWM_Start_DMA+0x142>
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d109      	bne.n	8009f84 <HAL_TIM_PWM_Start_DMA+0xfc>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	bf0c      	ite	eq
 8009f7c:	2301      	moveq	r3, #1
 8009f7e:	2300      	movne	r3, #0
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	e022      	b.n	8009fca <HAL_TIM_PWM_Start_DMA+0x142>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2b0c      	cmp	r3, #12
 8009f88:	d109      	bne.n	8009f9e <HAL_TIM_PWM_Start_DMA+0x116>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	bf0c      	ite	eq
 8009f96:	2301      	moveq	r3, #1
 8009f98:	2300      	movne	r3, #0
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	e015      	b.n	8009fca <HAL_TIM_PWM_Start_DMA+0x142>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2b10      	cmp	r3, #16
 8009fa2:	d109      	bne.n	8009fb8 <HAL_TIM_PWM_Start_DMA+0x130>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	bf0c      	ite	eq
 8009fb0:	2301      	moveq	r3, #1
 8009fb2:	2300      	movne	r3, #0
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	e008      	b.n	8009fca <HAL_TIM_PWM_Start_DMA+0x142>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	bf0c      	ite	eq
 8009fc4:	2301      	moveq	r3, #1
 8009fc6:	2300      	movne	r3, #0
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d034      	beq.n	800a038 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <HAL_TIM_PWM_Start_DMA+0x152>
 8009fd4:	887b      	ldrh	r3, [r7, #2]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e161      	b.n	800a2a2 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d104      	bne.n	8009fee <HAL_TIM_PWM_Start_DMA+0x166>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fec:	e026      	b.n	800a03c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d104      	bne.n	8009ffe <HAL_TIM_PWM_Start_DMA+0x176>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ffc:	e01e      	b.n	800a03c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b08      	cmp	r3, #8
 800a002:	d104      	bne.n	800a00e <HAL_TIM_PWM_Start_DMA+0x186>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a00c:	e016      	b.n	800a03c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b0c      	cmp	r3, #12
 800a012:	d104      	bne.n	800a01e <HAL_TIM_PWM_Start_DMA+0x196>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2202      	movs	r2, #2
 800a018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a01c:	e00e      	b.n	800a03c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b10      	cmp	r3, #16
 800a022:	d104      	bne.n	800a02e <HAL_TIM_PWM_Start_DMA+0x1a6>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2202      	movs	r2, #2
 800a028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a02c:	e006      	b.n	800a03c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2202      	movs	r2, #2
 800a032:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a036:	e001      	b.n	800a03c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e132      	b.n	800a2a2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2b0c      	cmp	r3, #12
 800a040:	f200 80ae 	bhi.w	800a1a0 <HAL_TIM_PWM_Start_DMA+0x318>
 800a044:	a201      	add	r2, pc, #4	@ (adr r2, 800a04c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800a046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04a:	bf00      	nop
 800a04c:	0800a081 	.word	0x0800a081
 800a050:	0800a1a1 	.word	0x0800a1a1
 800a054:	0800a1a1 	.word	0x0800a1a1
 800a058:	0800a1a1 	.word	0x0800a1a1
 800a05c:	0800a0c9 	.word	0x0800a0c9
 800a060:	0800a1a1 	.word	0x0800a1a1
 800a064:	0800a1a1 	.word	0x0800a1a1
 800a068:	0800a1a1 	.word	0x0800a1a1
 800a06c:	0800a111 	.word	0x0800a111
 800a070:	0800a1a1 	.word	0x0800a1a1
 800a074:	0800a1a1 	.word	0x0800a1a1
 800a078:	0800a1a1 	.word	0x0800a1a1
 800a07c:	0800a159 	.word	0x0800a159
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a084:	4a89      	ldr	r2, [pc, #548]	@ (800a2ac <HAL_TIM_PWM_Start_DMA+0x424>)
 800a086:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08c:	4a88      	ldr	r2, [pc, #544]	@ (800a2b0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800a08e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a094:	4a87      	ldr	r2, [pc, #540]	@ (800a2b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800a096:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a09c:	6879      	ldr	r1, [r7, #4]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3334      	adds	r3, #52	@ 0x34
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	887b      	ldrh	r3, [r7, #2]
 800a0a8:	f7fd fbbe 	bl	8007828 <HAL_DMA_Start_IT>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e0f5      	b.n	800a2a2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68da      	ldr	r2, [r3, #12]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0c4:	60da      	str	r2, [r3, #12]
      break;
 800a0c6:	e06e      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0cc:	4a77      	ldr	r2, [pc, #476]	@ (800a2ac <HAL_TIM_PWM_Start_DMA+0x424>)
 800a0ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d4:	4a76      	ldr	r2, [pc, #472]	@ (800a2b0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800a0d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0dc:	4a75      	ldr	r2, [pc, #468]	@ (800a2b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800a0de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a0e4:	6879      	ldr	r1, [r7, #4]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3338      	adds	r3, #56	@ 0x38
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	887b      	ldrh	r3, [r7, #2]
 800a0f0:	f7fd fb9a 	bl	8007828 <HAL_DMA_Start_IT>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e0d1      	b.n	800a2a2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a10c:	60da      	str	r2, [r3, #12]
      break;
 800a10e:	e04a      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a114:	4a65      	ldr	r2, [pc, #404]	@ (800a2ac <HAL_TIM_PWM_Start_DMA+0x424>)
 800a116:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11c:	4a64      	ldr	r2, [pc, #400]	@ (800a2b0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800a11e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a124:	4a63      	ldr	r2, [pc, #396]	@ (800a2b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800a126:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	333c      	adds	r3, #60	@ 0x3c
 800a134:	461a      	mov	r2, r3
 800a136:	887b      	ldrh	r3, [r7, #2]
 800a138:	f7fd fb76 	bl	8007828 <HAL_DMA_Start_IT>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e0ad      	b.n	800a2a2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a154:	60da      	str	r2, [r3, #12]
      break;
 800a156:	e026      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a15c:	4a53      	ldr	r2, [pc, #332]	@ (800a2ac <HAL_TIM_PWM_Start_DMA+0x424>)
 800a15e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a164:	4a52      	ldr	r2, [pc, #328]	@ (800a2b0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800a166:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a16c:	4a51      	ldr	r2, [pc, #324]	@ (800a2b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800a16e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3340      	adds	r3, #64	@ 0x40
 800a17c:	461a      	mov	r2, r3
 800a17e:	887b      	ldrh	r3, [r7, #2]
 800a180:	f7fd fb52 	bl	8007828 <HAL_DMA_Start_IT>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e089      	b.n	800a2a2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68da      	ldr	r2, [r3, #12]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a19c:	60da      	str	r2, [r3, #12]
      break;
 800a19e:	e002      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a1a4:	bf00      	nop
  }

  if (status == HAL_OK)
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d179      	bne.n	800a2a0 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	68b9      	ldr	r1, [r7, #8]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f001 fbb5 	bl	800b924 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a3e      	ldr	r2, [pc, #248]	@ (800a2b8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d018      	beq.n	800a1f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a3c      	ldr	r2, [pc, #240]	@ (800a2bc <HAL_TIM_PWM_Start_DMA+0x434>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d013      	beq.n	800a1f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a3b      	ldr	r2, [pc, #236]	@ (800a2c0 <HAL_TIM_PWM_Start_DMA+0x438>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d00e      	beq.n	800a1f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a39      	ldr	r2, [pc, #228]	@ (800a2c4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d009      	beq.n	800a1f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a38      	ldr	r2, [pc, #224]	@ (800a2c8 <HAL_TIM_PWM_Start_DMA+0x440>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d004      	beq.n	800a1f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a36      	ldr	r2, [pc, #216]	@ (800a2cc <HAL_TIM_PWM_Start_DMA+0x444>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d101      	bne.n	800a1fa <HAL_TIM_PWM_Start_DMA+0x372>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e000      	b.n	800a1fc <HAL_TIM_PWM_Start_DMA+0x374>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d007      	beq.n	800a210 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a20e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a28      	ldr	r2, [pc, #160]	@ (800a2b8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d022      	beq.n	800a260 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a222:	d01d      	beq.n	800a260 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a29      	ldr	r2, [pc, #164]	@ (800a2d0 <HAL_TIM_PWM_Start_DMA+0x448>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d018      	beq.n	800a260 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a28      	ldr	r2, [pc, #160]	@ (800a2d4 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d013      	beq.n	800a260 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a26      	ldr	r2, [pc, #152]	@ (800a2d8 <HAL_TIM_PWM_Start_DMA+0x450>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00e      	beq.n	800a260 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a1d      	ldr	r2, [pc, #116]	@ (800a2bc <HAL_TIM_PWM_Start_DMA+0x434>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d009      	beq.n	800a260 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1b      	ldr	r2, [pc, #108]	@ (800a2c0 <HAL_TIM_PWM_Start_DMA+0x438>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d004      	beq.n	800a260 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a1c      	ldr	r2, [pc, #112]	@ (800a2cc <HAL_TIM_PWM_Start_DMA+0x444>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d115      	bne.n	800a28c <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	4b1d      	ldr	r3, [pc, #116]	@ (800a2dc <HAL_TIM_PWM_Start_DMA+0x454>)
 800a268:	4013      	ands	r3, r2
 800a26a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	2b06      	cmp	r3, #6
 800a270:	d015      	beq.n	800a29e <HAL_TIM_PWM_Start_DMA+0x416>
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a278:	d011      	beq.n	800a29e <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f042 0201 	orr.w	r2, r2, #1
 800a288:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a28a:	e008      	b.n	800a29e <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f042 0201 	orr.w	r2, r2, #1
 800a29a:	601a      	str	r2, [r3, #0]
 800a29c:	e000      	b.n	800a2a0 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a29e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	0800ad5f 	.word	0x0800ad5f
 800a2b0:	0800ae07 	.word	0x0800ae07
 800a2b4:	0800accd 	.word	0x0800accd
 800a2b8:	40012c00 	.word	0x40012c00
 800a2bc:	40013400 	.word	0x40013400
 800a2c0:	40014000 	.word	0x40014000
 800a2c4:	40014400 	.word	0x40014400
 800a2c8:	40014800 	.word	0x40014800
 800a2cc:	40015000 	.word	0x40015000
 800a2d0:	40000400 	.word	0x40000400
 800a2d4:	40000800 	.word	0x40000800
 800a2d8:	40000c00 	.word	0x40000c00
 800a2dc:	00010007 	.word	0x00010007

0800a2e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b0c      	cmp	r3, #12
 800a2f2:	d855      	bhi.n	800a3a0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800a2f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2fc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800a2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fa:	bf00      	nop
 800a2fc:	0800a331 	.word	0x0800a331
 800a300:	0800a3a1 	.word	0x0800a3a1
 800a304:	0800a3a1 	.word	0x0800a3a1
 800a308:	0800a3a1 	.word	0x0800a3a1
 800a30c:	0800a34d 	.word	0x0800a34d
 800a310:	0800a3a1 	.word	0x0800a3a1
 800a314:	0800a3a1 	.word	0x0800a3a1
 800a318:	0800a3a1 	.word	0x0800a3a1
 800a31c:	0800a369 	.word	0x0800a369
 800a320:	0800a3a1 	.word	0x0800a3a1
 800a324:	0800a3a1 	.word	0x0800a3a1
 800a328:	0800a3a1 	.word	0x0800a3a1
 800a32c:	0800a385 	.word	0x0800a385
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a33e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a344:	4618      	mov	r0, r3
 800a346:	f7fd fb43 	bl	80079d0 <HAL_DMA_Abort_IT>
      break;
 800a34a:	e02c      	b.n	800a3a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a35a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a360:	4618      	mov	r0, r3
 800a362:	f7fd fb35 	bl	80079d0 <HAL_DMA_Abort_IT>
      break;
 800a366:	e01e      	b.n	800a3a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68da      	ldr	r2, [r3, #12]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a376:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fd fb27 	bl	80079d0 <HAL_DMA_Abort_IT>
      break;
 800a382:	e010      	b.n	800a3a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a392:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fd fb19 	bl	80079d0 <HAL_DMA_Abort_IT>
      break;
 800a39e:	e002      	b.n	800a3a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3a4:	bf00      	nop
  }

  if (status == HAL_OK)
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f040 8086 	bne.w	800a4ba <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f001 fab4 	bl	800b924 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a40      	ldr	r2, [pc, #256]	@ (800a4c4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d018      	beq.n	800a3f8 <HAL_TIM_PWM_Stop_DMA+0x118>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a3f      	ldr	r2, [pc, #252]	@ (800a4c8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d013      	beq.n	800a3f8 <HAL_TIM_PWM_Stop_DMA+0x118>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a3d      	ldr	r2, [pc, #244]	@ (800a4cc <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d00e      	beq.n	800a3f8 <HAL_TIM_PWM_Stop_DMA+0x118>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a3c      	ldr	r2, [pc, #240]	@ (800a4d0 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d009      	beq.n	800a3f8 <HAL_TIM_PWM_Stop_DMA+0x118>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a3a      	ldr	r2, [pc, #232]	@ (800a4d4 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d004      	beq.n	800a3f8 <HAL_TIM_PWM_Stop_DMA+0x118>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a39      	ldr	r2, [pc, #228]	@ (800a4d8 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d101      	bne.n	800a3fc <HAL_TIM_PWM_Stop_DMA+0x11c>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <HAL_TIM_PWM_Stop_DMA+0x11e>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d017      	beq.n	800a432 <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6a1a      	ldr	r2, [r3, #32]
 800a408:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a40c:	4013      	ands	r3, r2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10f      	bne.n	800a432 <HAL_TIM_PWM_Stop_DMA+0x152>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6a1a      	ldr	r2, [r3, #32]
 800a418:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a41c:	4013      	ands	r3, r2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d107      	bne.n	800a432 <HAL_TIM_PWM_Stop_DMA+0x152>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a430:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6a1a      	ldr	r2, [r3, #32]
 800a438:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a43c:	4013      	ands	r3, r2
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10f      	bne.n	800a462 <HAL_TIM_PWM_Stop_DMA+0x182>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	6a1a      	ldr	r2, [r3, #32]
 800a448:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a44c:	4013      	ands	r3, r2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d107      	bne.n	800a462 <HAL_TIM_PWM_Stop_DMA+0x182>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f022 0201 	bic.w	r2, r2, #1
 800a460:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d104      	bne.n	800a472 <HAL_TIM_PWM_Stop_DMA+0x192>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a470:	e023      	b.n	800a4ba <HAL_TIM_PWM_Stop_DMA+0x1da>
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b04      	cmp	r3, #4
 800a476:	d104      	bne.n	800a482 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a480:	e01b      	b.n	800a4ba <HAL_TIM_PWM_Stop_DMA+0x1da>
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b08      	cmp	r3, #8
 800a486:	d104      	bne.n	800a492 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a490:	e013      	b.n	800a4ba <HAL_TIM_PWM_Stop_DMA+0x1da>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b0c      	cmp	r3, #12
 800a496:	d104      	bne.n	800a4a2 <HAL_TIM_PWM_Stop_DMA+0x1c2>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a4a0:	e00b      	b.n	800a4ba <HAL_TIM_PWM_Stop_DMA+0x1da>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b10      	cmp	r3, #16
 800a4a6:	d104      	bne.n	800a4b2 <HAL_TIM_PWM_Stop_DMA+0x1d2>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a4b0:	e003      	b.n	800a4ba <HAL_TIM_PWM_Stop_DMA+0x1da>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	40012c00 	.word	0x40012c00
 800a4c8:	40013400 	.word	0x40013400
 800a4cc:	40014000 	.word	0x40014000
 800a4d0:	40014400 	.word	0x40014400
 800a4d4:	40014800 	.word	0x40014800
 800a4d8:	40015000 	.word	0x40015000

0800a4dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	f003 0302 	and.w	r3, r3, #2
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d020      	beq.n	800a540 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f003 0302 	and.w	r3, r3, #2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d01b      	beq.n	800a540 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f06f 0202 	mvn.w	r2, #2
 800a510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2201      	movs	r2, #1
 800a516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	f003 0303 	and.w	r3, r3, #3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d003      	beq.n	800a52e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fb9e 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a52c:	e005      	b.n	800a53a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fb90 	bl	800ac54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fba1 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	f003 0304 	and.w	r3, r3, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	d020      	beq.n	800a58c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01b      	beq.n	800a58c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f06f 0204 	mvn.w	r2, #4
 800a55c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2202      	movs	r2, #2
 800a562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fb78 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a578:	e005      	b.n	800a586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fb6a 	bl	800ac54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fb7b 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	f003 0308 	and.w	r3, r3, #8
 800a592:	2b00      	cmp	r3, #0
 800a594:	d020      	beq.n	800a5d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f003 0308 	and.w	r3, r3, #8
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d01b      	beq.n	800a5d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f06f 0208 	mvn.w	r2, #8
 800a5a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2204      	movs	r2, #4
 800a5ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	69db      	ldr	r3, [r3, #28]
 800a5b6:	f003 0303 	and.w	r3, r3, #3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fb52 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a5c4:	e005      	b.n	800a5d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fb44 	bl	800ac54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fb55 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f003 0310 	and.w	r3, r3, #16
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d020      	beq.n	800a624 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f003 0310 	and.w	r3, r3, #16
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d01b      	beq.n	800a624 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f06f 0210 	mvn.w	r2, #16
 800a5f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2208      	movs	r2, #8
 800a5fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fb2c 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a610:	e005      	b.n	800a61e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fb1e 	bl	800ac54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fb2f 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00c      	beq.n	800a648 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	2b00      	cmp	r3, #0
 800a636:	d007      	beq.n	800a648 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f06f 0201 	mvn.w	r2, #1
 800a640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f7f7 f9b4 	bl	80019b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d104      	bne.n	800a65c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00c      	beq.n	800a676 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a662:	2b00      	cmp	r3, #0
 800a664:	d007      	beq.n	800a676 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a66e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 fbd1 	bl	800be18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00c      	beq.n	800a69a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a686:	2b00      	cmp	r3, #0
 800a688:	d007      	beq.n	800a69a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f001 fbc9 	bl	800be2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00c      	beq.n	800a6be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d007      	beq.n	800a6be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a6b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 faf3 	bl	800aca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	f003 0320 	and.w	r3, r3, #32
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00c      	beq.n	800a6e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d007      	beq.n	800a6e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f06f 0220 	mvn.w	r2, #32
 800a6da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 fb91 	bl	800be04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00c      	beq.n	800a706 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d007      	beq.n	800a706 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a6fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f001 fb9d 	bl	800be40 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00c      	beq.n	800a72a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d007      	beq.n	800a72a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f001 fb95 	bl	800be54 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00c      	beq.n	800a74e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d007      	beq.n	800a74e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f001 fb8d 	bl	800be68 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00c      	beq.n	800a772 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d007      	beq.n	800a772 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a76a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f001 fb85 	bl	800be7c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a792:	2b01      	cmp	r3, #1
 800a794:	d101      	bne.n	800a79a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a796:	2302      	movs	r3, #2
 800a798:	e0ff      	b.n	800a99a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2b14      	cmp	r3, #20
 800a7a6:	f200 80f0 	bhi.w	800a98a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a805 	.word	0x0800a805
 800a7b4:	0800a98b 	.word	0x0800a98b
 800a7b8:	0800a98b 	.word	0x0800a98b
 800a7bc:	0800a98b 	.word	0x0800a98b
 800a7c0:	0800a845 	.word	0x0800a845
 800a7c4:	0800a98b 	.word	0x0800a98b
 800a7c8:	0800a98b 	.word	0x0800a98b
 800a7cc:	0800a98b 	.word	0x0800a98b
 800a7d0:	0800a887 	.word	0x0800a887
 800a7d4:	0800a98b 	.word	0x0800a98b
 800a7d8:	0800a98b 	.word	0x0800a98b
 800a7dc:	0800a98b 	.word	0x0800a98b
 800a7e0:	0800a8c7 	.word	0x0800a8c7
 800a7e4:	0800a98b 	.word	0x0800a98b
 800a7e8:	0800a98b 	.word	0x0800a98b
 800a7ec:	0800a98b 	.word	0x0800a98b
 800a7f0:	0800a909 	.word	0x0800a909
 800a7f4:	0800a98b 	.word	0x0800a98b
 800a7f8:	0800a98b 	.word	0x0800a98b
 800a7fc:	0800a98b 	.word	0x0800a98b
 800a800:	0800a949 	.word	0x0800a949
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68b9      	ldr	r1, [r7, #8]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 fbe4 	bl	800afd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	699a      	ldr	r2, [r3, #24]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0208 	orr.w	r2, r2, #8
 800a81e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	699a      	ldr	r2, [r3, #24]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f022 0204 	bic.w	r2, r2, #4
 800a82e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6999      	ldr	r1, [r3, #24]
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	430a      	orrs	r2, r1
 800a840:	619a      	str	r2, [r3, #24]
      break;
 800a842:	e0a5      	b.n	800a990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68b9      	ldr	r1, [r7, #8]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fc5e 	bl	800b10c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	699a      	ldr	r2, [r3, #24]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a85e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	699a      	ldr	r2, [r3, #24]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a86e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6999      	ldr	r1, [r3, #24]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	021a      	lsls	r2, r3, #8
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	430a      	orrs	r2, r1
 800a882:	619a      	str	r2, [r3, #24]
      break;
 800a884:	e084      	b.n	800a990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fcd1 	bl	800b234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	69da      	ldr	r2, [r3, #28]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f042 0208 	orr.w	r2, r2, #8
 800a8a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	69da      	ldr	r2, [r3, #28]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f022 0204 	bic.w	r2, r2, #4
 800a8b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69d9      	ldr	r1, [r3, #28]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	691a      	ldr	r2, [r3, #16]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	430a      	orrs	r2, r1
 800a8c2:	61da      	str	r2, [r3, #28]
      break;
 800a8c4:	e064      	b.n	800a990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68b9      	ldr	r1, [r7, #8]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fd43 	bl	800b358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	69da      	ldr	r2, [r3, #28]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	69da      	ldr	r2, [r3, #28]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	69d9      	ldr	r1, [r3, #28]
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	021a      	lsls	r2, r3, #8
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	430a      	orrs	r2, r1
 800a904:	61da      	str	r2, [r3, #28]
      break;
 800a906:	e043      	b.n	800a990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68b9      	ldr	r1, [r7, #8]
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fdb6 	bl	800b480 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f042 0208 	orr.w	r2, r2, #8
 800a922:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f022 0204 	bic.w	r2, r2, #4
 800a932:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	691a      	ldr	r2, [r3, #16]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a946:	e023      	b.n	800a990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68b9      	ldr	r1, [r7, #8]
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 fe00 	bl	800b554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a962:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a972:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	021a      	lsls	r2, r3, #8
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	430a      	orrs	r2, r1
 800a986:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a988:	e002      	b.n	800a990 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	75fb      	strb	r3, [r7, #23]
      break;
 800a98e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a998:	7dfb      	ldrb	r3, [r7, #23]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop

0800a9a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d101      	bne.n	800a9c0 <HAL_TIM_ConfigClockSource+0x1c>
 800a9bc:	2302      	movs	r3, #2
 800a9be:	e0f6      	b.n	800abae <HAL_TIM_ConfigClockSource+0x20a>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a9de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a9e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a6f      	ldr	r2, [pc, #444]	@ (800abb8 <HAL_TIM_ConfigClockSource+0x214>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	f000 80c1 	beq.w	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aa00:	4a6d      	ldr	r2, [pc, #436]	@ (800abb8 <HAL_TIM_ConfigClockSource+0x214>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	f200 80c6 	bhi.w	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa08:	4a6c      	ldr	r2, [pc, #432]	@ (800abbc <HAL_TIM_ConfigClockSource+0x218>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	f000 80b9 	beq.w	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aa10:	4a6a      	ldr	r2, [pc, #424]	@ (800abbc <HAL_TIM_ConfigClockSource+0x218>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	f200 80be 	bhi.w	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa18:	4a69      	ldr	r2, [pc, #420]	@ (800abc0 <HAL_TIM_ConfigClockSource+0x21c>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	f000 80b1 	beq.w	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aa20:	4a67      	ldr	r2, [pc, #412]	@ (800abc0 <HAL_TIM_ConfigClockSource+0x21c>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	f200 80b6 	bhi.w	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa28:	4a66      	ldr	r2, [pc, #408]	@ (800abc4 <HAL_TIM_ConfigClockSource+0x220>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	f000 80a9 	beq.w	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aa30:	4a64      	ldr	r2, [pc, #400]	@ (800abc4 <HAL_TIM_ConfigClockSource+0x220>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	f200 80ae 	bhi.w	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa38:	4a63      	ldr	r2, [pc, #396]	@ (800abc8 <HAL_TIM_ConfigClockSource+0x224>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	f000 80a1 	beq.w	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aa40:	4a61      	ldr	r2, [pc, #388]	@ (800abc8 <HAL_TIM_ConfigClockSource+0x224>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	f200 80a6 	bhi.w	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa48:	4a60      	ldr	r2, [pc, #384]	@ (800abcc <HAL_TIM_ConfigClockSource+0x228>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	f000 8099 	beq.w	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aa50:	4a5e      	ldr	r2, [pc, #376]	@ (800abcc <HAL_TIM_ConfigClockSource+0x228>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	f200 809e 	bhi.w	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa5c:	f000 8091 	beq.w	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aa60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa64:	f200 8096 	bhi.w	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa6c:	f000 8089 	beq.w	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aa70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa74:	f200 808e 	bhi.w	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa7c:	d03e      	beq.n	800aafc <HAL_TIM_ConfigClockSource+0x158>
 800aa7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa82:	f200 8087 	bhi.w	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa8a:	f000 8086 	beq.w	800ab9a <HAL_TIM_ConfigClockSource+0x1f6>
 800aa8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa92:	d87f      	bhi.n	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa94:	2b70      	cmp	r3, #112	@ 0x70
 800aa96:	d01a      	beq.n	800aace <HAL_TIM_ConfigClockSource+0x12a>
 800aa98:	2b70      	cmp	r3, #112	@ 0x70
 800aa9a:	d87b      	bhi.n	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa9c:	2b60      	cmp	r3, #96	@ 0x60
 800aa9e:	d050      	beq.n	800ab42 <HAL_TIM_ConfigClockSource+0x19e>
 800aaa0:	2b60      	cmp	r3, #96	@ 0x60
 800aaa2:	d877      	bhi.n	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aaa4:	2b50      	cmp	r3, #80	@ 0x50
 800aaa6:	d03c      	beq.n	800ab22 <HAL_TIM_ConfigClockSource+0x17e>
 800aaa8:	2b50      	cmp	r3, #80	@ 0x50
 800aaaa:	d873      	bhi.n	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aaac:	2b40      	cmp	r3, #64	@ 0x40
 800aaae:	d058      	beq.n	800ab62 <HAL_TIM_ConfigClockSource+0x1be>
 800aab0:	2b40      	cmp	r3, #64	@ 0x40
 800aab2:	d86f      	bhi.n	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aab4:	2b30      	cmp	r3, #48	@ 0x30
 800aab6:	d064      	beq.n	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aab8:	2b30      	cmp	r3, #48	@ 0x30
 800aaba:	d86b      	bhi.n	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aabc:	2b20      	cmp	r3, #32
 800aabe:	d060      	beq.n	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aac0:	2b20      	cmp	r3, #32
 800aac2:	d867      	bhi.n	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d05c      	beq.n	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aac8:	2b10      	cmp	r3, #16
 800aaca:	d05a      	beq.n	800ab82 <HAL_TIM_ConfigClockSource+0x1de>
 800aacc:	e062      	b.n	800ab94 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aade:	f000 ff01 	bl	800b8e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aaf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	609a      	str	r2, [r3, #8]
      break;
 800aafa:	e04f      	b.n	800ab9c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab0c:	f000 feea 	bl	800b8e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	689a      	ldr	r2, [r3, #8]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab1e:	609a      	str	r2, [r3, #8]
      break;
 800ab20:	e03c      	b.n	800ab9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f000 fe5c 	bl	800b7ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2150      	movs	r1, #80	@ 0x50
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 feb5 	bl	800b8aa <TIM_ITRx_SetConfig>
      break;
 800ab40:	e02c      	b.n	800ab9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab4e:	461a      	mov	r2, r3
 800ab50:	f000 fe7b 	bl	800b84a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2160      	movs	r1, #96	@ 0x60
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 fea5 	bl	800b8aa <TIM_ITRx_SetConfig>
      break;
 800ab60:	e01c      	b.n	800ab9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f000 fe3c 	bl	800b7ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2140      	movs	r1, #64	@ 0x40
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 fe95 	bl	800b8aa <TIM_ITRx_SetConfig>
      break;
 800ab80:	e00c      	b.n	800ab9c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	f000 fe8c 	bl	800b8aa <TIM_ITRx_SetConfig>
      break;
 800ab92:	e003      	b.n	800ab9c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	73fb      	strb	r3, [r7, #15]
      break;
 800ab98:	e000      	b.n	800ab9c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800ab9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800abac:	7bfb      	ldrb	r3, [r7, #15]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	00100070 	.word	0x00100070
 800abbc:	00100060 	.word	0x00100060
 800abc0:	00100050 	.word	0x00100050
 800abc4:	00100040 	.word	0x00100040
 800abc8:	00100030 	.word	0x00100030
 800abcc:	00100020 	.word	0x00100020

0800abd0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d101      	bne.n	800abe8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800abe4:	2302      	movs	r3, #2
 800abe6:	e031      	b.n	800ac4c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fd16 	bl	800b62c <TIM_SlaveTimer_SetConfig>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d009      	beq.n	800ac1a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e018      	b.n	800ac4c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68da      	ldr	r2, [r3, #12]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac28:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68da      	ldr	r2, [r3, #12]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ac38:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d107      	bne.n	800acf4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800acf2:	e02a      	b.n	800ad4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d107      	bne.n	800ad0e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2202      	movs	r2, #2
 800ad02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad0c:	e01d      	b.n	800ad4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d107      	bne.n	800ad28 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2204      	movs	r2, #4
 800ad1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2201      	movs	r2, #1
 800ad22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad26:	e010      	b.n	800ad4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d107      	bne.n	800ad42 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2208      	movs	r2, #8
 800ad36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad40:	e003      	b.n	800ad4a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f7ff ffb4 	bl	800acb8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	771a      	strb	r2, [r3, #28]
}
 800ad56:	bf00      	nop
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b084      	sub	sp, #16
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d10b      	bne.n	800ad8e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	69db      	ldr	r3, [r3, #28]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d136      	bne.n	800adf2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad8c:	e031      	b.n	800adf2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d10b      	bne.n	800adb0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d125      	bne.n	800adf2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800adae:	e020      	b.n	800adf2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d10b      	bne.n	800add2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2204      	movs	r2, #4
 800adbe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	69db      	ldr	r3, [r3, #28]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d114      	bne.n	800adf2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800add0:	e00f      	b.n	800adf2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	429a      	cmp	r2, r3
 800adda:	d10a      	bne.n	800adf2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2208      	movs	r2, #8
 800ade0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	69db      	ldr	r3, [r3, #28]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d103      	bne.n	800adf2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7ff ff42 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	771a      	strb	r2, [r3, #28]
}
 800adfe:	bf00      	nop
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae12:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d103      	bne.n	800ae26 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2201      	movs	r2, #1
 800ae22:	771a      	strb	r2, [r3, #28]
 800ae24:	e019      	b.n	800ae5a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d103      	bne.n	800ae38 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2202      	movs	r2, #2
 800ae34:	771a      	strb	r2, [r3, #28]
 800ae36:	e010      	b.n	800ae5a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d103      	bne.n	800ae4a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2204      	movs	r2, #4
 800ae46:	771a      	strb	r2, [r3, #28]
 800ae48:	e007      	b.n	800ae5a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d102      	bne.n	800ae5a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2208      	movs	r2, #8
 800ae58:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f7ff ff18 	bl	800ac90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	771a      	strb	r2, [r3, #28]
}
 800ae66:	bf00      	nop
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
	...

0800ae70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a4c      	ldr	r2, [pc, #304]	@ (800afb4 <TIM_Base_SetConfig+0x144>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d017      	beq.n	800aeb8 <TIM_Base_SetConfig+0x48>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae8e:	d013      	beq.n	800aeb8 <TIM_Base_SetConfig+0x48>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a49      	ldr	r2, [pc, #292]	@ (800afb8 <TIM_Base_SetConfig+0x148>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d00f      	beq.n	800aeb8 <TIM_Base_SetConfig+0x48>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a48      	ldr	r2, [pc, #288]	@ (800afbc <TIM_Base_SetConfig+0x14c>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d00b      	beq.n	800aeb8 <TIM_Base_SetConfig+0x48>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a47      	ldr	r2, [pc, #284]	@ (800afc0 <TIM_Base_SetConfig+0x150>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d007      	beq.n	800aeb8 <TIM_Base_SetConfig+0x48>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a46      	ldr	r2, [pc, #280]	@ (800afc4 <TIM_Base_SetConfig+0x154>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d003      	beq.n	800aeb8 <TIM_Base_SetConfig+0x48>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a45      	ldr	r2, [pc, #276]	@ (800afc8 <TIM_Base_SetConfig+0x158>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d108      	bne.n	800aeca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a39      	ldr	r2, [pc, #228]	@ (800afb4 <TIM_Base_SetConfig+0x144>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d023      	beq.n	800af1a <TIM_Base_SetConfig+0xaa>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aed8:	d01f      	beq.n	800af1a <TIM_Base_SetConfig+0xaa>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a36      	ldr	r2, [pc, #216]	@ (800afb8 <TIM_Base_SetConfig+0x148>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d01b      	beq.n	800af1a <TIM_Base_SetConfig+0xaa>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a35      	ldr	r2, [pc, #212]	@ (800afbc <TIM_Base_SetConfig+0x14c>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d017      	beq.n	800af1a <TIM_Base_SetConfig+0xaa>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a34      	ldr	r2, [pc, #208]	@ (800afc0 <TIM_Base_SetConfig+0x150>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d013      	beq.n	800af1a <TIM_Base_SetConfig+0xaa>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a33      	ldr	r2, [pc, #204]	@ (800afc4 <TIM_Base_SetConfig+0x154>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d00f      	beq.n	800af1a <TIM_Base_SetConfig+0xaa>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a33      	ldr	r2, [pc, #204]	@ (800afcc <TIM_Base_SetConfig+0x15c>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d00b      	beq.n	800af1a <TIM_Base_SetConfig+0xaa>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a32      	ldr	r2, [pc, #200]	@ (800afd0 <TIM_Base_SetConfig+0x160>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d007      	beq.n	800af1a <TIM_Base_SetConfig+0xaa>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a31      	ldr	r2, [pc, #196]	@ (800afd4 <TIM_Base_SetConfig+0x164>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d003      	beq.n	800af1a <TIM_Base_SetConfig+0xaa>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a2c      	ldr	r2, [pc, #176]	@ (800afc8 <TIM_Base_SetConfig+0x158>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d108      	bne.n	800af2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a18      	ldr	r2, [pc, #96]	@ (800afb4 <TIM_Base_SetConfig+0x144>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d013      	beq.n	800af80 <TIM_Base_SetConfig+0x110>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a1a      	ldr	r2, [pc, #104]	@ (800afc4 <TIM_Base_SetConfig+0x154>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d00f      	beq.n	800af80 <TIM_Base_SetConfig+0x110>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a1a      	ldr	r2, [pc, #104]	@ (800afcc <TIM_Base_SetConfig+0x15c>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d00b      	beq.n	800af80 <TIM_Base_SetConfig+0x110>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a19      	ldr	r2, [pc, #100]	@ (800afd0 <TIM_Base_SetConfig+0x160>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d007      	beq.n	800af80 <TIM_Base_SetConfig+0x110>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a18      	ldr	r2, [pc, #96]	@ (800afd4 <TIM_Base_SetConfig+0x164>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d003      	beq.n	800af80 <TIM_Base_SetConfig+0x110>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a13      	ldr	r2, [pc, #76]	@ (800afc8 <TIM_Base_SetConfig+0x158>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d103      	bne.n	800af88 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	691a      	ldr	r2, [r3, #16]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	2b01      	cmp	r3, #1
 800af98:	d105      	bne.n	800afa6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	f023 0201 	bic.w	r2, r3, #1
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	611a      	str	r2, [r3, #16]
  }
}
 800afa6:	bf00      	nop
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	40012c00 	.word	0x40012c00
 800afb8:	40000400 	.word	0x40000400
 800afbc:	40000800 	.word	0x40000800
 800afc0:	40000c00 	.word	0x40000c00
 800afc4:	40013400 	.word	0x40013400
 800afc8:	40015000 	.word	0x40015000
 800afcc:	40014000 	.word	0x40014000
 800afd0:	40014400 	.word	0x40014400
 800afd4:	40014800 	.word	0x40014800

0800afd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afd8:	b480      	push	{r7}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	f023 0201 	bic.w	r2, r3, #1
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f023 0303 	bic.w	r3, r3, #3
 800b012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f023 0302 	bic.w	r3, r3, #2
 800b024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	697a      	ldr	r2, [r7, #20]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a30      	ldr	r2, [pc, #192]	@ (800b0f4 <TIM_OC1_SetConfig+0x11c>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d013      	beq.n	800b060 <TIM_OC1_SetConfig+0x88>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a2f      	ldr	r2, [pc, #188]	@ (800b0f8 <TIM_OC1_SetConfig+0x120>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d00f      	beq.n	800b060 <TIM_OC1_SetConfig+0x88>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a2e      	ldr	r2, [pc, #184]	@ (800b0fc <TIM_OC1_SetConfig+0x124>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d00b      	beq.n	800b060 <TIM_OC1_SetConfig+0x88>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a2d      	ldr	r2, [pc, #180]	@ (800b100 <TIM_OC1_SetConfig+0x128>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d007      	beq.n	800b060 <TIM_OC1_SetConfig+0x88>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a2c      	ldr	r2, [pc, #176]	@ (800b104 <TIM_OC1_SetConfig+0x12c>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d003      	beq.n	800b060 <TIM_OC1_SetConfig+0x88>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a2b      	ldr	r2, [pc, #172]	@ (800b108 <TIM_OC1_SetConfig+0x130>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d10c      	bne.n	800b07a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f023 0308 	bic.w	r3, r3, #8
 800b066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	4313      	orrs	r3, r2
 800b070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f023 0304 	bic.w	r3, r3, #4
 800b078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0f4 <TIM_OC1_SetConfig+0x11c>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d013      	beq.n	800b0aa <TIM_OC1_SetConfig+0xd2>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a1c      	ldr	r2, [pc, #112]	@ (800b0f8 <TIM_OC1_SetConfig+0x120>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d00f      	beq.n	800b0aa <TIM_OC1_SetConfig+0xd2>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a1b      	ldr	r2, [pc, #108]	@ (800b0fc <TIM_OC1_SetConfig+0x124>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d00b      	beq.n	800b0aa <TIM_OC1_SetConfig+0xd2>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a1a      	ldr	r2, [pc, #104]	@ (800b100 <TIM_OC1_SetConfig+0x128>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d007      	beq.n	800b0aa <TIM_OC1_SetConfig+0xd2>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a19      	ldr	r2, [pc, #100]	@ (800b104 <TIM_OC1_SetConfig+0x12c>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d003      	beq.n	800b0aa <TIM_OC1_SetConfig+0xd2>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a18      	ldr	r2, [pc, #96]	@ (800b108 <TIM_OC1_SetConfig+0x130>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d111      	bne.n	800b0ce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b0b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	693a      	ldr	r2, [r7, #16]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	621a      	str	r2, [r3, #32]
}
 800b0e8:	bf00      	nop
 800b0ea:	371c      	adds	r7, #28
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	40012c00 	.word	0x40012c00
 800b0f8:	40013400 	.word	0x40013400
 800b0fc:	40014000 	.word	0x40014000
 800b100:	40014400 	.word	0x40014400
 800b104:	40014800 	.word	0x40014800
 800b108:	40015000 	.word	0x40015000

0800b10c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b087      	sub	sp, #28
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a1b      	ldr	r3, [r3, #32]
 800b120:	f023 0210 	bic.w	r2, r3, #16
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b13a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b13e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	021b      	lsls	r3, r3, #8
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	4313      	orrs	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f023 0320 	bic.w	r3, r3, #32
 800b15a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	011b      	lsls	r3, r3, #4
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	4313      	orrs	r3, r2
 800b166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a2c      	ldr	r2, [pc, #176]	@ (800b21c <TIM_OC2_SetConfig+0x110>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d007      	beq.n	800b180 <TIM_OC2_SetConfig+0x74>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a2b      	ldr	r2, [pc, #172]	@ (800b220 <TIM_OC2_SetConfig+0x114>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d003      	beq.n	800b180 <TIM_OC2_SetConfig+0x74>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a2a      	ldr	r2, [pc, #168]	@ (800b224 <TIM_OC2_SetConfig+0x118>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d10d      	bne.n	800b19c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	4313      	orrs	r3, r2
 800b192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b19a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a1f      	ldr	r2, [pc, #124]	@ (800b21c <TIM_OC2_SetConfig+0x110>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d013      	beq.n	800b1cc <TIM_OC2_SetConfig+0xc0>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a1e      	ldr	r2, [pc, #120]	@ (800b220 <TIM_OC2_SetConfig+0x114>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d00f      	beq.n	800b1cc <TIM_OC2_SetConfig+0xc0>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b228 <TIM_OC2_SetConfig+0x11c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d00b      	beq.n	800b1cc <TIM_OC2_SetConfig+0xc0>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a1d      	ldr	r2, [pc, #116]	@ (800b22c <TIM_OC2_SetConfig+0x120>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d007      	beq.n	800b1cc <TIM_OC2_SetConfig+0xc0>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a1c      	ldr	r2, [pc, #112]	@ (800b230 <TIM_OC2_SetConfig+0x124>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d003      	beq.n	800b1cc <TIM_OC2_SetConfig+0xc0>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a17      	ldr	r2, [pc, #92]	@ (800b224 <TIM_OC2_SetConfig+0x118>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d113      	bne.n	800b1f4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b1da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	695b      	ldr	r3, [r3, #20]
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	685a      	ldr	r2, [r3, #4]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	621a      	str	r2, [r3, #32]
}
 800b20e:	bf00      	nop
 800b210:	371c      	adds	r7, #28
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	40012c00 	.word	0x40012c00
 800b220:	40013400 	.word	0x40013400
 800b224:	40015000 	.word	0x40015000
 800b228:	40014000 	.word	0x40014000
 800b22c:	40014400 	.word	0x40014400
 800b230:	40014800 	.word	0x40014800

0800b234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a1b      	ldr	r3, [r3, #32]
 800b242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a1b      	ldr	r3, [r3, #32]
 800b248:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f023 0303 	bic.w	r3, r3, #3
 800b26e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	4313      	orrs	r3, r2
 800b278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	021b      	lsls	r3, r3, #8
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a2b      	ldr	r2, [pc, #172]	@ (800b340 <TIM_OC3_SetConfig+0x10c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d007      	beq.n	800b2a6 <TIM_OC3_SetConfig+0x72>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a2a      	ldr	r2, [pc, #168]	@ (800b344 <TIM_OC3_SetConfig+0x110>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d003      	beq.n	800b2a6 <TIM_OC3_SetConfig+0x72>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a29      	ldr	r2, [pc, #164]	@ (800b348 <TIM_OC3_SetConfig+0x114>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d10d      	bne.n	800b2c2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	021b      	lsls	r3, r3, #8
 800b2b4:	697a      	ldr	r2, [r7, #20]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b2c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a1e      	ldr	r2, [pc, #120]	@ (800b340 <TIM_OC3_SetConfig+0x10c>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d013      	beq.n	800b2f2 <TIM_OC3_SetConfig+0xbe>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b344 <TIM_OC3_SetConfig+0x110>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d00f      	beq.n	800b2f2 <TIM_OC3_SetConfig+0xbe>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a1d      	ldr	r2, [pc, #116]	@ (800b34c <TIM_OC3_SetConfig+0x118>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d00b      	beq.n	800b2f2 <TIM_OC3_SetConfig+0xbe>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a1c      	ldr	r2, [pc, #112]	@ (800b350 <TIM_OC3_SetConfig+0x11c>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d007      	beq.n	800b2f2 <TIM_OC3_SetConfig+0xbe>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b354 <TIM_OC3_SetConfig+0x120>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d003      	beq.n	800b2f2 <TIM_OC3_SetConfig+0xbe>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a16      	ldr	r2, [pc, #88]	@ (800b348 <TIM_OC3_SetConfig+0x114>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d113      	bne.n	800b31a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b2f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	011b      	lsls	r3, r3, #4
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	4313      	orrs	r3, r2
 800b318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	693a      	ldr	r2, [r7, #16]
 800b31e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	697a      	ldr	r2, [r7, #20]
 800b332:	621a      	str	r2, [r3, #32]
}
 800b334:	bf00      	nop
 800b336:	371c      	adds	r7, #28
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	40012c00 	.word	0x40012c00
 800b344:	40013400 	.word	0x40013400
 800b348:	40015000 	.word	0x40015000
 800b34c:	40014000 	.word	0x40014000
 800b350:	40014400 	.word	0x40014400
 800b354:	40014800 	.word	0x40014800

0800b358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a1b      	ldr	r3, [r3, #32]
 800b36c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	021b      	lsls	r3, r3, #8
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b3a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	031b      	lsls	r3, r3, #12
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a2c      	ldr	r2, [pc, #176]	@ (800b468 <TIM_OC4_SetConfig+0x110>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d007      	beq.n	800b3cc <TIM_OC4_SetConfig+0x74>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a2b      	ldr	r2, [pc, #172]	@ (800b46c <TIM_OC4_SetConfig+0x114>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d003      	beq.n	800b3cc <TIM_OC4_SetConfig+0x74>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a2a      	ldr	r2, [pc, #168]	@ (800b470 <TIM_OC4_SetConfig+0x118>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d10d      	bne.n	800b3e8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b3d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	031b      	lsls	r3, r3, #12
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b3e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a1f      	ldr	r2, [pc, #124]	@ (800b468 <TIM_OC4_SetConfig+0x110>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d013      	beq.n	800b418 <TIM_OC4_SetConfig+0xc0>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a1e      	ldr	r2, [pc, #120]	@ (800b46c <TIM_OC4_SetConfig+0x114>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d00f      	beq.n	800b418 <TIM_OC4_SetConfig+0xc0>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a1e      	ldr	r2, [pc, #120]	@ (800b474 <TIM_OC4_SetConfig+0x11c>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d00b      	beq.n	800b418 <TIM_OC4_SetConfig+0xc0>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a1d      	ldr	r2, [pc, #116]	@ (800b478 <TIM_OC4_SetConfig+0x120>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d007      	beq.n	800b418 <TIM_OC4_SetConfig+0xc0>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a1c      	ldr	r2, [pc, #112]	@ (800b47c <TIM_OC4_SetConfig+0x124>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d003      	beq.n	800b418 <TIM_OC4_SetConfig+0xc0>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a17      	ldr	r2, [pc, #92]	@ (800b470 <TIM_OC4_SetConfig+0x118>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d113      	bne.n	800b440 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b41e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b426:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	019b      	lsls	r3, r3, #6
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	4313      	orrs	r3, r2
 800b432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	019b      	lsls	r3, r3, #6
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	685a      	ldr	r2, [r3, #4]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	621a      	str	r2, [r3, #32]
}
 800b45a:	bf00      	nop
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	40012c00 	.word	0x40012c00
 800b46c:	40013400 	.word	0x40013400
 800b470:	40015000 	.word	0x40015000
 800b474:	40014000 	.word	0x40014000
 800b478:	40014400 	.word	0x40014400
 800b47c:	40014800 	.word	0x40014800

0800b480 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b480:	b480      	push	{r7}
 800b482:	b087      	sub	sp, #28
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a1b      	ldr	r3, [r3, #32]
 800b494:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b4c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	041b      	lsls	r3, r3, #16
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a19      	ldr	r2, [pc, #100]	@ (800b53c <TIM_OC5_SetConfig+0xbc>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d013      	beq.n	800b502 <TIM_OC5_SetConfig+0x82>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a18      	ldr	r2, [pc, #96]	@ (800b540 <TIM_OC5_SetConfig+0xc0>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00f      	beq.n	800b502 <TIM_OC5_SetConfig+0x82>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a17      	ldr	r2, [pc, #92]	@ (800b544 <TIM_OC5_SetConfig+0xc4>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d00b      	beq.n	800b502 <TIM_OC5_SetConfig+0x82>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a16      	ldr	r2, [pc, #88]	@ (800b548 <TIM_OC5_SetConfig+0xc8>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d007      	beq.n	800b502 <TIM_OC5_SetConfig+0x82>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a15      	ldr	r2, [pc, #84]	@ (800b54c <TIM_OC5_SetConfig+0xcc>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d003      	beq.n	800b502 <TIM_OC5_SetConfig+0x82>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a14      	ldr	r2, [pc, #80]	@ (800b550 <TIM_OC5_SetConfig+0xd0>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d109      	bne.n	800b516 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b508:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	021b      	lsls	r3, r3, #8
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	4313      	orrs	r3, r2
 800b514:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	685a      	ldr	r2, [r3, #4]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	621a      	str	r2, [r3, #32]
}
 800b530:	bf00      	nop
 800b532:	371c      	adds	r7, #28
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr
 800b53c:	40012c00 	.word	0x40012c00
 800b540:	40013400 	.word	0x40013400
 800b544:	40014000 	.word	0x40014000
 800b548:	40014400 	.word	0x40014400
 800b54c:	40014800 	.word	0x40014800
 800b550:	40015000 	.word	0x40015000

0800b554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	4313      	orrs	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b59a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	051b      	lsls	r3, r3, #20
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a1a      	ldr	r2, [pc, #104]	@ (800b614 <TIM_OC6_SetConfig+0xc0>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d013      	beq.n	800b5d8 <TIM_OC6_SetConfig+0x84>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a19      	ldr	r2, [pc, #100]	@ (800b618 <TIM_OC6_SetConfig+0xc4>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d00f      	beq.n	800b5d8 <TIM_OC6_SetConfig+0x84>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a18      	ldr	r2, [pc, #96]	@ (800b61c <TIM_OC6_SetConfig+0xc8>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d00b      	beq.n	800b5d8 <TIM_OC6_SetConfig+0x84>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a17      	ldr	r2, [pc, #92]	@ (800b620 <TIM_OC6_SetConfig+0xcc>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d007      	beq.n	800b5d8 <TIM_OC6_SetConfig+0x84>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a16      	ldr	r2, [pc, #88]	@ (800b624 <TIM_OC6_SetConfig+0xd0>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d003      	beq.n	800b5d8 <TIM_OC6_SetConfig+0x84>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a15      	ldr	r2, [pc, #84]	@ (800b628 <TIM_OC6_SetConfig+0xd4>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d109      	bne.n	800b5ec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	695b      	ldr	r3, [r3, #20]
 800b5e4:	029b      	lsls	r3, r3, #10
 800b5e6:	697a      	ldr	r2, [r7, #20]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	621a      	str	r2, [r3, #32]
}
 800b606:	bf00      	nop
 800b608:	371c      	adds	r7, #28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	40012c00 	.word	0x40012c00
 800b618:	40013400 	.word	0x40013400
 800b61c:	40014000 	.word	0x40014000
 800b620:	40014400 	.word	0x40014400
 800b624:	40014800 	.word	0x40014800
 800b628:	40015000 	.word	0x40015000

0800b62c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b64c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	4313      	orrs	r3, r2
 800b656:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b65e:	f023 0307 	bic.w	r3, r3, #7
 800b662:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	693a      	ldr	r2, [r7, #16]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	4a56      	ldr	r2, [pc, #344]	@ (800b7d4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	f000 80a2 	beq.w	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b682:	4a54      	ldr	r2, [pc, #336]	@ (800b7d4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800b684:	4293      	cmp	r3, r2
 800b686:	f200 809b 	bhi.w	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b68a:	4a53      	ldr	r2, [pc, #332]	@ (800b7d8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	f000 809a 	beq.w	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b692:	4a51      	ldr	r2, [pc, #324]	@ (800b7d8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800b694:	4293      	cmp	r3, r2
 800b696:	f200 8093 	bhi.w	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b69a:	4a50      	ldr	r2, [pc, #320]	@ (800b7dc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	f000 8092 	beq.w	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b6a2:	4a4e      	ldr	r2, [pc, #312]	@ (800b7dc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	f200 808b 	bhi.w	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b6aa:	4a4d      	ldr	r2, [pc, #308]	@ (800b7e0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	f000 808a 	beq.w	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b6b2:	4a4b      	ldr	r2, [pc, #300]	@ (800b7e0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	f200 8083 	bhi.w	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b6ba:	4a4a      	ldr	r2, [pc, #296]	@ (800b7e4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	f000 8082 	beq.w	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b6c2:	4a48      	ldr	r2, [pc, #288]	@ (800b7e4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d87b      	bhi.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b6c8:	4a47      	ldr	r2, [pc, #284]	@ (800b7e8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d07b      	beq.n	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b6ce:	4a46      	ldr	r2, [pc, #280]	@ (800b7e8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d875      	bhi.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b6d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b6d8:	d075      	beq.n	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b6da:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b6de:	d86f      	bhi.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b6e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6e4:	d06f      	beq.n	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b6e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6ea:	d869      	bhi.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b6ec:	2b70      	cmp	r3, #112	@ 0x70
 800b6ee:	d01a      	beq.n	800b726 <TIM_SlaveTimer_SetConfig+0xfa>
 800b6f0:	2b70      	cmp	r3, #112	@ 0x70
 800b6f2:	d865      	bhi.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b6f4:	2b60      	cmp	r3, #96	@ 0x60
 800b6f6:	d059      	beq.n	800b7ac <TIM_SlaveTimer_SetConfig+0x180>
 800b6f8:	2b60      	cmp	r3, #96	@ 0x60
 800b6fa:	d861      	bhi.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b6fc:	2b50      	cmp	r3, #80	@ 0x50
 800b6fe:	d04b      	beq.n	800b798 <TIM_SlaveTimer_SetConfig+0x16c>
 800b700:	2b50      	cmp	r3, #80	@ 0x50
 800b702:	d85d      	bhi.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b704:	2b40      	cmp	r3, #64	@ 0x40
 800b706:	d019      	beq.n	800b73c <TIM_SlaveTimer_SetConfig+0x110>
 800b708:	2b40      	cmp	r3, #64	@ 0x40
 800b70a:	d859      	bhi.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b70c:	2b30      	cmp	r3, #48	@ 0x30
 800b70e:	d05a      	beq.n	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b710:	2b30      	cmp	r3, #48	@ 0x30
 800b712:	d855      	bhi.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b714:	2b20      	cmp	r3, #32
 800b716:	d056      	beq.n	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b718:	2b20      	cmp	r3, #32
 800b71a:	d851      	bhi.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d052      	beq.n	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b720:	2b10      	cmp	r3, #16
 800b722:	d050      	beq.n	800b7c6 <TIM_SlaveTimer_SetConfig+0x19a>
 800b724:	e04c      	b.n	800b7c0 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800b736:	f000 f8d5 	bl	800b8e4 <TIM_ETR_SetConfig>
      break;
 800b73a:	e045      	b.n	800b7c8 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b05      	cmp	r3, #5
 800b742:	d004      	beq.n	800b74e <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b748:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800b74c:	d101      	bne.n	800b752 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	e03b      	b.n	800b7ca <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	6a1b      	ldr	r3, [r3, #32]
 800b758:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	6a1a      	ldr	r2, [r3, #32]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f022 0201 	bic.w	r2, r2, #1
 800b768:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b778:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	011b      	lsls	r3, r3, #4
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	4313      	orrs	r3, r2
 800b784:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68ba      	ldr	r2, [r7, #8]
 800b78c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	621a      	str	r2, [r3, #32]
      break;
 800b796:	e017      	b.n	800b7c8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	f000 f821 	bl	800b7ec <TIM_TI1_ConfigInputStage>
      break;
 800b7aa:	e00d      	b.n	800b7c8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	f000 f846 	bl	800b84a <TIM_TI2_ConfigInputStage>
      break;
 800b7be:	e003      	b.n	800b7c8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	75fb      	strb	r3, [r7, #23]
      break;
 800b7c4:	e000      	b.n	800b7c8 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800b7c6:	bf00      	nop
  }

  return status;
 800b7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	00100070 	.word	0x00100070
 800b7d8:	00100060 	.word	0x00100060
 800b7dc:	00100050 	.word	0x00100050
 800b7e0:	00100040 	.word	0x00100040
 800b7e4:	00100030 	.word	0x00100030
 800b7e8:	00100020 	.word	0x00100020

0800b7ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6a1b      	ldr	r3, [r3, #32]
 800b7fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	f023 0201 	bic.w	r2, r3, #1
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	011b      	lsls	r3, r3, #4
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	4313      	orrs	r3, r2
 800b820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f023 030a 	bic.w	r3, r3, #10
 800b828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	4313      	orrs	r3, r2
 800b830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	621a      	str	r2, [r3, #32]
}
 800b83e:	bf00      	nop
 800b840:	371c      	adds	r7, #28
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr

0800b84a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b84a:	b480      	push	{r7}
 800b84c:	b087      	sub	sp, #28
 800b84e:	af00      	add	r7, sp, #0
 800b850:	60f8      	str	r0, [r7, #12]
 800b852:	60b9      	str	r1, [r7, #8]
 800b854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6a1b      	ldr	r3, [r3, #32]
 800b860:	f023 0210 	bic.w	r2, r3, #16
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	031b      	lsls	r3, r3, #12
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b886:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	011b      	lsls	r3, r3, #4
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	4313      	orrs	r3, r2
 800b890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	621a      	str	r2, [r3, #32]
}
 800b89e:	bf00      	nop
 800b8a0:	371c      	adds	r7, #28
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b085      	sub	sp, #20
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b8c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	f043 0307 	orr.w	r3, r3, #7
 800b8d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	609a      	str	r2, [r3, #8]
}
 800b8d8:	bf00      	nop
 800b8da:	3714      	adds	r7, #20
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b087      	sub	sp, #28
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
 800b8f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b8fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	021a      	lsls	r2, r3, #8
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	431a      	orrs	r2, r3
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	4313      	orrs	r3, r2
 800b910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	609a      	str	r2, [r3, #8]
}
 800b918:	bf00      	nop
 800b91a:	371c      	adds	r7, #28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b924:	b480      	push	{r7}
 800b926:	b087      	sub	sp, #28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	f003 031f 	and.w	r3, r3, #31
 800b936:	2201      	movs	r2, #1
 800b938:	fa02 f303 	lsl.w	r3, r2, r3
 800b93c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6a1a      	ldr	r2, [r3, #32]
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	43db      	mvns	r3, r3
 800b946:	401a      	ands	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a1a      	ldr	r2, [r3, #32]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f003 031f 	and.w	r3, r3, #31
 800b956:	6879      	ldr	r1, [r7, #4]
 800b958:	fa01 f303 	lsl.w	r3, r1, r3
 800b95c:	431a      	orrs	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	621a      	str	r2, [r3, #32]
}
 800b962:	bf00      	nop
 800b964:	371c      	adds	r7, #28
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
	...

0800b970 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d109      	bne.n	800b994 <HAL_TIMEx_PWMN_Start+0x24>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b986:	b2db      	uxtb	r3, r3
 800b988:	2b01      	cmp	r3, #1
 800b98a:	bf14      	ite	ne
 800b98c:	2301      	movne	r3, #1
 800b98e:	2300      	moveq	r3, #0
 800b990:	b2db      	uxtb	r3, r3
 800b992:	e022      	b.n	800b9da <HAL_TIMEx_PWMN_Start+0x6a>
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b04      	cmp	r3, #4
 800b998:	d109      	bne.n	800b9ae <HAL_TIMEx_PWMN_Start+0x3e>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	bf14      	ite	ne
 800b9a6:	2301      	movne	r3, #1
 800b9a8:	2300      	moveq	r3, #0
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	e015      	b.n	800b9da <HAL_TIMEx_PWMN_Start+0x6a>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b08      	cmp	r3, #8
 800b9b2:	d109      	bne.n	800b9c8 <HAL_TIMEx_PWMN_Start+0x58>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	bf14      	ite	ne
 800b9c0:	2301      	movne	r3, #1
 800b9c2:	2300      	moveq	r3, #0
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	e008      	b.n	800b9da <HAL_TIMEx_PWMN_Start+0x6a>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	bf14      	ite	ne
 800b9d4:	2301      	movne	r3, #1
 800b9d6:	2300      	moveq	r3, #0
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d001      	beq.n	800b9e2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e073      	b.n	800baca <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d104      	bne.n	800b9f2 <HAL_TIMEx_PWMN_Start+0x82>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9f0:	e013      	b.n	800ba1a <HAL_TIMEx_PWMN_Start+0xaa>
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	2b04      	cmp	r3, #4
 800b9f6:	d104      	bne.n	800ba02 <HAL_TIMEx_PWMN_Start+0x92>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba00:	e00b      	b.n	800ba1a <HAL_TIMEx_PWMN_Start+0xaa>
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2b08      	cmp	r3, #8
 800ba06:	d104      	bne.n	800ba12 <HAL_TIMEx_PWMN_Start+0xa2>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ba10:	e003      	b.n	800ba1a <HAL_TIMEx_PWMN_Start+0xaa>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2202      	movs	r2, #2
 800ba16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2204      	movs	r2, #4
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 fa34 	bl	800be90 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a25      	ldr	r2, [pc, #148]	@ (800bad4 <HAL_TIMEx_PWMN_Start+0x164>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d022      	beq.n	800ba88 <HAL_TIMEx_PWMN_Start+0x118>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba4a:	d01d      	beq.n	800ba88 <HAL_TIMEx_PWMN_Start+0x118>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a21      	ldr	r2, [pc, #132]	@ (800bad8 <HAL_TIMEx_PWMN_Start+0x168>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d018      	beq.n	800ba88 <HAL_TIMEx_PWMN_Start+0x118>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a20      	ldr	r2, [pc, #128]	@ (800badc <HAL_TIMEx_PWMN_Start+0x16c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d013      	beq.n	800ba88 <HAL_TIMEx_PWMN_Start+0x118>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a1e      	ldr	r2, [pc, #120]	@ (800bae0 <HAL_TIMEx_PWMN_Start+0x170>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d00e      	beq.n	800ba88 <HAL_TIMEx_PWMN_Start+0x118>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a1d      	ldr	r2, [pc, #116]	@ (800bae4 <HAL_TIMEx_PWMN_Start+0x174>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d009      	beq.n	800ba88 <HAL_TIMEx_PWMN_Start+0x118>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a1b      	ldr	r2, [pc, #108]	@ (800bae8 <HAL_TIMEx_PWMN_Start+0x178>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d004      	beq.n	800ba88 <HAL_TIMEx_PWMN_Start+0x118>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a1a      	ldr	r2, [pc, #104]	@ (800baec <HAL_TIMEx_PWMN_Start+0x17c>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d115      	bne.n	800bab4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	689a      	ldr	r2, [r3, #8]
 800ba8e:	4b18      	ldr	r3, [pc, #96]	@ (800baf0 <HAL_TIMEx_PWMN_Start+0x180>)
 800ba90:	4013      	ands	r3, r2
 800ba92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b06      	cmp	r3, #6
 800ba98:	d015      	beq.n	800bac6 <HAL_TIMEx_PWMN_Start+0x156>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baa0:	d011      	beq.n	800bac6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f042 0201 	orr.w	r2, r2, #1
 800bab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bab2:	e008      	b.n	800bac6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f042 0201 	orr.w	r2, r2, #1
 800bac2:	601a      	str	r2, [r3, #0]
 800bac4:	e000      	b.n	800bac8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bac6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	40012c00 	.word	0x40012c00
 800bad8:	40000400 	.word	0x40000400
 800badc:	40000800 	.word	0x40000800
 800bae0:	40000c00 	.word	0x40000c00
 800bae4:	40013400 	.word	0x40013400
 800bae8:	40014000 	.word	0x40014000
 800baec:	40015000 	.word	0x40015000
 800baf0:	00010007 	.word	0x00010007

0800baf4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2200      	movs	r2, #0
 800bb04:	6839      	ldr	r1, [r7, #0]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 f9c2 	bl	800be90 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6a1a      	ldr	r2, [r3, #32]
 800bb12:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bb16:	4013      	ands	r3, r2
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10f      	bne.n	800bb3c <HAL_TIMEx_PWMN_Stop+0x48>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6a1a      	ldr	r2, [r3, #32]
 800bb22:	f244 4344 	movw	r3, #17476	@ 0x4444
 800bb26:	4013      	ands	r3, r2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d107      	bne.n	800bb3c <HAL_TIMEx_PWMN_Stop+0x48>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bb3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6a1a      	ldr	r2, [r3, #32]
 800bb42:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bb46:	4013      	ands	r3, r2
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10f      	bne.n	800bb6c <HAL_TIMEx_PWMN_Stop+0x78>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6a1a      	ldr	r2, [r3, #32]
 800bb52:	f244 4344 	movw	r3, #17476	@ 0x4444
 800bb56:	4013      	ands	r3, r2
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d107      	bne.n	800bb6c <HAL_TIMEx_PWMN_Stop+0x78>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f022 0201 	bic.w	r2, r2, #1
 800bb6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d104      	bne.n	800bb7c <HAL_TIMEx_PWMN_Stop+0x88>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb7a:	e013      	b.n	800bba4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d104      	bne.n	800bb8c <HAL_TIMEx_PWMN_Stop+0x98>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb8a:	e00b      	b.n	800bba4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b08      	cmp	r3, #8
 800bb90:	d104      	bne.n	800bb9c <HAL_TIMEx_PWMN_Stop+0xa8>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bb9a:	e003      	b.n	800bba4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
	...

0800bbb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d101      	bne.n	800bbc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	e074      	b.n	800bcb2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a34      	ldr	r2, [pc, #208]	@ (800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d009      	beq.n	800bc06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a33      	ldr	r2, [pc, #204]	@ (800bcc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d004      	beq.n	800bc06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a31      	ldr	r2, [pc, #196]	@ (800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d108      	bne.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bc0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	4313      	orrs	r3, r2
 800bc16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bc1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a21      	ldr	r2, [pc, #132]	@ (800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d022      	beq.n	800bc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc48:	d01d      	beq.n	800bc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a1f      	ldr	r2, [pc, #124]	@ (800bccc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d018      	beq.n	800bc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a1d      	ldr	r2, [pc, #116]	@ (800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d013      	beq.n	800bc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a1c      	ldr	r2, [pc, #112]	@ (800bcd4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d00e      	beq.n	800bc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a15      	ldr	r2, [pc, #84]	@ (800bcc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d009      	beq.n	800bc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a18      	ldr	r2, [pc, #96]	@ (800bcd8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d004      	beq.n	800bc86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a11      	ldr	r2, [pc, #68]	@ (800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d10c      	bne.n	800bca0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	40012c00 	.word	0x40012c00
 800bcc4:	40013400 	.word	0x40013400
 800bcc8:	40015000 	.word	0x40015000
 800bccc:	40000400 	.word	0x40000400
 800bcd0:	40000800 	.word	0x40000800
 800bcd4:	40000c00 	.word	0x40000c00
 800bcd8:	40014000 	.word	0x40014000

0800bcdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bce6:	2300      	movs	r3, #0
 800bce8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d101      	bne.n	800bcf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	e078      	b.n	800bdea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	699b      	ldr	r3, [r3, #24]
 800bd6c:	041b      	lsls	r3, r3, #16
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	69db      	ldr	r3, [r3, #28]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a1c      	ldr	r2, [pc, #112]	@ (800bdf8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d009      	beq.n	800bd9e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a1b      	ldr	r2, [pc, #108]	@ (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d004      	beq.n	800bd9e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a19      	ldr	r2, [pc, #100]	@ (800be00 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d11c      	bne.n	800bdd8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda8:	051b      	lsls	r3, r3, #20
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	40012c00 	.word	0x40012c00
 800bdfc:	40013400 	.word	0x40013400
 800be00:	40015000 	.word	0x40015000

0800be04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800be90:	b480      	push	{r7}
 800be92:	b087      	sub	sp, #28
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	f003 030f 	and.w	r3, r3, #15
 800bea2:	2204      	movs	r2, #4
 800bea4:	fa02 f303 	lsl.w	r3, r2, r3
 800bea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6a1a      	ldr	r2, [r3, #32]
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	43db      	mvns	r3, r3
 800beb2:	401a      	ands	r2, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6a1a      	ldr	r2, [r3, #32]
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	f003 030f 	and.w	r3, r3, #15
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	fa01 f303 	lsl.w	r3, r1, r3
 800bec8:	431a      	orrs	r2, r3
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	621a      	str	r2, [r3, #32]
}
 800bece:	bf00      	nop
 800bed0:	371c      	adds	r7, #28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b082      	sub	sp, #8
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e042      	b.n	800bf72 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d106      	bne.n	800bf04 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7f7 fa7e 	bl	8003400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2224      	movs	r2, #36	@ 0x24
 800bf08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f022 0201 	bic.w	r2, r2, #1
 800bf1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fbb3 	bl	800c690 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 f8b4 	bl	800c098 <UART_SetConfig>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d101      	bne.n	800bf3a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e01b      	b.n	800bf72 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bf48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	689a      	ldr	r2, [r3, #8]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bf58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f042 0201 	orr.w	r2, r2, #1
 800bf68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fc32 	bl	800c7d4 <UART_CheckIdleState>
 800bf70:	4603      	mov	r3, r0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b08a      	sub	sp, #40	@ 0x28
 800bf7e:	af02      	add	r7, sp, #8
 800bf80:	60f8      	str	r0, [r7, #12]
 800bf82:	60b9      	str	r1, [r7, #8]
 800bf84:	603b      	str	r3, [r7, #0]
 800bf86:	4613      	mov	r3, r2
 800bf88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf90:	2b20      	cmp	r3, #32
 800bf92:	d17b      	bne.n	800c08c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d002      	beq.n	800bfa0 <HAL_UART_Transmit+0x26>
 800bf9a:	88fb      	ldrh	r3, [r7, #6]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e074      	b.n	800c08e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2221      	movs	r2, #33	@ 0x21
 800bfb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bfb4:	f7f9 fd22 	bl	80059fc <HAL_GetTick>
 800bfb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	88fa      	ldrh	r2, [r7, #6]
 800bfbe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	88fa      	ldrh	r2, [r7, #6]
 800bfc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfd2:	d108      	bne.n	800bfe6 <HAL_UART_Transmit+0x6c>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d104      	bne.n	800bfe6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	61bb      	str	r3, [r7, #24]
 800bfe4:	e003      	b.n	800bfee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bfee:	e030      	b.n	800c052 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	2200      	movs	r2, #0
 800bff8:	2180      	movs	r1, #128	@ 0x80
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f000 fc94 	bl	800c928 <UART_WaitOnFlagUntilTimeout>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d005      	beq.n	800c012 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2220      	movs	r2, #32
 800c00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	e03d      	b.n	800c08e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10b      	bne.n	800c030 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	881b      	ldrh	r3, [r3, #0]
 800c01c:	461a      	mov	r2, r3
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c026:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	3302      	adds	r3, #2
 800c02c:	61bb      	str	r3, [r7, #24]
 800c02e:	e007      	b.n	800c040 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	781a      	ldrb	r2, [r3, #0]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	3301      	adds	r3, #1
 800c03e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c046:	b29b      	uxth	r3, r3
 800c048:	3b01      	subs	r3, #1
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c058:	b29b      	uxth	r3, r3
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1c8      	bne.n	800bff0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2200      	movs	r2, #0
 800c066:	2140      	movs	r1, #64	@ 0x40
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 fc5d 	bl	800c928 <UART_WaitOnFlagUntilTimeout>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d005      	beq.n	800c080 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2220      	movs	r2, #32
 800c078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e006      	b.n	800c08e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2220      	movs	r2, #32
 800c084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	e000      	b.n	800c08e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c08c:	2302      	movs	r3, #2
  }
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3720      	adds	r7, #32
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
	...

0800c098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c09c:	b08c      	sub	sp, #48	@ 0x30
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	431a      	orrs	r2, r3
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	695b      	ldr	r3, [r3, #20]
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	69db      	ldr	r3, [r3, #28]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	4baa      	ldr	r3, [pc, #680]	@ (800c370 <UART_SetConfig+0x2d8>)
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	697a      	ldr	r2, [r7, #20]
 800c0cc:	6812      	ldr	r2, [r2, #0]
 800c0ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0d0:	430b      	orrs	r3, r1
 800c0d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	68da      	ldr	r2, [r3, #12]
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	430a      	orrs	r2, r1
 800c0e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a9f      	ldr	r2, [pc, #636]	@ (800c374 <UART_SetConfig+0x2dc>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d004      	beq.n	800c104 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c100:	4313      	orrs	r3, r2
 800c102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c10e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	6812      	ldr	r2, [r2, #0]
 800c116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c118:	430b      	orrs	r3, r1
 800c11a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c122:	f023 010f 	bic.w	r1, r3, #15
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	430a      	orrs	r2, r1
 800c130:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a90      	ldr	r2, [pc, #576]	@ (800c378 <UART_SetConfig+0x2e0>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d125      	bne.n	800c188 <UART_SetConfig+0xf0>
 800c13c:	4b8f      	ldr	r3, [pc, #572]	@ (800c37c <UART_SetConfig+0x2e4>)
 800c13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c142:	f003 0303 	and.w	r3, r3, #3
 800c146:	2b03      	cmp	r3, #3
 800c148:	d81a      	bhi.n	800c180 <UART_SetConfig+0xe8>
 800c14a:	a201      	add	r2, pc, #4	@ (adr r2, 800c150 <UART_SetConfig+0xb8>)
 800c14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c150:	0800c161 	.word	0x0800c161
 800c154:	0800c171 	.word	0x0800c171
 800c158:	0800c169 	.word	0x0800c169
 800c15c:	0800c179 	.word	0x0800c179
 800c160:	2301      	movs	r3, #1
 800c162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c166:	e116      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c168:	2302      	movs	r3, #2
 800c16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c16e:	e112      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c170:	2304      	movs	r3, #4
 800c172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c176:	e10e      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c178:	2308      	movs	r3, #8
 800c17a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c17e:	e10a      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c180:	2310      	movs	r3, #16
 800c182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c186:	e106      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a7c      	ldr	r2, [pc, #496]	@ (800c380 <UART_SetConfig+0x2e8>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d138      	bne.n	800c204 <UART_SetConfig+0x16c>
 800c192:	4b7a      	ldr	r3, [pc, #488]	@ (800c37c <UART_SetConfig+0x2e4>)
 800c194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c198:	f003 030c 	and.w	r3, r3, #12
 800c19c:	2b0c      	cmp	r3, #12
 800c19e:	d82d      	bhi.n	800c1fc <UART_SetConfig+0x164>
 800c1a0:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a8 <UART_SetConfig+0x110>)
 800c1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a6:	bf00      	nop
 800c1a8:	0800c1dd 	.word	0x0800c1dd
 800c1ac:	0800c1fd 	.word	0x0800c1fd
 800c1b0:	0800c1fd 	.word	0x0800c1fd
 800c1b4:	0800c1fd 	.word	0x0800c1fd
 800c1b8:	0800c1ed 	.word	0x0800c1ed
 800c1bc:	0800c1fd 	.word	0x0800c1fd
 800c1c0:	0800c1fd 	.word	0x0800c1fd
 800c1c4:	0800c1fd 	.word	0x0800c1fd
 800c1c8:	0800c1e5 	.word	0x0800c1e5
 800c1cc:	0800c1fd 	.word	0x0800c1fd
 800c1d0:	0800c1fd 	.word	0x0800c1fd
 800c1d4:	0800c1fd 	.word	0x0800c1fd
 800c1d8:	0800c1f5 	.word	0x0800c1f5
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1e2:	e0d8      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1ea:	e0d4      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c1ec:	2304      	movs	r3, #4
 800c1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1f2:	e0d0      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c1f4:	2308      	movs	r3, #8
 800c1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1fa:	e0cc      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c1fc:	2310      	movs	r3, #16
 800c1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c202:	e0c8      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a5e      	ldr	r2, [pc, #376]	@ (800c384 <UART_SetConfig+0x2ec>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d125      	bne.n	800c25a <UART_SetConfig+0x1c2>
 800c20e:	4b5b      	ldr	r3, [pc, #364]	@ (800c37c <UART_SetConfig+0x2e4>)
 800c210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c214:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c218:	2b30      	cmp	r3, #48	@ 0x30
 800c21a:	d016      	beq.n	800c24a <UART_SetConfig+0x1b2>
 800c21c:	2b30      	cmp	r3, #48	@ 0x30
 800c21e:	d818      	bhi.n	800c252 <UART_SetConfig+0x1ba>
 800c220:	2b20      	cmp	r3, #32
 800c222:	d00a      	beq.n	800c23a <UART_SetConfig+0x1a2>
 800c224:	2b20      	cmp	r3, #32
 800c226:	d814      	bhi.n	800c252 <UART_SetConfig+0x1ba>
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d002      	beq.n	800c232 <UART_SetConfig+0x19a>
 800c22c:	2b10      	cmp	r3, #16
 800c22e:	d008      	beq.n	800c242 <UART_SetConfig+0x1aa>
 800c230:	e00f      	b.n	800c252 <UART_SetConfig+0x1ba>
 800c232:	2300      	movs	r3, #0
 800c234:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c238:	e0ad      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c23a:	2302      	movs	r3, #2
 800c23c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c240:	e0a9      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c242:	2304      	movs	r3, #4
 800c244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c248:	e0a5      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c24a:	2308      	movs	r3, #8
 800c24c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c250:	e0a1      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c252:	2310      	movs	r3, #16
 800c254:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c258:	e09d      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a4a      	ldr	r2, [pc, #296]	@ (800c388 <UART_SetConfig+0x2f0>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d125      	bne.n	800c2b0 <UART_SetConfig+0x218>
 800c264:	4b45      	ldr	r3, [pc, #276]	@ (800c37c <UART_SetConfig+0x2e4>)
 800c266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c26a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c26e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c270:	d016      	beq.n	800c2a0 <UART_SetConfig+0x208>
 800c272:	2bc0      	cmp	r3, #192	@ 0xc0
 800c274:	d818      	bhi.n	800c2a8 <UART_SetConfig+0x210>
 800c276:	2b80      	cmp	r3, #128	@ 0x80
 800c278:	d00a      	beq.n	800c290 <UART_SetConfig+0x1f8>
 800c27a:	2b80      	cmp	r3, #128	@ 0x80
 800c27c:	d814      	bhi.n	800c2a8 <UART_SetConfig+0x210>
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d002      	beq.n	800c288 <UART_SetConfig+0x1f0>
 800c282:	2b40      	cmp	r3, #64	@ 0x40
 800c284:	d008      	beq.n	800c298 <UART_SetConfig+0x200>
 800c286:	e00f      	b.n	800c2a8 <UART_SetConfig+0x210>
 800c288:	2300      	movs	r3, #0
 800c28a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c28e:	e082      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c290:	2302      	movs	r3, #2
 800c292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c296:	e07e      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c298:	2304      	movs	r3, #4
 800c29a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c29e:	e07a      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c2a0:	2308      	movs	r3, #8
 800c2a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2a6:	e076      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c2a8:	2310      	movs	r3, #16
 800c2aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2ae:	e072      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a35      	ldr	r2, [pc, #212]	@ (800c38c <UART_SetConfig+0x2f4>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d12a      	bne.n	800c310 <UART_SetConfig+0x278>
 800c2ba:	4b30      	ldr	r3, [pc, #192]	@ (800c37c <UART_SetConfig+0x2e4>)
 800c2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2c8:	d01a      	beq.n	800c300 <UART_SetConfig+0x268>
 800c2ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2ce:	d81b      	bhi.n	800c308 <UART_SetConfig+0x270>
 800c2d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2d4:	d00c      	beq.n	800c2f0 <UART_SetConfig+0x258>
 800c2d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2da:	d815      	bhi.n	800c308 <UART_SetConfig+0x270>
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <UART_SetConfig+0x250>
 800c2e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2e4:	d008      	beq.n	800c2f8 <UART_SetConfig+0x260>
 800c2e6:	e00f      	b.n	800c308 <UART_SetConfig+0x270>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2ee:	e052      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2f6:	e04e      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c2f8:	2304      	movs	r3, #4
 800c2fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2fe:	e04a      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c300:	2308      	movs	r3, #8
 800c302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c306:	e046      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c308:	2310      	movs	r3, #16
 800c30a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c30e:	e042      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a17      	ldr	r2, [pc, #92]	@ (800c374 <UART_SetConfig+0x2dc>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d13a      	bne.n	800c390 <UART_SetConfig+0x2f8>
 800c31a:	4b18      	ldr	r3, [pc, #96]	@ (800c37c <UART_SetConfig+0x2e4>)
 800c31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c320:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c324:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c328:	d01a      	beq.n	800c360 <UART_SetConfig+0x2c8>
 800c32a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c32e:	d81b      	bhi.n	800c368 <UART_SetConfig+0x2d0>
 800c330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c334:	d00c      	beq.n	800c350 <UART_SetConfig+0x2b8>
 800c336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c33a:	d815      	bhi.n	800c368 <UART_SetConfig+0x2d0>
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <UART_SetConfig+0x2b0>
 800c340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c344:	d008      	beq.n	800c358 <UART_SetConfig+0x2c0>
 800c346:	e00f      	b.n	800c368 <UART_SetConfig+0x2d0>
 800c348:	2300      	movs	r3, #0
 800c34a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c34e:	e022      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c350:	2302      	movs	r3, #2
 800c352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c356:	e01e      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c358:	2304      	movs	r3, #4
 800c35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c35e:	e01a      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c360:	2308      	movs	r3, #8
 800c362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c366:	e016      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c368:	2310      	movs	r3, #16
 800c36a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c36e:	e012      	b.n	800c396 <UART_SetConfig+0x2fe>
 800c370:	cfff69f3 	.word	0xcfff69f3
 800c374:	40008000 	.word	0x40008000
 800c378:	40013800 	.word	0x40013800
 800c37c:	40021000 	.word	0x40021000
 800c380:	40004400 	.word	0x40004400
 800c384:	40004800 	.word	0x40004800
 800c388:	40004c00 	.word	0x40004c00
 800c38c:	40005000 	.word	0x40005000
 800c390:	2310      	movs	r3, #16
 800c392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4aae      	ldr	r2, [pc, #696]	@ (800c654 <UART_SetConfig+0x5bc>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	f040 8097 	bne.w	800c4d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c3a6:	2b08      	cmp	r3, #8
 800c3a8:	d823      	bhi.n	800c3f2 <UART_SetConfig+0x35a>
 800c3aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c3b0 <UART_SetConfig+0x318>)
 800c3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b0:	0800c3d5 	.word	0x0800c3d5
 800c3b4:	0800c3f3 	.word	0x0800c3f3
 800c3b8:	0800c3dd 	.word	0x0800c3dd
 800c3bc:	0800c3f3 	.word	0x0800c3f3
 800c3c0:	0800c3e3 	.word	0x0800c3e3
 800c3c4:	0800c3f3 	.word	0x0800c3f3
 800c3c8:	0800c3f3 	.word	0x0800c3f3
 800c3cc:	0800c3f3 	.word	0x0800c3f3
 800c3d0:	0800c3eb 	.word	0x0800c3eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3d4:	f7fc fc06 	bl	8008be4 <HAL_RCC_GetPCLK1Freq>
 800c3d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c3da:	e010      	b.n	800c3fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c3dc:	4b9e      	ldr	r3, [pc, #632]	@ (800c658 <UART_SetConfig+0x5c0>)
 800c3de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c3e0:	e00d      	b.n	800c3fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c3e2:	f7fc fb91 	bl	8008b08 <HAL_RCC_GetSysClockFreq>
 800c3e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c3e8:	e009      	b.n	800c3fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c3f0:	e005      	b.n	800c3fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c3fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c400:	2b00      	cmp	r3, #0
 800c402:	f000 8130 	beq.w	800c666 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c40a:	4a94      	ldr	r2, [pc, #592]	@ (800c65c <UART_SetConfig+0x5c4>)
 800c40c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c410:	461a      	mov	r2, r3
 800c412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c414:	fbb3 f3f2 	udiv	r3, r3, r2
 800c418:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	4613      	mov	r3, r2
 800c420:	005b      	lsls	r3, r3, #1
 800c422:	4413      	add	r3, r2
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	429a      	cmp	r2, r3
 800c428:	d305      	bcc.n	800c436 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c430:	69ba      	ldr	r2, [r7, #24]
 800c432:	429a      	cmp	r2, r3
 800c434:	d903      	bls.n	800c43e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c43c:	e113      	b.n	800c666 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c440:	2200      	movs	r2, #0
 800c442:	60bb      	str	r3, [r7, #8]
 800c444:	60fa      	str	r2, [r7, #12]
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c44a:	4a84      	ldr	r2, [pc, #528]	@ (800c65c <UART_SetConfig+0x5c4>)
 800c44c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c450:	b29b      	uxth	r3, r3
 800c452:	2200      	movs	r2, #0
 800c454:	603b      	str	r3, [r7, #0]
 800c456:	607a      	str	r2, [r7, #4]
 800c458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c45c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c460:	f7f4 fc1a 	bl	8000c98 <__aeabi_uldivmod>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	4610      	mov	r0, r2
 800c46a:	4619      	mov	r1, r3
 800c46c:	f04f 0200 	mov.w	r2, #0
 800c470:	f04f 0300 	mov.w	r3, #0
 800c474:	020b      	lsls	r3, r1, #8
 800c476:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c47a:	0202      	lsls	r2, r0, #8
 800c47c:	6979      	ldr	r1, [r7, #20]
 800c47e:	6849      	ldr	r1, [r1, #4]
 800c480:	0849      	lsrs	r1, r1, #1
 800c482:	2000      	movs	r0, #0
 800c484:	460c      	mov	r4, r1
 800c486:	4605      	mov	r5, r0
 800c488:	eb12 0804 	adds.w	r8, r2, r4
 800c48c:	eb43 0905 	adc.w	r9, r3, r5
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	469a      	mov	sl, r3
 800c498:	4693      	mov	fp, r2
 800c49a:	4652      	mov	r2, sl
 800c49c:	465b      	mov	r3, fp
 800c49e:	4640      	mov	r0, r8
 800c4a0:	4649      	mov	r1, r9
 800c4a2:	f7f4 fbf9 	bl	8000c98 <__aeabi_uldivmod>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c4ae:	6a3b      	ldr	r3, [r7, #32]
 800c4b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c4b4:	d308      	bcc.n	800c4c8 <UART_SetConfig+0x430>
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4bc:	d204      	bcs.n	800c4c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	6a3a      	ldr	r2, [r7, #32]
 800c4c4:	60da      	str	r2, [r3, #12]
 800c4c6:	e0ce      	b.n	800c666 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c4ce:	e0ca      	b.n	800c666 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4d8:	d166      	bne.n	800c5a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c4da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c4de:	2b08      	cmp	r3, #8
 800c4e0:	d827      	bhi.n	800c532 <UART_SetConfig+0x49a>
 800c4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e8 <UART_SetConfig+0x450>)
 800c4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e8:	0800c50d 	.word	0x0800c50d
 800c4ec:	0800c515 	.word	0x0800c515
 800c4f0:	0800c51d 	.word	0x0800c51d
 800c4f4:	0800c533 	.word	0x0800c533
 800c4f8:	0800c523 	.word	0x0800c523
 800c4fc:	0800c533 	.word	0x0800c533
 800c500:	0800c533 	.word	0x0800c533
 800c504:	0800c533 	.word	0x0800c533
 800c508:	0800c52b 	.word	0x0800c52b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c50c:	f7fc fb6a 	bl	8008be4 <HAL_RCC_GetPCLK1Freq>
 800c510:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c512:	e014      	b.n	800c53e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c514:	f7fc fb7c 	bl	8008c10 <HAL_RCC_GetPCLK2Freq>
 800c518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c51a:	e010      	b.n	800c53e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c51c:	4b4e      	ldr	r3, [pc, #312]	@ (800c658 <UART_SetConfig+0x5c0>)
 800c51e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c520:	e00d      	b.n	800c53e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c522:	f7fc faf1 	bl	8008b08 <HAL_RCC_GetSysClockFreq>
 800c526:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c528:	e009      	b.n	800c53e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c52a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c52e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c530:	e005      	b.n	800c53e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c532:	2300      	movs	r3, #0
 800c534:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c53c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c540:	2b00      	cmp	r3, #0
 800c542:	f000 8090 	beq.w	800c666 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c54a:	4a44      	ldr	r2, [pc, #272]	@ (800c65c <UART_SetConfig+0x5c4>)
 800c54c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c550:	461a      	mov	r2, r3
 800c552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c554:	fbb3 f3f2 	udiv	r3, r3, r2
 800c558:	005a      	lsls	r2, r3, #1
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	085b      	lsrs	r3, r3, #1
 800c560:	441a      	add	r2, r3
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	fbb2 f3f3 	udiv	r3, r2, r3
 800c56a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c56c:	6a3b      	ldr	r3, [r7, #32]
 800c56e:	2b0f      	cmp	r3, #15
 800c570:	d916      	bls.n	800c5a0 <UART_SetConfig+0x508>
 800c572:	6a3b      	ldr	r3, [r7, #32]
 800c574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c578:	d212      	bcs.n	800c5a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c57a:	6a3b      	ldr	r3, [r7, #32]
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	f023 030f 	bic.w	r3, r3, #15
 800c582:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	085b      	lsrs	r3, r3, #1
 800c588:	b29b      	uxth	r3, r3
 800c58a:	f003 0307 	and.w	r3, r3, #7
 800c58e:	b29a      	uxth	r2, r3
 800c590:	8bfb      	ldrh	r3, [r7, #30]
 800c592:	4313      	orrs	r3, r2
 800c594:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	8bfa      	ldrh	r2, [r7, #30]
 800c59c:	60da      	str	r2, [r3, #12]
 800c59e:	e062      	b.n	800c666 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c5a6:	e05e      	b.n	800c666 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c5ac:	2b08      	cmp	r3, #8
 800c5ae:	d828      	bhi.n	800c602 <UART_SetConfig+0x56a>
 800c5b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b8 <UART_SetConfig+0x520>)
 800c5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b6:	bf00      	nop
 800c5b8:	0800c5dd 	.word	0x0800c5dd
 800c5bc:	0800c5e5 	.word	0x0800c5e5
 800c5c0:	0800c5ed 	.word	0x0800c5ed
 800c5c4:	0800c603 	.word	0x0800c603
 800c5c8:	0800c5f3 	.word	0x0800c5f3
 800c5cc:	0800c603 	.word	0x0800c603
 800c5d0:	0800c603 	.word	0x0800c603
 800c5d4:	0800c603 	.word	0x0800c603
 800c5d8:	0800c5fb 	.word	0x0800c5fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5dc:	f7fc fb02 	bl	8008be4 <HAL_RCC_GetPCLK1Freq>
 800c5e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c5e2:	e014      	b.n	800c60e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5e4:	f7fc fb14 	bl	8008c10 <HAL_RCC_GetPCLK2Freq>
 800c5e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c5ea:	e010      	b.n	800c60e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c658 <UART_SetConfig+0x5c0>)
 800c5ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c5f0:	e00d      	b.n	800c60e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5f2:	f7fc fa89 	bl	8008b08 <HAL_RCC_GetSysClockFreq>
 800c5f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c5f8:	e009      	b.n	800c60e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c600:	e005      	b.n	800c60e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c602:	2300      	movs	r3, #0
 800c604:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c60c:	bf00      	nop
    }

    if (pclk != 0U)
 800c60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c610:	2b00      	cmp	r3, #0
 800c612:	d028      	beq.n	800c666 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c618:	4a10      	ldr	r2, [pc, #64]	@ (800c65c <UART_SetConfig+0x5c4>)
 800c61a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c61e:	461a      	mov	r2, r3
 800c620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c622:	fbb3 f2f2 	udiv	r2, r3, r2
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	085b      	lsrs	r3, r3, #1
 800c62c:	441a      	add	r2, r3
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	fbb2 f3f3 	udiv	r3, r2, r3
 800c636:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c638:	6a3b      	ldr	r3, [r7, #32]
 800c63a:	2b0f      	cmp	r3, #15
 800c63c:	d910      	bls.n	800c660 <UART_SetConfig+0x5c8>
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c644:	d20c      	bcs.n	800c660 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	b29a      	uxth	r2, r3
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	60da      	str	r2, [r3, #12]
 800c650:	e009      	b.n	800c666 <UART_SetConfig+0x5ce>
 800c652:	bf00      	nop
 800c654:	40008000 	.word	0x40008000
 800c658:	00f42400 	.word	0x00f42400
 800c65c:	08010fb4 	.word	0x08010fb4
      }
      else
      {
        ret = HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	2201      	movs	r2, #1
 800c66a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	2201      	movs	r2, #1
 800c672:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	2200      	movs	r2, #0
 800c67a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	2200      	movs	r2, #0
 800c680:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c682:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c686:	4618      	mov	r0, r3
 800c688:	3730      	adds	r7, #48	@ 0x30
 800c68a:	46bd      	mov	sp, r7
 800c68c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c69c:	f003 0308 	and.w	r3, r3, #8
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00a      	beq.n	800c6ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	430a      	orrs	r2, r1
 800c6b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6be:	f003 0301 	and.w	r3, r3, #1
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00a      	beq.n	800c6dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	430a      	orrs	r2, r1
 800c6da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6e0:	f003 0302 	and.w	r3, r3, #2
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00a      	beq.n	800c6fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	430a      	orrs	r2, r1
 800c6fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c702:	f003 0304 	and.w	r3, r3, #4
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00a      	beq.n	800c720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	430a      	orrs	r2, r1
 800c71e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c724:	f003 0310 	and.w	r3, r3, #16
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00a      	beq.n	800c742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	430a      	orrs	r2, r1
 800c740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c746:	f003 0320 	and.w	r3, r3, #32
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00a      	beq.n	800c764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	430a      	orrs	r2, r1
 800c762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d01a      	beq.n	800c7a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c78a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c78e:	d10a      	bne.n	800c7a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	430a      	orrs	r2, r1
 800c7a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00a      	beq.n	800c7c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	605a      	str	r2, [r3, #4]
  }
}
 800c7c8:	bf00      	nop
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b098      	sub	sp, #96	@ 0x60
 800c7d8:	af02      	add	r7, sp, #8
 800c7da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7e4:	f7f9 f90a 	bl	80059fc <HAL_GetTick>
 800c7e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 0308 	and.w	r3, r3, #8
 800c7f4:	2b08      	cmp	r3, #8
 800c7f6:	d12f      	bne.n	800c858 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c800:	2200      	movs	r2, #0
 800c802:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f88e 	bl	800c928 <UART_WaitOnFlagUntilTimeout>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d022      	beq.n	800c858 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c81a:	e853 3f00 	ldrex	r3, [r3]
 800c81e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c826:	653b      	str	r3, [r7, #80]	@ 0x50
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	461a      	mov	r2, r3
 800c82e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c830:	647b      	str	r3, [r7, #68]	@ 0x44
 800c832:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c834:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c836:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c838:	e841 2300 	strex	r3, r2, [r1]
 800c83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1e6      	bne.n	800c812 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2220      	movs	r2, #32
 800c848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c854:	2303      	movs	r3, #3
 800c856:	e063      	b.n	800c920 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	2b04      	cmp	r3, #4
 800c864:	d149      	bne.n	800c8fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c866:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c86e:	2200      	movs	r2, #0
 800c870:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 f857 	bl	800c928 <UART_WaitOnFlagUntilTimeout>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d03c      	beq.n	800c8fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c888:	e853 3f00 	ldrex	r3, [r3]
 800c88c:	623b      	str	r3, [r7, #32]
   return(result);
 800c88e:	6a3b      	ldr	r3, [r7, #32]
 800c890:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c89e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8a6:	e841 2300 	strex	r3, r2, [r1]
 800c8aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1e6      	bne.n	800c880 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3308      	adds	r3, #8
 800c8b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	e853 3f00 	ldrex	r3, [r3]
 800c8c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f023 0301 	bic.w	r3, r3, #1
 800c8c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8d2:	61fa      	str	r2, [r7, #28]
 800c8d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d6:	69b9      	ldr	r1, [r7, #24]
 800c8d8:	69fa      	ldr	r2, [r7, #28]
 800c8da:	e841 2300 	strex	r3, r2, [r1]
 800c8de:	617b      	str	r3, [r7, #20]
   return(result);
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1e5      	bne.n	800c8b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2220      	movs	r2, #32
 800c8ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	e012      	b.n	800c920 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2220      	movs	r2, #32
 800c906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3758      	adds	r7, #88	@ 0x58
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	603b      	str	r3, [r7, #0]
 800c934:	4613      	mov	r3, r2
 800c936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c938:	e04f      	b.n	800c9da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c940:	d04b      	beq.n	800c9da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c942:	f7f9 f85b 	bl	80059fc <HAL_GetTick>
 800c946:	4602      	mov	r2, r0
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	1ad3      	subs	r3, r2, r3
 800c94c:	69ba      	ldr	r2, [r7, #24]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d302      	bcc.n	800c958 <UART_WaitOnFlagUntilTimeout+0x30>
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d101      	bne.n	800c95c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c958:	2303      	movs	r3, #3
 800c95a:	e04e      	b.n	800c9fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f003 0304 	and.w	r3, r3, #4
 800c966:	2b00      	cmp	r3, #0
 800c968:	d037      	beq.n	800c9da <UART_WaitOnFlagUntilTimeout+0xb2>
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b80      	cmp	r3, #128	@ 0x80
 800c96e:	d034      	beq.n	800c9da <UART_WaitOnFlagUntilTimeout+0xb2>
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	2b40      	cmp	r3, #64	@ 0x40
 800c974:	d031      	beq.n	800c9da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	69db      	ldr	r3, [r3, #28]
 800c97c:	f003 0308 	and.w	r3, r3, #8
 800c980:	2b08      	cmp	r3, #8
 800c982:	d110      	bne.n	800c9a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2208      	movs	r2, #8
 800c98a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f000 f838 	bl	800ca02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2208      	movs	r2, #8
 800c996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e029      	b.n	800c9fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	69db      	ldr	r3, [r3, #28]
 800c9ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c9b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9b4:	d111      	bne.n	800c9da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c9be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f000 f81e 	bl	800ca02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2220      	movs	r2, #32
 800c9ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	e00f      	b.n	800c9fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	69da      	ldr	r2, [r3, #28]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	bf0c      	ite	eq
 800c9ea:	2301      	moveq	r3, #1
 800c9ec:	2300      	movne	r3, #0
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	79fb      	ldrb	r3, [r7, #7]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d0a0      	beq.n	800c93a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca02:	b480      	push	{r7}
 800ca04:	b095      	sub	sp, #84	@ 0x54
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca12:	e853 3f00 	ldrex	r3, [r3]
 800ca16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	461a      	mov	r2, r3
 800ca26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca28:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca30:	e841 2300 	strex	r3, r2, [r1]
 800ca34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1e6      	bne.n	800ca0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	3308      	adds	r3, #8
 800ca42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	e853 3f00 	ldrex	r3, [r3]
 800ca4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca52:	f023 0301 	bic.w	r3, r3, #1
 800ca56:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca68:	e841 2300 	strex	r3, r2, [r1]
 800ca6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e3      	bne.n	800ca3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d118      	bne.n	800caae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	e853 3f00 	ldrex	r3, [r3]
 800ca88:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	f023 0310 	bic.w	r3, r3, #16
 800ca90:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	461a      	mov	r2, r3
 800ca98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca9a:	61bb      	str	r3, [r7, #24]
 800ca9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca9e:	6979      	ldr	r1, [r7, #20]
 800caa0:	69ba      	ldr	r2, [r7, #24]
 800caa2:	e841 2300 	strex	r3, r2, [r1]
 800caa6:	613b      	str	r3, [r7, #16]
   return(result);
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1e6      	bne.n	800ca7c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2220      	movs	r2, #32
 800cab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cac2:	bf00      	nop
 800cac4:	3754      	adds	r7, #84	@ 0x54
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cace:	b480      	push	{r7}
 800cad0:	b085      	sub	sp, #20
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d101      	bne.n	800cae4 <HAL_UARTEx_DisableFifoMode+0x16>
 800cae0:	2302      	movs	r3, #2
 800cae2:	e027      	b.n	800cb34 <HAL_UARTEx_DisableFifoMode+0x66>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2224      	movs	r2, #36	@ 0x24
 800caf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f022 0201 	bic.w	r2, r2, #1
 800cb0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cb12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2220      	movs	r2, #32
 800cb26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d101      	bne.n	800cb58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb54:	2302      	movs	r3, #2
 800cb56:	e02d      	b.n	800cbb4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2224      	movs	r2, #36	@ 0x24
 800cb64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f022 0201 	bic.w	r2, r2, #1
 800cb7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	689b      	ldr	r3, [r3, #8]
 800cb86:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	430a      	orrs	r2, r1
 800cb92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f84f 	bl	800cc38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2220      	movs	r2, #32
 800cba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d101      	bne.n	800cbd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	e02d      	b.n	800cc30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2224      	movs	r2, #36	@ 0x24
 800cbe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f022 0201 	bic.w	r2, r2, #1
 800cbfa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	430a      	orrs	r2, r1
 800cc0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 f811 	bl	800cc38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2220      	movs	r2, #32
 800cc22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d108      	bne.n	800cc5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc58:	e031      	b.n	800ccbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc5a:	2308      	movs	r3, #8
 800cc5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc5e:	2308      	movs	r3, #8
 800cc60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	0e5b      	lsrs	r3, r3, #25
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	f003 0307 	and.w	r3, r3, #7
 800cc70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	0f5b      	lsrs	r3, r3, #29
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	f003 0307 	and.w	r3, r3, #7
 800cc80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc82:	7bbb      	ldrb	r3, [r7, #14]
 800cc84:	7b3a      	ldrb	r2, [r7, #12]
 800cc86:	4911      	ldr	r1, [pc, #68]	@ (800cccc <UARTEx_SetNbDataToProcess+0x94>)
 800cc88:	5c8a      	ldrb	r2, [r1, r2]
 800cc8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc8e:	7b3a      	ldrb	r2, [r7, #12]
 800cc90:	490f      	ldr	r1, [pc, #60]	@ (800ccd0 <UARTEx_SetNbDataToProcess+0x98>)
 800cc92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc94:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	7b7a      	ldrb	r2, [r7, #13]
 800cca4:	4909      	ldr	r1, [pc, #36]	@ (800cccc <UARTEx_SetNbDataToProcess+0x94>)
 800cca6:	5c8a      	ldrb	r2, [r1, r2]
 800cca8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ccac:	7b7a      	ldrb	r2, [r7, #13]
 800ccae:	4908      	ldr	r1, [pc, #32]	@ (800ccd0 <UARTEx_SetNbDataToProcess+0x98>)
 800ccb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ccb2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ccbe:	bf00      	nop
 800ccc0:	3714      	adds	r7, #20
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	08010fcc 	.word	0x08010fcc
 800ccd0:	08010fd4 	.word	0x08010fd4

0800ccd4 <malloc>:
 800ccd4:	4b02      	ldr	r3, [pc, #8]	@ (800cce0 <malloc+0xc>)
 800ccd6:	4601      	mov	r1, r0
 800ccd8:	6818      	ldr	r0, [r3, #0]
 800ccda:	f000 b82d 	b.w	800cd38 <_malloc_r>
 800ccde:	bf00      	nop
 800cce0:	20000020 	.word	0x20000020

0800cce4 <free>:
 800cce4:	4b02      	ldr	r3, [pc, #8]	@ (800ccf0 <free+0xc>)
 800cce6:	4601      	mov	r1, r0
 800cce8:	6818      	ldr	r0, [r3, #0]
 800ccea:	f001 bd0d 	b.w	800e708 <_free_r>
 800ccee:	bf00      	nop
 800ccf0:	20000020 	.word	0x20000020

0800ccf4 <sbrk_aligned>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	4e0f      	ldr	r6, [pc, #60]	@ (800cd34 <sbrk_aligned+0x40>)
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	6831      	ldr	r1, [r6, #0]
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	b911      	cbnz	r1, 800cd06 <sbrk_aligned+0x12>
 800cd00:	f000 fe64 	bl	800d9cc <_sbrk_r>
 800cd04:	6030      	str	r0, [r6, #0]
 800cd06:	4621      	mov	r1, r4
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f000 fe5f 	bl	800d9cc <_sbrk_r>
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	d103      	bne.n	800cd1a <sbrk_aligned+0x26>
 800cd12:	f04f 34ff 	mov.w	r4, #4294967295
 800cd16:	4620      	mov	r0, r4
 800cd18:	bd70      	pop	{r4, r5, r6, pc}
 800cd1a:	1cc4      	adds	r4, r0, #3
 800cd1c:	f024 0403 	bic.w	r4, r4, #3
 800cd20:	42a0      	cmp	r0, r4
 800cd22:	d0f8      	beq.n	800cd16 <sbrk_aligned+0x22>
 800cd24:	1a21      	subs	r1, r4, r0
 800cd26:	4628      	mov	r0, r5
 800cd28:	f000 fe50 	bl	800d9cc <_sbrk_r>
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	d1f2      	bne.n	800cd16 <sbrk_aligned+0x22>
 800cd30:	e7ef      	b.n	800cd12 <sbrk_aligned+0x1e>
 800cd32:	bf00      	nop
 800cd34:	200008ec 	.word	0x200008ec

0800cd38 <_malloc_r>:
 800cd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd3c:	1ccd      	adds	r5, r1, #3
 800cd3e:	f025 0503 	bic.w	r5, r5, #3
 800cd42:	3508      	adds	r5, #8
 800cd44:	2d0c      	cmp	r5, #12
 800cd46:	bf38      	it	cc
 800cd48:	250c      	movcc	r5, #12
 800cd4a:	2d00      	cmp	r5, #0
 800cd4c:	4606      	mov	r6, r0
 800cd4e:	db01      	blt.n	800cd54 <_malloc_r+0x1c>
 800cd50:	42a9      	cmp	r1, r5
 800cd52:	d904      	bls.n	800cd5e <_malloc_r+0x26>
 800cd54:	230c      	movs	r3, #12
 800cd56:	6033      	str	r3, [r6, #0]
 800cd58:	2000      	movs	r0, #0
 800cd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce34 <_malloc_r+0xfc>
 800cd62:	f000 f869 	bl	800ce38 <__malloc_lock>
 800cd66:	f8d8 3000 	ldr.w	r3, [r8]
 800cd6a:	461c      	mov	r4, r3
 800cd6c:	bb44      	cbnz	r4, 800cdc0 <_malloc_r+0x88>
 800cd6e:	4629      	mov	r1, r5
 800cd70:	4630      	mov	r0, r6
 800cd72:	f7ff ffbf 	bl	800ccf4 <sbrk_aligned>
 800cd76:	1c43      	adds	r3, r0, #1
 800cd78:	4604      	mov	r4, r0
 800cd7a:	d158      	bne.n	800ce2e <_malloc_r+0xf6>
 800cd7c:	f8d8 4000 	ldr.w	r4, [r8]
 800cd80:	4627      	mov	r7, r4
 800cd82:	2f00      	cmp	r7, #0
 800cd84:	d143      	bne.n	800ce0e <_malloc_r+0xd6>
 800cd86:	2c00      	cmp	r4, #0
 800cd88:	d04b      	beq.n	800ce22 <_malloc_r+0xea>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	4630      	mov	r0, r6
 800cd90:	eb04 0903 	add.w	r9, r4, r3
 800cd94:	f000 fe1a 	bl	800d9cc <_sbrk_r>
 800cd98:	4581      	cmp	r9, r0
 800cd9a:	d142      	bne.n	800ce22 <_malloc_r+0xea>
 800cd9c:	6821      	ldr	r1, [r4, #0]
 800cd9e:	1a6d      	subs	r5, r5, r1
 800cda0:	4629      	mov	r1, r5
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7ff ffa6 	bl	800ccf4 <sbrk_aligned>
 800cda8:	3001      	adds	r0, #1
 800cdaa:	d03a      	beq.n	800ce22 <_malloc_r+0xea>
 800cdac:	6823      	ldr	r3, [r4, #0]
 800cdae:	442b      	add	r3, r5
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	f8d8 3000 	ldr.w	r3, [r8]
 800cdb6:	685a      	ldr	r2, [r3, #4]
 800cdb8:	bb62      	cbnz	r2, 800ce14 <_malloc_r+0xdc>
 800cdba:	f8c8 7000 	str.w	r7, [r8]
 800cdbe:	e00f      	b.n	800cde0 <_malloc_r+0xa8>
 800cdc0:	6822      	ldr	r2, [r4, #0]
 800cdc2:	1b52      	subs	r2, r2, r5
 800cdc4:	d420      	bmi.n	800ce08 <_malloc_r+0xd0>
 800cdc6:	2a0b      	cmp	r2, #11
 800cdc8:	d917      	bls.n	800cdfa <_malloc_r+0xc2>
 800cdca:	1961      	adds	r1, r4, r5
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	6025      	str	r5, [r4, #0]
 800cdd0:	bf18      	it	ne
 800cdd2:	6059      	strne	r1, [r3, #4]
 800cdd4:	6863      	ldr	r3, [r4, #4]
 800cdd6:	bf08      	it	eq
 800cdd8:	f8c8 1000 	streq.w	r1, [r8]
 800cddc:	5162      	str	r2, [r4, r5]
 800cdde:	604b      	str	r3, [r1, #4]
 800cde0:	4630      	mov	r0, r6
 800cde2:	f000 f82f 	bl	800ce44 <__malloc_unlock>
 800cde6:	f104 000b 	add.w	r0, r4, #11
 800cdea:	1d23      	adds	r3, r4, #4
 800cdec:	f020 0007 	bic.w	r0, r0, #7
 800cdf0:	1ac2      	subs	r2, r0, r3
 800cdf2:	bf1c      	itt	ne
 800cdf4:	1a1b      	subne	r3, r3, r0
 800cdf6:	50a3      	strne	r3, [r4, r2]
 800cdf8:	e7af      	b.n	800cd5a <_malloc_r+0x22>
 800cdfa:	6862      	ldr	r2, [r4, #4]
 800cdfc:	42a3      	cmp	r3, r4
 800cdfe:	bf0c      	ite	eq
 800ce00:	f8c8 2000 	streq.w	r2, [r8]
 800ce04:	605a      	strne	r2, [r3, #4]
 800ce06:	e7eb      	b.n	800cde0 <_malloc_r+0xa8>
 800ce08:	4623      	mov	r3, r4
 800ce0a:	6864      	ldr	r4, [r4, #4]
 800ce0c:	e7ae      	b.n	800cd6c <_malloc_r+0x34>
 800ce0e:	463c      	mov	r4, r7
 800ce10:	687f      	ldr	r7, [r7, #4]
 800ce12:	e7b6      	b.n	800cd82 <_malloc_r+0x4a>
 800ce14:	461a      	mov	r2, r3
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	42a3      	cmp	r3, r4
 800ce1a:	d1fb      	bne.n	800ce14 <_malloc_r+0xdc>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	6053      	str	r3, [r2, #4]
 800ce20:	e7de      	b.n	800cde0 <_malloc_r+0xa8>
 800ce22:	230c      	movs	r3, #12
 800ce24:	6033      	str	r3, [r6, #0]
 800ce26:	4630      	mov	r0, r6
 800ce28:	f000 f80c 	bl	800ce44 <__malloc_unlock>
 800ce2c:	e794      	b.n	800cd58 <_malloc_r+0x20>
 800ce2e:	6005      	str	r5, [r0, #0]
 800ce30:	e7d6      	b.n	800cde0 <_malloc_r+0xa8>
 800ce32:	bf00      	nop
 800ce34:	200008f0 	.word	0x200008f0

0800ce38 <__malloc_lock>:
 800ce38:	4801      	ldr	r0, [pc, #4]	@ (800ce40 <__malloc_lock+0x8>)
 800ce3a:	f000 be14 	b.w	800da66 <__retarget_lock_acquire_recursive>
 800ce3e:	bf00      	nop
 800ce40:	20000a34 	.word	0x20000a34

0800ce44 <__malloc_unlock>:
 800ce44:	4801      	ldr	r0, [pc, #4]	@ (800ce4c <__malloc_unlock+0x8>)
 800ce46:	f000 be0f 	b.w	800da68 <__retarget_lock_release_recursive>
 800ce4a:	bf00      	nop
 800ce4c:	20000a34 	.word	0x20000a34

0800ce50 <__cvt>:
 800ce50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce54:	ec57 6b10 	vmov	r6, r7, d0
 800ce58:	2f00      	cmp	r7, #0
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	463b      	mov	r3, r7
 800ce60:	bfbb      	ittet	lt
 800ce62:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ce66:	461f      	movlt	r7, r3
 800ce68:	2300      	movge	r3, #0
 800ce6a:	232d      	movlt	r3, #45	@ 0x2d
 800ce6c:	700b      	strb	r3, [r1, #0]
 800ce6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce70:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ce74:	4691      	mov	r9, r2
 800ce76:	f023 0820 	bic.w	r8, r3, #32
 800ce7a:	bfbc      	itt	lt
 800ce7c:	4632      	movlt	r2, r6
 800ce7e:	4616      	movlt	r6, r2
 800ce80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ce84:	d005      	beq.n	800ce92 <__cvt+0x42>
 800ce86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ce8a:	d100      	bne.n	800ce8e <__cvt+0x3e>
 800ce8c:	3401      	adds	r4, #1
 800ce8e:	2102      	movs	r1, #2
 800ce90:	e000      	b.n	800ce94 <__cvt+0x44>
 800ce92:	2103      	movs	r1, #3
 800ce94:	ab03      	add	r3, sp, #12
 800ce96:	9301      	str	r3, [sp, #4]
 800ce98:	ab02      	add	r3, sp, #8
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	ec47 6b10 	vmov	d0, r6, r7
 800cea0:	4653      	mov	r3, sl
 800cea2:	4622      	mov	r2, r4
 800cea4:	f000 fe6c 	bl	800db80 <_dtoa_r>
 800cea8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ceac:	4605      	mov	r5, r0
 800ceae:	d119      	bne.n	800cee4 <__cvt+0x94>
 800ceb0:	f019 0f01 	tst.w	r9, #1
 800ceb4:	d00e      	beq.n	800ced4 <__cvt+0x84>
 800ceb6:	eb00 0904 	add.w	r9, r0, r4
 800ceba:	2200      	movs	r2, #0
 800cebc:	2300      	movs	r3, #0
 800cebe:	4630      	mov	r0, r6
 800cec0:	4639      	mov	r1, r7
 800cec2:	f7f3 fe29 	bl	8000b18 <__aeabi_dcmpeq>
 800cec6:	b108      	cbz	r0, 800cecc <__cvt+0x7c>
 800cec8:	f8cd 900c 	str.w	r9, [sp, #12]
 800cecc:	2230      	movs	r2, #48	@ 0x30
 800cece:	9b03      	ldr	r3, [sp, #12]
 800ced0:	454b      	cmp	r3, r9
 800ced2:	d31e      	bcc.n	800cf12 <__cvt+0xc2>
 800ced4:	9b03      	ldr	r3, [sp, #12]
 800ced6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ced8:	1b5b      	subs	r3, r3, r5
 800ceda:	4628      	mov	r0, r5
 800cedc:	6013      	str	r3, [r2, #0]
 800cede:	b004      	add	sp, #16
 800cee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cee8:	eb00 0904 	add.w	r9, r0, r4
 800ceec:	d1e5      	bne.n	800ceba <__cvt+0x6a>
 800ceee:	7803      	ldrb	r3, [r0, #0]
 800cef0:	2b30      	cmp	r3, #48	@ 0x30
 800cef2:	d10a      	bne.n	800cf0a <__cvt+0xba>
 800cef4:	2200      	movs	r2, #0
 800cef6:	2300      	movs	r3, #0
 800cef8:	4630      	mov	r0, r6
 800cefa:	4639      	mov	r1, r7
 800cefc:	f7f3 fe0c 	bl	8000b18 <__aeabi_dcmpeq>
 800cf00:	b918      	cbnz	r0, 800cf0a <__cvt+0xba>
 800cf02:	f1c4 0401 	rsb	r4, r4, #1
 800cf06:	f8ca 4000 	str.w	r4, [sl]
 800cf0a:	f8da 3000 	ldr.w	r3, [sl]
 800cf0e:	4499      	add	r9, r3
 800cf10:	e7d3      	b.n	800ceba <__cvt+0x6a>
 800cf12:	1c59      	adds	r1, r3, #1
 800cf14:	9103      	str	r1, [sp, #12]
 800cf16:	701a      	strb	r2, [r3, #0]
 800cf18:	e7d9      	b.n	800cece <__cvt+0x7e>

0800cf1a <__exponent>:
 800cf1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf1c:	2900      	cmp	r1, #0
 800cf1e:	bfba      	itte	lt
 800cf20:	4249      	neglt	r1, r1
 800cf22:	232d      	movlt	r3, #45	@ 0x2d
 800cf24:	232b      	movge	r3, #43	@ 0x2b
 800cf26:	2909      	cmp	r1, #9
 800cf28:	7002      	strb	r2, [r0, #0]
 800cf2a:	7043      	strb	r3, [r0, #1]
 800cf2c:	dd29      	ble.n	800cf82 <__exponent+0x68>
 800cf2e:	f10d 0307 	add.w	r3, sp, #7
 800cf32:	461d      	mov	r5, r3
 800cf34:	270a      	movs	r7, #10
 800cf36:	461a      	mov	r2, r3
 800cf38:	fbb1 f6f7 	udiv	r6, r1, r7
 800cf3c:	fb07 1416 	mls	r4, r7, r6, r1
 800cf40:	3430      	adds	r4, #48	@ 0x30
 800cf42:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cf46:	460c      	mov	r4, r1
 800cf48:	2c63      	cmp	r4, #99	@ 0x63
 800cf4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf4e:	4631      	mov	r1, r6
 800cf50:	dcf1      	bgt.n	800cf36 <__exponent+0x1c>
 800cf52:	3130      	adds	r1, #48	@ 0x30
 800cf54:	1e94      	subs	r4, r2, #2
 800cf56:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cf5a:	1c41      	adds	r1, r0, #1
 800cf5c:	4623      	mov	r3, r4
 800cf5e:	42ab      	cmp	r3, r5
 800cf60:	d30a      	bcc.n	800cf78 <__exponent+0x5e>
 800cf62:	f10d 0309 	add.w	r3, sp, #9
 800cf66:	1a9b      	subs	r3, r3, r2
 800cf68:	42ac      	cmp	r4, r5
 800cf6a:	bf88      	it	hi
 800cf6c:	2300      	movhi	r3, #0
 800cf6e:	3302      	adds	r3, #2
 800cf70:	4403      	add	r3, r0
 800cf72:	1a18      	subs	r0, r3, r0
 800cf74:	b003      	add	sp, #12
 800cf76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf78:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cf7c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cf80:	e7ed      	b.n	800cf5e <__exponent+0x44>
 800cf82:	2330      	movs	r3, #48	@ 0x30
 800cf84:	3130      	adds	r1, #48	@ 0x30
 800cf86:	7083      	strb	r3, [r0, #2]
 800cf88:	70c1      	strb	r1, [r0, #3]
 800cf8a:	1d03      	adds	r3, r0, #4
 800cf8c:	e7f1      	b.n	800cf72 <__exponent+0x58>
	...

0800cf90 <_printf_float>:
 800cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf94:	b08d      	sub	sp, #52	@ 0x34
 800cf96:	460c      	mov	r4, r1
 800cf98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cf9c:	4616      	mov	r6, r2
 800cf9e:	461f      	mov	r7, r3
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	f000 fcdb 	bl	800d95c <_localeconv_r>
 800cfa6:	6803      	ldr	r3, [r0, #0]
 800cfa8:	9304      	str	r3, [sp, #16]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7f3 f988 	bl	80002c0 <strlen>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfb4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfb8:	9005      	str	r0, [sp, #20]
 800cfba:	3307      	adds	r3, #7
 800cfbc:	f023 0307 	bic.w	r3, r3, #7
 800cfc0:	f103 0208 	add.w	r2, r3, #8
 800cfc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cfc8:	f8d4 b000 	ldr.w	fp, [r4]
 800cfcc:	f8c8 2000 	str.w	r2, [r8]
 800cfd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cfd8:	9307      	str	r3, [sp, #28]
 800cfda:	f8cd 8018 	str.w	r8, [sp, #24]
 800cfde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cfe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfe6:	4b9c      	ldr	r3, [pc, #624]	@ (800d258 <_printf_float+0x2c8>)
 800cfe8:	f04f 32ff 	mov.w	r2, #4294967295
 800cfec:	f7f3 fdc6 	bl	8000b7c <__aeabi_dcmpun>
 800cff0:	bb70      	cbnz	r0, 800d050 <_printf_float+0xc0>
 800cff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cff6:	4b98      	ldr	r3, [pc, #608]	@ (800d258 <_printf_float+0x2c8>)
 800cff8:	f04f 32ff 	mov.w	r2, #4294967295
 800cffc:	f7f3 fda0 	bl	8000b40 <__aeabi_dcmple>
 800d000:	bb30      	cbnz	r0, 800d050 <_printf_float+0xc0>
 800d002:	2200      	movs	r2, #0
 800d004:	2300      	movs	r3, #0
 800d006:	4640      	mov	r0, r8
 800d008:	4649      	mov	r1, r9
 800d00a:	f7f3 fd8f 	bl	8000b2c <__aeabi_dcmplt>
 800d00e:	b110      	cbz	r0, 800d016 <_printf_float+0x86>
 800d010:	232d      	movs	r3, #45	@ 0x2d
 800d012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d016:	4a91      	ldr	r2, [pc, #580]	@ (800d25c <_printf_float+0x2cc>)
 800d018:	4b91      	ldr	r3, [pc, #580]	@ (800d260 <_printf_float+0x2d0>)
 800d01a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d01e:	bf94      	ite	ls
 800d020:	4690      	movls	r8, r2
 800d022:	4698      	movhi	r8, r3
 800d024:	2303      	movs	r3, #3
 800d026:	6123      	str	r3, [r4, #16]
 800d028:	f02b 0304 	bic.w	r3, fp, #4
 800d02c:	6023      	str	r3, [r4, #0]
 800d02e:	f04f 0900 	mov.w	r9, #0
 800d032:	9700      	str	r7, [sp, #0]
 800d034:	4633      	mov	r3, r6
 800d036:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d038:	4621      	mov	r1, r4
 800d03a:	4628      	mov	r0, r5
 800d03c:	f000 f9d2 	bl	800d3e4 <_printf_common>
 800d040:	3001      	adds	r0, #1
 800d042:	f040 808d 	bne.w	800d160 <_printf_float+0x1d0>
 800d046:	f04f 30ff 	mov.w	r0, #4294967295
 800d04a:	b00d      	add	sp, #52	@ 0x34
 800d04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d050:	4642      	mov	r2, r8
 800d052:	464b      	mov	r3, r9
 800d054:	4640      	mov	r0, r8
 800d056:	4649      	mov	r1, r9
 800d058:	f7f3 fd90 	bl	8000b7c <__aeabi_dcmpun>
 800d05c:	b140      	cbz	r0, 800d070 <_printf_float+0xe0>
 800d05e:	464b      	mov	r3, r9
 800d060:	2b00      	cmp	r3, #0
 800d062:	bfbc      	itt	lt
 800d064:	232d      	movlt	r3, #45	@ 0x2d
 800d066:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d06a:	4a7e      	ldr	r2, [pc, #504]	@ (800d264 <_printf_float+0x2d4>)
 800d06c:	4b7e      	ldr	r3, [pc, #504]	@ (800d268 <_printf_float+0x2d8>)
 800d06e:	e7d4      	b.n	800d01a <_printf_float+0x8a>
 800d070:	6863      	ldr	r3, [r4, #4]
 800d072:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d076:	9206      	str	r2, [sp, #24]
 800d078:	1c5a      	adds	r2, r3, #1
 800d07a:	d13b      	bne.n	800d0f4 <_printf_float+0x164>
 800d07c:	2306      	movs	r3, #6
 800d07e:	6063      	str	r3, [r4, #4]
 800d080:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d084:	2300      	movs	r3, #0
 800d086:	6022      	str	r2, [r4, #0]
 800d088:	9303      	str	r3, [sp, #12]
 800d08a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d08c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d090:	ab09      	add	r3, sp, #36	@ 0x24
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	6861      	ldr	r1, [r4, #4]
 800d096:	ec49 8b10 	vmov	d0, r8, r9
 800d09a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f7ff fed6 	bl	800ce50 <__cvt>
 800d0a4:	9b06      	ldr	r3, [sp, #24]
 800d0a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0a8:	2b47      	cmp	r3, #71	@ 0x47
 800d0aa:	4680      	mov	r8, r0
 800d0ac:	d129      	bne.n	800d102 <_printf_float+0x172>
 800d0ae:	1cc8      	adds	r0, r1, #3
 800d0b0:	db02      	blt.n	800d0b8 <_printf_float+0x128>
 800d0b2:	6863      	ldr	r3, [r4, #4]
 800d0b4:	4299      	cmp	r1, r3
 800d0b6:	dd41      	ble.n	800d13c <_printf_float+0x1ac>
 800d0b8:	f1aa 0a02 	sub.w	sl, sl, #2
 800d0bc:	fa5f fa8a 	uxtb.w	sl, sl
 800d0c0:	3901      	subs	r1, #1
 800d0c2:	4652      	mov	r2, sl
 800d0c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d0c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0ca:	f7ff ff26 	bl	800cf1a <__exponent>
 800d0ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d0d0:	1813      	adds	r3, r2, r0
 800d0d2:	2a01      	cmp	r2, #1
 800d0d4:	4681      	mov	r9, r0
 800d0d6:	6123      	str	r3, [r4, #16]
 800d0d8:	dc02      	bgt.n	800d0e0 <_printf_float+0x150>
 800d0da:	6822      	ldr	r2, [r4, #0]
 800d0dc:	07d2      	lsls	r2, r2, #31
 800d0de:	d501      	bpl.n	800d0e4 <_printf_float+0x154>
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	6123      	str	r3, [r4, #16]
 800d0e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d0a2      	beq.n	800d032 <_printf_float+0xa2>
 800d0ec:	232d      	movs	r3, #45	@ 0x2d
 800d0ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0f2:	e79e      	b.n	800d032 <_printf_float+0xa2>
 800d0f4:	9a06      	ldr	r2, [sp, #24]
 800d0f6:	2a47      	cmp	r2, #71	@ 0x47
 800d0f8:	d1c2      	bne.n	800d080 <_printf_float+0xf0>
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1c0      	bne.n	800d080 <_printf_float+0xf0>
 800d0fe:	2301      	movs	r3, #1
 800d100:	e7bd      	b.n	800d07e <_printf_float+0xee>
 800d102:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d106:	d9db      	bls.n	800d0c0 <_printf_float+0x130>
 800d108:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d10c:	d118      	bne.n	800d140 <_printf_float+0x1b0>
 800d10e:	2900      	cmp	r1, #0
 800d110:	6863      	ldr	r3, [r4, #4]
 800d112:	dd0b      	ble.n	800d12c <_printf_float+0x19c>
 800d114:	6121      	str	r1, [r4, #16]
 800d116:	b913      	cbnz	r3, 800d11e <_printf_float+0x18e>
 800d118:	6822      	ldr	r2, [r4, #0]
 800d11a:	07d0      	lsls	r0, r2, #31
 800d11c:	d502      	bpl.n	800d124 <_printf_float+0x194>
 800d11e:	3301      	adds	r3, #1
 800d120:	440b      	add	r3, r1
 800d122:	6123      	str	r3, [r4, #16]
 800d124:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d126:	f04f 0900 	mov.w	r9, #0
 800d12a:	e7db      	b.n	800d0e4 <_printf_float+0x154>
 800d12c:	b913      	cbnz	r3, 800d134 <_printf_float+0x1a4>
 800d12e:	6822      	ldr	r2, [r4, #0]
 800d130:	07d2      	lsls	r2, r2, #31
 800d132:	d501      	bpl.n	800d138 <_printf_float+0x1a8>
 800d134:	3302      	adds	r3, #2
 800d136:	e7f4      	b.n	800d122 <_printf_float+0x192>
 800d138:	2301      	movs	r3, #1
 800d13a:	e7f2      	b.n	800d122 <_printf_float+0x192>
 800d13c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d142:	4299      	cmp	r1, r3
 800d144:	db05      	blt.n	800d152 <_printf_float+0x1c2>
 800d146:	6823      	ldr	r3, [r4, #0]
 800d148:	6121      	str	r1, [r4, #16]
 800d14a:	07d8      	lsls	r0, r3, #31
 800d14c:	d5ea      	bpl.n	800d124 <_printf_float+0x194>
 800d14e:	1c4b      	adds	r3, r1, #1
 800d150:	e7e7      	b.n	800d122 <_printf_float+0x192>
 800d152:	2900      	cmp	r1, #0
 800d154:	bfd4      	ite	le
 800d156:	f1c1 0202 	rsble	r2, r1, #2
 800d15a:	2201      	movgt	r2, #1
 800d15c:	4413      	add	r3, r2
 800d15e:	e7e0      	b.n	800d122 <_printf_float+0x192>
 800d160:	6823      	ldr	r3, [r4, #0]
 800d162:	055a      	lsls	r2, r3, #21
 800d164:	d407      	bmi.n	800d176 <_printf_float+0x1e6>
 800d166:	6923      	ldr	r3, [r4, #16]
 800d168:	4642      	mov	r2, r8
 800d16a:	4631      	mov	r1, r6
 800d16c:	4628      	mov	r0, r5
 800d16e:	47b8      	blx	r7
 800d170:	3001      	adds	r0, #1
 800d172:	d12b      	bne.n	800d1cc <_printf_float+0x23c>
 800d174:	e767      	b.n	800d046 <_printf_float+0xb6>
 800d176:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d17a:	f240 80dd 	bls.w	800d338 <_printf_float+0x3a8>
 800d17e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d182:	2200      	movs	r2, #0
 800d184:	2300      	movs	r3, #0
 800d186:	f7f3 fcc7 	bl	8000b18 <__aeabi_dcmpeq>
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d033      	beq.n	800d1f6 <_printf_float+0x266>
 800d18e:	4a37      	ldr	r2, [pc, #220]	@ (800d26c <_printf_float+0x2dc>)
 800d190:	2301      	movs	r3, #1
 800d192:	4631      	mov	r1, r6
 800d194:	4628      	mov	r0, r5
 800d196:	47b8      	blx	r7
 800d198:	3001      	adds	r0, #1
 800d19a:	f43f af54 	beq.w	800d046 <_printf_float+0xb6>
 800d19e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d1a2:	4543      	cmp	r3, r8
 800d1a4:	db02      	blt.n	800d1ac <_printf_float+0x21c>
 800d1a6:	6823      	ldr	r3, [r4, #0]
 800d1a8:	07d8      	lsls	r0, r3, #31
 800d1aa:	d50f      	bpl.n	800d1cc <_printf_float+0x23c>
 800d1ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1b0:	4631      	mov	r1, r6
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	47b8      	blx	r7
 800d1b6:	3001      	adds	r0, #1
 800d1b8:	f43f af45 	beq.w	800d046 <_printf_float+0xb6>
 800d1bc:	f04f 0900 	mov.w	r9, #0
 800d1c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d1c4:	f104 0a1a 	add.w	sl, r4, #26
 800d1c8:	45c8      	cmp	r8, r9
 800d1ca:	dc09      	bgt.n	800d1e0 <_printf_float+0x250>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	079b      	lsls	r3, r3, #30
 800d1d0:	f100 8103 	bmi.w	800d3da <_printf_float+0x44a>
 800d1d4:	68e0      	ldr	r0, [r4, #12]
 800d1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1d8:	4298      	cmp	r0, r3
 800d1da:	bfb8      	it	lt
 800d1dc:	4618      	movlt	r0, r3
 800d1de:	e734      	b.n	800d04a <_printf_float+0xba>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	4652      	mov	r2, sl
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	47b8      	blx	r7
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	f43f af2b 	beq.w	800d046 <_printf_float+0xb6>
 800d1f0:	f109 0901 	add.w	r9, r9, #1
 800d1f4:	e7e8      	b.n	800d1c8 <_printf_float+0x238>
 800d1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	dc39      	bgt.n	800d270 <_printf_float+0x2e0>
 800d1fc:	4a1b      	ldr	r2, [pc, #108]	@ (800d26c <_printf_float+0x2dc>)
 800d1fe:	2301      	movs	r3, #1
 800d200:	4631      	mov	r1, r6
 800d202:	4628      	mov	r0, r5
 800d204:	47b8      	blx	r7
 800d206:	3001      	adds	r0, #1
 800d208:	f43f af1d 	beq.w	800d046 <_printf_float+0xb6>
 800d20c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d210:	ea59 0303 	orrs.w	r3, r9, r3
 800d214:	d102      	bne.n	800d21c <_printf_float+0x28c>
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	07d9      	lsls	r1, r3, #31
 800d21a:	d5d7      	bpl.n	800d1cc <_printf_float+0x23c>
 800d21c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d220:	4631      	mov	r1, r6
 800d222:	4628      	mov	r0, r5
 800d224:	47b8      	blx	r7
 800d226:	3001      	adds	r0, #1
 800d228:	f43f af0d 	beq.w	800d046 <_printf_float+0xb6>
 800d22c:	f04f 0a00 	mov.w	sl, #0
 800d230:	f104 0b1a 	add.w	fp, r4, #26
 800d234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d236:	425b      	negs	r3, r3
 800d238:	4553      	cmp	r3, sl
 800d23a:	dc01      	bgt.n	800d240 <_printf_float+0x2b0>
 800d23c:	464b      	mov	r3, r9
 800d23e:	e793      	b.n	800d168 <_printf_float+0x1d8>
 800d240:	2301      	movs	r3, #1
 800d242:	465a      	mov	r2, fp
 800d244:	4631      	mov	r1, r6
 800d246:	4628      	mov	r0, r5
 800d248:	47b8      	blx	r7
 800d24a:	3001      	adds	r0, #1
 800d24c:	f43f aefb 	beq.w	800d046 <_printf_float+0xb6>
 800d250:	f10a 0a01 	add.w	sl, sl, #1
 800d254:	e7ee      	b.n	800d234 <_printf_float+0x2a4>
 800d256:	bf00      	nop
 800d258:	7fefffff 	.word	0x7fefffff
 800d25c:	08010fdc 	.word	0x08010fdc
 800d260:	08010fe0 	.word	0x08010fe0
 800d264:	08010fe4 	.word	0x08010fe4
 800d268:	08010fe8 	.word	0x08010fe8
 800d26c:	08010fec 	.word	0x08010fec
 800d270:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d272:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d276:	4553      	cmp	r3, sl
 800d278:	bfa8      	it	ge
 800d27a:	4653      	movge	r3, sl
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	4699      	mov	r9, r3
 800d280:	dc36      	bgt.n	800d2f0 <_printf_float+0x360>
 800d282:	f04f 0b00 	mov.w	fp, #0
 800d286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d28a:	f104 021a 	add.w	r2, r4, #26
 800d28e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d290:	9306      	str	r3, [sp, #24]
 800d292:	eba3 0309 	sub.w	r3, r3, r9
 800d296:	455b      	cmp	r3, fp
 800d298:	dc31      	bgt.n	800d2fe <_printf_float+0x36e>
 800d29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d29c:	459a      	cmp	sl, r3
 800d29e:	dc3a      	bgt.n	800d316 <_printf_float+0x386>
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	07da      	lsls	r2, r3, #31
 800d2a4:	d437      	bmi.n	800d316 <_printf_float+0x386>
 800d2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a8:	ebaa 0903 	sub.w	r9, sl, r3
 800d2ac:	9b06      	ldr	r3, [sp, #24]
 800d2ae:	ebaa 0303 	sub.w	r3, sl, r3
 800d2b2:	4599      	cmp	r9, r3
 800d2b4:	bfa8      	it	ge
 800d2b6:	4699      	movge	r9, r3
 800d2b8:	f1b9 0f00 	cmp.w	r9, #0
 800d2bc:	dc33      	bgt.n	800d326 <_printf_float+0x396>
 800d2be:	f04f 0800 	mov.w	r8, #0
 800d2c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2c6:	f104 0b1a 	add.w	fp, r4, #26
 800d2ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2cc:	ebaa 0303 	sub.w	r3, sl, r3
 800d2d0:	eba3 0309 	sub.w	r3, r3, r9
 800d2d4:	4543      	cmp	r3, r8
 800d2d6:	f77f af79 	ble.w	800d1cc <_printf_float+0x23c>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	465a      	mov	r2, fp
 800d2de:	4631      	mov	r1, r6
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	47b8      	blx	r7
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	f43f aeae 	beq.w	800d046 <_printf_float+0xb6>
 800d2ea:	f108 0801 	add.w	r8, r8, #1
 800d2ee:	e7ec      	b.n	800d2ca <_printf_float+0x33a>
 800d2f0:	4642      	mov	r2, r8
 800d2f2:	4631      	mov	r1, r6
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	47b8      	blx	r7
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	d1c2      	bne.n	800d282 <_printf_float+0x2f2>
 800d2fc:	e6a3      	b.n	800d046 <_printf_float+0xb6>
 800d2fe:	2301      	movs	r3, #1
 800d300:	4631      	mov	r1, r6
 800d302:	4628      	mov	r0, r5
 800d304:	9206      	str	r2, [sp, #24]
 800d306:	47b8      	blx	r7
 800d308:	3001      	adds	r0, #1
 800d30a:	f43f ae9c 	beq.w	800d046 <_printf_float+0xb6>
 800d30e:	9a06      	ldr	r2, [sp, #24]
 800d310:	f10b 0b01 	add.w	fp, fp, #1
 800d314:	e7bb      	b.n	800d28e <_printf_float+0x2fe>
 800d316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d31a:	4631      	mov	r1, r6
 800d31c:	4628      	mov	r0, r5
 800d31e:	47b8      	blx	r7
 800d320:	3001      	adds	r0, #1
 800d322:	d1c0      	bne.n	800d2a6 <_printf_float+0x316>
 800d324:	e68f      	b.n	800d046 <_printf_float+0xb6>
 800d326:	9a06      	ldr	r2, [sp, #24]
 800d328:	464b      	mov	r3, r9
 800d32a:	4442      	add	r2, r8
 800d32c:	4631      	mov	r1, r6
 800d32e:	4628      	mov	r0, r5
 800d330:	47b8      	blx	r7
 800d332:	3001      	adds	r0, #1
 800d334:	d1c3      	bne.n	800d2be <_printf_float+0x32e>
 800d336:	e686      	b.n	800d046 <_printf_float+0xb6>
 800d338:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d33c:	f1ba 0f01 	cmp.w	sl, #1
 800d340:	dc01      	bgt.n	800d346 <_printf_float+0x3b6>
 800d342:	07db      	lsls	r3, r3, #31
 800d344:	d536      	bpl.n	800d3b4 <_printf_float+0x424>
 800d346:	2301      	movs	r3, #1
 800d348:	4642      	mov	r2, r8
 800d34a:	4631      	mov	r1, r6
 800d34c:	4628      	mov	r0, r5
 800d34e:	47b8      	blx	r7
 800d350:	3001      	adds	r0, #1
 800d352:	f43f ae78 	beq.w	800d046 <_printf_float+0xb6>
 800d356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d35a:	4631      	mov	r1, r6
 800d35c:	4628      	mov	r0, r5
 800d35e:	47b8      	blx	r7
 800d360:	3001      	adds	r0, #1
 800d362:	f43f ae70 	beq.w	800d046 <_printf_float+0xb6>
 800d366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d36a:	2200      	movs	r2, #0
 800d36c:	2300      	movs	r3, #0
 800d36e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d372:	f7f3 fbd1 	bl	8000b18 <__aeabi_dcmpeq>
 800d376:	b9c0      	cbnz	r0, 800d3aa <_printf_float+0x41a>
 800d378:	4653      	mov	r3, sl
 800d37a:	f108 0201 	add.w	r2, r8, #1
 800d37e:	4631      	mov	r1, r6
 800d380:	4628      	mov	r0, r5
 800d382:	47b8      	blx	r7
 800d384:	3001      	adds	r0, #1
 800d386:	d10c      	bne.n	800d3a2 <_printf_float+0x412>
 800d388:	e65d      	b.n	800d046 <_printf_float+0xb6>
 800d38a:	2301      	movs	r3, #1
 800d38c:	465a      	mov	r2, fp
 800d38e:	4631      	mov	r1, r6
 800d390:	4628      	mov	r0, r5
 800d392:	47b8      	blx	r7
 800d394:	3001      	adds	r0, #1
 800d396:	f43f ae56 	beq.w	800d046 <_printf_float+0xb6>
 800d39a:	f108 0801 	add.w	r8, r8, #1
 800d39e:	45d0      	cmp	r8, sl
 800d3a0:	dbf3      	blt.n	800d38a <_printf_float+0x3fa>
 800d3a2:	464b      	mov	r3, r9
 800d3a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d3a8:	e6df      	b.n	800d16a <_printf_float+0x1da>
 800d3aa:	f04f 0800 	mov.w	r8, #0
 800d3ae:	f104 0b1a 	add.w	fp, r4, #26
 800d3b2:	e7f4      	b.n	800d39e <_printf_float+0x40e>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	4642      	mov	r2, r8
 800d3b8:	e7e1      	b.n	800d37e <_printf_float+0x3ee>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	464a      	mov	r2, r9
 800d3be:	4631      	mov	r1, r6
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	47b8      	blx	r7
 800d3c4:	3001      	adds	r0, #1
 800d3c6:	f43f ae3e 	beq.w	800d046 <_printf_float+0xb6>
 800d3ca:	f108 0801 	add.w	r8, r8, #1
 800d3ce:	68e3      	ldr	r3, [r4, #12]
 800d3d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d3d2:	1a5b      	subs	r3, r3, r1
 800d3d4:	4543      	cmp	r3, r8
 800d3d6:	dcf0      	bgt.n	800d3ba <_printf_float+0x42a>
 800d3d8:	e6fc      	b.n	800d1d4 <_printf_float+0x244>
 800d3da:	f04f 0800 	mov.w	r8, #0
 800d3de:	f104 0919 	add.w	r9, r4, #25
 800d3e2:	e7f4      	b.n	800d3ce <_printf_float+0x43e>

0800d3e4 <_printf_common>:
 800d3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e8:	4616      	mov	r6, r2
 800d3ea:	4698      	mov	r8, r3
 800d3ec:	688a      	ldr	r2, [r1, #8]
 800d3ee:	690b      	ldr	r3, [r1, #16]
 800d3f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	bfb8      	it	lt
 800d3f8:	4613      	movlt	r3, r2
 800d3fa:	6033      	str	r3, [r6, #0]
 800d3fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d400:	4607      	mov	r7, r0
 800d402:	460c      	mov	r4, r1
 800d404:	b10a      	cbz	r2, 800d40a <_printf_common+0x26>
 800d406:	3301      	adds	r3, #1
 800d408:	6033      	str	r3, [r6, #0]
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	0699      	lsls	r1, r3, #26
 800d40e:	bf42      	ittt	mi
 800d410:	6833      	ldrmi	r3, [r6, #0]
 800d412:	3302      	addmi	r3, #2
 800d414:	6033      	strmi	r3, [r6, #0]
 800d416:	6825      	ldr	r5, [r4, #0]
 800d418:	f015 0506 	ands.w	r5, r5, #6
 800d41c:	d106      	bne.n	800d42c <_printf_common+0x48>
 800d41e:	f104 0a19 	add.w	sl, r4, #25
 800d422:	68e3      	ldr	r3, [r4, #12]
 800d424:	6832      	ldr	r2, [r6, #0]
 800d426:	1a9b      	subs	r3, r3, r2
 800d428:	42ab      	cmp	r3, r5
 800d42a:	dc26      	bgt.n	800d47a <_printf_common+0x96>
 800d42c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d430:	6822      	ldr	r2, [r4, #0]
 800d432:	3b00      	subs	r3, #0
 800d434:	bf18      	it	ne
 800d436:	2301      	movne	r3, #1
 800d438:	0692      	lsls	r2, r2, #26
 800d43a:	d42b      	bmi.n	800d494 <_printf_common+0xb0>
 800d43c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d440:	4641      	mov	r1, r8
 800d442:	4638      	mov	r0, r7
 800d444:	47c8      	blx	r9
 800d446:	3001      	adds	r0, #1
 800d448:	d01e      	beq.n	800d488 <_printf_common+0xa4>
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	6922      	ldr	r2, [r4, #16]
 800d44e:	f003 0306 	and.w	r3, r3, #6
 800d452:	2b04      	cmp	r3, #4
 800d454:	bf02      	ittt	eq
 800d456:	68e5      	ldreq	r5, [r4, #12]
 800d458:	6833      	ldreq	r3, [r6, #0]
 800d45a:	1aed      	subeq	r5, r5, r3
 800d45c:	68a3      	ldr	r3, [r4, #8]
 800d45e:	bf0c      	ite	eq
 800d460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d464:	2500      	movne	r5, #0
 800d466:	4293      	cmp	r3, r2
 800d468:	bfc4      	itt	gt
 800d46a:	1a9b      	subgt	r3, r3, r2
 800d46c:	18ed      	addgt	r5, r5, r3
 800d46e:	2600      	movs	r6, #0
 800d470:	341a      	adds	r4, #26
 800d472:	42b5      	cmp	r5, r6
 800d474:	d11a      	bne.n	800d4ac <_printf_common+0xc8>
 800d476:	2000      	movs	r0, #0
 800d478:	e008      	b.n	800d48c <_printf_common+0xa8>
 800d47a:	2301      	movs	r3, #1
 800d47c:	4652      	mov	r2, sl
 800d47e:	4641      	mov	r1, r8
 800d480:	4638      	mov	r0, r7
 800d482:	47c8      	blx	r9
 800d484:	3001      	adds	r0, #1
 800d486:	d103      	bne.n	800d490 <_printf_common+0xac>
 800d488:	f04f 30ff 	mov.w	r0, #4294967295
 800d48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d490:	3501      	adds	r5, #1
 800d492:	e7c6      	b.n	800d422 <_printf_common+0x3e>
 800d494:	18e1      	adds	r1, r4, r3
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	2030      	movs	r0, #48	@ 0x30
 800d49a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d49e:	4422      	add	r2, r4
 800d4a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4a8:	3302      	adds	r3, #2
 800d4aa:	e7c7      	b.n	800d43c <_printf_common+0x58>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	4622      	mov	r2, r4
 800d4b0:	4641      	mov	r1, r8
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	47c8      	blx	r9
 800d4b6:	3001      	adds	r0, #1
 800d4b8:	d0e6      	beq.n	800d488 <_printf_common+0xa4>
 800d4ba:	3601      	adds	r6, #1
 800d4bc:	e7d9      	b.n	800d472 <_printf_common+0x8e>
	...

0800d4c0 <_printf_i>:
 800d4c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4c4:	7e0f      	ldrb	r7, [r1, #24]
 800d4c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d4c8:	2f78      	cmp	r7, #120	@ 0x78
 800d4ca:	4691      	mov	r9, r2
 800d4cc:	4680      	mov	r8, r0
 800d4ce:	460c      	mov	r4, r1
 800d4d0:	469a      	mov	sl, r3
 800d4d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d4d6:	d807      	bhi.n	800d4e8 <_printf_i+0x28>
 800d4d8:	2f62      	cmp	r7, #98	@ 0x62
 800d4da:	d80a      	bhi.n	800d4f2 <_printf_i+0x32>
 800d4dc:	2f00      	cmp	r7, #0
 800d4de:	f000 80d2 	beq.w	800d686 <_printf_i+0x1c6>
 800d4e2:	2f58      	cmp	r7, #88	@ 0x58
 800d4e4:	f000 80b9 	beq.w	800d65a <_printf_i+0x19a>
 800d4e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d4f0:	e03a      	b.n	800d568 <_printf_i+0xa8>
 800d4f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d4f6:	2b15      	cmp	r3, #21
 800d4f8:	d8f6      	bhi.n	800d4e8 <_printf_i+0x28>
 800d4fa:	a101      	add	r1, pc, #4	@ (adr r1, 800d500 <_printf_i+0x40>)
 800d4fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d500:	0800d559 	.word	0x0800d559
 800d504:	0800d56d 	.word	0x0800d56d
 800d508:	0800d4e9 	.word	0x0800d4e9
 800d50c:	0800d4e9 	.word	0x0800d4e9
 800d510:	0800d4e9 	.word	0x0800d4e9
 800d514:	0800d4e9 	.word	0x0800d4e9
 800d518:	0800d56d 	.word	0x0800d56d
 800d51c:	0800d4e9 	.word	0x0800d4e9
 800d520:	0800d4e9 	.word	0x0800d4e9
 800d524:	0800d4e9 	.word	0x0800d4e9
 800d528:	0800d4e9 	.word	0x0800d4e9
 800d52c:	0800d66d 	.word	0x0800d66d
 800d530:	0800d597 	.word	0x0800d597
 800d534:	0800d627 	.word	0x0800d627
 800d538:	0800d4e9 	.word	0x0800d4e9
 800d53c:	0800d4e9 	.word	0x0800d4e9
 800d540:	0800d68f 	.word	0x0800d68f
 800d544:	0800d4e9 	.word	0x0800d4e9
 800d548:	0800d597 	.word	0x0800d597
 800d54c:	0800d4e9 	.word	0x0800d4e9
 800d550:	0800d4e9 	.word	0x0800d4e9
 800d554:	0800d62f 	.word	0x0800d62f
 800d558:	6833      	ldr	r3, [r6, #0]
 800d55a:	1d1a      	adds	r2, r3, #4
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	6032      	str	r2, [r6, #0]
 800d560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d568:	2301      	movs	r3, #1
 800d56a:	e09d      	b.n	800d6a8 <_printf_i+0x1e8>
 800d56c:	6833      	ldr	r3, [r6, #0]
 800d56e:	6820      	ldr	r0, [r4, #0]
 800d570:	1d19      	adds	r1, r3, #4
 800d572:	6031      	str	r1, [r6, #0]
 800d574:	0606      	lsls	r6, r0, #24
 800d576:	d501      	bpl.n	800d57c <_printf_i+0xbc>
 800d578:	681d      	ldr	r5, [r3, #0]
 800d57a:	e003      	b.n	800d584 <_printf_i+0xc4>
 800d57c:	0645      	lsls	r5, r0, #25
 800d57e:	d5fb      	bpl.n	800d578 <_printf_i+0xb8>
 800d580:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d584:	2d00      	cmp	r5, #0
 800d586:	da03      	bge.n	800d590 <_printf_i+0xd0>
 800d588:	232d      	movs	r3, #45	@ 0x2d
 800d58a:	426d      	negs	r5, r5
 800d58c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d590:	4859      	ldr	r0, [pc, #356]	@ (800d6f8 <_printf_i+0x238>)
 800d592:	230a      	movs	r3, #10
 800d594:	e011      	b.n	800d5ba <_printf_i+0xfa>
 800d596:	6821      	ldr	r1, [r4, #0]
 800d598:	6833      	ldr	r3, [r6, #0]
 800d59a:	0608      	lsls	r0, r1, #24
 800d59c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5a0:	d402      	bmi.n	800d5a8 <_printf_i+0xe8>
 800d5a2:	0649      	lsls	r1, r1, #25
 800d5a4:	bf48      	it	mi
 800d5a6:	b2ad      	uxthmi	r5, r5
 800d5a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5aa:	4853      	ldr	r0, [pc, #332]	@ (800d6f8 <_printf_i+0x238>)
 800d5ac:	6033      	str	r3, [r6, #0]
 800d5ae:	bf14      	ite	ne
 800d5b0:	230a      	movne	r3, #10
 800d5b2:	2308      	moveq	r3, #8
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d5ba:	6866      	ldr	r6, [r4, #4]
 800d5bc:	60a6      	str	r6, [r4, #8]
 800d5be:	2e00      	cmp	r6, #0
 800d5c0:	bfa2      	ittt	ge
 800d5c2:	6821      	ldrge	r1, [r4, #0]
 800d5c4:	f021 0104 	bicge.w	r1, r1, #4
 800d5c8:	6021      	strge	r1, [r4, #0]
 800d5ca:	b90d      	cbnz	r5, 800d5d0 <_printf_i+0x110>
 800d5cc:	2e00      	cmp	r6, #0
 800d5ce:	d04b      	beq.n	800d668 <_printf_i+0x1a8>
 800d5d0:	4616      	mov	r6, r2
 800d5d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d5d6:	fb03 5711 	mls	r7, r3, r1, r5
 800d5da:	5dc7      	ldrb	r7, [r0, r7]
 800d5dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d5e0:	462f      	mov	r7, r5
 800d5e2:	42bb      	cmp	r3, r7
 800d5e4:	460d      	mov	r5, r1
 800d5e6:	d9f4      	bls.n	800d5d2 <_printf_i+0x112>
 800d5e8:	2b08      	cmp	r3, #8
 800d5ea:	d10b      	bne.n	800d604 <_printf_i+0x144>
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	07df      	lsls	r7, r3, #31
 800d5f0:	d508      	bpl.n	800d604 <_printf_i+0x144>
 800d5f2:	6923      	ldr	r3, [r4, #16]
 800d5f4:	6861      	ldr	r1, [r4, #4]
 800d5f6:	4299      	cmp	r1, r3
 800d5f8:	bfde      	ittt	le
 800d5fa:	2330      	movle	r3, #48	@ 0x30
 800d5fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d600:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d604:	1b92      	subs	r2, r2, r6
 800d606:	6122      	str	r2, [r4, #16]
 800d608:	f8cd a000 	str.w	sl, [sp]
 800d60c:	464b      	mov	r3, r9
 800d60e:	aa03      	add	r2, sp, #12
 800d610:	4621      	mov	r1, r4
 800d612:	4640      	mov	r0, r8
 800d614:	f7ff fee6 	bl	800d3e4 <_printf_common>
 800d618:	3001      	adds	r0, #1
 800d61a:	d14a      	bne.n	800d6b2 <_printf_i+0x1f2>
 800d61c:	f04f 30ff 	mov.w	r0, #4294967295
 800d620:	b004      	add	sp, #16
 800d622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	f043 0320 	orr.w	r3, r3, #32
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	4833      	ldr	r0, [pc, #204]	@ (800d6fc <_printf_i+0x23c>)
 800d630:	2778      	movs	r7, #120	@ 0x78
 800d632:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d636:	6823      	ldr	r3, [r4, #0]
 800d638:	6831      	ldr	r1, [r6, #0]
 800d63a:	061f      	lsls	r7, r3, #24
 800d63c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d640:	d402      	bmi.n	800d648 <_printf_i+0x188>
 800d642:	065f      	lsls	r7, r3, #25
 800d644:	bf48      	it	mi
 800d646:	b2ad      	uxthmi	r5, r5
 800d648:	6031      	str	r1, [r6, #0]
 800d64a:	07d9      	lsls	r1, r3, #31
 800d64c:	bf44      	itt	mi
 800d64e:	f043 0320 	orrmi.w	r3, r3, #32
 800d652:	6023      	strmi	r3, [r4, #0]
 800d654:	b11d      	cbz	r5, 800d65e <_printf_i+0x19e>
 800d656:	2310      	movs	r3, #16
 800d658:	e7ac      	b.n	800d5b4 <_printf_i+0xf4>
 800d65a:	4827      	ldr	r0, [pc, #156]	@ (800d6f8 <_printf_i+0x238>)
 800d65c:	e7e9      	b.n	800d632 <_printf_i+0x172>
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	f023 0320 	bic.w	r3, r3, #32
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	e7f6      	b.n	800d656 <_printf_i+0x196>
 800d668:	4616      	mov	r6, r2
 800d66a:	e7bd      	b.n	800d5e8 <_printf_i+0x128>
 800d66c:	6833      	ldr	r3, [r6, #0]
 800d66e:	6825      	ldr	r5, [r4, #0]
 800d670:	6961      	ldr	r1, [r4, #20]
 800d672:	1d18      	adds	r0, r3, #4
 800d674:	6030      	str	r0, [r6, #0]
 800d676:	062e      	lsls	r6, r5, #24
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	d501      	bpl.n	800d680 <_printf_i+0x1c0>
 800d67c:	6019      	str	r1, [r3, #0]
 800d67e:	e002      	b.n	800d686 <_printf_i+0x1c6>
 800d680:	0668      	lsls	r0, r5, #25
 800d682:	d5fb      	bpl.n	800d67c <_printf_i+0x1bc>
 800d684:	8019      	strh	r1, [r3, #0]
 800d686:	2300      	movs	r3, #0
 800d688:	6123      	str	r3, [r4, #16]
 800d68a:	4616      	mov	r6, r2
 800d68c:	e7bc      	b.n	800d608 <_printf_i+0x148>
 800d68e:	6833      	ldr	r3, [r6, #0]
 800d690:	1d1a      	adds	r2, r3, #4
 800d692:	6032      	str	r2, [r6, #0]
 800d694:	681e      	ldr	r6, [r3, #0]
 800d696:	6862      	ldr	r2, [r4, #4]
 800d698:	2100      	movs	r1, #0
 800d69a:	4630      	mov	r0, r6
 800d69c:	f7f2 fdc0 	bl	8000220 <memchr>
 800d6a0:	b108      	cbz	r0, 800d6a6 <_printf_i+0x1e6>
 800d6a2:	1b80      	subs	r0, r0, r6
 800d6a4:	6060      	str	r0, [r4, #4]
 800d6a6:	6863      	ldr	r3, [r4, #4]
 800d6a8:	6123      	str	r3, [r4, #16]
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6b0:	e7aa      	b.n	800d608 <_printf_i+0x148>
 800d6b2:	6923      	ldr	r3, [r4, #16]
 800d6b4:	4632      	mov	r2, r6
 800d6b6:	4649      	mov	r1, r9
 800d6b8:	4640      	mov	r0, r8
 800d6ba:	47d0      	blx	sl
 800d6bc:	3001      	adds	r0, #1
 800d6be:	d0ad      	beq.n	800d61c <_printf_i+0x15c>
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	079b      	lsls	r3, r3, #30
 800d6c4:	d413      	bmi.n	800d6ee <_printf_i+0x22e>
 800d6c6:	68e0      	ldr	r0, [r4, #12]
 800d6c8:	9b03      	ldr	r3, [sp, #12]
 800d6ca:	4298      	cmp	r0, r3
 800d6cc:	bfb8      	it	lt
 800d6ce:	4618      	movlt	r0, r3
 800d6d0:	e7a6      	b.n	800d620 <_printf_i+0x160>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4632      	mov	r2, r6
 800d6d6:	4649      	mov	r1, r9
 800d6d8:	4640      	mov	r0, r8
 800d6da:	47d0      	blx	sl
 800d6dc:	3001      	adds	r0, #1
 800d6de:	d09d      	beq.n	800d61c <_printf_i+0x15c>
 800d6e0:	3501      	adds	r5, #1
 800d6e2:	68e3      	ldr	r3, [r4, #12]
 800d6e4:	9903      	ldr	r1, [sp, #12]
 800d6e6:	1a5b      	subs	r3, r3, r1
 800d6e8:	42ab      	cmp	r3, r5
 800d6ea:	dcf2      	bgt.n	800d6d2 <_printf_i+0x212>
 800d6ec:	e7eb      	b.n	800d6c6 <_printf_i+0x206>
 800d6ee:	2500      	movs	r5, #0
 800d6f0:	f104 0619 	add.w	r6, r4, #25
 800d6f4:	e7f5      	b.n	800d6e2 <_printf_i+0x222>
 800d6f6:	bf00      	nop
 800d6f8:	08010fee 	.word	0x08010fee
 800d6fc:	08010fff 	.word	0x08010fff

0800d700 <std>:
 800d700:	2300      	movs	r3, #0
 800d702:	b510      	push	{r4, lr}
 800d704:	4604      	mov	r4, r0
 800d706:	e9c0 3300 	strd	r3, r3, [r0]
 800d70a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d70e:	6083      	str	r3, [r0, #8]
 800d710:	8181      	strh	r1, [r0, #12]
 800d712:	6643      	str	r3, [r0, #100]	@ 0x64
 800d714:	81c2      	strh	r2, [r0, #14]
 800d716:	6183      	str	r3, [r0, #24]
 800d718:	4619      	mov	r1, r3
 800d71a:	2208      	movs	r2, #8
 800d71c:	305c      	adds	r0, #92	@ 0x5c
 800d71e:	f000 f914 	bl	800d94a <memset>
 800d722:	4b0d      	ldr	r3, [pc, #52]	@ (800d758 <std+0x58>)
 800d724:	6263      	str	r3, [r4, #36]	@ 0x24
 800d726:	4b0d      	ldr	r3, [pc, #52]	@ (800d75c <std+0x5c>)
 800d728:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d72a:	4b0d      	ldr	r3, [pc, #52]	@ (800d760 <std+0x60>)
 800d72c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d72e:	4b0d      	ldr	r3, [pc, #52]	@ (800d764 <std+0x64>)
 800d730:	6323      	str	r3, [r4, #48]	@ 0x30
 800d732:	4b0d      	ldr	r3, [pc, #52]	@ (800d768 <std+0x68>)
 800d734:	6224      	str	r4, [r4, #32]
 800d736:	429c      	cmp	r4, r3
 800d738:	d006      	beq.n	800d748 <std+0x48>
 800d73a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d73e:	4294      	cmp	r4, r2
 800d740:	d002      	beq.n	800d748 <std+0x48>
 800d742:	33d0      	adds	r3, #208	@ 0xd0
 800d744:	429c      	cmp	r4, r3
 800d746:	d105      	bne.n	800d754 <std+0x54>
 800d748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d750:	f000 b988 	b.w	800da64 <__retarget_lock_init_recursive>
 800d754:	bd10      	pop	{r4, pc}
 800d756:	bf00      	nop
 800d758:	0800d8c5 	.word	0x0800d8c5
 800d75c:	0800d8e7 	.word	0x0800d8e7
 800d760:	0800d91f 	.word	0x0800d91f
 800d764:	0800d943 	.word	0x0800d943
 800d768:	200008f4 	.word	0x200008f4

0800d76c <stdio_exit_handler>:
 800d76c:	4a02      	ldr	r2, [pc, #8]	@ (800d778 <stdio_exit_handler+0xc>)
 800d76e:	4903      	ldr	r1, [pc, #12]	@ (800d77c <stdio_exit_handler+0x10>)
 800d770:	4803      	ldr	r0, [pc, #12]	@ (800d780 <stdio_exit_handler+0x14>)
 800d772:	f000 b869 	b.w	800d848 <_fwalk_sglue>
 800d776:	bf00      	nop
 800d778:	20000014 	.word	0x20000014
 800d77c:	0800f259 	.word	0x0800f259
 800d780:	20000024 	.word	0x20000024

0800d784 <cleanup_stdio>:
 800d784:	6841      	ldr	r1, [r0, #4]
 800d786:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b8 <cleanup_stdio+0x34>)
 800d788:	4299      	cmp	r1, r3
 800d78a:	b510      	push	{r4, lr}
 800d78c:	4604      	mov	r4, r0
 800d78e:	d001      	beq.n	800d794 <cleanup_stdio+0x10>
 800d790:	f001 fd62 	bl	800f258 <_fflush_r>
 800d794:	68a1      	ldr	r1, [r4, #8]
 800d796:	4b09      	ldr	r3, [pc, #36]	@ (800d7bc <cleanup_stdio+0x38>)
 800d798:	4299      	cmp	r1, r3
 800d79a:	d002      	beq.n	800d7a2 <cleanup_stdio+0x1e>
 800d79c:	4620      	mov	r0, r4
 800d79e:	f001 fd5b 	bl	800f258 <_fflush_r>
 800d7a2:	68e1      	ldr	r1, [r4, #12]
 800d7a4:	4b06      	ldr	r3, [pc, #24]	@ (800d7c0 <cleanup_stdio+0x3c>)
 800d7a6:	4299      	cmp	r1, r3
 800d7a8:	d004      	beq.n	800d7b4 <cleanup_stdio+0x30>
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7b0:	f001 bd52 	b.w	800f258 <_fflush_r>
 800d7b4:	bd10      	pop	{r4, pc}
 800d7b6:	bf00      	nop
 800d7b8:	200008f4 	.word	0x200008f4
 800d7bc:	2000095c 	.word	0x2000095c
 800d7c0:	200009c4 	.word	0x200009c4

0800d7c4 <global_stdio_init.part.0>:
 800d7c4:	b510      	push	{r4, lr}
 800d7c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f4 <global_stdio_init.part.0+0x30>)
 800d7c8:	4c0b      	ldr	r4, [pc, #44]	@ (800d7f8 <global_stdio_init.part.0+0x34>)
 800d7ca:	4a0c      	ldr	r2, [pc, #48]	@ (800d7fc <global_stdio_init.part.0+0x38>)
 800d7cc:	601a      	str	r2, [r3, #0]
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	2104      	movs	r1, #4
 800d7d4:	f7ff ff94 	bl	800d700 <std>
 800d7d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d7dc:	2201      	movs	r2, #1
 800d7de:	2109      	movs	r1, #9
 800d7e0:	f7ff ff8e 	bl	800d700 <std>
 800d7e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ee:	2112      	movs	r1, #18
 800d7f0:	f7ff bf86 	b.w	800d700 <std>
 800d7f4:	20000a2c 	.word	0x20000a2c
 800d7f8:	200008f4 	.word	0x200008f4
 800d7fc:	0800d76d 	.word	0x0800d76d

0800d800 <__sfp_lock_acquire>:
 800d800:	4801      	ldr	r0, [pc, #4]	@ (800d808 <__sfp_lock_acquire+0x8>)
 800d802:	f000 b930 	b.w	800da66 <__retarget_lock_acquire_recursive>
 800d806:	bf00      	nop
 800d808:	20000a35 	.word	0x20000a35

0800d80c <__sfp_lock_release>:
 800d80c:	4801      	ldr	r0, [pc, #4]	@ (800d814 <__sfp_lock_release+0x8>)
 800d80e:	f000 b92b 	b.w	800da68 <__retarget_lock_release_recursive>
 800d812:	bf00      	nop
 800d814:	20000a35 	.word	0x20000a35

0800d818 <__sinit>:
 800d818:	b510      	push	{r4, lr}
 800d81a:	4604      	mov	r4, r0
 800d81c:	f7ff fff0 	bl	800d800 <__sfp_lock_acquire>
 800d820:	6a23      	ldr	r3, [r4, #32]
 800d822:	b11b      	cbz	r3, 800d82c <__sinit+0x14>
 800d824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d828:	f7ff bff0 	b.w	800d80c <__sfp_lock_release>
 800d82c:	4b04      	ldr	r3, [pc, #16]	@ (800d840 <__sinit+0x28>)
 800d82e:	6223      	str	r3, [r4, #32]
 800d830:	4b04      	ldr	r3, [pc, #16]	@ (800d844 <__sinit+0x2c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1f5      	bne.n	800d824 <__sinit+0xc>
 800d838:	f7ff ffc4 	bl	800d7c4 <global_stdio_init.part.0>
 800d83c:	e7f2      	b.n	800d824 <__sinit+0xc>
 800d83e:	bf00      	nop
 800d840:	0800d785 	.word	0x0800d785
 800d844:	20000a2c 	.word	0x20000a2c

0800d848 <_fwalk_sglue>:
 800d848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d84c:	4607      	mov	r7, r0
 800d84e:	4688      	mov	r8, r1
 800d850:	4614      	mov	r4, r2
 800d852:	2600      	movs	r6, #0
 800d854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d858:	f1b9 0901 	subs.w	r9, r9, #1
 800d85c:	d505      	bpl.n	800d86a <_fwalk_sglue+0x22>
 800d85e:	6824      	ldr	r4, [r4, #0]
 800d860:	2c00      	cmp	r4, #0
 800d862:	d1f7      	bne.n	800d854 <_fwalk_sglue+0xc>
 800d864:	4630      	mov	r0, r6
 800d866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d86a:	89ab      	ldrh	r3, [r5, #12]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d907      	bls.n	800d880 <_fwalk_sglue+0x38>
 800d870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d874:	3301      	adds	r3, #1
 800d876:	d003      	beq.n	800d880 <_fwalk_sglue+0x38>
 800d878:	4629      	mov	r1, r5
 800d87a:	4638      	mov	r0, r7
 800d87c:	47c0      	blx	r8
 800d87e:	4306      	orrs	r6, r0
 800d880:	3568      	adds	r5, #104	@ 0x68
 800d882:	e7e9      	b.n	800d858 <_fwalk_sglue+0x10>

0800d884 <siprintf>:
 800d884:	b40e      	push	{r1, r2, r3}
 800d886:	b500      	push	{lr}
 800d888:	b09c      	sub	sp, #112	@ 0x70
 800d88a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d88c:	9002      	str	r0, [sp, #8]
 800d88e:	9006      	str	r0, [sp, #24]
 800d890:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d894:	4809      	ldr	r0, [pc, #36]	@ (800d8bc <siprintf+0x38>)
 800d896:	9107      	str	r1, [sp, #28]
 800d898:	9104      	str	r1, [sp, #16]
 800d89a:	4909      	ldr	r1, [pc, #36]	@ (800d8c0 <siprintf+0x3c>)
 800d89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8a0:	9105      	str	r1, [sp, #20]
 800d8a2:	6800      	ldr	r0, [r0, #0]
 800d8a4:	9301      	str	r3, [sp, #4]
 800d8a6:	a902      	add	r1, sp, #8
 800d8a8:	f001 fb56 	bl	800ef58 <_svfiprintf_r>
 800d8ac:	9b02      	ldr	r3, [sp, #8]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	701a      	strb	r2, [r3, #0]
 800d8b2:	b01c      	add	sp, #112	@ 0x70
 800d8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8b8:	b003      	add	sp, #12
 800d8ba:	4770      	bx	lr
 800d8bc:	20000020 	.word	0x20000020
 800d8c0:	ffff0208 	.word	0xffff0208

0800d8c4 <__sread>:
 800d8c4:	b510      	push	{r4, lr}
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8cc:	f000 f86c 	bl	800d9a8 <_read_r>
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	bfab      	itete	ge
 800d8d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d8d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d8d8:	181b      	addge	r3, r3, r0
 800d8da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d8de:	bfac      	ite	ge
 800d8e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d8e2:	81a3      	strhlt	r3, [r4, #12]
 800d8e4:	bd10      	pop	{r4, pc}

0800d8e6 <__swrite>:
 800d8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ea:	461f      	mov	r7, r3
 800d8ec:	898b      	ldrh	r3, [r1, #12]
 800d8ee:	05db      	lsls	r3, r3, #23
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	4616      	mov	r6, r2
 800d8f6:	d505      	bpl.n	800d904 <__swrite+0x1e>
 800d8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8fc:	2302      	movs	r3, #2
 800d8fe:	2200      	movs	r2, #0
 800d900:	f000 f840 	bl	800d984 <_lseek_r>
 800d904:	89a3      	ldrh	r3, [r4, #12]
 800d906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d90a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d90e:	81a3      	strh	r3, [r4, #12]
 800d910:	4632      	mov	r2, r6
 800d912:	463b      	mov	r3, r7
 800d914:	4628      	mov	r0, r5
 800d916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d91a:	f000 b867 	b.w	800d9ec <_write_r>

0800d91e <__sseek>:
 800d91e:	b510      	push	{r4, lr}
 800d920:	460c      	mov	r4, r1
 800d922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d926:	f000 f82d 	bl	800d984 <_lseek_r>
 800d92a:	1c43      	adds	r3, r0, #1
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	bf15      	itete	ne
 800d930:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d932:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d936:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d93a:	81a3      	strheq	r3, [r4, #12]
 800d93c:	bf18      	it	ne
 800d93e:	81a3      	strhne	r3, [r4, #12]
 800d940:	bd10      	pop	{r4, pc}

0800d942 <__sclose>:
 800d942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d946:	f000 b80d 	b.w	800d964 <_close_r>

0800d94a <memset>:
 800d94a:	4402      	add	r2, r0
 800d94c:	4603      	mov	r3, r0
 800d94e:	4293      	cmp	r3, r2
 800d950:	d100      	bne.n	800d954 <memset+0xa>
 800d952:	4770      	bx	lr
 800d954:	f803 1b01 	strb.w	r1, [r3], #1
 800d958:	e7f9      	b.n	800d94e <memset+0x4>
	...

0800d95c <_localeconv_r>:
 800d95c:	4800      	ldr	r0, [pc, #0]	@ (800d960 <_localeconv_r+0x4>)
 800d95e:	4770      	bx	lr
 800d960:	20000160 	.word	0x20000160

0800d964 <_close_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4d06      	ldr	r5, [pc, #24]	@ (800d980 <_close_r+0x1c>)
 800d968:	2300      	movs	r3, #0
 800d96a:	4604      	mov	r4, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	602b      	str	r3, [r5, #0]
 800d970:	f7f5 feac 	bl	80036cc <_close>
 800d974:	1c43      	adds	r3, r0, #1
 800d976:	d102      	bne.n	800d97e <_close_r+0x1a>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	b103      	cbz	r3, 800d97e <_close_r+0x1a>
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	20000a30 	.word	0x20000a30

0800d984 <_lseek_r>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	4d07      	ldr	r5, [pc, #28]	@ (800d9a4 <_lseek_r+0x20>)
 800d988:	4604      	mov	r4, r0
 800d98a:	4608      	mov	r0, r1
 800d98c:	4611      	mov	r1, r2
 800d98e:	2200      	movs	r2, #0
 800d990:	602a      	str	r2, [r5, #0]
 800d992:	461a      	mov	r2, r3
 800d994:	f7f5 fec1 	bl	800371a <_lseek>
 800d998:	1c43      	adds	r3, r0, #1
 800d99a:	d102      	bne.n	800d9a2 <_lseek_r+0x1e>
 800d99c:	682b      	ldr	r3, [r5, #0]
 800d99e:	b103      	cbz	r3, 800d9a2 <_lseek_r+0x1e>
 800d9a0:	6023      	str	r3, [r4, #0]
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}
 800d9a4:	20000a30 	.word	0x20000a30

0800d9a8 <_read_r>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	4d07      	ldr	r5, [pc, #28]	@ (800d9c8 <_read_r+0x20>)
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	4608      	mov	r0, r1
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	602a      	str	r2, [r5, #0]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f7f5 fe4f 	bl	800365a <_read>
 800d9bc:	1c43      	adds	r3, r0, #1
 800d9be:	d102      	bne.n	800d9c6 <_read_r+0x1e>
 800d9c0:	682b      	ldr	r3, [r5, #0]
 800d9c2:	b103      	cbz	r3, 800d9c6 <_read_r+0x1e>
 800d9c4:	6023      	str	r3, [r4, #0]
 800d9c6:	bd38      	pop	{r3, r4, r5, pc}
 800d9c8:	20000a30 	.word	0x20000a30

0800d9cc <_sbrk_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4d06      	ldr	r5, [pc, #24]	@ (800d9e8 <_sbrk_r+0x1c>)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	602b      	str	r3, [r5, #0]
 800d9d8:	f7f5 feac 	bl	8003734 <_sbrk>
 800d9dc:	1c43      	adds	r3, r0, #1
 800d9de:	d102      	bne.n	800d9e6 <_sbrk_r+0x1a>
 800d9e0:	682b      	ldr	r3, [r5, #0]
 800d9e2:	b103      	cbz	r3, 800d9e6 <_sbrk_r+0x1a>
 800d9e4:	6023      	str	r3, [r4, #0]
 800d9e6:	bd38      	pop	{r3, r4, r5, pc}
 800d9e8:	20000a30 	.word	0x20000a30

0800d9ec <_write_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4d07      	ldr	r5, [pc, #28]	@ (800da0c <_write_r+0x20>)
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	4608      	mov	r0, r1
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	602a      	str	r2, [r5, #0]
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	f7f5 fe4a 	bl	8003694 <_write>
 800da00:	1c43      	adds	r3, r0, #1
 800da02:	d102      	bne.n	800da0a <_write_r+0x1e>
 800da04:	682b      	ldr	r3, [r5, #0]
 800da06:	b103      	cbz	r3, 800da0a <_write_r+0x1e>
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	bd38      	pop	{r3, r4, r5, pc}
 800da0c:	20000a30 	.word	0x20000a30

0800da10 <__errno>:
 800da10:	4b01      	ldr	r3, [pc, #4]	@ (800da18 <__errno+0x8>)
 800da12:	6818      	ldr	r0, [r3, #0]
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop
 800da18:	20000020 	.word	0x20000020

0800da1c <__libc_init_array>:
 800da1c:	b570      	push	{r4, r5, r6, lr}
 800da1e:	4d0d      	ldr	r5, [pc, #52]	@ (800da54 <__libc_init_array+0x38>)
 800da20:	4c0d      	ldr	r4, [pc, #52]	@ (800da58 <__libc_init_array+0x3c>)
 800da22:	1b64      	subs	r4, r4, r5
 800da24:	10a4      	asrs	r4, r4, #2
 800da26:	2600      	movs	r6, #0
 800da28:	42a6      	cmp	r6, r4
 800da2a:	d109      	bne.n	800da40 <__libc_init_array+0x24>
 800da2c:	4d0b      	ldr	r5, [pc, #44]	@ (800da5c <__libc_init_array+0x40>)
 800da2e:	4c0c      	ldr	r4, [pc, #48]	@ (800da60 <__libc_init_array+0x44>)
 800da30:	f002 fcda 	bl	80103e8 <_init>
 800da34:	1b64      	subs	r4, r4, r5
 800da36:	10a4      	asrs	r4, r4, #2
 800da38:	2600      	movs	r6, #0
 800da3a:	42a6      	cmp	r6, r4
 800da3c:	d105      	bne.n	800da4a <__libc_init_array+0x2e>
 800da3e:	bd70      	pop	{r4, r5, r6, pc}
 800da40:	f855 3b04 	ldr.w	r3, [r5], #4
 800da44:	4798      	blx	r3
 800da46:	3601      	adds	r6, #1
 800da48:	e7ee      	b.n	800da28 <__libc_init_array+0xc>
 800da4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800da4e:	4798      	blx	r3
 800da50:	3601      	adds	r6, #1
 800da52:	e7f2      	b.n	800da3a <__libc_init_array+0x1e>
 800da54:	08011728 	.word	0x08011728
 800da58:	08011728 	.word	0x08011728
 800da5c:	08011728 	.word	0x08011728
 800da60:	0801172c 	.word	0x0801172c

0800da64 <__retarget_lock_init_recursive>:
 800da64:	4770      	bx	lr

0800da66 <__retarget_lock_acquire_recursive>:
 800da66:	4770      	bx	lr

0800da68 <__retarget_lock_release_recursive>:
 800da68:	4770      	bx	lr

0800da6a <quorem>:
 800da6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da6e:	6903      	ldr	r3, [r0, #16]
 800da70:	690c      	ldr	r4, [r1, #16]
 800da72:	42a3      	cmp	r3, r4
 800da74:	4607      	mov	r7, r0
 800da76:	db7e      	blt.n	800db76 <quorem+0x10c>
 800da78:	3c01      	subs	r4, #1
 800da7a:	f101 0814 	add.w	r8, r1, #20
 800da7e:	00a3      	lsls	r3, r4, #2
 800da80:	f100 0514 	add.w	r5, r0, #20
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da8a:	9301      	str	r3, [sp, #4]
 800da8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da94:	3301      	adds	r3, #1
 800da96:	429a      	cmp	r2, r3
 800da98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800daa0:	d32e      	bcc.n	800db00 <quorem+0x96>
 800daa2:	f04f 0a00 	mov.w	sl, #0
 800daa6:	46c4      	mov	ip, r8
 800daa8:	46ae      	mov	lr, r5
 800daaa:	46d3      	mov	fp, sl
 800daac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dab0:	b298      	uxth	r0, r3
 800dab2:	fb06 a000 	mla	r0, r6, r0, sl
 800dab6:	0c02      	lsrs	r2, r0, #16
 800dab8:	0c1b      	lsrs	r3, r3, #16
 800daba:	fb06 2303 	mla	r3, r6, r3, r2
 800dabe:	f8de 2000 	ldr.w	r2, [lr]
 800dac2:	b280      	uxth	r0, r0
 800dac4:	b292      	uxth	r2, r2
 800dac6:	1a12      	subs	r2, r2, r0
 800dac8:	445a      	add	r2, fp
 800daca:	f8de 0000 	ldr.w	r0, [lr]
 800dace:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dad8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dadc:	b292      	uxth	r2, r2
 800dade:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dae2:	45e1      	cmp	r9, ip
 800dae4:	f84e 2b04 	str.w	r2, [lr], #4
 800dae8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800daec:	d2de      	bcs.n	800daac <quorem+0x42>
 800daee:	9b00      	ldr	r3, [sp, #0]
 800daf0:	58eb      	ldr	r3, [r5, r3]
 800daf2:	b92b      	cbnz	r3, 800db00 <quorem+0x96>
 800daf4:	9b01      	ldr	r3, [sp, #4]
 800daf6:	3b04      	subs	r3, #4
 800daf8:	429d      	cmp	r5, r3
 800dafa:	461a      	mov	r2, r3
 800dafc:	d32f      	bcc.n	800db5e <quorem+0xf4>
 800dafe:	613c      	str	r4, [r7, #16]
 800db00:	4638      	mov	r0, r7
 800db02:	f001 f8c5 	bl	800ec90 <__mcmp>
 800db06:	2800      	cmp	r0, #0
 800db08:	db25      	blt.n	800db56 <quorem+0xec>
 800db0a:	4629      	mov	r1, r5
 800db0c:	2000      	movs	r0, #0
 800db0e:	f858 2b04 	ldr.w	r2, [r8], #4
 800db12:	f8d1 c000 	ldr.w	ip, [r1]
 800db16:	fa1f fe82 	uxth.w	lr, r2
 800db1a:	fa1f f38c 	uxth.w	r3, ip
 800db1e:	eba3 030e 	sub.w	r3, r3, lr
 800db22:	4403      	add	r3, r0
 800db24:	0c12      	lsrs	r2, r2, #16
 800db26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800db2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800db2e:	b29b      	uxth	r3, r3
 800db30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db34:	45c1      	cmp	r9, r8
 800db36:	f841 3b04 	str.w	r3, [r1], #4
 800db3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800db3e:	d2e6      	bcs.n	800db0e <quorem+0xa4>
 800db40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db48:	b922      	cbnz	r2, 800db54 <quorem+0xea>
 800db4a:	3b04      	subs	r3, #4
 800db4c:	429d      	cmp	r5, r3
 800db4e:	461a      	mov	r2, r3
 800db50:	d30b      	bcc.n	800db6a <quorem+0x100>
 800db52:	613c      	str	r4, [r7, #16]
 800db54:	3601      	adds	r6, #1
 800db56:	4630      	mov	r0, r6
 800db58:	b003      	add	sp, #12
 800db5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5e:	6812      	ldr	r2, [r2, #0]
 800db60:	3b04      	subs	r3, #4
 800db62:	2a00      	cmp	r2, #0
 800db64:	d1cb      	bne.n	800dafe <quorem+0x94>
 800db66:	3c01      	subs	r4, #1
 800db68:	e7c6      	b.n	800daf8 <quorem+0x8e>
 800db6a:	6812      	ldr	r2, [r2, #0]
 800db6c:	3b04      	subs	r3, #4
 800db6e:	2a00      	cmp	r2, #0
 800db70:	d1ef      	bne.n	800db52 <quorem+0xe8>
 800db72:	3c01      	subs	r4, #1
 800db74:	e7ea      	b.n	800db4c <quorem+0xe2>
 800db76:	2000      	movs	r0, #0
 800db78:	e7ee      	b.n	800db58 <quorem+0xee>
 800db7a:	0000      	movs	r0, r0
 800db7c:	0000      	movs	r0, r0
	...

0800db80 <_dtoa_r>:
 800db80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db84:	69c7      	ldr	r7, [r0, #28]
 800db86:	b099      	sub	sp, #100	@ 0x64
 800db88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800db8c:	ec55 4b10 	vmov	r4, r5, d0
 800db90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800db92:	9109      	str	r1, [sp, #36]	@ 0x24
 800db94:	4683      	mov	fp, r0
 800db96:	920e      	str	r2, [sp, #56]	@ 0x38
 800db98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db9a:	b97f      	cbnz	r7, 800dbbc <_dtoa_r+0x3c>
 800db9c:	2010      	movs	r0, #16
 800db9e:	f7ff f899 	bl	800ccd4 <malloc>
 800dba2:	4602      	mov	r2, r0
 800dba4:	f8cb 001c 	str.w	r0, [fp, #28]
 800dba8:	b920      	cbnz	r0, 800dbb4 <_dtoa_r+0x34>
 800dbaa:	4ba7      	ldr	r3, [pc, #668]	@ (800de48 <_dtoa_r+0x2c8>)
 800dbac:	21ef      	movs	r1, #239	@ 0xef
 800dbae:	48a7      	ldr	r0, [pc, #668]	@ (800de4c <_dtoa_r+0x2cc>)
 800dbb0:	f001 fba2 	bl	800f2f8 <__assert_func>
 800dbb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dbb8:	6007      	str	r7, [r0, #0]
 800dbba:	60c7      	str	r7, [r0, #12]
 800dbbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dbc0:	6819      	ldr	r1, [r3, #0]
 800dbc2:	b159      	cbz	r1, 800dbdc <_dtoa_r+0x5c>
 800dbc4:	685a      	ldr	r2, [r3, #4]
 800dbc6:	604a      	str	r2, [r1, #4]
 800dbc8:	2301      	movs	r3, #1
 800dbca:	4093      	lsls	r3, r2
 800dbcc:	608b      	str	r3, [r1, #8]
 800dbce:	4658      	mov	r0, fp
 800dbd0:	f000 fe24 	bl	800e81c <_Bfree>
 800dbd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	601a      	str	r2, [r3, #0]
 800dbdc:	1e2b      	subs	r3, r5, #0
 800dbde:	bfb9      	ittee	lt
 800dbe0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dbe4:	9303      	strlt	r3, [sp, #12]
 800dbe6:	2300      	movge	r3, #0
 800dbe8:	6033      	strge	r3, [r6, #0]
 800dbea:	9f03      	ldr	r7, [sp, #12]
 800dbec:	4b98      	ldr	r3, [pc, #608]	@ (800de50 <_dtoa_r+0x2d0>)
 800dbee:	bfbc      	itt	lt
 800dbf0:	2201      	movlt	r2, #1
 800dbf2:	6032      	strlt	r2, [r6, #0]
 800dbf4:	43bb      	bics	r3, r7
 800dbf6:	d112      	bne.n	800dc1e <_dtoa_r+0x9e>
 800dbf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dbfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dbfe:	6013      	str	r3, [r2, #0]
 800dc00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc04:	4323      	orrs	r3, r4
 800dc06:	f000 854d 	beq.w	800e6a4 <_dtoa_r+0xb24>
 800dc0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800de64 <_dtoa_r+0x2e4>
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f000 854f 	beq.w	800e6b4 <_dtoa_r+0xb34>
 800dc16:	f10a 0303 	add.w	r3, sl, #3
 800dc1a:	f000 bd49 	b.w	800e6b0 <_dtoa_r+0xb30>
 800dc1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc22:	2200      	movs	r2, #0
 800dc24:	ec51 0b17 	vmov	r0, r1, d7
 800dc28:	2300      	movs	r3, #0
 800dc2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dc2e:	f7f2 ff73 	bl	8000b18 <__aeabi_dcmpeq>
 800dc32:	4680      	mov	r8, r0
 800dc34:	b158      	cbz	r0, 800dc4e <_dtoa_r+0xce>
 800dc36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dc38:	2301      	movs	r3, #1
 800dc3a:	6013      	str	r3, [r2, #0]
 800dc3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc3e:	b113      	cbz	r3, 800dc46 <_dtoa_r+0xc6>
 800dc40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dc42:	4b84      	ldr	r3, [pc, #528]	@ (800de54 <_dtoa_r+0x2d4>)
 800dc44:	6013      	str	r3, [r2, #0]
 800dc46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800de68 <_dtoa_r+0x2e8>
 800dc4a:	f000 bd33 	b.w	800e6b4 <_dtoa_r+0xb34>
 800dc4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dc52:	aa16      	add	r2, sp, #88	@ 0x58
 800dc54:	a917      	add	r1, sp, #92	@ 0x5c
 800dc56:	4658      	mov	r0, fp
 800dc58:	f001 f8ca 	bl	800edf0 <__d2b>
 800dc5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dc60:	4681      	mov	r9, r0
 800dc62:	2e00      	cmp	r6, #0
 800dc64:	d077      	beq.n	800dd56 <_dtoa_r+0x1d6>
 800dc66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dc6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dc78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dc7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dc80:	4619      	mov	r1, r3
 800dc82:	2200      	movs	r2, #0
 800dc84:	4b74      	ldr	r3, [pc, #464]	@ (800de58 <_dtoa_r+0x2d8>)
 800dc86:	f7f2 fb27 	bl	80002d8 <__aeabi_dsub>
 800dc8a:	a369      	add	r3, pc, #420	@ (adr r3, 800de30 <_dtoa_r+0x2b0>)
 800dc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc90:	f7f2 fcda 	bl	8000648 <__aeabi_dmul>
 800dc94:	a368      	add	r3, pc, #416	@ (adr r3, 800de38 <_dtoa_r+0x2b8>)
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	f7f2 fb1f 	bl	80002dc <__adddf3>
 800dc9e:	4604      	mov	r4, r0
 800dca0:	4630      	mov	r0, r6
 800dca2:	460d      	mov	r5, r1
 800dca4:	f7f2 fc66 	bl	8000574 <__aeabi_i2d>
 800dca8:	a365      	add	r3, pc, #404	@ (adr r3, 800de40 <_dtoa_r+0x2c0>)
 800dcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcae:	f7f2 fccb 	bl	8000648 <__aeabi_dmul>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	4629      	mov	r1, r5
 800dcba:	f7f2 fb0f 	bl	80002dc <__adddf3>
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	460d      	mov	r5, r1
 800dcc2:	f7f2 ff71 	bl	8000ba8 <__aeabi_d2iz>
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	4607      	mov	r7, r0
 800dcca:	2300      	movs	r3, #0
 800dccc:	4620      	mov	r0, r4
 800dcce:	4629      	mov	r1, r5
 800dcd0:	f7f2 ff2c 	bl	8000b2c <__aeabi_dcmplt>
 800dcd4:	b140      	cbz	r0, 800dce8 <_dtoa_r+0x168>
 800dcd6:	4638      	mov	r0, r7
 800dcd8:	f7f2 fc4c 	bl	8000574 <__aeabi_i2d>
 800dcdc:	4622      	mov	r2, r4
 800dcde:	462b      	mov	r3, r5
 800dce0:	f7f2 ff1a 	bl	8000b18 <__aeabi_dcmpeq>
 800dce4:	b900      	cbnz	r0, 800dce8 <_dtoa_r+0x168>
 800dce6:	3f01      	subs	r7, #1
 800dce8:	2f16      	cmp	r7, #22
 800dcea:	d851      	bhi.n	800dd90 <_dtoa_r+0x210>
 800dcec:	4b5b      	ldr	r3, [pc, #364]	@ (800de5c <_dtoa_r+0x2dc>)
 800dcee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dcfa:	f7f2 ff17 	bl	8000b2c <__aeabi_dcmplt>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d048      	beq.n	800dd94 <_dtoa_r+0x214>
 800dd02:	3f01      	subs	r7, #1
 800dd04:	2300      	movs	r3, #0
 800dd06:	9312      	str	r3, [sp, #72]	@ 0x48
 800dd08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd0a:	1b9b      	subs	r3, r3, r6
 800dd0c:	1e5a      	subs	r2, r3, #1
 800dd0e:	bf44      	itt	mi
 800dd10:	f1c3 0801 	rsbmi	r8, r3, #1
 800dd14:	2300      	movmi	r3, #0
 800dd16:	9208      	str	r2, [sp, #32]
 800dd18:	bf54      	ite	pl
 800dd1a:	f04f 0800 	movpl.w	r8, #0
 800dd1e:	9308      	strmi	r3, [sp, #32]
 800dd20:	2f00      	cmp	r7, #0
 800dd22:	db39      	blt.n	800dd98 <_dtoa_r+0x218>
 800dd24:	9b08      	ldr	r3, [sp, #32]
 800dd26:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dd28:	443b      	add	r3, r7
 800dd2a:	9308      	str	r3, [sp, #32]
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd32:	2b09      	cmp	r3, #9
 800dd34:	d864      	bhi.n	800de00 <_dtoa_r+0x280>
 800dd36:	2b05      	cmp	r3, #5
 800dd38:	bfc4      	itt	gt
 800dd3a:	3b04      	subgt	r3, #4
 800dd3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800dd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd40:	f1a3 0302 	sub.w	r3, r3, #2
 800dd44:	bfcc      	ite	gt
 800dd46:	2400      	movgt	r4, #0
 800dd48:	2401      	movle	r4, #1
 800dd4a:	2b03      	cmp	r3, #3
 800dd4c:	d863      	bhi.n	800de16 <_dtoa_r+0x296>
 800dd4e:	e8df f003 	tbb	[pc, r3]
 800dd52:	372a      	.short	0x372a
 800dd54:	5535      	.short	0x5535
 800dd56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800dd5a:	441e      	add	r6, r3
 800dd5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dd60:	2b20      	cmp	r3, #32
 800dd62:	bfc1      	itttt	gt
 800dd64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dd68:	409f      	lslgt	r7, r3
 800dd6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dd6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dd72:	bfd6      	itet	le
 800dd74:	f1c3 0320 	rsble	r3, r3, #32
 800dd78:	ea47 0003 	orrgt.w	r0, r7, r3
 800dd7c:	fa04 f003 	lslle.w	r0, r4, r3
 800dd80:	f7f2 fbe8 	bl	8000554 <__aeabi_ui2d>
 800dd84:	2201      	movs	r2, #1
 800dd86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dd8a:	3e01      	subs	r6, #1
 800dd8c:	9214      	str	r2, [sp, #80]	@ 0x50
 800dd8e:	e777      	b.n	800dc80 <_dtoa_r+0x100>
 800dd90:	2301      	movs	r3, #1
 800dd92:	e7b8      	b.n	800dd06 <_dtoa_r+0x186>
 800dd94:	9012      	str	r0, [sp, #72]	@ 0x48
 800dd96:	e7b7      	b.n	800dd08 <_dtoa_r+0x188>
 800dd98:	427b      	negs	r3, r7
 800dd9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	eba8 0807 	sub.w	r8, r8, r7
 800dda2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dda4:	e7c4      	b.n	800dd30 <_dtoa_r+0x1b0>
 800dda6:	2300      	movs	r3, #0
 800dda8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	dc35      	bgt.n	800de1c <_dtoa_r+0x29c>
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	9307      	str	r3, [sp, #28]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddba:	e00b      	b.n	800ddd4 <_dtoa_r+0x254>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e7f3      	b.n	800dda8 <_dtoa_r+0x228>
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddc6:	18fb      	adds	r3, r7, r3
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	9307      	str	r3, [sp, #28]
 800ddd0:	bfb8      	it	lt
 800ddd2:	2301      	movlt	r3, #1
 800ddd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ddd8:	2100      	movs	r1, #0
 800ddda:	2204      	movs	r2, #4
 800dddc:	f102 0514 	add.w	r5, r2, #20
 800dde0:	429d      	cmp	r5, r3
 800dde2:	d91f      	bls.n	800de24 <_dtoa_r+0x2a4>
 800dde4:	6041      	str	r1, [r0, #4]
 800dde6:	4658      	mov	r0, fp
 800dde8:	f000 fcd8 	bl	800e79c <_Balloc>
 800ddec:	4682      	mov	sl, r0
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d13c      	bne.n	800de6c <_dtoa_r+0x2ec>
 800ddf2:	4b1b      	ldr	r3, [pc, #108]	@ (800de60 <_dtoa_r+0x2e0>)
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	f240 11af 	movw	r1, #431	@ 0x1af
 800ddfa:	e6d8      	b.n	800dbae <_dtoa_r+0x2e>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e7e0      	b.n	800ddc2 <_dtoa_r+0x242>
 800de00:	2401      	movs	r4, #1
 800de02:	2300      	movs	r3, #0
 800de04:	9309      	str	r3, [sp, #36]	@ 0x24
 800de06:	940b      	str	r4, [sp, #44]	@ 0x2c
 800de08:	f04f 33ff 	mov.w	r3, #4294967295
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	9307      	str	r3, [sp, #28]
 800de10:	2200      	movs	r2, #0
 800de12:	2312      	movs	r3, #18
 800de14:	e7d0      	b.n	800ddb8 <_dtoa_r+0x238>
 800de16:	2301      	movs	r3, #1
 800de18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de1a:	e7f5      	b.n	800de08 <_dtoa_r+0x288>
 800de1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	9307      	str	r3, [sp, #28]
 800de22:	e7d7      	b.n	800ddd4 <_dtoa_r+0x254>
 800de24:	3101      	adds	r1, #1
 800de26:	0052      	lsls	r2, r2, #1
 800de28:	e7d8      	b.n	800dddc <_dtoa_r+0x25c>
 800de2a:	bf00      	nop
 800de2c:	f3af 8000 	nop.w
 800de30:	636f4361 	.word	0x636f4361
 800de34:	3fd287a7 	.word	0x3fd287a7
 800de38:	8b60c8b3 	.word	0x8b60c8b3
 800de3c:	3fc68a28 	.word	0x3fc68a28
 800de40:	509f79fb 	.word	0x509f79fb
 800de44:	3fd34413 	.word	0x3fd34413
 800de48:	0801101d 	.word	0x0801101d
 800de4c:	08011034 	.word	0x08011034
 800de50:	7ff00000 	.word	0x7ff00000
 800de54:	08010fed 	.word	0x08010fed
 800de58:	3ff80000 	.word	0x3ff80000
 800de5c:	08011130 	.word	0x08011130
 800de60:	0801108c 	.word	0x0801108c
 800de64:	08011019 	.word	0x08011019
 800de68:	08010fec 	.word	0x08010fec
 800de6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800de70:	6018      	str	r0, [r3, #0]
 800de72:	9b07      	ldr	r3, [sp, #28]
 800de74:	2b0e      	cmp	r3, #14
 800de76:	f200 80a4 	bhi.w	800dfc2 <_dtoa_r+0x442>
 800de7a:	2c00      	cmp	r4, #0
 800de7c:	f000 80a1 	beq.w	800dfc2 <_dtoa_r+0x442>
 800de80:	2f00      	cmp	r7, #0
 800de82:	dd33      	ble.n	800deec <_dtoa_r+0x36c>
 800de84:	4bad      	ldr	r3, [pc, #692]	@ (800e13c <_dtoa_r+0x5bc>)
 800de86:	f007 020f 	and.w	r2, r7, #15
 800de8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de8e:	ed93 7b00 	vldr	d7, [r3]
 800de92:	05f8      	lsls	r0, r7, #23
 800de94:	ed8d 7b04 	vstr	d7, [sp, #16]
 800de98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800de9c:	d516      	bpl.n	800decc <_dtoa_r+0x34c>
 800de9e:	4ba8      	ldr	r3, [pc, #672]	@ (800e140 <_dtoa_r+0x5c0>)
 800dea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dea8:	f7f2 fcf8 	bl	800089c <__aeabi_ddiv>
 800deac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800deb0:	f004 040f 	and.w	r4, r4, #15
 800deb4:	2603      	movs	r6, #3
 800deb6:	4da2      	ldr	r5, [pc, #648]	@ (800e140 <_dtoa_r+0x5c0>)
 800deb8:	b954      	cbnz	r4, 800ded0 <_dtoa_r+0x350>
 800deba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800debe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dec2:	f7f2 fceb 	bl	800089c <__aeabi_ddiv>
 800dec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800deca:	e028      	b.n	800df1e <_dtoa_r+0x39e>
 800decc:	2602      	movs	r6, #2
 800dece:	e7f2      	b.n	800deb6 <_dtoa_r+0x336>
 800ded0:	07e1      	lsls	r1, r4, #31
 800ded2:	d508      	bpl.n	800dee6 <_dtoa_r+0x366>
 800ded4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ded8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dedc:	f7f2 fbb4 	bl	8000648 <__aeabi_dmul>
 800dee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dee4:	3601      	adds	r6, #1
 800dee6:	1064      	asrs	r4, r4, #1
 800dee8:	3508      	adds	r5, #8
 800deea:	e7e5      	b.n	800deb8 <_dtoa_r+0x338>
 800deec:	f000 80d2 	beq.w	800e094 <_dtoa_r+0x514>
 800def0:	427c      	negs	r4, r7
 800def2:	4b92      	ldr	r3, [pc, #584]	@ (800e13c <_dtoa_r+0x5bc>)
 800def4:	4d92      	ldr	r5, [pc, #584]	@ (800e140 <_dtoa_r+0x5c0>)
 800def6:	f004 020f 	and.w	r2, r4, #15
 800defa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800defe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df06:	f7f2 fb9f 	bl	8000648 <__aeabi_dmul>
 800df0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df0e:	1124      	asrs	r4, r4, #4
 800df10:	2300      	movs	r3, #0
 800df12:	2602      	movs	r6, #2
 800df14:	2c00      	cmp	r4, #0
 800df16:	f040 80b2 	bne.w	800e07e <_dtoa_r+0x4fe>
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1d3      	bne.n	800dec6 <_dtoa_r+0x346>
 800df1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 80b7 	beq.w	800e098 <_dtoa_r+0x518>
 800df2a:	4b86      	ldr	r3, [pc, #536]	@ (800e144 <_dtoa_r+0x5c4>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	4620      	mov	r0, r4
 800df30:	4629      	mov	r1, r5
 800df32:	f7f2 fdfb 	bl	8000b2c <__aeabi_dcmplt>
 800df36:	2800      	cmp	r0, #0
 800df38:	f000 80ae 	beq.w	800e098 <_dtoa_r+0x518>
 800df3c:	9b07      	ldr	r3, [sp, #28]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 80aa 	beq.w	800e098 <_dtoa_r+0x518>
 800df44:	9b00      	ldr	r3, [sp, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	dd37      	ble.n	800dfba <_dtoa_r+0x43a>
 800df4a:	1e7b      	subs	r3, r7, #1
 800df4c:	9304      	str	r3, [sp, #16]
 800df4e:	4620      	mov	r0, r4
 800df50:	4b7d      	ldr	r3, [pc, #500]	@ (800e148 <_dtoa_r+0x5c8>)
 800df52:	2200      	movs	r2, #0
 800df54:	4629      	mov	r1, r5
 800df56:	f7f2 fb77 	bl	8000648 <__aeabi_dmul>
 800df5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df5e:	9c00      	ldr	r4, [sp, #0]
 800df60:	3601      	adds	r6, #1
 800df62:	4630      	mov	r0, r6
 800df64:	f7f2 fb06 	bl	8000574 <__aeabi_i2d>
 800df68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df6c:	f7f2 fb6c 	bl	8000648 <__aeabi_dmul>
 800df70:	4b76      	ldr	r3, [pc, #472]	@ (800e14c <_dtoa_r+0x5cc>)
 800df72:	2200      	movs	r2, #0
 800df74:	f7f2 f9b2 	bl	80002dc <__adddf3>
 800df78:	4605      	mov	r5, r0
 800df7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800df7e:	2c00      	cmp	r4, #0
 800df80:	f040 808d 	bne.w	800e09e <_dtoa_r+0x51e>
 800df84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df88:	4b71      	ldr	r3, [pc, #452]	@ (800e150 <_dtoa_r+0x5d0>)
 800df8a:	2200      	movs	r2, #0
 800df8c:	f7f2 f9a4 	bl	80002d8 <__aeabi_dsub>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df98:	462a      	mov	r2, r5
 800df9a:	4633      	mov	r3, r6
 800df9c:	f7f2 fde4 	bl	8000b68 <__aeabi_dcmpgt>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	f040 828b 	bne.w	800e4bc <_dtoa_r+0x93c>
 800dfa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfaa:	462a      	mov	r2, r5
 800dfac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dfb0:	f7f2 fdbc 	bl	8000b2c <__aeabi_dcmplt>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	f040 8128 	bne.w	800e20a <_dtoa_r+0x68a>
 800dfba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800dfbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800dfc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f2c0 815a 	blt.w	800e27e <_dtoa_r+0x6fe>
 800dfca:	2f0e      	cmp	r7, #14
 800dfcc:	f300 8157 	bgt.w	800e27e <_dtoa_r+0x6fe>
 800dfd0:	4b5a      	ldr	r3, [pc, #360]	@ (800e13c <_dtoa_r+0x5bc>)
 800dfd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dfd6:	ed93 7b00 	vldr	d7, [r3]
 800dfda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	ed8d 7b00 	vstr	d7, [sp]
 800dfe2:	da03      	bge.n	800dfec <_dtoa_r+0x46c>
 800dfe4:	9b07      	ldr	r3, [sp, #28]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f340 8101 	ble.w	800e1ee <_dtoa_r+0x66e>
 800dfec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dff0:	4656      	mov	r6, sl
 800dff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dff6:	4620      	mov	r0, r4
 800dff8:	4629      	mov	r1, r5
 800dffa:	f7f2 fc4f 	bl	800089c <__aeabi_ddiv>
 800dffe:	f7f2 fdd3 	bl	8000ba8 <__aeabi_d2iz>
 800e002:	4680      	mov	r8, r0
 800e004:	f7f2 fab6 	bl	8000574 <__aeabi_i2d>
 800e008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e00c:	f7f2 fb1c 	bl	8000648 <__aeabi_dmul>
 800e010:	4602      	mov	r2, r0
 800e012:	460b      	mov	r3, r1
 800e014:	4620      	mov	r0, r4
 800e016:	4629      	mov	r1, r5
 800e018:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e01c:	f7f2 f95c 	bl	80002d8 <__aeabi_dsub>
 800e020:	f806 4b01 	strb.w	r4, [r6], #1
 800e024:	9d07      	ldr	r5, [sp, #28]
 800e026:	eba6 040a 	sub.w	r4, r6, sl
 800e02a:	42a5      	cmp	r5, r4
 800e02c:	4602      	mov	r2, r0
 800e02e:	460b      	mov	r3, r1
 800e030:	f040 8117 	bne.w	800e262 <_dtoa_r+0x6e2>
 800e034:	f7f2 f952 	bl	80002dc <__adddf3>
 800e038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e03c:	4604      	mov	r4, r0
 800e03e:	460d      	mov	r5, r1
 800e040:	f7f2 fd92 	bl	8000b68 <__aeabi_dcmpgt>
 800e044:	2800      	cmp	r0, #0
 800e046:	f040 80f9 	bne.w	800e23c <_dtoa_r+0x6bc>
 800e04a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e04e:	4620      	mov	r0, r4
 800e050:	4629      	mov	r1, r5
 800e052:	f7f2 fd61 	bl	8000b18 <__aeabi_dcmpeq>
 800e056:	b118      	cbz	r0, 800e060 <_dtoa_r+0x4e0>
 800e058:	f018 0f01 	tst.w	r8, #1
 800e05c:	f040 80ee 	bne.w	800e23c <_dtoa_r+0x6bc>
 800e060:	4649      	mov	r1, r9
 800e062:	4658      	mov	r0, fp
 800e064:	f000 fbda 	bl	800e81c <_Bfree>
 800e068:	2300      	movs	r3, #0
 800e06a:	7033      	strb	r3, [r6, #0]
 800e06c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e06e:	3701      	adds	r7, #1
 800e070:	601f      	str	r7, [r3, #0]
 800e072:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e074:	2b00      	cmp	r3, #0
 800e076:	f000 831d 	beq.w	800e6b4 <_dtoa_r+0xb34>
 800e07a:	601e      	str	r6, [r3, #0]
 800e07c:	e31a      	b.n	800e6b4 <_dtoa_r+0xb34>
 800e07e:	07e2      	lsls	r2, r4, #31
 800e080:	d505      	bpl.n	800e08e <_dtoa_r+0x50e>
 800e082:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e086:	f7f2 fadf 	bl	8000648 <__aeabi_dmul>
 800e08a:	3601      	adds	r6, #1
 800e08c:	2301      	movs	r3, #1
 800e08e:	1064      	asrs	r4, r4, #1
 800e090:	3508      	adds	r5, #8
 800e092:	e73f      	b.n	800df14 <_dtoa_r+0x394>
 800e094:	2602      	movs	r6, #2
 800e096:	e742      	b.n	800df1e <_dtoa_r+0x39e>
 800e098:	9c07      	ldr	r4, [sp, #28]
 800e09a:	9704      	str	r7, [sp, #16]
 800e09c:	e761      	b.n	800df62 <_dtoa_r+0x3e2>
 800e09e:	4b27      	ldr	r3, [pc, #156]	@ (800e13c <_dtoa_r+0x5bc>)
 800e0a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e0a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e0aa:	4454      	add	r4, sl
 800e0ac:	2900      	cmp	r1, #0
 800e0ae:	d053      	beq.n	800e158 <_dtoa_r+0x5d8>
 800e0b0:	4928      	ldr	r1, [pc, #160]	@ (800e154 <_dtoa_r+0x5d4>)
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	f7f2 fbf2 	bl	800089c <__aeabi_ddiv>
 800e0b8:	4633      	mov	r3, r6
 800e0ba:	462a      	mov	r2, r5
 800e0bc:	f7f2 f90c 	bl	80002d8 <__aeabi_dsub>
 800e0c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e0c4:	4656      	mov	r6, sl
 800e0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ca:	f7f2 fd6d 	bl	8000ba8 <__aeabi_d2iz>
 800e0ce:	4605      	mov	r5, r0
 800e0d0:	f7f2 fa50 	bl	8000574 <__aeabi_i2d>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0dc:	f7f2 f8fc 	bl	80002d8 <__aeabi_dsub>
 800e0e0:	3530      	adds	r5, #48	@ 0x30
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0ea:	f806 5b01 	strb.w	r5, [r6], #1
 800e0ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e0f2:	f7f2 fd1b 	bl	8000b2c <__aeabi_dcmplt>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d171      	bne.n	800e1de <_dtoa_r+0x65e>
 800e0fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0fe:	4911      	ldr	r1, [pc, #68]	@ (800e144 <_dtoa_r+0x5c4>)
 800e100:	2000      	movs	r0, #0
 800e102:	f7f2 f8e9 	bl	80002d8 <__aeabi_dsub>
 800e106:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e10a:	f7f2 fd0f 	bl	8000b2c <__aeabi_dcmplt>
 800e10e:	2800      	cmp	r0, #0
 800e110:	f040 8095 	bne.w	800e23e <_dtoa_r+0x6be>
 800e114:	42a6      	cmp	r6, r4
 800e116:	f43f af50 	beq.w	800dfba <_dtoa_r+0x43a>
 800e11a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e11e:	4b0a      	ldr	r3, [pc, #40]	@ (800e148 <_dtoa_r+0x5c8>)
 800e120:	2200      	movs	r2, #0
 800e122:	f7f2 fa91 	bl	8000648 <__aeabi_dmul>
 800e126:	4b08      	ldr	r3, [pc, #32]	@ (800e148 <_dtoa_r+0x5c8>)
 800e128:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e12c:	2200      	movs	r2, #0
 800e12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e132:	f7f2 fa89 	bl	8000648 <__aeabi_dmul>
 800e136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e13a:	e7c4      	b.n	800e0c6 <_dtoa_r+0x546>
 800e13c:	08011130 	.word	0x08011130
 800e140:	08011108 	.word	0x08011108
 800e144:	3ff00000 	.word	0x3ff00000
 800e148:	40240000 	.word	0x40240000
 800e14c:	401c0000 	.word	0x401c0000
 800e150:	40140000 	.word	0x40140000
 800e154:	3fe00000 	.word	0x3fe00000
 800e158:	4631      	mov	r1, r6
 800e15a:	4628      	mov	r0, r5
 800e15c:	f7f2 fa74 	bl	8000648 <__aeabi_dmul>
 800e160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e164:	9415      	str	r4, [sp, #84]	@ 0x54
 800e166:	4656      	mov	r6, sl
 800e168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e16c:	f7f2 fd1c 	bl	8000ba8 <__aeabi_d2iz>
 800e170:	4605      	mov	r5, r0
 800e172:	f7f2 f9ff 	bl	8000574 <__aeabi_i2d>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e17e:	f7f2 f8ab 	bl	80002d8 <__aeabi_dsub>
 800e182:	3530      	adds	r5, #48	@ 0x30
 800e184:	f806 5b01 	strb.w	r5, [r6], #1
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	42a6      	cmp	r6, r4
 800e18e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e192:	f04f 0200 	mov.w	r2, #0
 800e196:	d124      	bne.n	800e1e2 <_dtoa_r+0x662>
 800e198:	4bac      	ldr	r3, [pc, #688]	@ (800e44c <_dtoa_r+0x8cc>)
 800e19a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e19e:	f7f2 f89d 	bl	80002dc <__adddf3>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1aa:	f7f2 fcdd 	bl	8000b68 <__aeabi_dcmpgt>
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d145      	bne.n	800e23e <_dtoa_r+0x6be>
 800e1b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e1b6:	49a5      	ldr	r1, [pc, #660]	@ (800e44c <_dtoa_r+0x8cc>)
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	f7f2 f88d 	bl	80002d8 <__aeabi_dsub>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1c6:	f7f2 fcb1 	bl	8000b2c <__aeabi_dcmplt>
 800e1ca:	2800      	cmp	r0, #0
 800e1cc:	f43f aef5 	beq.w	800dfba <_dtoa_r+0x43a>
 800e1d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e1d2:	1e73      	subs	r3, r6, #1
 800e1d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e1d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e1da:	2b30      	cmp	r3, #48	@ 0x30
 800e1dc:	d0f8      	beq.n	800e1d0 <_dtoa_r+0x650>
 800e1de:	9f04      	ldr	r7, [sp, #16]
 800e1e0:	e73e      	b.n	800e060 <_dtoa_r+0x4e0>
 800e1e2:	4b9b      	ldr	r3, [pc, #620]	@ (800e450 <_dtoa_r+0x8d0>)
 800e1e4:	f7f2 fa30 	bl	8000648 <__aeabi_dmul>
 800e1e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1ec:	e7bc      	b.n	800e168 <_dtoa_r+0x5e8>
 800e1ee:	d10c      	bne.n	800e20a <_dtoa_r+0x68a>
 800e1f0:	4b98      	ldr	r3, [pc, #608]	@ (800e454 <_dtoa_r+0x8d4>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1f8:	f7f2 fa26 	bl	8000648 <__aeabi_dmul>
 800e1fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e200:	f7f2 fca8 	bl	8000b54 <__aeabi_dcmpge>
 800e204:	2800      	cmp	r0, #0
 800e206:	f000 8157 	beq.w	800e4b8 <_dtoa_r+0x938>
 800e20a:	2400      	movs	r4, #0
 800e20c:	4625      	mov	r5, r4
 800e20e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e210:	43db      	mvns	r3, r3
 800e212:	9304      	str	r3, [sp, #16]
 800e214:	4656      	mov	r6, sl
 800e216:	2700      	movs	r7, #0
 800e218:	4621      	mov	r1, r4
 800e21a:	4658      	mov	r0, fp
 800e21c:	f000 fafe 	bl	800e81c <_Bfree>
 800e220:	2d00      	cmp	r5, #0
 800e222:	d0dc      	beq.n	800e1de <_dtoa_r+0x65e>
 800e224:	b12f      	cbz	r7, 800e232 <_dtoa_r+0x6b2>
 800e226:	42af      	cmp	r7, r5
 800e228:	d003      	beq.n	800e232 <_dtoa_r+0x6b2>
 800e22a:	4639      	mov	r1, r7
 800e22c:	4658      	mov	r0, fp
 800e22e:	f000 faf5 	bl	800e81c <_Bfree>
 800e232:	4629      	mov	r1, r5
 800e234:	4658      	mov	r0, fp
 800e236:	f000 faf1 	bl	800e81c <_Bfree>
 800e23a:	e7d0      	b.n	800e1de <_dtoa_r+0x65e>
 800e23c:	9704      	str	r7, [sp, #16]
 800e23e:	4633      	mov	r3, r6
 800e240:	461e      	mov	r6, r3
 800e242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e246:	2a39      	cmp	r2, #57	@ 0x39
 800e248:	d107      	bne.n	800e25a <_dtoa_r+0x6da>
 800e24a:	459a      	cmp	sl, r3
 800e24c:	d1f8      	bne.n	800e240 <_dtoa_r+0x6c0>
 800e24e:	9a04      	ldr	r2, [sp, #16]
 800e250:	3201      	adds	r2, #1
 800e252:	9204      	str	r2, [sp, #16]
 800e254:	2230      	movs	r2, #48	@ 0x30
 800e256:	f88a 2000 	strb.w	r2, [sl]
 800e25a:	781a      	ldrb	r2, [r3, #0]
 800e25c:	3201      	adds	r2, #1
 800e25e:	701a      	strb	r2, [r3, #0]
 800e260:	e7bd      	b.n	800e1de <_dtoa_r+0x65e>
 800e262:	4b7b      	ldr	r3, [pc, #492]	@ (800e450 <_dtoa_r+0x8d0>)
 800e264:	2200      	movs	r2, #0
 800e266:	f7f2 f9ef 	bl	8000648 <__aeabi_dmul>
 800e26a:	2200      	movs	r2, #0
 800e26c:	2300      	movs	r3, #0
 800e26e:	4604      	mov	r4, r0
 800e270:	460d      	mov	r5, r1
 800e272:	f7f2 fc51 	bl	8000b18 <__aeabi_dcmpeq>
 800e276:	2800      	cmp	r0, #0
 800e278:	f43f aebb 	beq.w	800dff2 <_dtoa_r+0x472>
 800e27c:	e6f0      	b.n	800e060 <_dtoa_r+0x4e0>
 800e27e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e280:	2a00      	cmp	r2, #0
 800e282:	f000 80db 	beq.w	800e43c <_dtoa_r+0x8bc>
 800e286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e288:	2a01      	cmp	r2, #1
 800e28a:	f300 80bf 	bgt.w	800e40c <_dtoa_r+0x88c>
 800e28e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e290:	2a00      	cmp	r2, #0
 800e292:	f000 80b7 	beq.w	800e404 <_dtoa_r+0x884>
 800e296:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e29a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e29c:	4646      	mov	r6, r8
 800e29e:	9a08      	ldr	r2, [sp, #32]
 800e2a0:	2101      	movs	r1, #1
 800e2a2:	441a      	add	r2, r3
 800e2a4:	4658      	mov	r0, fp
 800e2a6:	4498      	add	r8, r3
 800e2a8:	9208      	str	r2, [sp, #32]
 800e2aa:	f000 fb6b 	bl	800e984 <__i2b>
 800e2ae:	4605      	mov	r5, r0
 800e2b0:	b15e      	cbz	r6, 800e2ca <_dtoa_r+0x74a>
 800e2b2:	9b08      	ldr	r3, [sp, #32]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	dd08      	ble.n	800e2ca <_dtoa_r+0x74a>
 800e2b8:	42b3      	cmp	r3, r6
 800e2ba:	9a08      	ldr	r2, [sp, #32]
 800e2bc:	bfa8      	it	ge
 800e2be:	4633      	movge	r3, r6
 800e2c0:	eba8 0803 	sub.w	r8, r8, r3
 800e2c4:	1af6      	subs	r6, r6, r3
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	9308      	str	r3, [sp, #32]
 800e2ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2cc:	b1f3      	cbz	r3, 800e30c <_dtoa_r+0x78c>
 800e2ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 80b7 	beq.w	800e444 <_dtoa_r+0x8c4>
 800e2d6:	b18c      	cbz	r4, 800e2fc <_dtoa_r+0x77c>
 800e2d8:	4629      	mov	r1, r5
 800e2da:	4622      	mov	r2, r4
 800e2dc:	4658      	mov	r0, fp
 800e2de:	f000 fc11 	bl	800eb04 <__pow5mult>
 800e2e2:	464a      	mov	r2, r9
 800e2e4:	4601      	mov	r1, r0
 800e2e6:	4605      	mov	r5, r0
 800e2e8:	4658      	mov	r0, fp
 800e2ea:	f000 fb61 	bl	800e9b0 <__multiply>
 800e2ee:	4649      	mov	r1, r9
 800e2f0:	9004      	str	r0, [sp, #16]
 800e2f2:	4658      	mov	r0, fp
 800e2f4:	f000 fa92 	bl	800e81c <_Bfree>
 800e2f8:	9b04      	ldr	r3, [sp, #16]
 800e2fa:	4699      	mov	r9, r3
 800e2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2fe:	1b1a      	subs	r2, r3, r4
 800e300:	d004      	beq.n	800e30c <_dtoa_r+0x78c>
 800e302:	4649      	mov	r1, r9
 800e304:	4658      	mov	r0, fp
 800e306:	f000 fbfd 	bl	800eb04 <__pow5mult>
 800e30a:	4681      	mov	r9, r0
 800e30c:	2101      	movs	r1, #1
 800e30e:	4658      	mov	r0, fp
 800e310:	f000 fb38 	bl	800e984 <__i2b>
 800e314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e316:	4604      	mov	r4, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	f000 81cf 	beq.w	800e6bc <_dtoa_r+0xb3c>
 800e31e:	461a      	mov	r2, r3
 800e320:	4601      	mov	r1, r0
 800e322:	4658      	mov	r0, fp
 800e324:	f000 fbee 	bl	800eb04 <__pow5mult>
 800e328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	4604      	mov	r4, r0
 800e32e:	f300 8095 	bgt.w	800e45c <_dtoa_r+0x8dc>
 800e332:	9b02      	ldr	r3, [sp, #8]
 800e334:	2b00      	cmp	r3, #0
 800e336:	f040 8087 	bne.w	800e448 <_dtoa_r+0x8c8>
 800e33a:	9b03      	ldr	r3, [sp, #12]
 800e33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e340:	2b00      	cmp	r3, #0
 800e342:	f040 8089 	bne.w	800e458 <_dtoa_r+0x8d8>
 800e346:	9b03      	ldr	r3, [sp, #12]
 800e348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e34c:	0d1b      	lsrs	r3, r3, #20
 800e34e:	051b      	lsls	r3, r3, #20
 800e350:	b12b      	cbz	r3, 800e35e <_dtoa_r+0x7de>
 800e352:	9b08      	ldr	r3, [sp, #32]
 800e354:	3301      	adds	r3, #1
 800e356:	9308      	str	r3, [sp, #32]
 800e358:	f108 0801 	add.w	r8, r8, #1
 800e35c:	2301      	movs	r3, #1
 800e35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 81b0 	beq.w	800e6c8 <_dtoa_r+0xb48>
 800e368:	6923      	ldr	r3, [r4, #16]
 800e36a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e36e:	6918      	ldr	r0, [r3, #16]
 800e370:	f000 fabc 	bl	800e8ec <__hi0bits>
 800e374:	f1c0 0020 	rsb	r0, r0, #32
 800e378:	9b08      	ldr	r3, [sp, #32]
 800e37a:	4418      	add	r0, r3
 800e37c:	f010 001f 	ands.w	r0, r0, #31
 800e380:	d077      	beq.n	800e472 <_dtoa_r+0x8f2>
 800e382:	f1c0 0320 	rsb	r3, r0, #32
 800e386:	2b04      	cmp	r3, #4
 800e388:	dd6b      	ble.n	800e462 <_dtoa_r+0x8e2>
 800e38a:	9b08      	ldr	r3, [sp, #32]
 800e38c:	f1c0 001c 	rsb	r0, r0, #28
 800e390:	4403      	add	r3, r0
 800e392:	4480      	add	r8, r0
 800e394:	4406      	add	r6, r0
 800e396:	9308      	str	r3, [sp, #32]
 800e398:	f1b8 0f00 	cmp.w	r8, #0
 800e39c:	dd05      	ble.n	800e3aa <_dtoa_r+0x82a>
 800e39e:	4649      	mov	r1, r9
 800e3a0:	4642      	mov	r2, r8
 800e3a2:	4658      	mov	r0, fp
 800e3a4:	f000 fc08 	bl	800ebb8 <__lshift>
 800e3a8:	4681      	mov	r9, r0
 800e3aa:	9b08      	ldr	r3, [sp, #32]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	dd05      	ble.n	800e3bc <_dtoa_r+0x83c>
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	4658      	mov	r0, fp
 800e3b6:	f000 fbff 	bl	800ebb8 <__lshift>
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d059      	beq.n	800e476 <_dtoa_r+0x8f6>
 800e3c2:	4621      	mov	r1, r4
 800e3c4:	4648      	mov	r0, r9
 800e3c6:	f000 fc63 	bl	800ec90 <__mcmp>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	da53      	bge.n	800e476 <_dtoa_r+0x8f6>
 800e3ce:	1e7b      	subs	r3, r7, #1
 800e3d0:	9304      	str	r3, [sp, #16]
 800e3d2:	4649      	mov	r1, r9
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	220a      	movs	r2, #10
 800e3d8:	4658      	mov	r0, fp
 800e3da:	f000 fa41 	bl	800e860 <__multadd>
 800e3de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3e0:	4681      	mov	r9, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 8172 	beq.w	800e6cc <_dtoa_r+0xb4c>
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	220a      	movs	r2, #10
 800e3ee:	4658      	mov	r0, fp
 800e3f0:	f000 fa36 	bl	800e860 <__multadd>
 800e3f4:	9b00      	ldr	r3, [sp, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	4605      	mov	r5, r0
 800e3fa:	dc67      	bgt.n	800e4cc <_dtoa_r+0x94c>
 800e3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	dc41      	bgt.n	800e486 <_dtoa_r+0x906>
 800e402:	e063      	b.n	800e4cc <_dtoa_r+0x94c>
 800e404:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e406:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e40a:	e746      	b.n	800e29a <_dtoa_r+0x71a>
 800e40c:	9b07      	ldr	r3, [sp, #28]
 800e40e:	1e5c      	subs	r4, r3, #1
 800e410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e412:	42a3      	cmp	r3, r4
 800e414:	bfbf      	itttt	lt
 800e416:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e418:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e41a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e41c:	1ae3      	sublt	r3, r4, r3
 800e41e:	bfb4      	ite	lt
 800e420:	18d2      	addlt	r2, r2, r3
 800e422:	1b1c      	subge	r4, r3, r4
 800e424:	9b07      	ldr	r3, [sp, #28]
 800e426:	bfbc      	itt	lt
 800e428:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e42a:	2400      	movlt	r4, #0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	bfb5      	itete	lt
 800e430:	eba8 0603 	sublt.w	r6, r8, r3
 800e434:	9b07      	ldrge	r3, [sp, #28]
 800e436:	2300      	movlt	r3, #0
 800e438:	4646      	movge	r6, r8
 800e43a:	e730      	b.n	800e29e <_dtoa_r+0x71e>
 800e43c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e43e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e440:	4646      	mov	r6, r8
 800e442:	e735      	b.n	800e2b0 <_dtoa_r+0x730>
 800e444:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e446:	e75c      	b.n	800e302 <_dtoa_r+0x782>
 800e448:	2300      	movs	r3, #0
 800e44a:	e788      	b.n	800e35e <_dtoa_r+0x7de>
 800e44c:	3fe00000 	.word	0x3fe00000
 800e450:	40240000 	.word	0x40240000
 800e454:	40140000 	.word	0x40140000
 800e458:	9b02      	ldr	r3, [sp, #8]
 800e45a:	e780      	b.n	800e35e <_dtoa_r+0x7de>
 800e45c:	2300      	movs	r3, #0
 800e45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e460:	e782      	b.n	800e368 <_dtoa_r+0x7e8>
 800e462:	d099      	beq.n	800e398 <_dtoa_r+0x818>
 800e464:	9a08      	ldr	r2, [sp, #32]
 800e466:	331c      	adds	r3, #28
 800e468:	441a      	add	r2, r3
 800e46a:	4498      	add	r8, r3
 800e46c:	441e      	add	r6, r3
 800e46e:	9208      	str	r2, [sp, #32]
 800e470:	e792      	b.n	800e398 <_dtoa_r+0x818>
 800e472:	4603      	mov	r3, r0
 800e474:	e7f6      	b.n	800e464 <_dtoa_r+0x8e4>
 800e476:	9b07      	ldr	r3, [sp, #28]
 800e478:	9704      	str	r7, [sp, #16]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	dc20      	bgt.n	800e4c0 <_dtoa_r+0x940>
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e482:	2b02      	cmp	r3, #2
 800e484:	dd1e      	ble.n	800e4c4 <_dtoa_r+0x944>
 800e486:	9b00      	ldr	r3, [sp, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f47f aec0 	bne.w	800e20e <_dtoa_r+0x68e>
 800e48e:	4621      	mov	r1, r4
 800e490:	2205      	movs	r2, #5
 800e492:	4658      	mov	r0, fp
 800e494:	f000 f9e4 	bl	800e860 <__multadd>
 800e498:	4601      	mov	r1, r0
 800e49a:	4604      	mov	r4, r0
 800e49c:	4648      	mov	r0, r9
 800e49e:	f000 fbf7 	bl	800ec90 <__mcmp>
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	f77f aeb3 	ble.w	800e20e <_dtoa_r+0x68e>
 800e4a8:	4656      	mov	r6, sl
 800e4aa:	2331      	movs	r3, #49	@ 0x31
 800e4ac:	f806 3b01 	strb.w	r3, [r6], #1
 800e4b0:	9b04      	ldr	r3, [sp, #16]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	9304      	str	r3, [sp, #16]
 800e4b6:	e6ae      	b.n	800e216 <_dtoa_r+0x696>
 800e4b8:	9c07      	ldr	r4, [sp, #28]
 800e4ba:	9704      	str	r7, [sp, #16]
 800e4bc:	4625      	mov	r5, r4
 800e4be:	e7f3      	b.n	800e4a8 <_dtoa_r+0x928>
 800e4c0:	9b07      	ldr	r3, [sp, #28]
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	f000 8104 	beq.w	800e6d4 <_dtoa_r+0xb54>
 800e4cc:	2e00      	cmp	r6, #0
 800e4ce:	dd05      	ble.n	800e4dc <_dtoa_r+0x95c>
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	4632      	mov	r2, r6
 800e4d4:	4658      	mov	r0, fp
 800e4d6:	f000 fb6f 	bl	800ebb8 <__lshift>
 800e4da:	4605      	mov	r5, r0
 800e4dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d05a      	beq.n	800e598 <_dtoa_r+0xa18>
 800e4e2:	6869      	ldr	r1, [r5, #4]
 800e4e4:	4658      	mov	r0, fp
 800e4e6:	f000 f959 	bl	800e79c <_Balloc>
 800e4ea:	4606      	mov	r6, r0
 800e4ec:	b928      	cbnz	r0, 800e4fa <_dtoa_r+0x97a>
 800e4ee:	4b84      	ldr	r3, [pc, #528]	@ (800e700 <_dtoa_r+0xb80>)
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e4f6:	f7ff bb5a 	b.w	800dbae <_dtoa_r+0x2e>
 800e4fa:	692a      	ldr	r2, [r5, #16]
 800e4fc:	3202      	adds	r2, #2
 800e4fe:	0092      	lsls	r2, r2, #2
 800e500:	f105 010c 	add.w	r1, r5, #12
 800e504:	300c      	adds	r0, #12
 800e506:	f000 fee9 	bl	800f2dc <memcpy>
 800e50a:	2201      	movs	r2, #1
 800e50c:	4631      	mov	r1, r6
 800e50e:	4658      	mov	r0, fp
 800e510:	f000 fb52 	bl	800ebb8 <__lshift>
 800e514:	f10a 0301 	add.w	r3, sl, #1
 800e518:	9307      	str	r3, [sp, #28]
 800e51a:	9b00      	ldr	r3, [sp, #0]
 800e51c:	4453      	add	r3, sl
 800e51e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e520:	9b02      	ldr	r3, [sp, #8]
 800e522:	f003 0301 	and.w	r3, r3, #1
 800e526:	462f      	mov	r7, r5
 800e528:	930a      	str	r3, [sp, #40]	@ 0x28
 800e52a:	4605      	mov	r5, r0
 800e52c:	9b07      	ldr	r3, [sp, #28]
 800e52e:	4621      	mov	r1, r4
 800e530:	3b01      	subs	r3, #1
 800e532:	4648      	mov	r0, r9
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	f7ff fa98 	bl	800da6a <quorem>
 800e53a:	4639      	mov	r1, r7
 800e53c:	9002      	str	r0, [sp, #8]
 800e53e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e542:	4648      	mov	r0, r9
 800e544:	f000 fba4 	bl	800ec90 <__mcmp>
 800e548:	462a      	mov	r2, r5
 800e54a:	9008      	str	r0, [sp, #32]
 800e54c:	4621      	mov	r1, r4
 800e54e:	4658      	mov	r0, fp
 800e550:	f000 fbba 	bl	800ecc8 <__mdiff>
 800e554:	68c2      	ldr	r2, [r0, #12]
 800e556:	4606      	mov	r6, r0
 800e558:	bb02      	cbnz	r2, 800e59c <_dtoa_r+0xa1c>
 800e55a:	4601      	mov	r1, r0
 800e55c:	4648      	mov	r0, r9
 800e55e:	f000 fb97 	bl	800ec90 <__mcmp>
 800e562:	4602      	mov	r2, r0
 800e564:	4631      	mov	r1, r6
 800e566:	4658      	mov	r0, fp
 800e568:	920e      	str	r2, [sp, #56]	@ 0x38
 800e56a:	f000 f957 	bl	800e81c <_Bfree>
 800e56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e572:	9e07      	ldr	r6, [sp, #28]
 800e574:	ea43 0102 	orr.w	r1, r3, r2
 800e578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e57a:	4319      	orrs	r1, r3
 800e57c:	d110      	bne.n	800e5a0 <_dtoa_r+0xa20>
 800e57e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e582:	d029      	beq.n	800e5d8 <_dtoa_r+0xa58>
 800e584:	9b08      	ldr	r3, [sp, #32]
 800e586:	2b00      	cmp	r3, #0
 800e588:	dd02      	ble.n	800e590 <_dtoa_r+0xa10>
 800e58a:	9b02      	ldr	r3, [sp, #8]
 800e58c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e590:	9b00      	ldr	r3, [sp, #0]
 800e592:	f883 8000 	strb.w	r8, [r3]
 800e596:	e63f      	b.n	800e218 <_dtoa_r+0x698>
 800e598:	4628      	mov	r0, r5
 800e59a:	e7bb      	b.n	800e514 <_dtoa_r+0x994>
 800e59c:	2201      	movs	r2, #1
 800e59e:	e7e1      	b.n	800e564 <_dtoa_r+0x9e4>
 800e5a0:	9b08      	ldr	r3, [sp, #32]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	db04      	blt.n	800e5b0 <_dtoa_r+0xa30>
 800e5a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5a8:	430b      	orrs	r3, r1
 800e5aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e5ac:	430b      	orrs	r3, r1
 800e5ae:	d120      	bne.n	800e5f2 <_dtoa_r+0xa72>
 800e5b0:	2a00      	cmp	r2, #0
 800e5b2:	dded      	ble.n	800e590 <_dtoa_r+0xa10>
 800e5b4:	4649      	mov	r1, r9
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	4658      	mov	r0, fp
 800e5ba:	f000 fafd 	bl	800ebb8 <__lshift>
 800e5be:	4621      	mov	r1, r4
 800e5c0:	4681      	mov	r9, r0
 800e5c2:	f000 fb65 	bl	800ec90 <__mcmp>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	dc03      	bgt.n	800e5d2 <_dtoa_r+0xa52>
 800e5ca:	d1e1      	bne.n	800e590 <_dtoa_r+0xa10>
 800e5cc:	f018 0f01 	tst.w	r8, #1
 800e5d0:	d0de      	beq.n	800e590 <_dtoa_r+0xa10>
 800e5d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e5d6:	d1d8      	bne.n	800e58a <_dtoa_r+0xa0a>
 800e5d8:	9a00      	ldr	r2, [sp, #0]
 800e5da:	2339      	movs	r3, #57	@ 0x39
 800e5dc:	7013      	strb	r3, [r2, #0]
 800e5de:	4633      	mov	r3, r6
 800e5e0:	461e      	mov	r6, r3
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e5e8:	2a39      	cmp	r2, #57	@ 0x39
 800e5ea:	d052      	beq.n	800e692 <_dtoa_r+0xb12>
 800e5ec:	3201      	adds	r2, #1
 800e5ee:	701a      	strb	r2, [r3, #0]
 800e5f0:	e612      	b.n	800e218 <_dtoa_r+0x698>
 800e5f2:	2a00      	cmp	r2, #0
 800e5f4:	dd07      	ble.n	800e606 <_dtoa_r+0xa86>
 800e5f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e5fa:	d0ed      	beq.n	800e5d8 <_dtoa_r+0xa58>
 800e5fc:	9a00      	ldr	r2, [sp, #0]
 800e5fe:	f108 0301 	add.w	r3, r8, #1
 800e602:	7013      	strb	r3, [r2, #0]
 800e604:	e608      	b.n	800e218 <_dtoa_r+0x698>
 800e606:	9b07      	ldr	r3, [sp, #28]
 800e608:	9a07      	ldr	r2, [sp, #28]
 800e60a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e60e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e610:	4293      	cmp	r3, r2
 800e612:	d028      	beq.n	800e666 <_dtoa_r+0xae6>
 800e614:	4649      	mov	r1, r9
 800e616:	2300      	movs	r3, #0
 800e618:	220a      	movs	r2, #10
 800e61a:	4658      	mov	r0, fp
 800e61c:	f000 f920 	bl	800e860 <__multadd>
 800e620:	42af      	cmp	r7, r5
 800e622:	4681      	mov	r9, r0
 800e624:	f04f 0300 	mov.w	r3, #0
 800e628:	f04f 020a 	mov.w	r2, #10
 800e62c:	4639      	mov	r1, r7
 800e62e:	4658      	mov	r0, fp
 800e630:	d107      	bne.n	800e642 <_dtoa_r+0xac2>
 800e632:	f000 f915 	bl	800e860 <__multadd>
 800e636:	4607      	mov	r7, r0
 800e638:	4605      	mov	r5, r0
 800e63a:	9b07      	ldr	r3, [sp, #28]
 800e63c:	3301      	adds	r3, #1
 800e63e:	9307      	str	r3, [sp, #28]
 800e640:	e774      	b.n	800e52c <_dtoa_r+0x9ac>
 800e642:	f000 f90d 	bl	800e860 <__multadd>
 800e646:	4629      	mov	r1, r5
 800e648:	4607      	mov	r7, r0
 800e64a:	2300      	movs	r3, #0
 800e64c:	220a      	movs	r2, #10
 800e64e:	4658      	mov	r0, fp
 800e650:	f000 f906 	bl	800e860 <__multadd>
 800e654:	4605      	mov	r5, r0
 800e656:	e7f0      	b.n	800e63a <_dtoa_r+0xaba>
 800e658:	9b00      	ldr	r3, [sp, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	bfcc      	ite	gt
 800e65e:	461e      	movgt	r6, r3
 800e660:	2601      	movle	r6, #1
 800e662:	4456      	add	r6, sl
 800e664:	2700      	movs	r7, #0
 800e666:	4649      	mov	r1, r9
 800e668:	2201      	movs	r2, #1
 800e66a:	4658      	mov	r0, fp
 800e66c:	f000 faa4 	bl	800ebb8 <__lshift>
 800e670:	4621      	mov	r1, r4
 800e672:	4681      	mov	r9, r0
 800e674:	f000 fb0c 	bl	800ec90 <__mcmp>
 800e678:	2800      	cmp	r0, #0
 800e67a:	dcb0      	bgt.n	800e5de <_dtoa_r+0xa5e>
 800e67c:	d102      	bne.n	800e684 <_dtoa_r+0xb04>
 800e67e:	f018 0f01 	tst.w	r8, #1
 800e682:	d1ac      	bne.n	800e5de <_dtoa_r+0xa5e>
 800e684:	4633      	mov	r3, r6
 800e686:	461e      	mov	r6, r3
 800e688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e68c:	2a30      	cmp	r2, #48	@ 0x30
 800e68e:	d0fa      	beq.n	800e686 <_dtoa_r+0xb06>
 800e690:	e5c2      	b.n	800e218 <_dtoa_r+0x698>
 800e692:	459a      	cmp	sl, r3
 800e694:	d1a4      	bne.n	800e5e0 <_dtoa_r+0xa60>
 800e696:	9b04      	ldr	r3, [sp, #16]
 800e698:	3301      	adds	r3, #1
 800e69a:	9304      	str	r3, [sp, #16]
 800e69c:	2331      	movs	r3, #49	@ 0x31
 800e69e:	f88a 3000 	strb.w	r3, [sl]
 800e6a2:	e5b9      	b.n	800e218 <_dtoa_r+0x698>
 800e6a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e704 <_dtoa_r+0xb84>
 800e6aa:	b11b      	cbz	r3, 800e6b4 <_dtoa_r+0xb34>
 800e6ac:	f10a 0308 	add.w	r3, sl, #8
 800e6b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e6b2:	6013      	str	r3, [r2, #0]
 800e6b4:	4650      	mov	r0, sl
 800e6b6:	b019      	add	sp, #100	@ 0x64
 800e6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	f77f ae37 	ble.w	800e332 <_dtoa_r+0x7b2>
 800e6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6c8:	2001      	movs	r0, #1
 800e6ca:	e655      	b.n	800e378 <_dtoa_r+0x7f8>
 800e6cc:	9b00      	ldr	r3, [sp, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	f77f aed6 	ble.w	800e480 <_dtoa_r+0x900>
 800e6d4:	4656      	mov	r6, sl
 800e6d6:	4621      	mov	r1, r4
 800e6d8:	4648      	mov	r0, r9
 800e6da:	f7ff f9c6 	bl	800da6a <quorem>
 800e6de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e6e2:	f806 8b01 	strb.w	r8, [r6], #1
 800e6e6:	9b00      	ldr	r3, [sp, #0]
 800e6e8:	eba6 020a 	sub.w	r2, r6, sl
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	ddb3      	ble.n	800e658 <_dtoa_r+0xad8>
 800e6f0:	4649      	mov	r1, r9
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	220a      	movs	r2, #10
 800e6f6:	4658      	mov	r0, fp
 800e6f8:	f000 f8b2 	bl	800e860 <__multadd>
 800e6fc:	4681      	mov	r9, r0
 800e6fe:	e7ea      	b.n	800e6d6 <_dtoa_r+0xb56>
 800e700:	0801108c 	.word	0x0801108c
 800e704:	08011010 	.word	0x08011010

0800e708 <_free_r>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	4605      	mov	r5, r0
 800e70c:	2900      	cmp	r1, #0
 800e70e:	d041      	beq.n	800e794 <_free_r+0x8c>
 800e710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e714:	1f0c      	subs	r4, r1, #4
 800e716:	2b00      	cmp	r3, #0
 800e718:	bfb8      	it	lt
 800e71a:	18e4      	addlt	r4, r4, r3
 800e71c:	f7fe fb8c 	bl	800ce38 <__malloc_lock>
 800e720:	4a1d      	ldr	r2, [pc, #116]	@ (800e798 <_free_r+0x90>)
 800e722:	6813      	ldr	r3, [r2, #0]
 800e724:	b933      	cbnz	r3, 800e734 <_free_r+0x2c>
 800e726:	6063      	str	r3, [r4, #4]
 800e728:	6014      	str	r4, [r2, #0]
 800e72a:	4628      	mov	r0, r5
 800e72c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e730:	f7fe bb88 	b.w	800ce44 <__malloc_unlock>
 800e734:	42a3      	cmp	r3, r4
 800e736:	d908      	bls.n	800e74a <_free_r+0x42>
 800e738:	6820      	ldr	r0, [r4, #0]
 800e73a:	1821      	adds	r1, r4, r0
 800e73c:	428b      	cmp	r3, r1
 800e73e:	bf01      	itttt	eq
 800e740:	6819      	ldreq	r1, [r3, #0]
 800e742:	685b      	ldreq	r3, [r3, #4]
 800e744:	1809      	addeq	r1, r1, r0
 800e746:	6021      	streq	r1, [r4, #0]
 800e748:	e7ed      	b.n	800e726 <_free_r+0x1e>
 800e74a:	461a      	mov	r2, r3
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	b10b      	cbz	r3, 800e754 <_free_r+0x4c>
 800e750:	42a3      	cmp	r3, r4
 800e752:	d9fa      	bls.n	800e74a <_free_r+0x42>
 800e754:	6811      	ldr	r1, [r2, #0]
 800e756:	1850      	adds	r0, r2, r1
 800e758:	42a0      	cmp	r0, r4
 800e75a:	d10b      	bne.n	800e774 <_free_r+0x6c>
 800e75c:	6820      	ldr	r0, [r4, #0]
 800e75e:	4401      	add	r1, r0
 800e760:	1850      	adds	r0, r2, r1
 800e762:	4283      	cmp	r3, r0
 800e764:	6011      	str	r1, [r2, #0]
 800e766:	d1e0      	bne.n	800e72a <_free_r+0x22>
 800e768:	6818      	ldr	r0, [r3, #0]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	6053      	str	r3, [r2, #4]
 800e76e:	4408      	add	r0, r1
 800e770:	6010      	str	r0, [r2, #0]
 800e772:	e7da      	b.n	800e72a <_free_r+0x22>
 800e774:	d902      	bls.n	800e77c <_free_r+0x74>
 800e776:	230c      	movs	r3, #12
 800e778:	602b      	str	r3, [r5, #0]
 800e77a:	e7d6      	b.n	800e72a <_free_r+0x22>
 800e77c:	6820      	ldr	r0, [r4, #0]
 800e77e:	1821      	adds	r1, r4, r0
 800e780:	428b      	cmp	r3, r1
 800e782:	bf04      	itt	eq
 800e784:	6819      	ldreq	r1, [r3, #0]
 800e786:	685b      	ldreq	r3, [r3, #4]
 800e788:	6063      	str	r3, [r4, #4]
 800e78a:	bf04      	itt	eq
 800e78c:	1809      	addeq	r1, r1, r0
 800e78e:	6021      	streq	r1, [r4, #0]
 800e790:	6054      	str	r4, [r2, #4]
 800e792:	e7ca      	b.n	800e72a <_free_r+0x22>
 800e794:	bd38      	pop	{r3, r4, r5, pc}
 800e796:	bf00      	nop
 800e798:	200008f0 	.word	0x200008f0

0800e79c <_Balloc>:
 800e79c:	b570      	push	{r4, r5, r6, lr}
 800e79e:	69c6      	ldr	r6, [r0, #28]
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	460d      	mov	r5, r1
 800e7a4:	b976      	cbnz	r6, 800e7c4 <_Balloc+0x28>
 800e7a6:	2010      	movs	r0, #16
 800e7a8:	f7fe fa94 	bl	800ccd4 <malloc>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	61e0      	str	r0, [r4, #28]
 800e7b0:	b920      	cbnz	r0, 800e7bc <_Balloc+0x20>
 800e7b2:	4b18      	ldr	r3, [pc, #96]	@ (800e814 <_Balloc+0x78>)
 800e7b4:	4818      	ldr	r0, [pc, #96]	@ (800e818 <_Balloc+0x7c>)
 800e7b6:	216b      	movs	r1, #107	@ 0x6b
 800e7b8:	f000 fd9e 	bl	800f2f8 <__assert_func>
 800e7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7c0:	6006      	str	r6, [r0, #0]
 800e7c2:	60c6      	str	r6, [r0, #12]
 800e7c4:	69e6      	ldr	r6, [r4, #28]
 800e7c6:	68f3      	ldr	r3, [r6, #12]
 800e7c8:	b183      	cbz	r3, 800e7ec <_Balloc+0x50>
 800e7ca:	69e3      	ldr	r3, [r4, #28]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e7d2:	b9b8      	cbnz	r0, 800e804 <_Balloc+0x68>
 800e7d4:	2101      	movs	r1, #1
 800e7d6:	fa01 f605 	lsl.w	r6, r1, r5
 800e7da:	1d72      	adds	r2, r6, #5
 800e7dc:	0092      	lsls	r2, r2, #2
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f000 fda8 	bl	800f334 <_calloc_r>
 800e7e4:	b160      	cbz	r0, 800e800 <_Balloc+0x64>
 800e7e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e7ea:	e00e      	b.n	800e80a <_Balloc+0x6e>
 800e7ec:	2221      	movs	r2, #33	@ 0x21
 800e7ee:	2104      	movs	r1, #4
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f000 fd9f 	bl	800f334 <_calloc_r>
 800e7f6:	69e3      	ldr	r3, [r4, #28]
 800e7f8:	60f0      	str	r0, [r6, #12]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1e4      	bne.n	800e7ca <_Balloc+0x2e>
 800e800:	2000      	movs	r0, #0
 800e802:	bd70      	pop	{r4, r5, r6, pc}
 800e804:	6802      	ldr	r2, [r0, #0]
 800e806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e80a:	2300      	movs	r3, #0
 800e80c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e810:	e7f7      	b.n	800e802 <_Balloc+0x66>
 800e812:	bf00      	nop
 800e814:	0801101d 	.word	0x0801101d
 800e818:	0801109d 	.word	0x0801109d

0800e81c <_Bfree>:
 800e81c:	b570      	push	{r4, r5, r6, lr}
 800e81e:	69c6      	ldr	r6, [r0, #28]
 800e820:	4605      	mov	r5, r0
 800e822:	460c      	mov	r4, r1
 800e824:	b976      	cbnz	r6, 800e844 <_Bfree+0x28>
 800e826:	2010      	movs	r0, #16
 800e828:	f7fe fa54 	bl	800ccd4 <malloc>
 800e82c:	4602      	mov	r2, r0
 800e82e:	61e8      	str	r0, [r5, #28]
 800e830:	b920      	cbnz	r0, 800e83c <_Bfree+0x20>
 800e832:	4b09      	ldr	r3, [pc, #36]	@ (800e858 <_Bfree+0x3c>)
 800e834:	4809      	ldr	r0, [pc, #36]	@ (800e85c <_Bfree+0x40>)
 800e836:	218f      	movs	r1, #143	@ 0x8f
 800e838:	f000 fd5e 	bl	800f2f8 <__assert_func>
 800e83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e840:	6006      	str	r6, [r0, #0]
 800e842:	60c6      	str	r6, [r0, #12]
 800e844:	b13c      	cbz	r4, 800e856 <_Bfree+0x3a>
 800e846:	69eb      	ldr	r3, [r5, #28]
 800e848:	6862      	ldr	r2, [r4, #4]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e850:	6021      	str	r1, [r4, #0]
 800e852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e856:	bd70      	pop	{r4, r5, r6, pc}
 800e858:	0801101d 	.word	0x0801101d
 800e85c:	0801109d 	.word	0x0801109d

0800e860 <__multadd>:
 800e860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e864:	690d      	ldr	r5, [r1, #16]
 800e866:	4607      	mov	r7, r0
 800e868:	460c      	mov	r4, r1
 800e86a:	461e      	mov	r6, r3
 800e86c:	f101 0c14 	add.w	ip, r1, #20
 800e870:	2000      	movs	r0, #0
 800e872:	f8dc 3000 	ldr.w	r3, [ip]
 800e876:	b299      	uxth	r1, r3
 800e878:	fb02 6101 	mla	r1, r2, r1, r6
 800e87c:	0c1e      	lsrs	r6, r3, #16
 800e87e:	0c0b      	lsrs	r3, r1, #16
 800e880:	fb02 3306 	mla	r3, r2, r6, r3
 800e884:	b289      	uxth	r1, r1
 800e886:	3001      	adds	r0, #1
 800e888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e88c:	4285      	cmp	r5, r0
 800e88e:	f84c 1b04 	str.w	r1, [ip], #4
 800e892:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e896:	dcec      	bgt.n	800e872 <__multadd+0x12>
 800e898:	b30e      	cbz	r6, 800e8de <__multadd+0x7e>
 800e89a:	68a3      	ldr	r3, [r4, #8]
 800e89c:	42ab      	cmp	r3, r5
 800e89e:	dc19      	bgt.n	800e8d4 <__multadd+0x74>
 800e8a0:	6861      	ldr	r1, [r4, #4]
 800e8a2:	4638      	mov	r0, r7
 800e8a4:	3101      	adds	r1, #1
 800e8a6:	f7ff ff79 	bl	800e79c <_Balloc>
 800e8aa:	4680      	mov	r8, r0
 800e8ac:	b928      	cbnz	r0, 800e8ba <__multadd+0x5a>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e8e4 <__multadd+0x84>)
 800e8b2:	480d      	ldr	r0, [pc, #52]	@ (800e8e8 <__multadd+0x88>)
 800e8b4:	21ba      	movs	r1, #186	@ 0xba
 800e8b6:	f000 fd1f 	bl	800f2f8 <__assert_func>
 800e8ba:	6922      	ldr	r2, [r4, #16]
 800e8bc:	3202      	adds	r2, #2
 800e8be:	f104 010c 	add.w	r1, r4, #12
 800e8c2:	0092      	lsls	r2, r2, #2
 800e8c4:	300c      	adds	r0, #12
 800e8c6:	f000 fd09 	bl	800f2dc <memcpy>
 800e8ca:	4621      	mov	r1, r4
 800e8cc:	4638      	mov	r0, r7
 800e8ce:	f7ff ffa5 	bl	800e81c <_Bfree>
 800e8d2:	4644      	mov	r4, r8
 800e8d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e8d8:	3501      	adds	r5, #1
 800e8da:	615e      	str	r6, [r3, #20]
 800e8dc:	6125      	str	r5, [r4, #16]
 800e8de:	4620      	mov	r0, r4
 800e8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e4:	0801108c 	.word	0x0801108c
 800e8e8:	0801109d 	.word	0x0801109d

0800e8ec <__hi0bits>:
 800e8ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	bf36      	itet	cc
 800e8f4:	0403      	lslcc	r3, r0, #16
 800e8f6:	2000      	movcs	r0, #0
 800e8f8:	2010      	movcc	r0, #16
 800e8fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e8fe:	bf3c      	itt	cc
 800e900:	021b      	lslcc	r3, r3, #8
 800e902:	3008      	addcc	r0, #8
 800e904:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e908:	bf3c      	itt	cc
 800e90a:	011b      	lslcc	r3, r3, #4
 800e90c:	3004      	addcc	r0, #4
 800e90e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e912:	bf3c      	itt	cc
 800e914:	009b      	lslcc	r3, r3, #2
 800e916:	3002      	addcc	r0, #2
 800e918:	2b00      	cmp	r3, #0
 800e91a:	db05      	blt.n	800e928 <__hi0bits+0x3c>
 800e91c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e920:	f100 0001 	add.w	r0, r0, #1
 800e924:	bf08      	it	eq
 800e926:	2020      	moveq	r0, #32
 800e928:	4770      	bx	lr

0800e92a <__lo0bits>:
 800e92a:	6803      	ldr	r3, [r0, #0]
 800e92c:	4602      	mov	r2, r0
 800e92e:	f013 0007 	ands.w	r0, r3, #7
 800e932:	d00b      	beq.n	800e94c <__lo0bits+0x22>
 800e934:	07d9      	lsls	r1, r3, #31
 800e936:	d421      	bmi.n	800e97c <__lo0bits+0x52>
 800e938:	0798      	lsls	r0, r3, #30
 800e93a:	bf49      	itett	mi
 800e93c:	085b      	lsrmi	r3, r3, #1
 800e93e:	089b      	lsrpl	r3, r3, #2
 800e940:	2001      	movmi	r0, #1
 800e942:	6013      	strmi	r3, [r2, #0]
 800e944:	bf5c      	itt	pl
 800e946:	6013      	strpl	r3, [r2, #0]
 800e948:	2002      	movpl	r0, #2
 800e94a:	4770      	bx	lr
 800e94c:	b299      	uxth	r1, r3
 800e94e:	b909      	cbnz	r1, 800e954 <__lo0bits+0x2a>
 800e950:	0c1b      	lsrs	r3, r3, #16
 800e952:	2010      	movs	r0, #16
 800e954:	b2d9      	uxtb	r1, r3
 800e956:	b909      	cbnz	r1, 800e95c <__lo0bits+0x32>
 800e958:	3008      	adds	r0, #8
 800e95a:	0a1b      	lsrs	r3, r3, #8
 800e95c:	0719      	lsls	r1, r3, #28
 800e95e:	bf04      	itt	eq
 800e960:	091b      	lsreq	r3, r3, #4
 800e962:	3004      	addeq	r0, #4
 800e964:	0799      	lsls	r1, r3, #30
 800e966:	bf04      	itt	eq
 800e968:	089b      	lsreq	r3, r3, #2
 800e96a:	3002      	addeq	r0, #2
 800e96c:	07d9      	lsls	r1, r3, #31
 800e96e:	d403      	bmi.n	800e978 <__lo0bits+0x4e>
 800e970:	085b      	lsrs	r3, r3, #1
 800e972:	f100 0001 	add.w	r0, r0, #1
 800e976:	d003      	beq.n	800e980 <__lo0bits+0x56>
 800e978:	6013      	str	r3, [r2, #0]
 800e97a:	4770      	bx	lr
 800e97c:	2000      	movs	r0, #0
 800e97e:	4770      	bx	lr
 800e980:	2020      	movs	r0, #32
 800e982:	4770      	bx	lr

0800e984 <__i2b>:
 800e984:	b510      	push	{r4, lr}
 800e986:	460c      	mov	r4, r1
 800e988:	2101      	movs	r1, #1
 800e98a:	f7ff ff07 	bl	800e79c <_Balloc>
 800e98e:	4602      	mov	r2, r0
 800e990:	b928      	cbnz	r0, 800e99e <__i2b+0x1a>
 800e992:	4b05      	ldr	r3, [pc, #20]	@ (800e9a8 <__i2b+0x24>)
 800e994:	4805      	ldr	r0, [pc, #20]	@ (800e9ac <__i2b+0x28>)
 800e996:	f240 1145 	movw	r1, #325	@ 0x145
 800e99a:	f000 fcad 	bl	800f2f8 <__assert_func>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	6144      	str	r4, [r0, #20]
 800e9a2:	6103      	str	r3, [r0, #16]
 800e9a4:	bd10      	pop	{r4, pc}
 800e9a6:	bf00      	nop
 800e9a8:	0801108c 	.word	0x0801108c
 800e9ac:	0801109d 	.word	0x0801109d

0800e9b0 <__multiply>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	4614      	mov	r4, r2
 800e9b6:	690a      	ldr	r2, [r1, #16]
 800e9b8:	6923      	ldr	r3, [r4, #16]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	bfa8      	it	ge
 800e9be:	4623      	movge	r3, r4
 800e9c0:	460f      	mov	r7, r1
 800e9c2:	bfa4      	itt	ge
 800e9c4:	460c      	movge	r4, r1
 800e9c6:	461f      	movge	r7, r3
 800e9c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e9cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e9d0:	68a3      	ldr	r3, [r4, #8]
 800e9d2:	6861      	ldr	r1, [r4, #4]
 800e9d4:	eb0a 0609 	add.w	r6, sl, r9
 800e9d8:	42b3      	cmp	r3, r6
 800e9da:	b085      	sub	sp, #20
 800e9dc:	bfb8      	it	lt
 800e9de:	3101      	addlt	r1, #1
 800e9e0:	f7ff fedc 	bl	800e79c <_Balloc>
 800e9e4:	b930      	cbnz	r0, 800e9f4 <__multiply+0x44>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	4b44      	ldr	r3, [pc, #272]	@ (800eafc <__multiply+0x14c>)
 800e9ea:	4845      	ldr	r0, [pc, #276]	@ (800eb00 <__multiply+0x150>)
 800e9ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e9f0:	f000 fc82 	bl	800f2f8 <__assert_func>
 800e9f4:	f100 0514 	add.w	r5, r0, #20
 800e9f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e9fc:	462b      	mov	r3, r5
 800e9fe:	2200      	movs	r2, #0
 800ea00:	4543      	cmp	r3, r8
 800ea02:	d321      	bcc.n	800ea48 <__multiply+0x98>
 800ea04:	f107 0114 	add.w	r1, r7, #20
 800ea08:	f104 0214 	add.w	r2, r4, #20
 800ea0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ea10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ea14:	9302      	str	r3, [sp, #8]
 800ea16:	1b13      	subs	r3, r2, r4
 800ea18:	3b15      	subs	r3, #21
 800ea1a:	f023 0303 	bic.w	r3, r3, #3
 800ea1e:	3304      	adds	r3, #4
 800ea20:	f104 0715 	add.w	r7, r4, #21
 800ea24:	42ba      	cmp	r2, r7
 800ea26:	bf38      	it	cc
 800ea28:	2304      	movcc	r3, #4
 800ea2a:	9301      	str	r3, [sp, #4]
 800ea2c:	9b02      	ldr	r3, [sp, #8]
 800ea2e:	9103      	str	r1, [sp, #12]
 800ea30:	428b      	cmp	r3, r1
 800ea32:	d80c      	bhi.n	800ea4e <__multiply+0x9e>
 800ea34:	2e00      	cmp	r6, #0
 800ea36:	dd03      	ble.n	800ea40 <__multiply+0x90>
 800ea38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d05b      	beq.n	800eaf8 <__multiply+0x148>
 800ea40:	6106      	str	r6, [r0, #16]
 800ea42:	b005      	add	sp, #20
 800ea44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea48:	f843 2b04 	str.w	r2, [r3], #4
 800ea4c:	e7d8      	b.n	800ea00 <__multiply+0x50>
 800ea4e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ea52:	f1ba 0f00 	cmp.w	sl, #0
 800ea56:	d024      	beq.n	800eaa2 <__multiply+0xf2>
 800ea58:	f104 0e14 	add.w	lr, r4, #20
 800ea5c:	46a9      	mov	r9, r5
 800ea5e:	f04f 0c00 	mov.w	ip, #0
 800ea62:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea66:	f8d9 3000 	ldr.w	r3, [r9]
 800ea6a:	fa1f fb87 	uxth.w	fp, r7
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	fb0a 330b 	mla	r3, sl, fp, r3
 800ea74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ea78:	f8d9 7000 	ldr.w	r7, [r9]
 800ea7c:	4463      	add	r3, ip
 800ea7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ea82:	fb0a c70b 	mla	r7, sl, fp, ip
 800ea86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ea90:	4572      	cmp	r2, lr
 800ea92:	f849 3b04 	str.w	r3, [r9], #4
 800ea96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ea9a:	d8e2      	bhi.n	800ea62 <__multiply+0xb2>
 800ea9c:	9b01      	ldr	r3, [sp, #4]
 800ea9e:	f845 c003 	str.w	ip, [r5, r3]
 800eaa2:	9b03      	ldr	r3, [sp, #12]
 800eaa4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eaa8:	3104      	adds	r1, #4
 800eaaa:	f1b9 0f00 	cmp.w	r9, #0
 800eaae:	d021      	beq.n	800eaf4 <__multiply+0x144>
 800eab0:	682b      	ldr	r3, [r5, #0]
 800eab2:	f104 0c14 	add.w	ip, r4, #20
 800eab6:	46ae      	mov	lr, r5
 800eab8:	f04f 0a00 	mov.w	sl, #0
 800eabc:	f8bc b000 	ldrh.w	fp, [ip]
 800eac0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800eac4:	fb09 770b 	mla	r7, r9, fp, r7
 800eac8:	4457      	add	r7, sl
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ead0:	f84e 3b04 	str.w	r3, [lr], #4
 800ead4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ead8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eadc:	f8be 3000 	ldrh.w	r3, [lr]
 800eae0:	fb09 330a 	mla	r3, r9, sl, r3
 800eae4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800eae8:	4562      	cmp	r2, ip
 800eaea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eaee:	d8e5      	bhi.n	800eabc <__multiply+0x10c>
 800eaf0:	9f01      	ldr	r7, [sp, #4]
 800eaf2:	51eb      	str	r3, [r5, r7]
 800eaf4:	3504      	adds	r5, #4
 800eaf6:	e799      	b.n	800ea2c <__multiply+0x7c>
 800eaf8:	3e01      	subs	r6, #1
 800eafa:	e79b      	b.n	800ea34 <__multiply+0x84>
 800eafc:	0801108c 	.word	0x0801108c
 800eb00:	0801109d 	.word	0x0801109d

0800eb04 <__pow5mult>:
 800eb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb08:	4615      	mov	r5, r2
 800eb0a:	f012 0203 	ands.w	r2, r2, #3
 800eb0e:	4607      	mov	r7, r0
 800eb10:	460e      	mov	r6, r1
 800eb12:	d007      	beq.n	800eb24 <__pow5mult+0x20>
 800eb14:	4c25      	ldr	r4, [pc, #148]	@ (800ebac <__pow5mult+0xa8>)
 800eb16:	3a01      	subs	r2, #1
 800eb18:	2300      	movs	r3, #0
 800eb1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb1e:	f7ff fe9f 	bl	800e860 <__multadd>
 800eb22:	4606      	mov	r6, r0
 800eb24:	10ad      	asrs	r5, r5, #2
 800eb26:	d03d      	beq.n	800eba4 <__pow5mult+0xa0>
 800eb28:	69fc      	ldr	r4, [r7, #28]
 800eb2a:	b97c      	cbnz	r4, 800eb4c <__pow5mult+0x48>
 800eb2c:	2010      	movs	r0, #16
 800eb2e:	f7fe f8d1 	bl	800ccd4 <malloc>
 800eb32:	4602      	mov	r2, r0
 800eb34:	61f8      	str	r0, [r7, #28]
 800eb36:	b928      	cbnz	r0, 800eb44 <__pow5mult+0x40>
 800eb38:	4b1d      	ldr	r3, [pc, #116]	@ (800ebb0 <__pow5mult+0xac>)
 800eb3a:	481e      	ldr	r0, [pc, #120]	@ (800ebb4 <__pow5mult+0xb0>)
 800eb3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800eb40:	f000 fbda 	bl	800f2f8 <__assert_func>
 800eb44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb48:	6004      	str	r4, [r0, #0]
 800eb4a:	60c4      	str	r4, [r0, #12]
 800eb4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800eb50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb54:	b94c      	cbnz	r4, 800eb6a <__pow5mult+0x66>
 800eb56:	f240 2171 	movw	r1, #625	@ 0x271
 800eb5a:	4638      	mov	r0, r7
 800eb5c:	f7ff ff12 	bl	800e984 <__i2b>
 800eb60:	2300      	movs	r3, #0
 800eb62:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb66:	4604      	mov	r4, r0
 800eb68:	6003      	str	r3, [r0, #0]
 800eb6a:	f04f 0900 	mov.w	r9, #0
 800eb6e:	07eb      	lsls	r3, r5, #31
 800eb70:	d50a      	bpl.n	800eb88 <__pow5mult+0x84>
 800eb72:	4631      	mov	r1, r6
 800eb74:	4622      	mov	r2, r4
 800eb76:	4638      	mov	r0, r7
 800eb78:	f7ff ff1a 	bl	800e9b0 <__multiply>
 800eb7c:	4631      	mov	r1, r6
 800eb7e:	4680      	mov	r8, r0
 800eb80:	4638      	mov	r0, r7
 800eb82:	f7ff fe4b 	bl	800e81c <_Bfree>
 800eb86:	4646      	mov	r6, r8
 800eb88:	106d      	asrs	r5, r5, #1
 800eb8a:	d00b      	beq.n	800eba4 <__pow5mult+0xa0>
 800eb8c:	6820      	ldr	r0, [r4, #0]
 800eb8e:	b938      	cbnz	r0, 800eba0 <__pow5mult+0x9c>
 800eb90:	4622      	mov	r2, r4
 800eb92:	4621      	mov	r1, r4
 800eb94:	4638      	mov	r0, r7
 800eb96:	f7ff ff0b 	bl	800e9b0 <__multiply>
 800eb9a:	6020      	str	r0, [r4, #0]
 800eb9c:	f8c0 9000 	str.w	r9, [r0]
 800eba0:	4604      	mov	r4, r0
 800eba2:	e7e4      	b.n	800eb6e <__pow5mult+0x6a>
 800eba4:	4630      	mov	r0, r6
 800eba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebaa:	bf00      	nop
 800ebac:	080110f8 	.word	0x080110f8
 800ebb0:	0801101d 	.word	0x0801101d
 800ebb4:	0801109d 	.word	0x0801109d

0800ebb8 <__lshift>:
 800ebb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebbc:	460c      	mov	r4, r1
 800ebbe:	6849      	ldr	r1, [r1, #4]
 800ebc0:	6923      	ldr	r3, [r4, #16]
 800ebc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ebc6:	68a3      	ldr	r3, [r4, #8]
 800ebc8:	4607      	mov	r7, r0
 800ebca:	4691      	mov	r9, r2
 800ebcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ebd0:	f108 0601 	add.w	r6, r8, #1
 800ebd4:	42b3      	cmp	r3, r6
 800ebd6:	db0b      	blt.n	800ebf0 <__lshift+0x38>
 800ebd8:	4638      	mov	r0, r7
 800ebda:	f7ff fddf 	bl	800e79c <_Balloc>
 800ebde:	4605      	mov	r5, r0
 800ebe0:	b948      	cbnz	r0, 800ebf6 <__lshift+0x3e>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	4b28      	ldr	r3, [pc, #160]	@ (800ec88 <__lshift+0xd0>)
 800ebe6:	4829      	ldr	r0, [pc, #164]	@ (800ec8c <__lshift+0xd4>)
 800ebe8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ebec:	f000 fb84 	bl	800f2f8 <__assert_func>
 800ebf0:	3101      	adds	r1, #1
 800ebf2:	005b      	lsls	r3, r3, #1
 800ebf4:	e7ee      	b.n	800ebd4 <__lshift+0x1c>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	f100 0114 	add.w	r1, r0, #20
 800ebfc:	f100 0210 	add.w	r2, r0, #16
 800ec00:	4618      	mov	r0, r3
 800ec02:	4553      	cmp	r3, sl
 800ec04:	db33      	blt.n	800ec6e <__lshift+0xb6>
 800ec06:	6920      	ldr	r0, [r4, #16]
 800ec08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec0c:	f104 0314 	add.w	r3, r4, #20
 800ec10:	f019 091f 	ands.w	r9, r9, #31
 800ec14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec1c:	d02b      	beq.n	800ec76 <__lshift+0xbe>
 800ec1e:	f1c9 0e20 	rsb	lr, r9, #32
 800ec22:	468a      	mov	sl, r1
 800ec24:	2200      	movs	r2, #0
 800ec26:	6818      	ldr	r0, [r3, #0]
 800ec28:	fa00 f009 	lsl.w	r0, r0, r9
 800ec2c:	4310      	orrs	r0, r2
 800ec2e:	f84a 0b04 	str.w	r0, [sl], #4
 800ec32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec36:	459c      	cmp	ip, r3
 800ec38:	fa22 f20e 	lsr.w	r2, r2, lr
 800ec3c:	d8f3      	bhi.n	800ec26 <__lshift+0x6e>
 800ec3e:	ebac 0304 	sub.w	r3, ip, r4
 800ec42:	3b15      	subs	r3, #21
 800ec44:	f023 0303 	bic.w	r3, r3, #3
 800ec48:	3304      	adds	r3, #4
 800ec4a:	f104 0015 	add.w	r0, r4, #21
 800ec4e:	4584      	cmp	ip, r0
 800ec50:	bf38      	it	cc
 800ec52:	2304      	movcc	r3, #4
 800ec54:	50ca      	str	r2, [r1, r3]
 800ec56:	b10a      	cbz	r2, 800ec5c <__lshift+0xa4>
 800ec58:	f108 0602 	add.w	r6, r8, #2
 800ec5c:	3e01      	subs	r6, #1
 800ec5e:	4638      	mov	r0, r7
 800ec60:	612e      	str	r6, [r5, #16]
 800ec62:	4621      	mov	r1, r4
 800ec64:	f7ff fdda 	bl	800e81c <_Bfree>
 800ec68:	4628      	mov	r0, r5
 800ec6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ec72:	3301      	adds	r3, #1
 800ec74:	e7c5      	b.n	800ec02 <__lshift+0x4a>
 800ec76:	3904      	subs	r1, #4
 800ec78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec80:	459c      	cmp	ip, r3
 800ec82:	d8f9      	bhi.n	800ec78 <__lshift+0xc0>
 800ec84:	e7ea      	b.n	800ec5c <__lshift+0xa4>
 800ec86:	bf00      	nop
 800ec88:	0801108c 	.word	0x0801108c
 800ec8c:	0801109d 	.word	0x0801109d

0800ec90 <__mcmp>:
 800ec90:	690a      	ldr	r2, [r1, #16]
 800ec92:	4603      	mov	r3, r0
 800ec94:	6900      	ldr	r0, [r0, #16]
 800ec96:	1a80      	subs	r0, r0, r2
 800ec98:	b530      	push	{r4, r5, lr}
 800ec9a:	d10e      	bne.n	800ecba <__mcmp+0x2a>
 800ec9c:	3314      	adds	r3, #20
 800ec9e:	3114      	adds	r1, #20
 800eca0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eca4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eca8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ecac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ecb0:	4295      	cmp	r5, r2
 800ecb2:	d003      	beq.n	800ecbc <__mcmp+0x2c>
 800ecb4:	d205      	bcs.n	800ecc2 <__mcmp+0x32>
 800ecb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecba:	bd30      	pop	{r4, r5, pc}
 800ecbc:	42a3      	cmp	r3, r4
 800ecbe:	d3f3      	bcc.n	800eca8 <__mcmp+0x18>
 800ecc0:	e7fb      	b.n	800ecba <__mcmp+0x2a>
 800ecc2:	2001      	movs	r0, #1
 800ecc4:	e7f9      	b.n	800ecba <__mcmp+0x2a>
	...

0800ecc8 <__mdiff>:
 800ecc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eccc:	4689      	mov	r9, r1
 800ecce:	4606      	mov	r6, r0
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	4648      	mov	r0, r9
 800ecd4:	4614      	mov	r4, r2
 800ecd6:	f7ff ffdb 	bl	800ec90 <__mcmp>
 800ecda:	1e05      	subs	r5, r0, #0
 800ecdc:	d112      	bne.n	800ed04 <__mdiff+0x3c>
 800ecde:	4629      	mov	r1, r5
 800ece0:	4630      	mov	r0, r6
 800ece2:	f7ff fd5b 	bl	800e79c <_Balloc>
 800ece6:	4602      	mov	r2, r0
 800ece8:	b928      	cbnz	r0, 800ecf6 <__mdiff+0x2e>
 800ecea:	4b3f      	ldr	r3, [pc, #252]	@ (800ede8 <__mdiff+0x120>)
 800ecec:	f240 2137 	movw	r1, #567	@ 0x237
 800ecf0:	483e      	ldr	r0, [pc, #248]	@ (800edec <__mdiff+0x124>)
 800ecf2:	f000 fb01 	bl	800f2f8 <__assert_func>
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ecfc:	4610      	mov	r0, r2
 800ecfe:	b003      	add	sp, #12
 800ed00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed04:	bfbc      	itt	lt
 800ed06:	464b      	movlt	r3, r9
 800ed08:	46a1      	movlt	r9, r4
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ed10:	bfba      	itte	lt
 800ed12:	461c      	movlt	r4, r3
 800ed14:	2501      	movlt	r5, #1
 800ed16:	2500      	movge	r5, #0
 800ed18:	f7ff fd40 	bl	800e79c <_Balloc>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	b918      	cbnz	r0, 800ed28 <__mdiff+0x60>
 800ed20:	4b31      	ldr	r3, [pc, #196]	@ (800ede8 <__mdiff+0x120>)
 800ed22:	f240 2145 	movw	r1, #581	@ 0x245
 800ed26:	e7e3      	b.n	800ecf0 <__mdiff+0x28>
 800ed28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ed2c:	6926      	ldr	r6, [r4, #16]
 800ed2e:	60c5      	str	r5, [r0, #12]
 800ed30:	f109 0310 	add.w	r3, r9, #16
 800ed34:	f109 0514 	add.w	r5, r9, #20
 800ed38:	f104 0e14 	add.w	lr, r4, #20
 800ed3c:	f100 0b14 	add.w	fp, r0, #20
 800ed40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ed44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ed48:	9301      	str	r3, [sp, #4]
 800ed4a:	46d9      	mov	r9, fp
 800ed4c:	f04f 0c00 	mov.w	ip, #0
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ed56:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ed5a:	9301      	str	r3, [sp, #4]
 800ed5c:	fa1f f38a 	uxth.w	r3, sl
 800ed60:	4619      	mov	r1, r3
 800ed62:	b283      	uxth	r3, r0
 800ed64:	1acb      	subs	r3, r1, r3
 800ed66:	0c00      	lsrs	r0, r0, #16
 800ed68:	4463      	add	r3, ip
 800ed6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ed6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ed78:	4576      	cmp	r6, lr
 800ed7a:	f849 3b04 	str.w	r3, [r9], #4
 800ed7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed82:	d8e5      	bhi.n	800ed50 <__mdiff+0x88>
 800ed84:	1b33      	subs	r3, r6, r4
 800ed86:	3b15      	subs	r3, #21
 800ed88:	f023 0303 	bic.w	r3, r3, #3
 800ed8c:	3415      	adds	r4, #21
 800ed8e:	3304      	adds	r3, #4
 800ed90:	42a6      	cmp	r6, r4
 800ed92:	bf38      	it	cc
 800ed94:	2304      	movcc	r3, #4
 800ed96:	441d      	add	r5, r3
 800ed98:	445b      	add	r3, fp
 800ed9a:	461e      	mov	r6, r3
 800ed9c:	462c      	mov	r4, r5
 800ed9e:	4544      	cmp	r4, r8
 800eda0:	d30e      	bcc.n	800edc0 <__mdiff+0xf8>
 800eda2:	f108 0103 	add.w	r1, r8, #3
 800eda6:	1b49      	subs	r1, r1, r5
 800eda8:	f021 0103 	bic.w	r1, r1, #3
 800edac:	3d03      	subs	r5, #3
 800edae:	45a8      	cmp	r8, r5
 800edb0:	bf38      	it	cc
 800edb2:	2100      	movcc	r1, #0
 800edb4:	440b      	add	r3, r1
 800edb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800edba:	b191      	cbz	r1, 800ede2 <__mdiff+0x11a>
 800edbc:	6117      	str	r7, [r2, #16]
 800edbe:	e79d      	b.n	800ecfc <__mdiff+0x34>
 800edc0:	f854 1b04 	ldr.w	r1, [r4], #4
 800edc4:	46e6      	mov	lr, ip
 800edc6:	0c08      	lsrs	r0, r1, #16
 800edc8:	fa1c fc81 	uxtah	ip, ip, r1
 800edcc:	4471      	add	r1, lr
 800edce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800edd2:	b289      	uxth	r1, r1
 800edd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800edd8:	f846 1b04 	str.w	r1, [r6], #4
 800eddc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ede0:	e7dd      	b.n	800ed9e <__mdiff+0xd6>
 800ede2:	3f01      	subs	r7, #1
 800ede4:	e7e7      	b.n	800edb6 <__mdiff+0xee>
 800ede6:	bf00      	nop
 800ede8:	0801108c 	.word	0x0801108c
 800edec:	0801109d 	.word	0x0801109d

0800edf0 <__d2b>:
 800edf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800edf4:	460f      	mov	r7, r1
 800edf6:	2101      	movs	r1, #1
 800edf8:	ec59 8b10 	vmov	r8, r9, d0
 800edfc:	4616      	mov	r6, r2
 800edfe:	f7ff fccd 	bl	800e79c <_Balloc>
 800ee02:	4604      	mov	r4, r0
 800ee04:	b930      	cbnz	r0, 800ee14 <__d2b+0x24>
 800ee06:	4602      	mov	r2, r0
 800ee08:	4b23      	ldr	r3, [pc, #140]	@ (800ee98 <__d2b+0xa8>)
 800ee0a:	4824      	ldr	r0, [pc, #144]	@ (800ee9c <__d2b+0xac>)
 800ee0c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ee10:	f000 fa72 	bl	800f2f8 <__assert_func>
 800ee14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee1c:	b10d      	cbz	r5, 800ee22 <__d2b+0x32>
 800ee1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ee22:	9301      	str	r3, [sp, #4]
 800ee24:	f1b8 0300 	subs.w	r3, r8, #0
 800ee28:	d023      	beq.n	800ee72 <__d2b+0x82>
 800ee2a:	4668      	mov	r0, sp
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	f7ff fd7c 	bl	800e92a <__lo0bits>
 800ee32:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ee36:	b1d0      	cbz	r0, 800ee6e <__d2b+0x7e>
 800ee38:	f1c0 0320 	rsb	r3, r0, #32
 800ee3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee40:	430b      	orrs	r3, r1
 800ee42:	40c2      	lsrs	r2, r0
 800ee44:	6163      	str	r3, [r4, #20]
 800ee46:	9201      	str	r2, [sp, #4]
 800ee48:	9b01      	ldr	r3, [sp, #4]
 800ee4a:	61a3      	str	r3, [r4, #24]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	bf0c      	ite	eq
 800ee50:	2201      	moveq	r2, #1
 800ee52:	2202      	movne	r2, #2
 800ee54:	6122      	str	r2, [r4, #16]
 800ee56:	b1a5      	cbz	r5, 800ee82 <__d2b+0x92>
 800ee58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ee5c:	4405      	add	r5, r0
 800ee5e:	603d      	str	r5, [r7, #0]
 800ee60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ee64:	6030      	str	r0, [r6, #0]
 800ee66:	4620      	mov	r0, r4
 800ee68:	b003      	add	sp, #12
 800ee6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee6e:	6161      	str	r1, [r4, #20]
 800ee70:	e7ea      	b.n	800ee48 <__d2b+0x58>
 800ee72:	a801      	add	r0, sp, #4
 800ee74:	f7ff fd59 	bl	800e92a <__lo0bits>
 800ee78:	9b01      	ldr	r3, [sp, #4]
 800ee7a:	6163      	str	r3, [r4, #20]
 800ee7c:	3020      	adds	r0, #32
 800ee7e:	2201      	movs	r2, #1
 800ee80:	e7e8      	b.n	800ee54 <__d2b+0x64>
 800ee82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ee86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ee8a:	6038      	str	r0, [r7, #0]
 800ee8c:	6918      	ldr	r0, [r3, #16]
 800ee8e:	f7ff fd2d 	bl	800e8ec <__hi0bits>
 800ee92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee96:	e7e5      	b.n	800ee64 <__d2b+0x74>
 800ee98:	0801108c 	.word	0x0801108c
 800ee9c:	0801109d 	.word	0x0801109d

0800eea0 <__ssputs_r>:
 800eea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eea4:	688e      	ldr	r6, [r1, #8]
 800eea6:	461f      	mov	r7, r3
 800eea8:	42be      	cmp	r6, r7
 800eeaa:	680b      	ldr	r3, [r1, #0]
 800eeac:	4682      	mov	sl, r0
 800eeae:	460c      	mov	r4, r1
 800eeb0:	4690      	mov	r8, r2
 800eeb2:	d82d      	bhi.n	800ef10 <__ssputs_r+0x70>
 800eeb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eeb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eebc:	d026      	beq.n	800ef0c <__ssputs_r+0x6c>
 800eebe:	6965      	ldr	r5, [r4, #20]
 800eec0:	6909      	ldr	r1, [r1, #16]
 800eec2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eec6:	eba3 0901 	sub.w	r9, r3, r1
 800eeca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eece:	1c7b      	adds	r3, r7, #1
 800eed0:	444b      	add	r3, r9
 800eed2:	106d      	asrs	r5, r5, #1
 800eed4:	429d      	cmp	r5, r3
 800eed6:	bf38      	it	cc
 800eed8:	461d      	movcc	r5, r3
 800eeda:	0553      	lsls	r3, r2, #21
 800eedc:	d527      	bpl.n	800ef2e <__ssputs_r+0x8e>
 800eede:	4629      	mov	r1, r5
 800eee0:	f7fd ff2a 	bl	800cd38 <_malloc_r>
 800eee4:	4606      	mov	r6, r0
 800eee6:	b360      	cbz	r0, 800ef42 <__ssputs_r+0xa2>
 800eee8:	6921      	ldr	r1, [r4, #16]
 800eeea:	464a      	mov	r2, r9
 800eeec:	f000 f9f6 	bl	800f2dc <memcpy>
 800eef0:	89a3      	ldrh	r3, [r4, #12]
 800eef2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eefa:	81a3      	strh	r3, [r4, #12]
 800eefc:	6126      	str	r6, [r4, #16]
 800eefe:	6165      	str	r5, [r4, #20]
 800ef00:	444e      	add	r6, r9
 800ef02:	eba5 0509 	sub.w	r5, r5, r9
 800ef06:	6026      	str	r6, [r4, #0]
 800ef08:	60a5      	str	r5, [r4, #8]
 800ef0a:	463e      	mov	r6, r7
 800ef0c:	42be      	cmp	r6, r7
 800ef0e:	d900      	bls.n	800ef12 <__ssputs_r+0x72>
 800ef10:	463e      	mov	r6, r7
 800ef12:	6820      	ldr	r0, [r4, #0]
 800ef14:	4632      	mov	r2, r6
 800ef16:	4641      	mov	r1, r8
 800ef18:	f000 f9c6 	bl	800f2a8 <memmove>
 800ef1c:	68a3      	ldr	r3, [r4, #8]
 800ef1e:	1b9b      	subs	r3, r3, r6
 800ef20:	60a3      	str	r3, [r4, #8]
 800ef22:	6823      	ldr	r3, [r4, #0]
 800ef24:	4433      	add	r3, r6
 800ef26:	6023      	str	r3, [r4, #0]
 800ef28:	2000      	movs	r0, #0
 800ef2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef2e:	462a      	mov	r2, r5
 800ef30:	f000 fa26 	bl	800f380 <_realloc_r>
 800ef34:	4606      	mov	r6, r0
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d1e0      	bne.n	800eefc <__ssputs_r+0x5c>
 800ef3a:	6921      	ldr	r1, [r4, #16]
 800ef3c:	4650      	mov	r0, sl
 800ef3e:	f7ff fbe3 	bl	800e708 <_free_r>
 800ef42:	230c      	movs	r3, #12
 800ef44:	f8ca 3000 	str.w	r3, [sl]
 800ef48:	89a3      	ldrh	r3, [r4, #12]
 800ef4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef4e:	81a3      	strh	r3, [r4, #12]
 800ef50:	f04f 30ff 	mov.w	r0, #4294967295
 800ef54:	e7e9      	b.n	800ef2a <__ssputs_r+0x8a>
	...

0800ef58 <_svfiprintf_r>:
 800ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5c:	4698      	mov	r8, r3
 800ef5e:	898b      	ldrh	r3, [r1, #12]
 800ef60:	061b      	lsls	r3, r3, #24
 800ef62:	b09d      	sub	sp, #116	@ 0x74
 800ef64:	4607      	mov	r7, r0
 800ef66:	460d      	mov	r5, r1
 800ef68:	4614      	mov	r4, r2
 800ef6a:	d510      	bpl.n	800ef8e <_svfiprintf_r+0x36>
 800ef6c:	690b      	ldr	r3, [r1, #16]
 800ef6e:	b973      	cbnz	r3, 800ef8e <_svfiprintf_r+0x36>
 800ef70:	2140      	movs	r1, #64	@ 0x40
 800ef72:	f7fd fee1 	bl	800cd38 <_malloc_r>
 800ef76:	6028      	str	r0, [r5, #0]
 800ef78:	6128      	str	r0, [r5, #16]
 800ef7a:	b930      	cbnz	r0, 800ef8a <_svfiprintf_r+0x32>
 800ef7c:	230c      	movs	r3, #12
 800ef7e:	603b      	str	r3, [r7, #0]
 800ef80:	f04f 30ff 	mov.w	r0, #4294967295
 800ef84:	b01d      	add	sp, #116	@ 0x74
 800ef86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef8a:	2340      	movs	r3, #64	@ 0x40
 800ef8c:	616b      	str	r3, [r5, #20]
 800ef8e:	2300      	movs	r3, #0
 800ef90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef92:	2320      	movs	r3, #32
 800ef94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef98:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef9c:	2330      	movs	r3, #48	@ 0x30
 800ef9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f13c <_svfiprintf_r+0x1e4>
 800efa2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800efa6:	f04f 0901 	mov.w	r9, #1
 800efaa:	4623      	mov	r3, r4
 800efac:	469a      	mov	sl, r3
 800efae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efb2:	b10a      	cbz	r2, 800efb8 <_svfiprintf_r+0x60>
 800efb4:	2a25      	cmp	r2, #37	@ 0x25
 800efb6:	d1f9      	bne.n	800efac <_svfiprintf_r+0x54>
 800efb8:	ebba 0b04 	subs.w	fp, sl, r4
 800efbc:	d00b      	beq.n	800efd6 <_svfiprintf_r+0x7e>
 800efbe:	465b      	mov	r3, fp
 800efc0:	4622      	mov	r2, r4
 800efc2:	4629      	mov	r1, r5
 800efc4:	4638      	mov	r0, r7
 800efc6:	f7ff ff6b 	bl	800eea0 <__ssputs_r>
 800efca:	3001      	adds	r0, #1
 800efcc:	f000 80a7 	beq.w	800f11e <_svfiprintf_r+0x1c6>
 800efd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efd2:	445a      	add	r2, fp
 800efd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800efd6:	f89a 3000 	ldrb.w	r3, [sl]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 809f 	beq.w	800f11e <_svfiprintf_r+0x1c6>
 800efe0:	2300      	movs	r3, #0
 800efe2:	f04f 32ff 	mov.w	r2, #4294967295
 800efe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efea:	f10a 0a01 	add.w	sl, sl, #1
 800efee:	9304      	str	r3, [sp, #16]
 800eff0:	9307      	str	r3, [sp, #28]
 800eff2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eff6:	931a      	str	r3, [sp, #104]	@ 0x68
 800eff8:	4654      	mov	r4, sl
 800effa:	2205      	movs	r2, #5
 800effc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f000:	484e      	ldr	r0, [pc, #312]	@ (800f13c <_svfiprintf_r+0x1e4>)
 800f002:	f7f1 f90d 	bl	8000220 <memchr>
 800f006:	9a04      	ldr	r2, [sp, #16]
 800f008:	b9d8      	cbnz	r0, 800f042 <_svfiprintf_r+0xea>
 800f00a:	06d0      	lsls	r0, r2, #27
 800f00c:	bf44      	itt	mi
 800f00e:	2320      	movmi	r3, #32
 800f010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f014:	0711      	lsls	r1, r2, #28
 800f016:	bf44      	itt	mi
 800f018:	232b      	movmi	r3, #43	@ 0x2b
 800f01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f01e:	f89a 3000 	ldrb.w	r3, [sl]
 800f022:	2b2a      	cmp	r3, #42	@ 0x2a
 800f024:	d015      	beq.n	800f052 <_svfiprintf_r+0xfa>
 800f026:	9a07      	ldr	r2, [sp, #28]
 800f028:	4654      	mov	r4, sl
 800f02a:	2000      	movs	r0, #0
 800f02c:	f04f 0c0a 	mov.w	ip, #10
 800f030:	4621      	mov	r1, r4
 800f032:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f036:	3b30      	subs	r3, #48	@ 0x30
 800f038:	2b09      	cmp	r3, #9
 800f03a:	d94b      	bls.n	800f0d4 <_svfiprintf_r+0x17c>
 800f03c:	b1b0      	cbz	r0, 800f06c <_svfiprintf_r+0x114>
 800f03e:	9207      	str	r2, [sp, #28]
 800f040:	e014      	b.n	800f06c <_svfiprintf_r+0x114>
 800f042:	eba0 0308 	sub.w	r3, r0, r8
 800f046:	fa09 f303 	lsl.w	r3, r9, r3
 800f04a:	4313      	orrs	r3, r2
 800f04c:	9304      	str	r3, [sp, #16]
 800f04e:	46a2      	mov	sl, r4
 800f050:	e7d2      	b.n	800eff8 <_svfiprintf_r+0xa0>
 800f052:	9b03      	ldr	r3, [sp, #12]
 800f054:	1d19      	adds	r1, r3, #4
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	9103      	str	r1, [sp, #12]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	bfbb      	ittet	lt
 800f05e:	425b      	neglt	r3, r3
 800f060:	f042 0202 	orrlt.w	r2, r2, #2
 800f064:	9307      	strge	r3, [sp, #28]
 800f066:	9307      	strlt	r3, [sp, #28]
 800f068:	bfb8      	it	lt
 800f06a:	9204      	strlt	r2, [sp, #16]
 800f06c:	7823      	ldrb	r3, [r4, #0]
 800f06e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f070:	d10a      	bne.n	800f088 <_svfiprintf_r+0x130>
 800f072:	7863      	ldrb	r3, [r4, #1]
 800f074:	2b2a      	cmp	r3, #42	@ 0x2a
 800f076:	d132      	bne.n	800f0de <_svfiprintf_r+0x186>
 800f078:	9b03      	ldr	r3, [sp, #12]
 800f07a:	1d1a      	adds	r2, r3, #4
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	9203      	str	r2, [sp, #12]
 800f080:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f084:	3402      	adds	r4, #2
 800f086:	9305      	str	r3, [sp, #20]
 800f088:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f14c <_svfiprintf_r+0x1f4>
 800f08c:	7821      	ldrb	r1, [r4, #0]
 800f08e:	2203      	movs	r2, #3
 800f090:	4650      	mov	r0, sl
 800f092:	f7f1 f8c5 	bl	8000220 <memchr>
 800f096:	b138      	cbz	r0, 800f0a8 <_svfiprintf_r+0x150>
 800f098:	9b04      	ldr	r3, [sp, #16]
 800f09a:	eba0 000a 	sub.w	r0, r0, sl
 800f09e:	2240      	movs	r2, #64	@ 0x40
 800f0a0:	4082      	lsls	r2, r0
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	3401      	adds	r4, #1
 800f0a6:	9304      	str	r3, [sp, #16]
 800f0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ac:	4824      	ldr	r0, [pc, #144]	@ (800f140 <_svfiprintf_r+0x1e8>)
 800f0ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f0b2:	2206      	movs	r2, #6
 800f0b4:	f7f1 f8b4 	bl	8000220 <memchr>
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d036      	beq.n	800f12a <_svfiprintf_r+0x1d2>
 800f0bc:	4b21      	ldr	r3, [pc, #132]	@ (800f144 <_svfiprintf_r+0x1ec>)
 800f0be:	bb1b      	cbnz	r3, 800f108 <_svfiprintf_r+0x1b0>
 800f0c0:	9b03      	ldr	r3, [sp, #12]
 800f0c2:	3307      	adds	r3, #7
 800f0c4:	f023 0307 	bic.w	r3, r3, #7
 800f0c8:	3308      	adds	r3, #8
 800f0ca:	9303      	str	r3, [sp, #12]
 800f0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ce:	4433      	add	r3, r6
 800f0d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0d2:	e76a      	b.n	800efaa <_svfiprintf_r+0x52>
 800f0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0d8:	460c      	mov	r4, r1
 800f0da:	2001      	movs	r0, #1
 800f0dc:	e7a8      	b.n	800f030 <_svfiprintf_r+0xd8>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	3401      	adds	r4, #1
 800f0e2:	9305      	str	r3, [sp, #20]
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	f04f 0c0a 	mov.w	ip, #10
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0f0:	3a30      	subs	r2, #48	@ 0x30
 800f0f2:	2a09      	cmp	r2, #9
 800f0f4:	d903      	bls.n	800f0fe <_svfiprintf_r+0x1a6>
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d0c6      	beq.n	800f088 <_svfiprintf_r+0x130>
 800f0fa:	9105      	str	r1, [sp, #20]
 800f0fc:	e7c4      	b.n	800f088 <_svfiprintf_r+0x130>
 800f0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800f102:	4604      	mov	r4, r0
 800f104:	2301      	movs	r3, #1
 800f106:	e7f0      	b.n	800f0ea <_svfiprintf_r+0x192>
 800f108:	ab03      	add	r3, sp, #12
 800f10a:	9300      	str	r3, [sp, #0]
 800f10c:	462a      	mov	r2, r5
 800f10e:	4b0e      	ldr	r3, [pc, #56]	@ (800f148 <_svfiprintf_r+0x1f0>)
 800f110:	a904      	add	r1, sp, #16
 800f112:	4638      	mov	r0, r7
 800f114:	f7fd ff3c 	bl	800cf90 <_printf_float>
 800f118:	1c42      	adds	r2, r0, #1
 800f11a:	4606      	mov	r6, r0
 800f11c:	d1d6      	bne.n	800f0cc <_svfiprintf_r+0x174>
 800f11e:	89ab      	ldrh	r3, [r5, #12]
 800f120:	065b      	lsls	r3, r3, #25
 800f122:	f53f af2d 	bmi.w	800ef80 <_svfiprintf_r+0x28>
 800f126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f128:	e72c      	b.n	800ef84 <_svfiprintf_r+0x2c>
 800f12a:	ab03      	add	r3, sp, #12
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	462a      	mov	r2, r5
 800f130:	4b05      	ldr	r3, [pc, #20]	@ (800f148 <_svfiprintf_r+0x1f0>)
 800f132:	a904      	add	r1, sp, #16
 800f134:	4638      	mov	r0, r7
 800f136:	f7fe f9c3 	bl	800d4c0 <_printf_i>
 800f13a:	e7ed      	b.n	800f118 <_svfiprintf_r+0x1c0>
 800f13c:	080111f8 	.word	0x080111f8
 800f140:	08011202 	.word	0x08011202
 800f144:	0800cf91 	.word	0x0800cf91
 800f148:	0800eea1 	.word	0x0800eea1
 800f14c:	080111fe 	.word	0x080111fe

0800f150 <__sflush_r>:
 800f150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f158:	0716      	lsls	r6, r2, #28
 800f15a:	4605      	mov	r5, r0
 800f15c:	460c      	mov	r4, r1
 800f15e:	d454      	bmi.n	800f20a <__sflush_r+0xba>
 800f160:	684b      	ldr	r3, [r1, #4]
 800f162:	2b00      	cmp	r3, #0
 800f164:	dc02      	bgt.n	800f16c <__sflush_r+0x1c>
 800f166:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f168:	2b00      	cmp	r3, #0
 800f16a:	dd48      	ble.n	800f1fe <__sflush_r+0xae>
 800f16c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f16e:	2e00      	cmp	r6, #0
 800f170:	d045      	beq.n	800f1fe <__sflush_r+0xae>
 800f172:	2300      	movs	r3, #0
 800f174:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f178:	682f      	ldr	r7, [r5, #0]
 800f17a:	6a21      	ldr	r1, [r4, #32]
 800f17c:	602b      	str	r3, [r5, #0]
 800f17e:	d030      	beq.n	800f1e2 <__sflush_r+0x92>
 800f180:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f182:	89a3      	ldrh	r3, [r4, #12]
 800f184:	0759      	lsls	r1, r3, #29
 800f186:	d505      	bpl.n	800f194 <__sflush_r+0x44>
 800f188:	6863      	ldr	r3, [r4, #4]
 800f18a:	1ad2      	subs	r2, r2, r3
 800f18c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f18e:	b10b      	cbz	r3, 800f194 <__sflush_r+0x44>
 800f190:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f192:	1ad2      	subs	r2, r2, r3
 800f194:	2300      	movs	r3, #0
 800f196:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f198:	6a21      	ldr	r1, [r4, #32]
 800f19a:	4628      	mov	r0, r5
 800f19c:	47b0      	blx	r6
 800f19e:	1c43      	adds	r3, r0, #1
 800f1a0:	89a3      	ldrh	r3, [r4, #12]
 800f1a2:	d106      	bne.n	800f1b2 <__sflush_r+0x62>
 800f1a4:	6829      	ldr	r1, [r5, #0]
 800f1a6:	291d      	cmp	r1, #29
 800f1a8:	d82b      	bhi.n	800f202 <__sflush_r+0xb2>
 800f1aa:	4a2a      	ldr	r2, [pc, #168]	@ (800f254 <__sflush_r+0x104>)
 800f1ac:	410a      	asrs	r2, r1
 800f1ae:	07d6      	lsls	r6, r2, #31
 800f1b0:	d427      	bmi.n	800f202 <__sflush_r+0xb2>
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	6062      	str	r2, [r4, #4]
 800f1b6:	04d9      	lsls	r1, r3, #19
 800f1b8:	6922      	ldr	r2, [r4, #16]
 800f1ba:	6022      	str	r2, [r4, #0]
 800f1bc:	d504      	bpl.n	800f1c8 <__sflush_r+0x78>
 800f1be:	1c42      	adds	r2, r0, #1
 800f1c0:	d101      	bne.n	800f1c6 <__sflush_r+0x76>
 800f1c2:	682b      	ldr	r3, [r5, #0]
 800f1c4:	b903      	cbnz	r3, 800f1c8 <__sflush_r+0x78>
 800f1c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f1c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1ca:	602f      	str	r7, [r5, #0]
 800f1cc:	b1b9      	cbz	r1, 800f1fe <__sflush_r+0xae>
 800f1ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1d2:	4299      	cmp	r1, r3
 800f1d4:	d002      	beq.n	800f1dc <__sflush_r+0x8c>
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f7ff fa96 	bl	800e708 <_free_r>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1e0:	e00d      	b.n	800f1fe <__sflush_r+0xae>
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	47b0      	blx	r6
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	1c50      	adds	r0, r2, #1
 800f1ec:	d1c9      	bne.n	800f182 <__sflush_r+0x32>
 800f1ee:	682b      	ldr	r3, [r5, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d0c6      	beq.n	800f182 <__sflush_r+0x32>
 800f1f4:	2b1d      	cmp	r3, #29
 800f1f6:	d001      	beq.n	800f1fc <__sflush_r+0xac>
 800f1f8:	2b16      	cmp	r3, #22
 800f1fa:	d11e      	bne.n	800f23a <__sflush_r+0xea>
 800f1fc:	602f      	str	r7, [r5, #0]
 800f1fe:	2000      	movs	r0, #0
 800f200:	e022      	b.n	800f248 <__sflush_r+0xf8>
 800f202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f206:	b21b      	sxth	r3, r3
 800f208:	e01b      	b.n	800f242 <__sflush_r+0xf2>
 800f20a:	690f      	ldr	r7, [r1, #16]
 800f20c:	2f00      	cmp	r7, #0
 800f20e:	d0f6      	beq.n	800f1fe <__sflush_r+0xae>
 800f210:	0793      	lsls	r3, r2, #30
 800f212:	680e      	ldr	r6, [r1, #0]
 800f214:	bf08      	it	eq
 800f216:	694b      	ldreq	r3, [r1, #20]
 800f218:	600f      	str	r7, [r1, #0]
 800f21a:	bf18      	it	ne
 800f21c:	2300      	movne	r3, #0
 800f21e:	eba6 0807 	sub.w	r8, r6, r7
 800f222:	608b      	str	r3, [r1, #8]
 800f224:	f1b8 0f00 	cmp.w	r8, #0
 800f228:	dde9      	ble.n	800f1fe <__sflush_r+0xae>
 800f22a:	6a21      	ldr	r1, [r4, #32]
 800f22c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f22e:	4643      	mov	r3, r8
 800f230:	463a      	mov	r2, r7
 800f232:	4628      	mov	r0, r5
 800f234:	47b0      	blx	r6
 800f236:	2800      	cmp	r0, #0
 800f238:	dc08      	bgt.n	800f24c <__sflush_r+0xfc>
 800f23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f23e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f242:	81a3      	strh	r3, [r4, #12]
 800f244:	f04f 30ff 	mov.w	r0, #4294967295
 800f248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f24c:	4407      	add	r7, r0
 800f24e:	eba8 0800 	sub.w	r8, r8, r0
 800f252:	e7e7      	b.n	800f224 <__sflush_r+0xd4>
 800f254:	dfbffffe 	.word	0xdfbffffe

0800f258 <_fflush_r>:
 800f258:	b538      	push	{r3, r4, r5, lr}
 800f25a:	690b      	ldr	r3, [r1, #16]
 800f25c:	4605      	mov	r5, r0
 800f25e:	460c      	mov	r4, r1
 800f260:	b913      	cbnz	r3, 800f268 <_fflush_r+0x10>
 800f262:	2500      	movs	r5, #0
 800f264:	4628      	mov	r0, r5
 800f266:	bd38      	pop	{r3, r4, r5, pc}
 800f268:	b118      	cbz	r0, 800f272 <_fflush_r+0x1a>
 800f26a:	6a03      	ldr	r3, [r0, #32]
 800f26c:	b90b      	cbnz	r3, 800f272 <_fflush_r+0x1a>
 800f26e:	f7fe fad3 	bl	800d818 <__sinit>
 800f272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d0f3      	beq.n	800f262 <_fflush_r+0xa>
 800f27a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f27c:	07d0      	lsls	r0, r2, #31
 800f27e:	d404      	bmi.n	800f28a <_fflush_r+0x32>
 800f280:	0599      	lsls	r1, r3, #22
 800f282:	d402      	bmi.n	800f28a <_fflush_r+0x32>
 800f284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f286:	f7fe fbee 	bl	800da66 <__retarget_lock_acquire_recursive>
 800f28a:	4628      	mov	r0, r5
 800f28c:	4621      	mov	r1, r4
 800f28e:	f7ff ff5f 	bl	800f150 <__sflush_r>
 800f292:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f294:	07da      	lsls	r2, r3, #31
 800f296:	4605      	mov	r5, r0
 800f298:	d4e4      	bmi.n	800f264 <_fflush_r+0xc>
 800f29a:	89a3      	ldrh	r3, [r4, #12]
 800f29c:	059b      	lsls	r3, r3, #22
 800f29e:	d4e1      	bmi.n	800f264 <_fflush_r+0xc>
 800f2a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2a2:	f7fe fbe1 	bl	800da68 <__retarget_lock_release_recursive>
 800f2a6:	e7dd      	b.n	800f264 <_fflush_r+0xc>

0800f2a8 <memmove>:
 800f2a8:	4288      	cmp	r0, r1
 800f2aa:	b510      	push	{r4, lr}
 800f2ac:	eb01 0402 	add.w	r4, r1, r2
 800f2b0:	d902      	bls.n	800f2b8 <memmove+0x10>
 800f2b2:	4284      	cmp	r4, r0
 800f2b4:	4623      	mov	r3, r4
 800f2b6:	d807      	bhi.n	800f2c8 <memmove+0x20>
 800f2b8:	1e43      	subs	r3, r0, #1
 800f2ba:	42a1      	cmp	r1, r4
 800f2bc:	d008      	beq.n	800f2d0 <memmove+0x28>
 800f2be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2c6:	e7f8      	b.n	800f2ba <memmove+0x12>
 800f2c8:	4402      	add	r2, r0
 800f2ca:	4601      	mov	r1, r0
 800f2cc:	428a      	cmp	r2, r1
 800f2ce:	d100      	bne.n	800f2d2 <memmove+0x2a>
 800f2d0:	bd10      	pop	{r4, pc}
 800f2d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2da:	e7f7      	b.n	800f2cc <memmove+0x24>

0800f2dc <memcpy>:
 800f2dc:	440a      	add	r2, r1
 800f2de:	4291      	cmp	r1, r2
 800f2e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f2e4:	d100      	bne.n	800f2e8 <memcpy+0xc>
 800f2e6:	4770      	bx	lr
 800f2e8:	b510      	push	{r4, lr}
 800f2ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2f2:	4291      	cmp	r1, r2
 800f2f4:	d1f9      	bne.n	800f2ea <memcpy+0xe>
 800f2f6:	bd10      	pop	{r4, pc}

0800f2f8 <__assert_func>:
 800f2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2fa:	4614      	mov	r4, r2
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	4b09      	ldr	r3, [pc, #36]	@ (800f324 <__assert_func+0x2c>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4605      	mov	r5, r0
 800f304:	68d8      	ldr	r0, [r3, #12]
 800f306:	b954      	cbnz	r4, 800f31e <__assert_func+0x26>
 800f308:	4b07      	ldr	r3, [pc, #28]	@ (800f328 <__assert_func+0x30>)
 800f30a:	461c      	mov	r4, r3
 800f30c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f310:	9100      	str	r1, [sp, #0]
 800f312:	462b      	mov	r3, r5
 800f314:	4905      	ldr	r1, [pc, #20]	@ (800f32c <__assert_func+0x34>)
 800f316:	f000 f86f 	bl	800f3f8 <fiprintf>
 800f31a:	f000 f87f 	bl	800f41c <abort>
 800f31e:	4b04      	ldr	r3, [pc, #16]	@ (800f330 <__assert_func+0x38>)
 800f320:	e7f4      	b.n	800f30c <__assert_func+0x14>
 800f322:	bf00      	nop
 800f324:	20000020 	.word	0x20000020
 800f328:	0801124e 	.word	0x0801124e
 800f32c:	08011220 	.word	0x08011220
 800f330:	08011213 	.word	0x08011213

0800f334 <_calloc_r>:
 800f334:	b570      	push	{r4, r5, r6, lr}
 800f336:	fba1 5402 	umull	r5, r4, r1, r2
 800f33a:	b93c      	cbnz	r4, 800f34c <_calloc_r+0x18>
 800f33c:	4629      	mov	r1, r5
 800f33e:	f7fd fcfb 	bl	800cd38 <_malloc_r>
 800f342:	4606      	mov	r6, r0
 800f344:	b928      	cbnz	r0, 800f352 <_calloc_r+0x1e>
 800f346:	2600      	movs	r6, #0
 800f348:	4630      	mov	r0, r6
 800f34a:	bd70      	pop	{r4, r5, r6, pc}
 800f34c:	220c      	movs	r2, #12
 800f34e:	6002      	str	r2, [r0, #0]
 800f350:	e7f9      	b.n	800f346 <_calloc_r+0x12>
 800f352:	462a      	mov	r2, r5
 800f354:	4621      	mov	r1, r4
 800f356:	f7fe faf8 	bl	800d94a <memset>
 800f35a:	e7f5      	b.n	800f348 <_calloc_r+0x14>

0800f35c <__ascii_mbtowc>:
 800f35c:	b082      	sub	sp, #8
 800f35e:	b901      	cbnz	r1, 800f362 <__ascii_mbtowc+0x6>
 800f360:	a901      	add	r1, sp, #4
 800f362:	b142      	cbz	r2, 800f376 <__ascii_mbtowc+0x1a>
 800f364:	b14b      	cbz	r3, 800f37a <__ascii_mbtowc+0x1e>
 800f366:	7813      	ldrb	r3, [r2, #0]
 800f368:	600b      	str	r3, [r1, #0]
 800f36a:	7812      	ldrb	r2, [r2, #0]
 800f36c:	1e10      	subs	r0, r2, #0
 800f36e:	bf18      	it	ne
 800f370:	2001      	movne	r0, #1
 800f372:	b002      	add	sp, #8
 800f374:	4770      	bx	lr
 800f376:	4610      	mov	r0, r2
 800f378:	e7fb      	b.n	800f372 <__ascii_mbtowc+0x16>
 800f37a:	f06f 0001 	mvn.w	r0, #1
 800f37e:	e7f8      	b.n	800f372 <__ascii_mbtowc+0x16>

0800f380 <_realloc_r>:
 800f380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f384:	4680      	mov	r8, r0
 800f386:	4615      	mov	r5, r2
 800f388:	460c      	mov	r4, r1
 800f38a:	b921      	cbnz	r1, 800f396 <_realloc_r+0x16>
 800f38c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f390:	4611      	mov	r1, r2
 800f392:	f7fd bcd1 	b.w	800cd38 <_malloc_r>
 800f396:	b92a      	cbnz	r2, 800f3a4 <_realloc_r+0x24>
 800f398:	f7ff f9b6 	bl	800e708 <_free_r>
 800f39c:	2400      	movs	r4, #0
 800f39e:	4620      	mov	r0, r4
 800f3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3a4:	f000 f841 	bl	800f42a <_malloc_usable_size_r>
 800f3a8:	4285      	cmp	r5, r0
 800f3aa:	4606      	mov	r6, r0
 800f3ac:	d802      	bhi.n	800f3b4 <_realloc_r+0x34>
 800f3ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f3b2:	d8f4      	bhi.n	800f39e <_realloc_r+0x1e>
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	4640      	mov	r0, r8
 800f3b8:	f7fd fcbe 	bl	800cd38 <_malloc_r>
 800f3bc:	4607      	mov	r7, r0
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d0ec      	beq.n	800f39c <_realloc_r+0x1c>
 800f3c2:	42b5      	cmp	r5, r6
 800f3c4:	462a      	mov	r2, r5
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	bf28      	it	cs
 800f3ca:	4632      	movcs	r2, r6
 800f3cc:	f7ff ff86 	bl	800f2dc <memcpy>
 800f3d0:	4621      	mov	r1, r4
 800f3d2:	4640      	mov	r0, r8
 800f3d4:	f7ff f998 	bl	800e708 <_free_r>
 800f3d8:	463c      	mov	r4, r7
 800f3da:	e7e0      	b.n	800f39e <_realloc_r+0x1e>

0800f3dc <__ascii_wctomb>:
 800f3dc:	4603      	mov	r3, r0
 800f3de:	4608      	mov	r0, r1
 800f3e0:	b141      	cbz	r1, 800f3f4 <__ascii_wctomb+0x18>
 800f3e2:	2aff      	cmp	r2, #255	@ 0xff
 800f3e4:	d904      	bls.n	800f3f0 <__ascii_wctomb+0x14>
 800f3e6:	228a      	movs	r2, #138	@ 0x8a
 800f3e8:	601a      	str	r2, [r3, #0]
 800f3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ee:	4770      	bx	lr
 800f3f0:	700a      	strb	r2, [r1, #0]
 800f3f2:	2001      	movs	r0, #1
 800f3f4:	4770      	bx	lr
	...

0800f3f8 <fiprintf>:
 800f3f8:	b40e      	push	{r1, r2, r3}
 800f3fa:	b503      	push	{r0, r1, lr}
 800f3fc:	4601      	mov	r1, r0
 800f3fe:	ab03      	add	r3, sp, #12
 800f400:	4805      	ldr	r0, [pc, #20]	@ (800f418 <fiprintf+0x20>)
 800f402:	f853 2b04 	ldr.w	r2, [r3], #4
 800f406:	6800      	ldr	r0, [r0, #0]
 800f408:	9301      	str	r3, [sp, #4]
 800f40a:	f000 f83f 	bl	800f48c <_vfiprintf_r>
 800f40e:	b002      	add	sp, #8
 800f410:	f85d eb04 	ldr.w	lr, [sp], #4
 800f414:	b003      	add	sp, #12
 800f416:	4770      	bx	lr
 800f418:	20000020 	.word	0x20000020

0800f41c <abort>:
 800f41c:	b508      	push	{r3, lr}
 800f41e:	2006      	movs	r0, #6
 800f420:	f000 fa08 	bl	800f834 <raise>
 800f424:	2001      	movs	r0, #1
 800f426:	f7f4 f90d 	bl	8003644 <_exit>

0800f42a <_malloc_usable_size_r>:
 800f42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f42e:	1f18      	subs	r0, r3, #4
 800f430:	2b00      	cmp	r3, #0
 800f432:	bfbc      	itt	lt
 800f434:	580b      	ldrlt	r3, [r1, r0]
 800f436:	18c0      	addlt	r0, r0, r3
 800f438:	4770      	bx	lr

0800f43a <__sfputc_r>:
 800f43a:	6893      	ldr	r3, [r2, #8]
 800f43c:	3b01      	subs	r3, #1
 800f43e:	2b00      	cmp	r3, #0
 800f440:	b410      	push	{r4}
 800f442:	6093      	str	r3, [r2, #8]
 800f444:	da08      	bge.n	800f458 <__sfputc_r+0x1e>
 800f446:	6994      	ldr	r4, [r2, #24]
 800f448:	42a3      	cmp	r3, r4
 800f44a:	db01      	blt.n	800f450 <__sfputc_r+0x16>
 800f44c:	290a      	cmp	r1, #10
 800f44e:	d103      	bne.n	800f458 <__sfputc_r+0x1e>
 800f450:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f454:	f000 b932 	b.w	800f6bc <__swbuf_r>
 800f458:	6813      	ldr	r3, [r2, #0]
 800f45a:	1c58      	adds	r0, r3, #1
 800f45c:	6010      	str	r0, [r2, #0]
 800f45e:	7019      	strb	r1, [r3, #0]
 800f460:	4608      	mov	r0, r1
 800f462:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f466:	4770      	bx	lr

0800f468 <__sfputs_r>:
 800f468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46a:	4606      	mov	r6, r0
 800f46c:	460f      	mov	r7, r1
 800f46e:	4614      	mov	r4, r2
 800f470:	18d5      	adds	r5, r2, r3
 800f472:	42ac      	cmp	r4, r5
 800f474:	d101      	bne.n	800f47a <__sfputs_r+0x12>
 800f476:	2000      	movs	r0, #0
 800f478:	e007      	b.n	800f48a <__sfputs_r+0x22>
 800f47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f47e:	463a      	mov	r2, r7
 800f480:	4630      	mov	r0, r6
 800f482:	f7ff ffda 	bl	800f43a <__sfputc_r>
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	d1f3      	bne.n	800f472 <__sfputs_r+0xa>
 800f48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f48c <_vfiprintf_r>:
 800f48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f490:	460d      	mov	r5, r1
 800f492:	b09d      	sub	sp, #116	@ 0x74
 800f494:	4614      	mov	r4, r2
 800f496:	4698      	mov	r8, r3
 800f498:	4606      	mov	r6, r0
 800f49a:	b118      	cbz	r0, 800f4a4 <_vfiprintf_r+0x18>
 800f49c:	6a03      	ldr	r3, [r0, #32]
 800f49e:	b90b      	cbnz	r3, 800f4a4 <_vfiprintf_r+0x18>
 800f4a0:	f7fe f9ba 	bl	800d818 <__sinit>
 800f4a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4a6:	07d9      	lsls	r1, r3, #31
 800f4a8:	d405      	bmi.n	800f4b6 <_vfiprintf_r+0x2a>
 800f4aa:	89ab      	ldrh	r3, [r5, #12]
 800f4ac:	059a      	lsls	r2, r3, #22
 800f4ae:	d402      	bmi.n	800f4b6 <_vfiprintf_r+0x2a>
 800f4b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4b2:	f7fe fad8 	bl	800da66 <__retarget_lock_acquire_recursive>
 800f4b6:	89ab      	ldrh	r3, [r5, #12]
 800f4b8:	071b      	lsls	r3, r3, #28
 800f4ba:	d501      	bpl.n	800f4c0 <_vfiprintf_r+0x34>
 800f4bc:	692b      	ldr	r3, [r5, #16]
 800f4be:	b99b      	cbnz	r3, 800f4e8 <_vfiprintf_r+0x5c>
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	f000 f938 	bl	800f738 <__swsetup_r>
 800f4c8:	b170      	cbz	r0, 800f4e8 <_vfiprintf_r+0x5c>
 800f4ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4cc:	07dc      	lsls	r4, r3, #31
 800f4ce:	d504      	bpl.n	800f4da <_vfiprintf_r+0x4e>
 800f4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d4:	b01d      	add	sp, #116	@ 0x74
 800f4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4da:	89ab      	ldrh	r3, [r5, #12]
 800f4dc:	0598      	lsls	r0, r3, #22
 800f4de:	d4f7      	bmi.n	800f4d0 <_vfiprintf_r+0x44>
 800f4e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4e2:	f7fe fac1 	bl	800da68 <__retarget_lock_release_recursive>
 800f4e6:	e7f3      	b.n	800f4d0 <_vfiprintf_r+0x44>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4ec:	2320      	movs	r3, #32
 800f4ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4f6:	2330      	movs	r3, #48	@ 0x30
 800f4f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f6a8 <_vfiprintf_r+0x21c>
 800f4fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f500:	f04f 0901 	mov.w	r9, #1
 800f504:	4623      	mov	r3, r4
 800f506:	469a      	mov	sl, r3
 800f508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f50c:	b10a      	cbz	r2, 800f512 <_vfiprintf_r+0x86>
 800f50e:	2a25      	cmp	r2, #37	@ 0x25
 800f510:	d1f9      	bne.n	800f506 <_vfiprintf_r+0x7a>
 800f512:	ebba 0b04 	subs.w	fp, sl, r4
 800f516:	d00b      	beq.n	800f530 <_vfiprintf_r+0xa4>
 800f518:	465b      	mov	r3, fp
 800f51a:	4622      	mov	r2, r4
 800f51c:	4629      	mov	r1, r5
 800f51e:	4630      	mov	r0, r6
 800f520:	f7ff ffa2 	bl	800f468 <__sfputs_r>
 800f524:	3001      	adds	r0, #1
 800f526:	f000 80a7 	beq.w	800f678 <_vfiprintf_r+0x1ec>
 800f52a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f52c:	445a      	add	r2, fp
 800f52e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f530:	f89a 3000 	ldrb.w	r3, [sl]
 800f534:	2b00      	cmp	r3, #0
 800f536:	f000 809f 	beq.w	800f678 <_vfiprintf_r+0x1ec>
 800f53a:	2300      	movs	r3, #0
 800f53c:	f04f 32ff 	mov.w	r2, #4294967295
 800f540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f544:	f10a 0a01 	add.w	sl, sl, #1
 800f548:	9304      	str	r3, [sp, #16]
 800f54a:	9307      	str	r3, [sp, #28]
 800f54c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f550:	931a      	str	r3, [sp, #104]	@ 0x68
 800f552:	4654      	mov	r4, sl
 800f554:	2205      	movs	r2, #5
 800f556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f55a:	4853      	ldr	r0, [pc, #332]	@ (800f6a8 <_vfiprintf_r+0x21c>)
 800f55c:	f7f0 fe60 	bl	8000220 <memchr>
 800f560:	9a04      	ldr	r2, [sp, #16]
 800f562:	b9d8      	cbnz	r0, 800f59c <_vfiprintf_r+0x110>
 800f564:	06d1      	lsls	r1, r2, #27
 800f566:	bf44      	itt	mi
 800f568:	2320      	movmi	r3, #32
 800f56a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f56e:	0713      	lsls	r3, r2, #28
 800f570:	bf44      	itt	mi
 800f572:	232b      	movmi	r3, #43	@ 0x2b
 800f574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f578:	f89a 3000 	ldrb.w	r3, [sl]
 800f57c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f57e:	d015      	beq.n	800f5ac <_vfiprintf_r+0x120>
 800f580:	9a07      	ldr	r2, [sp, #28]
 800f582:	4654      	mov	r4, sl
 800f584:	2000      	movs	r0, #0
 800f586:	f04f 0c0a 	mov.w	ip, #10
 800f58a:	4621      	mov	r1, r4
 800f58c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f590:	3b30      	subs	r3, #48	@ 0x30
 800f592:	2b09      	cmp	r3, #9
 800f594:	d94b      	bls.n	800f62e <_vfiprintf_r+0x1a2>
 800f596:	b1b0      	cbz	r0, 800f5c6 <_vfiprintf_r+0x13a>
 800f598:	9207      	str	r2, [sp, #28]
 800f59a:	e014      	b.n	800f5c6 <_vfiprintf_r+0x13a>
 800f59c:	eba0 0308 	sub.w	r3, r0, r8
 800f5a0:	fa09 f303 	lsl.w	r3, r9, r3
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	9304      	str	r3, [sp, #16]
 800f5a8:	46a2      	mov	sl, r4
 800f5aa:	e7d2      	b.n	800f552 <_vfiprintf_r+0xc6>
 800f5ac:	9b03      	ldr	r3, [sp, #12]
 800f5ae:	1d19      	adds	r1, r3, #4
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	9103      	str	r1, [sp, #12]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	bfbb      	ittet	lt
 800f5b8:	425b      	neglt	r3, r3
 800f5ba:	f042 0202 	orrlt.w	r2, r2, #2
 800f5be:	9307      	strge	r3, [sp, #28]
 800f5c0:	9307      	strlt	r3, [sp, #28]
 800f5c2:	bfb8      	it	lt
 800f5c4:	9204      	strlt	r2, [sp, #16]
 800f5c6:	7823      	ldrb	r3, [r4, #0]
 800f5c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5ca:	d10a      	bne.n	800f5e2 <_vfiprintf_r+0x156>
 800f5cc:	7863      	ldrb	r3, [r4, #1]
 800f5ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5d0:	d132      	bne.n	800f638 <_vfiprintf_r+0x1ac>
 800f5d2:	9b03      	ldr	r3, [sp, #12]
 800f5d4:	1d1a      	adds	r2, r3, #4
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	9203      	str	r2, [sp, #12]
 800f5da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f5de:	3402      	adds	r4, #2
 800f5e0:	9305      	str	r3, [sp, #20]
 800f5e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f6b8 <_vfiprintf_r+0x22c>
 800f5e6:	7821      	ldrb	r1, [r4, #0]
 800f5e8:	2203      	movs	r2, #3
 800f5ea:	4650      	mov	r0, sl
 800f5ec:	f7f0 fe18 	bl	8000220 <memchr>
 800f5f0:	b138      	cbz	r0, 800f602 <_vfiprintf_r+0x176>
 800f5f2:	9b04      	ldr	r3, [sp, #16]
 800f5f4:	eba0 000a 	sub.w	r0, r0, sl
 800f5f8:	2240      	movs	r2, #64	@ 0x40
 800f5fa:	4082      	lsls	r2, r0
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	3401      	adds	r4, #1
 800f600:	9304      	str	r3, [sp, #16]
 800f602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f606:	4829      	ldr	r0, [pc, #164]	@ (800f6ac <_vfiprintf_r+0x220>)
 800f608:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f60c:	2206      	movs	r2, #6
 800f60e:	f7f0 fe07 	bl	8000220 <memchr>
 800f612:	2800      	cmp	r0, #0
 800f614:	d03f      	beq.n	800f696 <_vfiprintf_r+0x20a>
 800f616:	4b26      	ldr	r3, [pc, #152]	@ (800f6b0 <_vfiprintf_r+0x224>)
 800f618:	bb1b      	cbnz	r3, 800f662 <_vfiprintf_r+0x1d6>
 800f61a:	9b03      	ldr	r3, [sp, #12]
 800f61c:	3307      	adds	r3, #7
 800f61e:	f023 0307 	bic.w	r3, r3, #7
 800f622:	3308      	adds	r3, #8
 800f624:	9303      	str	r3, [sp, #12]
 800f626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f628:	443b      	add	r3, r7
 800f62a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f62c:	e76a      	b.n	800f504 <_vfiprintf_r+0x78>
 800f62e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f632:	460c      	mov	r4, r1
 800f634:	2001      	movs	r0, #1
 800f636:	e7a8      	b.n	800f58a <_vfiprintf_r+0xfe>
 800f638:	2300      	movs	r3, #0
 800f63a:	3401      	adds	r4, #1
 800f63c:	9305      	str	r3, [sp, #20]
 800f63e:	4619      	mov	r1, r3
 800f640:	f04f 0c0a 	mov.w	ip, #10
 800f644:	4620      	mov	r0, r4
 800f646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f64a:	3a30      	subs	r2, #48	@ 0x30
 800f64c:	2a09      	cmp	r2, #9
 800f64e:	d903      	bls.n	800f658 <_vfiprintf_r+0x1cc>
 800f650:	2b00      	cmp	r3, #0
 800f652:	d0c6      	beq.n	800f5e2 <_vfiprintf_r+0x156>
 800f654:	9105      	str	r1, [sp, #20]
 800f656:	e7c4      	b.n	800f5e2 <_vfiprintf_r+0x156>
 800f658:	fb0c 2101 	mla	r1, ip, r1, r2
 800f65c:	4604      	mov	r4, r0
 800f65e:	2301      	movs	r3, #1
 800f660:	e7f0      	b.n	800f644 <_vfiprintf_r+0x1b8>
 800f662:	ab03      	add	r3, sp, #12
 800f664:	9300      	str	r3, [sp, #0]
 800f666:	462a      	mov	r2, r5
 800f668:	4b12      	ldr	r3, [pc, #72]	@ (800f6b4 <_vfiprintf_r+0x228>)
 800f66a:	a904      	add	r1, sp, #16
 800f66c:	4630      	mov	r0, r6
 800f66e:	f7fd fc8f 	bl	800cf90 <_printf_float>
 800f672:	4607      	mov	r7, r0
 800f674:	1c78      	adds	r0, r7, #1
 800f676:	d1d6      	bne.n	800f626 <_vfiprintf_r+0x19a>
 800f678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f67a:	07d9      	lsls	r1, r3, #31
 800f67c:	d405      	bmi.n	800f68a <_vfiprintf_r+0x1fe>
 800f67e:	89ab      	ldrh	r3, [r5, #12]
 800f680:	059a      	lsls	r2, r3, #22
 800f682:	d402      	bmi.n	800f68a <_vfiprintf_r+0x1fe>
 800f684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f686:	f7fe f9ef 	bl	800da68 <__retarget_lock_release_recursive>
 800f68a:	89ab      	ldrh	r3, [r5, #12]
 800f68c:	065b      	lsls	r3, r3, #25
 800f68e:	f53f af1f 	bmi.w	800f4d0 <_vfiprintf_r+0x44>
 800f692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f694:	e71e      	b.n	800f4d4 <_vfiprintf_r+0x48>
 800f696:	ab03      	add	r3, sp, #12
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	462a      	mov	r2, r5
 800f69c:	4b05      	ldr	r3, [pc, #20]	@ (800f6b4 <_vfiprintf_r+0x228>)
 800f69e:	a904      	add	r1, sp, #16
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	f7fd ff0d 	bl	800d4c0 <_printf_i>
 800f6a6:	e7e4      	b.n	800f672 <_vfiprintf_r+0x1e6>
 800f6a8:	080111f8 	.word	0x080111f8
 800f6ac:	08011202 	.word	0x08011202
 800f6b0:	0800cf91 	.word	0x0800cf91
 800f6b4:	0800f469 	.word	0x0800f469
 800f6b8:	080111fe 	.word	0x080111fe

0800f6bc <__swbuf_r>:
 800f6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6be:	460e      	mov	r6, r1
 800f6c0:	4614      	mov	r4, r2
 800f6c2:	4605      	mov	r5, r0
 800f6c4:	b118      	cbz	r0, 800f6ce <__swbuf_r+0x12>
 800f6c6:	6a03      	ldr	r3, [r0, #32]
 800f6c8:	b90b      	cbnz	r3, 800f6ce <__swbuf_r+0x12>
 800f6ca:	f7fe f8a5 	bl	800d818 <__sinit>
 800f6ce:	69a3      	ldr	r3, [r4, #24]
 800f6d0:	60a3      	str	r3, [r4, #8]
 800f6d2:	89a3      	ldrh	r3, [r4, #12]
 800f6d4:	071a      	lsls	r2, r3, #28
 800f6d6:	d501      	bpl.n	800f6dc <__swbuf_r+0x20>
 800f6d8:	6923      	ldr	r3, [r4, #16]
 800f6da:	b943      	cbnz	r3, 800f6ee <__swbuf_r+0x32>
 800f6dc:	4621      	mov	r1, r4
 800f6de:	4628      	mov	r0, r5
 800f6e0:	f000 f82a 	bl	800f738 <__swsetup_r>
 800f6e4:	b118      	cbz	r0, 800f6ee <__swbuf_r+0x32>
 800f6e6:	f04f 37ff 	mov.w	r7, #4294967295
 800f6ea:	4638      	mov	r0, r7
 800f6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6ee:	6823      	ldr	r3, [r4, #0]
 800f6f0:	6922      	ldr	r2, [r4, #16]
 800f6f2:	1a98      	subs	r0, r3, r2
 800f6f4:	6963      	ldr	r3, [r4, #20]
 800f6f6:	b2f6      	uxtb	r6, r6
 800f6f8:	4283      	cmp	r3, r0
 800f6fa:	4637      	mov	r7, r6
 800f6fc:	dc05      	bgt.n	800f70a <__swbuf_r+0x4e>
 800f6fe:	4621      	mov	r1, r4
 800f700:	4628      	mov	r0, r5
 800f702:	f7ff fda9 	bl	800f258 <_fflush_r>
 800f706:	2800      	cmp	r0, #0
 800f708:	d1ed      	bne.n	800f6e6 <__swbuf_r+0x2a>
 800f70a:	68a3      	ldr	r3, [r4, #8]
 800f70c:	3b01      	subs	r3, #1
 800f70e:	60a3      	str	r3, [r4, #8]
 800f710:	6823      	ldr	r3, [r4, #0]
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	6022      	str	r2, [r4, #0]
 800f716:	701e      	strb	r6, [r3, #0]
 800f718:	6962      	ldr	r2, [r4, #20]
 800f71a:	1c43      	adds	r3, r0, #1
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d004      	beq.n	800f72a <__swbuf_r+0x6e>
 800f720:	89a3      	ldrh	r3, [r4, #12]
 800f722:	07db      	lsls	r3, r3, #31
 800f724:	d5e1      	bpl.n	800f6ea <__swbuf_r+0x2e>
 800f726:	2e0a      	cmp	r6, #10
 800f728:	d1df      	bne.n	800f6ea <__swbuf_r+0x2e>
 800f72a:	4621      	mov	r1, r4
 800f72c:	4628      	mov	r0, r5
 800f72e:	f7ff fd93 	bl	800f258 <_fflush_r>
 800f732:	2800      	cmp	r0, #0
 800f734:	d0d9      	beq.n	800f6ea <__swbuf_r+0x2e>
 800f736:	e7d6      	b.n	800f6e6 <__swbuf_r+0x2a>

0800f738 <__swsetup_r>:
 800f738:	b538      	push	{r3, r4, r5, lr}
 800f73a:	4b29      	ldr	r3, [pc, #164]	@ (800f7e0 <__swsetup_r+0xa8>)
 800f73c:	4605      	mov	r5, r0
 800f73e:	6818      	ldr	r0, [r3, #0]
 800f740:	460c      	mov	r4, r1
 800f742:	b118      	cbz	r0, 800f74c <__swsetup_r+0x14>
 800f744:	6a03      	ldr	r3, [r0, #32]
 800f746:	b90b      	cbnz	r3, 800f74c <__swsetup_r+0x14>
 800f748:	f7fe f866 	bl	800d818 <__sinit>
 800f74c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f750:	0719      	lsls	r1, r3, #28
 800f752:	d422      	bmi.n	800f79a <__swsetup_r+0x62>
 800f754:	06da      	lsls	r2, r3, #27
 800f756:	d407      	bmi.n	800f768 <__swsetup_r+0x30>
 800f758:	2209      	movs	r2, #9
 800f75a:	602a      	str	r2, [r5, #0]
 800f75c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f760:	81a3      	strh	r3, [r4, #12]
 800f762:	f04f 30ff 	mov.w	r0, #4294967295
 800f766:	e033      	b.n	800f7d0 <__swsetup_r+0x98>
 800f768:	0758      	lsls	r0, r3, #29
 800f76a:	d512      	bpl.n	800f792 <__swsetup_r+0x5a>
 800f76c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f76e:	b141      	cbz	r1, 800f782 <__swsetup_r+0x4a>
 800f770:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f774:	4299      	cmp	r1, r3
 800f776:	d002      	beq.n	800f77e <__swsetup_r+0x46>
 800f778:	4628      	mov	r0, r5
 800f77a:	f7fe ffc5 	bl	800e708 <_free_r>
 800f77e:	2300      	movs	r3, #0
 800f780:	6363      	str	r3, [r4, #52]	@ 0x34
 800f782:	89a3      	ldrh	r3, [r4, #12]
 800f784:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f788:	81a3      	strh	r3, [r4, #12]
 800f78a:	2300      	movs	r3, #0
 800f78c:	6063      	str	r3, [r4, #4]
 800f78e:	6923      	ldr	r3, [r4, #16]
 800f790:	6023      	str	r3, [r4, #0]
 800f792:	89a3      	ldrh	r3, [r4, #12]
 800f794:	f043 0308 	orr.w	r3, r3, #8
 800f798:	81a3      	strh	r3, [r4, #12]
 800f79a:	6923      	ldr	r3, [r4, #16]
 800f79c:	b94b      	cbnz	r3, 800f7b2 <__swsetup_r+0x7a>
 800f79e:	89a3      	ldrh	r3, [r4, #12]
 800f7a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f7a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f7a8:	d003      	beq.n	800f7b2 <__swsetup_r+0x7a>
 800f7aa:	4621      	mov	r1, r4
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	f000 f883 	bl	800f8b8 <__smakebuf_r>
 800f7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7b6:	f013 0201 	ands.w	r2, r3, #1
 800f7ba:	d00a      	beq.n	800f7d2 <__swsetup_r+0x9a>
 800f7bc:	2200      	movs	r2, #0
 800f7be:	60a2      	str	r2, [r4, #8]
 800f7c0:	6962      	ldr	r2, [r4, #20]
 800f7c2:	4252      	negs	r2, r2
 800f7c4:	61a2      	str	r2, [r4, #24]
 800f7c6:	6922      	ldr	r2, [r4, #16]
 800f7c8:	b942      	cbnz	r2, 800f7dc <__swsetup_r+0xa4>
 800f7ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f7ce:	d1c5      	bne.n	800f75c <__swsetup_r+0x24>
 800f7d0:	bd38      	pop	{r3, r4, r5, pc}
 800f7d2:	0799      	lsls	r1, r3, #30
 800f7d4:	bf58      	it	pl
 800f7d6:	6962      	ldrpl	r2, [r4, #20]
 800f7d8:	60a2      	str	r2, [r4, #8]
 800f7da:	e7f4      	b.n	800f7c6 <__swsetup_r+0x8e>
 800f7dc:	2000      	movs	r0, #0
 800f7de:	e7f7      	b.n	800f7d0 <__swsetup_r+0x98>
 800f7e0:	20000020 	.word	0x20000020

0800f7e4 <_raise_r>:
 800f7e4:	291f      	cmp	r1, #31
 800f7e6:	b538      	push	{r3, r4, r5, lr}
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	d904      	bls.n	800f7f8 <_raise_r+0x14>
 800f7ee:	2316      	movs	r3, #22
 800f7f0:	6003      	str	r3, [r0, #0]
 800f7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f6:	bd38      	pop	{r3, r4, r5, pc}
 800f7f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f7fa:	b112      	cbz	r2, 800f802 <_raise_r+0x1e>
 800f7fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f800:	b94b      	cbnz	r3, 800f816 <_raise_r+0x32>
 800f802:	4628      	mov	r0, r5
 800f804:	f000 f830 	bl	800f868 <_getpid_r>
 800f808:	4622      	mov	r2, r4
 800f80a:	4601      	mov	r1, r0
 800f80c:	4628      	mov	r0, r5
 800f80e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f812:	f000 b817 	b.w	800f844 <_kill_r>
 800f816:	2b01      	cmp	r3, #1
 800f818:	d00a      	beq.n	800f830 <_raise_r+0x4c>
 800f81a:	1c59      	adds	r1, r3, #1
 800f81c:	d103      	bne.n	800f826 <_raise_r+0x42>
 800f81e:	2316      	movs	r3, #22
 800f820:	6003      	str	r3, [r0, #0]
 800f822:	2001      	movs	r0, #1
 800f824:	e7e7      	b.n	800f7f6 <_raise_r+0x12>
 800f826:	2100      	movs	r1, #0
 800f828:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f82c:	4620      	mov	r0, r4
 800f82e:	4798      	blx	r3
 800f830:	2000      	movs	r0, #0
 800f832:	e7e0      	b.n	800f7f6 <_raise_r+0x12>

0800f834 <raise>:
 800f834:	4b02      	ldr	r3, [pc, #8]	@ (800f840 <raise+0xc>)
 800f836:	4601      	mov	r1, r0
 800f838:	6818      	ldr	r0, [r3, #0]
 800f83a:	f7ff bfd3 	b.w	800f7e4 <_raise_r>
 800f83e:	bf00      	nop
 800f840:	20000020 	.word	0x20000020

0800f844 <_kill_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4d07      	ldr	r5, [pc, #28]	@ (800f864 <_kill_r+0x20>)
 800f848:	2300      	movs	r3, #0
 800f84a:	4604      	mov	r4, r0
 800f84c:	4608      	mov	r0, r1
 800f84e:	4611      	mov	r1, r2
 800f850:	602b      	str	r3, [r5, #0]
 800f852:	f7f3 fee7 	bl	8003624 <_kill>
 800f856:	1c43      	adds	r3, r0, #1
 800f858:	d102      	bne.n	800f860 <_kill_r+0x1c>
 800f85a:	682b      	ldr	r3, [r5, #0]
 800f85c:	b103      	cbz	r3, 800f860 <_kill_r+0x1c>
 800f85e:	6023      	str	r3, [r4, #0]
 800f860:	bd38      	pop	{r3, r4, r5, pc}
 800f862:	bf00      	nop
 800f864:	20000a30 	.word	0x20000a30

0800f868 <_getpid_r>:
 800f868:	f7f3 bed4 	b.w	8003614 <_getpid>

0800f86c <__swhatbuf_r>:
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	460c      	mov	r4, r1
 800f870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f874:	2900      	cmp	r1, #0
 800f876:	b096      	sub	sp, #88	@ 0x58
 800f878:	4615      	mov	r5, r2
 800f87a:	461e      	mov	r6, r3
 800f87c:	da0d      	bge.n	800f89a <__swhatbuf_r+0x2e>
 800f87e:	89a3      	ldrh	r3, [r4, #12]
 800f880:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f884:	f04f 0100 	mov.w	r1, #0
 800f888:	bf14      	ite	ne
 800f88a:	2340      	movne	r3, #64	@ 0x40
 800f88c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f890:	2000      	movs	r0, #0
 800f892:	6031      	str	r1, [r6, #0]
 800f894:	602b      	str	r3, [r5, #0]
 800f896:	b016      	add	sp, #88	@ 0x58
 800f898:	bd70      	pop	{r4, r5, r6, pc}
 800f89a:	466a      	mov	r2, sp
 800f89c:	f000 f848 	bl	800f930 <_fstat_r>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	dbec      	blt.n	800f87e <__swhatbuf_r+0x12>
 800f8a4:	9901      	ldr	r1, [sp, #4]
 800f8a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f8aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f8ae:	4259      	negs	r1, r3
 800f8b0:	4159      	adcs	r1, r3
 800f8b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f8b6:	e7eb      	b.n	800f890 <__swhatbuf_r+0x24>

0800f8b8 <__smakebuf_r>:
 800f8b8:	898b      	ldrh	r3, [r1, #12]
 800f8ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8bc:	079d      	lsls	r5, r3, #30
 800f8be:	4606      	mov	r6, r0
 800f8c0:	460c      	mov	r4, r1
 800f8c2:	d507      	bpl.n	800f8d4 <__smakebuf_r+0x1c>
 800f8c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f8c8:	6023      	str	r3, [r4, #0]
 800f8ca:	6123      	str	r3, [r4, #16]
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	6163      	str	r3, [r4, #20]
 800f8d0:	b003      	add	sp, #12
 800f8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8d4:	ab01      	add	r3, sp, #4
 800f8d6:	466a      	mov	r2, sp
 800f8d8:	f7ff ffc8 	bl	800f86c <__swhatbuf_r>
 800f8dc:	9f00      	ldr	r7, [sp, #0]
 800f8de:	4605      	mov	r5, r0
 800f8e0:	4639      	mov	r1, r7
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f7fd fa28 	bl	800cd38 <_malloc_r>
 800f8e8:	b948      	cbnz	r0, 800f8fe <__smakebuf_r+0x46>
 800f8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8ee:	059a      	lsls	r2, r3, #22
 800f8f0:	d4ee      	bmi.n	800f8d0 <__smakebuf_r+0x18>
 800f8f2:	f023 0303 	bic.w	r3, r3, #3
 800f8f6:	f043 0302 	orr.w	r3, r3, #2
 800f8fa:	81a3      	strh	r3, [r4, #12]
 800f8fc:	e7e2      	b.n	800f8c4 <__smakebuf_r+0xc>
 800f8fe:	89a3      	ldrh	r3, [r4, #12]
 800f900:	6020      	str	r0, [r4, #0]
 800f902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f906:	81a3      	strh	r3, [r4, #12]
 800f908:	9b01      	ldr	r3, [sp, #4]
 800f90a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f90e:	b15b      	cbz	r3, 800f928 <__smakebuf_r+0x70>
 800f910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f914:	4630      	mov	r0, r6
 800f916:	f000 f81d 	bl	800f954 <_isatty_r>
 800f91a:	b128      	cbz	r0, 800f928 <__smakebuf_r+0x70>
 800f91c:	89a3      	ldrh	r3, [r4, #12]
 800f91e:	f023 0303 	bic.w	r3, r3, #3
 800f922:	f043 0301 	orr.w	r3, r3, #1
 800f926:	81a3      	strh	r3, [r4, #12]
 800f928:	89a3      	ldrh	r3, [r4, #12]
 800f92a:	431d      	orrs	r5, r3
 800f92c:	81a5      	strh	r5, [r4, #12]
 800f92e:	e7cf      	b.n	800f8d0 <__smakebuf_r+0x18>

0800f930 <_fstat_r>:
 800f930:	b538      	push	{r3, r4, r5, lr}
 800f932:	4d07      	ldr	r5, [pc, #28]	@ (800f950 <_fstat_r+0x20>)
 800f934:	2300      	movs	r3, #0
 800f936:	4604      	mov	r4, r0
 800f938:	4608      	mov	r0, r1
 800f93a:	4611      	mov	r1, r2
 800f93c:	602b      	str	r3, [r5, #0]
 800f93e:	f7f3 fed1 	bl	80036e4 <_fstat>
 800f942:	1c43      	adds	r3, r0, #1
 800f944:	d102      	bne.n	800f94c <_fstat_r+0x1c>
 800f946:	682b      	ldr	r3, [r5, #0]
 800f948:	b103      	cbz	r3, 800f94c <_fstat_r+0x1c>
 800f94a:	6023      	str	r3, [r4, #0]
 800f94c:	bd38      	pop	{r3, r4, r5, pc}
 800f94e:	bf00      	nop
 800f950:	20000a30 	.word	0x20000a30

0800f954 <_isatty_r>:
 800f954:	b538      	push	{r3, r4, r5, lr}
 800f956:	4d06      	ldr	r5, [pc, #24]	@ (800f970 <_isatty_r+0x1c>)
 800f958:	2300      	movs	r3, #0
 800f95a:	4604      	mov	r4, r0
 800f95c:	4608      	mov	r0, r1
 800f95e:	602b      	str	r3, [r5, #0]
 800f960:	f7f3 fed0 	bl	8003704 <_isatty>
 800f964:	1c43      	adds	r3, r0, #1
 800f966:	d102      	bne.n	800f96e <_isatty_r+0x1a>
 800f968:	682b      	ldr	r3, [r5, #0]
 800f96a:	b103      	cbz	r3, 800f96e <_isatty_r+0x1a>
 800f96c:	6023      	str	r3, [r4, #0]
 800f96e:	bd38      	pop	{r3, r4, r5, pc}
 800f970:	20000a30 	.word	0x20000a30

0800f974 <sinf>:
 800f974:	ee10 3a10 	vmov	r3, s0
 800f978:	b507      	push	{r0, r1, r2, lr}
 800f97a:	4a1f      	ldr	r2, [pc, #124]	@ (800f9f8 <sinf+0x84>)
 800f97c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f980:	4293      	cmp	r3, r2
 800f982:	d807      	bhi.n	800f994 <sinf+0x20>
 800f984:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f9fc <sinf+0x88>
 800f988:	2000      	movs	r0, #0
 800f98a:	b003      	add	sp, #12
 800f98c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f990:	f000 b88e 	b.w	800fab0 <__kernel_sinf>
 800f994:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f998:	d304      	bcc.n	800f9a4 <sinf+0x30>
 800f99a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f99e:	b003      	add	sp, #12
 800f9a0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9a4:	4668      	mov	r0, sp
 800f9a6:	f000 f8cb 	bl	800fb40 <__ieee754_rem_pio2f>
 800f9aa:	f000 0003 	and.w	r0, r0, #3
 800f9ae:	2801      	cmp	r0, #1
 800f9b0:	d00a      	beq.n	800f9c8 <sinf+0x54>
 800f9b2:	2802      	cmp	r0, #2
 800f9b4:	d00f      	beq.n	800f9d6 <sinf+0x62>
 800f9b6:	b9c0      	cbnz	r0, 800f9ea <sinf+0x76>
 800f9b8:	eddd 0a01 	vldr	s1, [sp, #4]
 800f9bc:	ed9d 0a00 	vldr	s0, [sp]
 800f9c0:	2001      	movs	r0, #1
 800f9c2:	f000 f875 	bl	800fab0 <__kernel_sinf>
 800f9c6:	e7ea      	b.n	800f99e <sinf+0x2a>
 800f9c8:	eddd 0a01 	vldr	s1, [sp, #4]
 800f9cc:	ed9d 0a00 	vldr	s0, [sp]
 800f9d0:	f000 f816 	bl	800fa00 <__kernel_cosf>
 800f9d4:	e7e3      	b.n	800f99e <sinf+0x2a>
 800f9d6:	eddd 0a01 	vldr	s1, [sp, #4]
 800f9da:	ed9d 0a00 	vldr	s0, [sp]
 800f9de:	2001      	movs	r0, #1
 800f9e0:	f000 f866 	bl	800fab0 <__kernel_sinf>
 800f9e4:	eeb1 0a40 	vneg.f32	s0, s0
 800f9e8:	e7d9      	b.n	800f99e <sinf+0x2a>
 800f9ea:	eddd 0a01 	vldr	s1, [sp, #4]
 800f9ee:	ed9d 0a00 	vldr	s0, [sp]
 800f9f2:	f000 f805 	bl	800fa00 <__kernel_cosf>
 800f9f6:	e7f5      	b.n	800f9e4 <sinf+0x70>
 800f9f8:	3f490fd8 	.word	0x3f490fd8
 800f9fc:	00000000 	.word	0x00000000

0800fa00 <__kernel_cosf>:
 800fa00:	ee10 3a10 	vmov	r3, s0
 800fa04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fa08:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fa0c:	eef0 6a40 	vmov.f32	s13, s0
 800fa10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fa14:	d204      	bcs.n	800fa20 <__kernel_cosf+0x20>
 800fa16:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800fa1a:	ee17 2a90 	vmov	r2, s15
 800fa1e:	b342      	cbz	r2, 800fa72 <__kernel_cosf+0x72>
 800fa20:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fa24:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800fa90 <__kernel_cosf+0x90>
 800fa28:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800fa94 <__kernel_cosf+0x94>
 800fa2c:	4a1a      	ldr	r2, [pc, #104]	@ (800fa98 <__kernel_cosf+0x98>)
 800fa2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fa32:	4293      	cmp	r3, r2
 800fa34:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fa9c <__kernel_cosf+0x9c>
 800fa38:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fa3c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800faa0 <__kernel_cosf+0xa0>
 800fa40:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fa44:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800faa4 <__kernel_cosf+0xa4>
 800fa48:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fa4c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800faa8 <__kernel_cosf+0xa8>
 800fa50:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fa54:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800fa58:	ee26 6a07 	vmul.f32	s12, s12, s14
 800fa5c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fa60:	eee7 0a06 	vfma.f32	s1, s14, s12
 800fa64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa68:	d804      	bhi.n	800fa74 <__kernel_cosf+0x74>
 800fa6a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fa6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fa72:	4770      	bx	lr
 800fa74:	4a0d      	ldr	r2, [pc, #52]	@ (800faac <__kernel_cosf+0xac>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	bf9a      	itte	ls
 800fa7a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800fa7e:	ee07 3a10 	vmovls	s14, r3
 800fa82:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800fa86:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fa8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa8e:	e7ec      	b.n	800fa6a <__kernel_cosf+0x6a>
 800fa90:	ad47d74e 	.word	0xad47d74e
 800fa94:	310f74f6 	.word	0x310f74f6
 800fa98:	3e999999 	.word	0x3e999999
 800fa9c:	b493f27c 	.word	0xb493f27c
 800faa0:	37d00d01 	.word	0x37d00d01
 800faa4:	bab60b61 	.word	0xbab60b61
 800faa8:	3d2aaaab 	.word	0x3d2aaaab
 800faac:	3f480000 	.word	0x3f480000

0800fab0 <__kernel_sinf>:
 800fab0:	ee10 3a10 	vmov	r3, s0
 800fab4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fab8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fabc:	d204      	bcs.n	800fac8 <__kernel_sinf+0x18>
 800fabe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fac2:	ee17 3a90 	vmov	r3, s15
 800fac6:	b35b      	cbz	r3, 800fb20 <__kernel_sinf+0x70>
 800fac8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800facc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800fb24 <__kernel_sinf+0x74>
 800fad0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800fb28 <__kernel_sinf+0x78>
 800fad4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fad8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800fb2c <__kernel_sinf+0x7c>
 800fadc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fae0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800fb30 <__kernel_sinf+0x80>
 800fae4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fae8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800fb34 <__kernel_sinf+0x84>
 800faec:	ee60 6a07 	vmul.f32	s13, s0, s14
 800faf0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800faf4:	b930      	cbnz	r0, 800fb04 <__kernel_sinf+0x54>
 800faf6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800fb38 <__kernel_sinf+0x88>
 800fafa:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fafe:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fb02:	4770      	bx	lr
 800fb04:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fb08:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fb0c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fb10:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fb14:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800fb3c <__kernel_sinf+0x8c>
 800fb18:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fb1c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fb20:	4770      	bx	lr
 800fb22:	bf00      	nop
 800fb24:	2f2ec9d3 	.word	0x2f2ec9d3
 800fb28:	b2d72f34 	.word	0xb2d72f34
 800fb2c:	3638ef1b 	.word	0x3638ef1b
 800fb30:	b9500d01 	.word	0xb9500d01
 800fb34:	3c088889 	.word	0x3c088889
 800fb38:	be2aaaab 	.word	0xbe2aaaab
 800fb3c:	3e2aaaab 	.word	0x3e2aaaab

0800fb40 <__ieee754_rem_pio2f>:
 800fb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb42:	ee10 6a10 	vmov	r6, s0
 800fb46:	4b88      	ldr	r3, [pc, #544]	@ (800fd68 <__ieee754_rem_pio2f+0x228>)
 800fb48:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800fb4c:	429d      	cmp	r5, r3
 800fb4e:	b087      	sub	sp, #28
 800fb50:	4604      	mov	r4, r0
 800fb52:	d805      	bhi.n	800fb60 <__ieee754_rem_pio2f+0x20>
 800fb54:	2300      	movs	r3, #0
 800fb56:	ed80 0a00 	vstr	s0, [r0]
 800fb5a:	6043      	str	r3, [r0, #4]
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	e022      	b.n	800fba6 <__ieee754_rem_pio2f+0x66>
 800fb60:	4b82      	ldr	r3, [pc, #520]	@ (800fd6c <__ieee754_rem_pio2f+0x22c>)
 800fb62:	429d      	cmp	r5, r3
 800fb64:	d83a      	bhi.n	800fbdc <__ieee754_rem_pio2f+0x9c>
 800fb66:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fb6a:	2e00      	cmp	r6, #0
 800fb6c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800fd70 <__ieee754_rem_pio2f+0x230>
 800fb70:	4a80      	ldr	r2, [pc, #512]	@ (800fd74 <__ieee754_rem_pio2f+0x234>)
 800fb72:	f023 030f 	bic.w	r3, r3, #15
 800fb76:	dd18      	ble.n	800fbaa <__ieee754_rem_pio2f+0x6a>
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800fb7e:	bf09      	itett	eq
 800fb80:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800fd78 <__ieee754_rem_pio2f+0x238>
 800fb84:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800fd7c <__ieee754_rem_pio2f+0x23c>
 800fb88:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800fd80 <__ieee754_rem_pio2f+0x240>
 800fb8c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800fb90:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800fb94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb98:	ed80 7a00 	vstr	s14, [r0]
 800fb9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fba0:	edc0 7a01 	vstr	s15, [r0, #4]
 800fba4:	2001      	movs	r0, #1
 800fba6:	b007      	add	sp, #28
 800fba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	ee70 7a07 	vadd.f32	s15, s0, s14
 800fbb0:	bf09      	itett	eq
 800fbb2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800fd78 <__ieee754_rem_pio2f+0x238>
 800fbb6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800fd7c <__ieee754_rem_pio2f+0x23c>
 800fbba:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800fd80 <__ieee754_rem_pio2f+0x240>
 800fbbe:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800fbc2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fbc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbca:	ed80 7a00 	vstr	s14, [r0]
 800fbce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbd2:	edc0 7a01 	vstr	s15, [r0, #4]
 800fbd6:	f04f 30ff 	mov.w	r0, #4294967295
 800fbda:	e7e4      	b.n	800fba6 <__ieee754_rem_pio2f+0x66>
 800fbdc:	4b69      	ldr	r3, [pc, #420]	@ (800fd84 <__ieee754_rem_pio2f+0x244>)
 800fbde:	429d      	cmp	r5, r3
 800fbe0:	d873      	bhi.n	800fcca <__ieee754_rem_pio2f+0x18a>
 800fbe2:	f000 f8dd 	bl	800fda0 <fabsf>
 800fbe6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800fd88 <__ieee754_rem_pio2f+0x248>
 800fbea:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fbee:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fbf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fbfa:	ee17 0a90 	vmov	r0, s15
 800fbfe:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fd70 <__ieee754_rem_pio2f+0x230>
 800fc02:	eea7 0a67 	vfms.f32	s0, s14, s15
 800fc06:	281f      	cmp	r0, #31
 800fc08:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fd7c <__ieee754_rem_pio2f+0x23c>
 800fc0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc10:	eeb1 6a47 	vneg.f32	s12, s14
 800fc14:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fc18:	ee16 1a90 	vmov	r1, s13
 800fc1c:	dc09      	bgt.n	800fc32 <__ieee754_rem_pio2f+0xf2>
 800fc1e:	4a5b      	ldr	r2, [pc, #364]	@ (800fd8c <__ieee754_rem_pio2f+0x24c>)
 800fc20:	1e47      	subs	r7, r0, #1
 800fc22:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fc26:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800fc2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d107      	bne.n	800fc42 <__ieee754_rem_pio2f+0x102>
 800fc32:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800fc36:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800fc3a:	2a08      	cmp	r2, #8
 800fc3c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800fc40:	dc14      	bgt.n	800fc6c <__ieee754_rem_pio2f+0x12c>
 800fc42:	6021      	str	r1, [r4, #0]
 800fc44:	ed94 7a00 	vldr	s14, [r4]
 800fc48:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fc4c:	2e00      	cmp	r6, #0
 800fc4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fc52:	ed84 0a01 	vstr	s0, [r4, #4]
 800fc56:	daa6      	bge.n	800fba6 <__ieee754_rem_pio2f+0x66>
 800fc58:	eeb1 7a47 	vneg.f32	s14, s14
 800fc5c:	eeb1 0a40 	vneg.f32	s0, s0
 800fc60:	ed84 7a00 	vstr	s14, [r4]
 800fc64:	ed84 0a01 	vstr	s0, [r4, #4]
 800fc68:	4240      	negs	r0, r0
 800fc6a:	e79c      	b.n	800fba6 <__ieee754_rem_pio2f+0x66>
 800fc6c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800fd78 <__ieee754_rem_pio2f+0x238>
 800fc70:	eef0 6a40 	vmov.f32	s13, s0
 800fc74:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fc78:	ee70 7a66 	vsub.f32	s15, s0, s13
 800fc7c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fc80:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800fd80 <__ieee754_rem_pio2f+0x240>
 800fc84:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800fc88:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800fc8c:	ee15 2a90 	vmov	r2, s11
 800fc90:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fc94:	1a5b      	subs	r3, r3, r1
 800fc96:	2b19      	cmp	r3, #25
 800fc98:	dc04      	bgt.n	800fca4 <__ieee754_rem_pio2f+0x164>
 800fc9a:	edc4 5a00 	vstr	s11, [r4]
 800fc9e:	eeb0 0a66 	vmov.f32	s0, s13
 800fca2:	e7cf      	b.n	800fc44 <__ieee754_rem_pio2f+0x104>
 800fca4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800fd90 <__ieee754_rem_pio2f+0x250>
 800fca8:	eeb0 0a66 	vmov.f32	s0, s13
 800fcac:	eea6 0a25 	vfma.f32	s0, s12, s11
 800fcb0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800fcb4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800fd94 <__ieee754_rem_pio2f+0x254>
 800fcb8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fcbc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fcc0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fcc4:	ed84 7a00 	vstr	s14, [r4]
 800fcc8:	e7bc      	b.n	800fc44 <__ieee754_rem_pio2f+0x104>
 800fcca:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800fcce:	d306      	bcc.n	800fcde <__ieee754_rem_pio2f+0x19e>
 800fcd0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fcd4:	edc0 7a01 	vstr	s15, [r0, #4]
 800fcd8:	edc0 7a00 	vstr	s15, [r0]
 800fcdc:	e73e      	b.n	800fb5c <__ieee754_rem_pio2f+0x1c>
 800fcde:	15ea      	asrs	r2, r5, #23
 800fce0:	3a86      	subs	r2, #134	@ 0x86
 800fce2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800fce6:	ee07 3a90 	vmov	s15, r3
 800fcea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fcee:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800fd98 <__ieee754_rem_pio2f+0x258>
 800fcf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fcf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcfa:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fcfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fd02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fd06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fd0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd0e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fd12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fd16:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd1e:	edcd 7a05 	vstr	s15, [sp, #20]
 800fd22:	d11e      	bne.n	800fd62 <__ieee754_rem_pio2f+0x222>
 800fd24:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fd28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd2c:	bf0c      	ite	eq
 800fd2e:	2301      	moveq	r3, #1
 800fd30:	2302      	movne	r3, #2
 800fd32:	491a      	ldr	r1, [pc, #104]	@ (800fd9c <__ieee754_rem_pio2f+0x25c>)
 800fd34:	9101      	str	r1, [sp, #4]
 800fd36:	2102      	movs	r1, #2
 800fd38:	9100      	str	r1, [sp, #0]
 800fd3a:	a803      	add	r0, sp, #12
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	f000 f837 	bl	800fdb0 <__kernel_rem_pio2f>
 800fd42:	2e00      	cmp	r6, #0
 800fd44:	f6bf af2f 	bge.w	800fba6 <__ieee754_rem_pio2f+0x66>
 800fd48:	edd4 7a00 	vldr	s15, [r4]
 800fd4c:	eef1 7a67 	vneg.f32	s15, s15
 800fd50:	edc4 7a00 	vstr	s15, [r4]
 800fd54:	edd4 7a01 	vldr	s15, [r4, #4]
 800fd58:	eef1 7a67 	vneg.f32	s15, s15
 800fd5c:	edc4 7a01 	vstr	s15, [r4, #4]
 800fd60:	e782      	b.n	800fc68 <__ieee754_rem_pio2f+0x128>
 800fd62:	2303      	movs	r3, #3
 800fd64:	e7e5      	b.n	800fd32 <__ieee754_rem_pio2f+0x1f2>
 800fd66:	bf00      	nop
 800fd68:	3f490fd8 	.word	0x3f490fd8
 800fd6c:	4016cbe3 	.word	0x4016cbe3
 800fd70:	3fc90f80 	.word	0x3fc90f80
 800fd74:	3fc90fd0 	.word	0x3fc90fd0
 800fd78:	37354400 	.word	0x37354400
 800fd7c:	37354443 	.word	0x37354443
 800fd80:	2e85a308 	.word	0x2e85a308
 800fd84:	43490f80 	.word	0x43490f80
 800fd88:	3f22f984 	.word	0x3f22f984
 800fd8c:	08011350 	.word	0x08011350
 800fd90:	2e85a300 	.word	0x2e85a300
 800fd94:	248d3132 	.word	0x248d3132
 800fd98:	43800000 	.word	0x43800000
 800fd9c:	080113d0 	.word	0x080113d0

0800fda0 <fabsf>:
 800fda0:	ee10 3a10 	vmov	r3, s0
 800fda4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fda8:	ee00 3a10 	vmov	s0, r3
 800fdac:	4770      	bx	lr
	...

0800fdb0 <__kernel_rem_pio2f>:
 800fdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb4:	ed2d 8b04 	vpush	{d8-d9}
 800fdb8:	b0d9      	sub	sp, #356	@ 0x164
 800fdba:	4690      	mov	r8, r2
 800fdbc:	9001      	str	r0, [sp, #4]
 800fdbe:	4ab9      	ldr	r2, [pc, #740]	@ (80100a4 <__kernel_rem_pio2f+0x2f4>)
 800fdc0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800fdc2:	f118 0f04 	cmn.w	r8, #4
 800fdc6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800fdca:	460f      	mov	r7, r1
 800fdcc:	f103 3bff 	add.w	fp, r3, #4294967295
 800fdd0:	db27      	blt.n	800fe22 <__kernel_rem_pio2f+0x72>
 800fdd2:	f1b8 0203 	subs.w	r2, r8, #3
 800fdd6:	bf48      	it	mi
 800fdd8:	f108 0204 	addmi.w	r2, r8, #4
 800fddc:	10d2      	asrs	r2, r2, #3
 800fdde:	1c55      	adds	r5, r2, #1
 800fde0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fde2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80100b4 <__kernel_rem_pio2f+0x304>
 800fde6:	00e8      	lsls	r0, r5, #3
 800fde8:	eba2 060b 	sub.w	r6, r2, fp
 800fdec:	9002      	str	r0, [sp, #8]
 800fdee:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800fdf2:	eb0a 0c0b 	add.w	ip, sl, fp
 800fdf6:	ac1c      	add	r4, sp, #112	@ 0x70
 800fdf8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	4560      	cmp	r0, ip
 800fe00:	dd11      	ble.n	800fe26 <__kernel_rem_pio2f+0x76>
 800fe02:	a91c      	add	r1, sp, #112	@ 0x70
 800fe04:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800fe08:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800fe0c:	f04f 0c00 	mov.w	ip, #0
 800fe10:	45d4      	cmp	ip, sl
 800fe12:	dc27      	bgt.n	800fe64 <__kernel_rem_pio2f+0xb4>
 800fe14:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fe18:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80100b4 <__kernel_rem_pio2f+0x304>
 800fe1c:	4606      	mov	r6, r0
 800fe1e:	2400      	movs	r4, #0
 800fe20:	e016      	b.n	800fe50 <__kernel_rem_pio2f+0xa0>
 800fe22:	2200      	movs	r2, #0
 800fe24:	e7db      	b.n	800fdde <__kernel_rem_pio2f+0x2e>
 800fe26:	42c6      	cmn	r6, r0
 800fe28:	bf5d      	ittte	pl
 800fe2a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800fe2e:	ee07 1a90 	vmovpl	s15, r1
 800fe32:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fe36:	eef0 7a47 	vmovmi.f32	s15, s14
 800fe3a:	ece4 7a01 	vstmia	r4!, {s15}
 800fe3e:	3001      	adds	r0, #1
 800fe40:	e7dd      	b.n	800fdfe <__kernel_rem_pio2f+0x4e>
 800fe42:	ecfe 6a01 	vldmia	lr!, {s13}
 800fe46:	ed96 7a00 	vldr	s14, [r6]
 800fe4a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fe4e:	3401      	adds	r4, #1
 800fe50:	455c      	cmp	r4, fp
 800fe52:	f1a6 0604 	sub.w	r6, r6, #4
 800fe56:	ddf4      	ble.n	800fe42 <__kernel_rem_pio2f+0x92>
 800fe58:	ece9 7a01 	vstmia	r9!, {s15}
 800fe5c:	f10c 0c01 	add.w	ip, ip, #1
 800fe60:	3004      	adds	r0, #4
 800fe62:	e7d5      	b.n	800fe10 <__kernel_rem_pio2f+0x60>
 800fe64:	a908      	add	r1, sp, #32
 800fe66:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fe6a:	9104      	str	r1, [sp, #16]
 800fe6c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fe6e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80100b0 <__kernel_rem_pio2f+0x300>
 800fe72:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80100ac <__kernel_rem_pio2f+0x2fc>
 800fe76:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fe7a:	9203      	str	r2, [sp, #12]
 800fe7c:	4654      	mov	r4, sl
 800fe7e:	00a2      	lsls	r2, r4, #2
 800fe80:	9205      	str	r2, [sp, #20]
 800fe82:	aa58      	add	r2, sp, #352	@ 0x160
 800fe84:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800fe88:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800fe8c:	a944      	add	r1, sp, #272	@ 0x110
 800fe8e:	aa08      	add	r2, sp, #32
 800fe90:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800fe94:	4694      	mov	ip, r2
 800fe96:	4626      	mov	r6, r4
 800fe98:	2e00      	cmp	r6, #0
 800fe9a:	f1a0 0004 	sub.w	r0, r0, #4
 800fe9e:	dc4c      	bgt.n	800ff3a <__kernel_rem_pio2f+0x18a>
 800fea0:	4628      	mov	r0, r5
 800fea2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fea6:	f000 f9f5 	bl	8010294 <scalbnf>
 800feaa:	eeb0 8a40 	vmov.f32	s16, s0
 800feae:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800feb2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800feb6:	f000 fa53 	bl	8010360 <floorf>
 800feba:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800febe:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fec2:	2d00      	cmp	r5, #0
 800fec4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fec8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fecc:	ee17 9a90 	vmov	r9, s15
 800fed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fed4:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fed8:	dd41      	ble.n	800ff5e <__kernel_rem_pio2f+0x1ae>
 800feda:	f104 3cff 	add.w	ip, r4, #4294967295
 800fede:	a908      	add	r1, sp, #32
 800fee0:	f1c5 0e08 	rsb	lr, r5, #8
 800fee4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800fee8:	fa46 f00e 	asr.w	r0, r6, lr
 800feec:	4481      	add	r9, r0
 800feee:	fa00 f00e 	lsl.w	r0, r0, lr
 800fef2:	1a36      	subs	r6, r6, r0
 800fef4:	f1c5 0007 	rsb	r0, r5, #7
 800fef8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800fefc:	4106      	asrs	r6, r0
 800fefe:	2e00      	cmp	r6, #0
 800ff00:	dd3c      	ble.n	800ff7c <__kernel_rem_pio2f+0x1cc>
 800ff02:	f04f 0e00 	mov.w	lr, #0
 800ff06:	f109 0901 	add.w	r9, r9, #1
 800ff0a:	4670      	mov	r0, lr
 800ff0c:	4574      	cmp	r4, lr
 800ff0e:	dc68      	bgt.n	800ffe2 <__kernel_rem_pio2f+0x232>
 800ff10:	2d00      	cmp	r5, #0
 800ff12:	dd03      	ble.n	800ff1c <__kernel_rem_pio2f+0x16c>
 800ff14:	2d01      	cmp	r5, #1
 800ff16:	d074      	beq.n	8010002 <__kernel_rem_pio2f+0x252>
 800ff18:	2d02      	cmp	r5, #2
 800ff1a:	d07d      	beq.n	8010018 <__kernel_rem_pio2f+0x268>
 800ff1c:	2e02      	cmp	r6, #2
 800ff1e:	d12d      	bne.n	800ff7c <__kernel_rem_pio2f+0x1cc>
 800ff20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ff24:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ff28:	b340      	cbz	r0, 800ff7c <__kernel_rem_pio2f+0x1cc>
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	9306      	str	r3, [sp, #24]
 800ff2e:	f000 f9b1 	bl	8010294 <scalbnf>
 800ff32:	9b06      	ldr	r3, [sp, #24]
 800ff34:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ff38:	e020      	b.n	800ff7c <__kernel_rem_pio2f+0x1cc>
 800ff3a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ff3e:	3e01      	subs	r6, #1
 800ff40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff48:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ff4c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff50:	ecac 0a01 	vstmia	ip!, {s0}
 800ff54:	ed90 0a00 	vldr	s0, [r0]
 800ff58:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ff5c:	e79c      	b.n	800fe98 <__kernel_rem_pio2f+0xe8>
 800ff5e:	d105      	bne.n	800ff6c <__kernel_rem_pio2f+0x1bc>
 800ff60:	1e60      	subs	r0, r4, #1
 800ff62:	a908      	add	r1, sp, #32
 800ff64:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800ff68:	11f6      	asrs	r6, r6, #7
 800ff6a:	e7c8      	b.n	800fefe <__kernel_rem_pio2f+0x14e>
 800ff6c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ff70:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ff74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff78:	da31      	bge.n	800ffde <__kernel_rem_pio2f+0x22e>
 800ff7a:	2600      	movs	r6, #0
 800ff7c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ff80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff84:	f040 8098 	bne.w	80100b8 <__kernel_rem_pio2f+0x308>
 800ff88:	1e60      	subs	r0, r4, #1
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	4550      	cmp	r0, sl
 800ff8e:	da4b      	bge.n	8010028 <__kernel_rem_pio2f+0x278>
 800ff90:	2a00      	cmp	r2, #0
 800ff92:	d065      	beq.n	8010060 <__kernel_rem_pio2f+0x2b0>
 800ff94:	3c01      	subs	r4, #1
 800ff96:	ab08      	add	r3, sp, #32
 800ff98:	3d08      	subs	r5, #8
 800ff9a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d0f8      	beq.n	800ff94 <__kernel_rem_pio2f+0x1e4>
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ffa8:	f000 f974 	bl	8010294 <scalbnf>
 800ffac:	1c63      	adds	r3, r4, #1
 800ffae:	aa44      	add	r2, sp, #272	@ 0x110
 800ffb0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80100b0 <__kernel_rem_pio2f+0x300>
 800ffb4:	0099      	lsls	r1, r3, #2
 800ffb6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ffba:	4623      	mov	r3, r4
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f280 80a9 	bge.w	8010114 <__kernel_rem_pio2f+0x364>
 800ffc2:	4623      	mov	r3, r4
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f2c0 80c7 	blt.w	8010158 <__kernel_rem_pio2f+0x3a8>
 800ffca:	aa44      	add	r2, sp, #272	@ 0x110
 800ffcc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ffd0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80100a8 <__kernel_rem_pio2f+0x2f8>
 800ffd4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80100b4 <__kernel_rem_pio2f+0x304>
 800ffd8:	2000      	movs	r0, #0
 800ffda:	1ae2      	subs	r2, r4, r3
 800ffdc:	e0b1      	b.n	8010142 <__kernel_rem_pio2f+0x392>
 800ffde:	2602      	movs	r6, #2
 800ffe0:	e78f      	b.n	800ff02 <__kernel_rem_pio2f+0x152>
 800ffe2:	f852 1b04 	ldr.w	r1, [r2], #4
 800ffe6:	b948      	cbnz	r0, 800fffc <__kernel_rem_pio2f+0x24c>
 800ffe8:	b121      	cbz	r1, 800fff4 <__kernel_rem_pio2f+0x244>
 800ffea:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800ffee:	f842 1c04 	str.w	r1, [r2, #-4]
 800fff2:	2101      	movs	r1, #1
 800fff4:	f10e 0e01 	add.w	lr, lr, #1
 800fff8:	4608      	mov	r0, r1
 800fffa:	e787      	b.n	800ff0c <__kernel_rem_pio2f+0x15c>
 800fffc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010000:	e7f5      	b.n	800ffee <__kernel_rem_pio2f+0x23e>
 8010002:	f104 3cff 	add.w	ip, r4, #4294967295
 8010006:	aa08      	add	r2, sp, #32
 8010008:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801000c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010010:	a908      	add	r1, sp, #32
 8010012:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010016:	e781      	b.n	800ff1c <__kernel_rem_pio2f+0x16c>
 8010018:	f104 3cff 	add.w	ip, r4, #4294967295
 801001c:	aa08      	add	r2, sp, #32
 801001e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010022:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010026:	e7f3      	b.n	8010010 <__kernel_rem_pio2f+0x260>
 8010028:	a908      	add	r1, sp, #32
 801002a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801002e:	3801      	subs	r0, #1
 8010030:	430a      	orrs	r2, r1
 8010032:	e7ab      	b.n	800ff8c <__kernel_rem_pio2f+0x1dc>
 8010034:	3201      	adds	r2, #1
 8010036:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801003a:	2e00      	cmp	r6, #0
 801003c:	d0fa      	beq.n	8010034 <__kernel_rem_pio2f+0x284>
 801003e:	9905      	ldr	r1, [sp, #20]
 8010040:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010044:	eb0d 0001 	add.w	r0, sp, r1
 8010048:	18e6      	adds	r6, r4, r3
 801004a:	a91c      	add	r1, sp, #112	@ 0x70
 801004c:	f104 0c01 	add.w	ip, r4, #1
 8010050:	384c      	subs	r0, #76	@ 0x4c
 8010052:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010056:	4422      	add	r2, r4
 8010058:	4562      	cmp	r2, ip
 801005a:	da04      	bge.n	8010066 <__kernel_rem_pio2f+0x2b6>
 801005c:	4614      	mov	r4, r2
 801005e:	e70e      	b.n	800fe7e <__kernel_rem_pio2f+0xce>
 8010060:	9804      	ldr	r0, [sp, #16]
 8010062:	2201      	movs	r2, #1
 8010064:	e7e7      	b.n	8010036 <__kernel_rem_pio2f+0x286>
 8010066:	9903      	ldr	r1, [sp, #12]
 8010068:	f8dd e004 	ldr.w	lr, [sp, #4]
 801006c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8010070:	9105      	str	r1, [sp, #20]
 8010072:	ee07 1a90 	vmov	s15, r1
 8010076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801007a:	2400      	movs	r4, #0
 801007c:	ece6 7a01 	vstmia	r6!, {s15}
 8010080:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80100b4 <__kernel_rem_pio2f+0x304>
 8010084:	46b1      	mov	r9, r6
 8010086:	455c      	cmp	r4, fp
 8010088:	dd04      	ble.n	8010094 <__kernel_rem_pio2f+0x2e4>
 801008a:	ece0 7a01 	vstmia	r0!, {s15}
 801008e:	f10c 0c01 	add.w	ip, ip, #1
 8010092:	e7e1      	b.n	8010058 <__kernel_rem_pio2f+0x2a8>
 8010094:	ecfe 6a01 	vldmia	lr!, {s13}
 8010098:	ed39 7a01 	vldmdb	r9!, {s14}
 801009c:	3401      	adds	r4, #1
 801009e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80100a2:	e7f0      	b.n	8010086 <__kernel_rem_pio2f+0x2d6>
 80100a4:	08011714 	.word	0x08011714
 80100a8:	080116e8 	.word	0x080116e8
 80100ac:	43800000 	.word	0x43800000
 80100b0:	3b800000 	.word	0x3b800000
 80100b4:	00000000 	.word	0x00000000
 80100b8:	9b02      	ldr	r3, [sp, #8]
 80100ba:	eeb0 0a48 	vmov.f32	s0, s16
 80100be:	eba3 0008 	sub.w	r0, r3, r8
 80100c2:	f000 f8e7 	bl	8010294 <scalbnf>
 80100c6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80100ac <__kernel_rem_pio2f+0x2fc>
 80100ca:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80100ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d2:	db19      	blt.n	8010108 <__kernel_rem_pio2f+0x358>
 80100d4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80100b0 <__kernel_rem_pio2f+0x300>
 80100d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80100dc:	aa08      	add	r2, sp, #32
 80100de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100e2:	3508      	adds	r5, #8
 80100e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100e8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80100ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80100f4:	ee10 3a10 	vmov	r3, s0
 80100f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80100fc:	ee17 3a90 	vmov	r3, s15
 8010100:	3401      	adds	r4, #1
 8010102:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010106:	e74c      	b.n	800ffa2 <__kernel_rem_pio2f+0x1f2>
 8010108:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801010c:	aa08      	add	r2, sp, #32
 801010e:	ee10 3a10 	vmov	r3, s0
 8010112:	e7f6      	b.n	8010102 <__kernel_rem_pio2f+0x352>
 8010114:	a808      	add	r0, sp, #32
 8010116:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801011a:	9001      	str	r0, [sp, #4]
 801011c:	ee07 0a90 	vmov	s15, r0
 8010120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010124:	3b01      	subs	r3, #1
 8010126:	ee67 7a80 	vmul.f32	s15, s15, s0
 801012a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801012e:	ed62 7a01 	vstmdb	r2!, {s15}
 8010132:	e743      	b.n	800ffbc <__kernel_rem_pio2f+0x20c>
 8010134:	ecfc 6a01 	vldmia	ip!, {s13}
 8010138:	ecb5 7a01 	vldmia	r5!, {s14}
 801013c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010140:	3001      	adds	r0, #1
 8010142:	4550      	cmp	r0, sl
 8010144:	dc01      	bgt.n	801014a <__kernel_rem_pio2f+0x39a>
 8010146:	4282      	cmp	r2, r0
 8010148:	daf4      	bge.n	8010134 <__kernel_rem_pio2f+0x384>
 801014a:	a858      	add	r0, sp, #352	@ 0x160
 801014c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010150:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010154:	3b01      	subs	r3, #1
 8010156:	e735      	b.n	800ffc4 <__kernel_rem_pio2f+0x214>
 8010158:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801015a:	2b02      	cmp	r3, #2
 801015c:	dc09      	bgt.n	8010172 <__kernel_rem_pio2f+0x3c2>
 801015e:	2b00      	cmp	r3, #0
 8010160:	dc2b      	bgt.n	80101ba <__kernel_rem_pio2f+0x40a>
 8010162:	d044      	beq.n	80101ee <__kernel_rem_pio2f+0x43e>
 8010164:	f009 0007 	and.w	r0, r9, #7
 8010168:	b059      	add	sp, #356	@ 0x164
 801016a:	ecbd 8b04 	vpop	{d8-d9}
 801016e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010172:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010174:	2b03      	cmp	r3, #3
 8010176:	d1f5      	bne.n	8010164 <__kernel_rem_pio2f+0x3b4>
 8010178:	aa30      	add	r2, sp, #192	@ 0xc0
 801017a:	1f0b      	subs	r3, r1, #4
 801017c:	4413      	add	r3, r2
 801017e:	461a      	mov	r2, r3
 8010180:	4620      	mov	r0, r4
 8010182:	2800      	cmp	r0, #0
 8010184:	f1a2 0204 	sub.w	r2, r2, #4
 8010188:	dc52      	bgt.n	8010230 <__kernel_rem_pio2f+0x480>
 801018a:	4622      	mov	r2, r4
 801018c:	2a01      	cmp	r2, #1
 801018e:	f1a3 0304 	sub.w	r3, r3, #4
 8010192:	dc5d      	bgt.n	8010250 <__kernel_rem_pio2f+0x4a0>
 8010194:	ab30      	add	r3, sp, #192	@ 0xc0
 8010196:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80100b4 <__kernel_rem_pio2f+0x304>
 801019a:	440b      	add	r3, r1
 801019c:	2c01      	cmp	r4, #1
 801019e:	dc67      	bgt.n	8010270 <__kernel_rem_pio2f+0x4c0>
 80101a0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80101a4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80101a8:	2e00      	cmp	r6, #0
 80101aa:	d167      	bne.n	801027c <__kernel_rem_pio2f+0x4cc>
 80101ac:	edc7 6a00 	vstr	s13, [r7]
 80101b0:	ed87 7a01 	vstr	s14, [r7, #4]
 80101b4:	edc7 7a02 	vstr	s15, [r7, #8]
 80101b8:	e7d4      	b.n	8010164 <__kernel_rem_pio2f+0x3b4>
 80101ba:	ab30      	add	r3, sp, #192	@ 0xc0
 80101bc:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80100b4 <__kernel_rem_pio2f+0x304>
 80101c0:	440b      	add	r3, r1
 80101c2:	4622      	mov	r2, r4
 80101c4:	2a00      	cmp	r2, #0
 80101c6:	da24      	bge.n	8010212 <__kernel_rem_pio2f+0x462>
 80101c8:	b34e      	cbz	r6, 801021e <__kernel_rem_pio2f+0x46e>
 80101ca:	eef1 7a47 	vneg.f32	s15, s14
 80101ce:	edc7 7a00 	vstr	s15, [r7]
 80101d2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80101d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80101da:	aa31      	add	r2, sp, #196	@ 0xc4
 80101dc:	2301      	movs	r3, #1
 80101de:	429c      	cmp	r4, r3
 80101e0:	da20      	bge.n	8010224 <__kernel_rem_pio2f+0x474>
 80101e2:	b10e      	cbz	r6, 80101e8 <__kernel_rem_pio2f+0x438>
 80101e4:	eef1 7a67 	vneg.f32	s15, s15
 80101e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80101ec:	e7ba      	b.n	8010164 <__kernel_rem_pio2f+0x3b4>
 80101ee:	ab30      	add	r3, sp, #192	@ 0xc0
 80101f0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80100b4 <__kernel_rem_pio2f+0x304>
 80101f4:	440b      	add	r3, r1
 80101f6:	2c00      	cmp	r4, #0
 80101f8:	da05      	bge.n	8010206 <__kernel_rem_pio2f+0x456>
 80101fa:	b10e      	cbz	r6, 8010200 <__kernel_rem_pio2f+0x450>
 80101fc:	eef1 7a67 	vneg.f32	s15, s15
 8010200:	edc7 7a00 	vstr	s15, [r7]
 8010204:	e7ae      	b.n	8010164 <__kernel_rem_pio2f+0x3b4>
 8010206:	ed33 7a01 	vldmdb	r3!, {s14}
 801020a:	3c01      	subs	r4, #1
 801020c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010210:	e7f1      	b.n	80101f6 <__kernel_rem_pio2f+0x446>
 8010212:	ed73 7a01 	vldmdb	r3!, {s15}
 8010216:	3a01      	subs	r2, #1
 8010218:	ee37 7a27 	vadd.f32	s14, s14, s15
 801021c:	e7d2      	b.n	80101c4 <__kernel_rem_pio2f+0x414>
 801021e:	eef0 7a47 	vmov.f32	s15, s14
 8010222:	e7d4      	b.n	80101ce <__kernel_rem_pio2f+0x41e>
 8010224:	ecb2 7a01 	vldmia	r2!, {s14}
 8010228:	3301      	adds	r3, #1
 801022a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801022e:	e7d6      	b.n	80101de <__kernel_rem_pio2f+0x42e>
 8010230:	edd2 7a00 	vldr	s15, [r2]
 8010234:	edd2 6a01 	vldr	s13, [r2, #4]
 8010238:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801023c:	3801      	subs	r0, #1
 801023e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010242:	ed82 7a00 	vstr	s14, [r2]
 8010246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801024a:	edc2 7a01 	vstr	s15, [r2, #4]
 801024e:	e798      	b.n	8010182 <__kernel_rem_pio2f+0x3d2>
 8010250:	edd3 7a00 	vldr	s15, [r3]
 8010254:	edd3 6a01 	vldr	s13, [r3, #4]
 8010258:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801025c:	3a01      	subs	r2, #1
 801025e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010262:	ed83 7a00 	vstr	s14, [r3]
 8010266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801026a:	edc3 7a01 	vstr	s15, [r3, #4]
 801026e:	e78d      	b.n	801018c <__kernel_rem_pio2f+0x3dc>
 8010270:	ed33 7a01 	vldmdb	r3!, {s14}
 8010274:	3c01      	subs	r4, #1
 8010276:	ee77 7a87 	vadd.f32	s15, s15, s14
 801027a:	e78f      	b.n	801019c <__kernel_rem_pio2f+0x3ec>
 801027c:	eef1 6a66 	vneg.f32	s13, s13
 8010280:	eeb1 7a47 	vneg.f32	s14, s14
 8010284:	edc7 6a00 	vstr	s13, [r7]
 8010288:	ed87 7a01 	vstr	s14, [r7, #4]
 801028c:	eef1 7a67 	vneg.f32	s15, s15
 8010290:	e790      	b.n	80101b4 <__kernel_rem_pio2f+0x404>
 8010292:	bf00      	nop

08010294 <scalbnf>:
 8010294:	ee10 3a10 	vmov	r3, s0
 8010298:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801029c:	d02b      	beq.n	80102f6 <scalbnf+0x62>
 801029e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80102a2:	d302      	bcc.n	80102aa <scalbnf+0x16>
 80102a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80102a8:	4770      	bx	lr
 80102aa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80102ae:	d123      	bne.n	80102f8 <scalbnf+0x64>
 80102b0:	4b24      	ldr	r3, [pc, #144]	@ (8010344 <scalbnf+0xb0>)
 80102b2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010348 <scalbnf+0xb4>
 80102b6:	4298      	cmp	r0, r3
 80102b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80102bc:	db17      	blt.n	80102ee <scalbnf+0x5a>
 80102be:	ee10 3a10 	vmov	r3, s0
 80102c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80102c6:	3a19      	subs	r2, #25
 80102c8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80102cc:	4288      	cmp	r0, r1
 80102ce:	dd15      	ble.n	80102fc <scalbnf+0x68>
 80102d0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801034c <scalbnf+0xb8>
 80102d4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010350 <scalbnf+0xbc>
 80102d8:	ee10 3a10 	vmov	r3, s0
 80102dc:	eeb0 7a67 	vmov.f32	s14, s15
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	bfb8      	it	lt
 80102e4:	eef0 7a66 	vmovlt.f32	s15, s13
 80102e8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80102ec:	4770      	bx	lr
 80102ee:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010354 <scalbnf+0xc0>
 80102f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80102f6:	4770      	bx	lr
 80102f8:	0dd2      	lsrs	r2, r2, #23
 80102fa:	e7e5      	b.n	80102c8 <scalbnf+0x34>
 80102fc:	4410      	add	r0, r2
 80102fe:	28fe      	cmp	r0, #254	@ 0xfe
 8010300:	dce6      	bgt.n	80102d0 <scalbnf+0x3c>
 8010302:	2800      	cmp	r0, #0
 8010304:	dd06      	ble.n	8010314 <scalbnf+0x80>
 8010306:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801030a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801030e:	ee00 3a10 	vmov	s0, r3
 8010312:	4770      	bx	lr
 8010314:	f110 0f16 	cmn.w	r0, #22
 8010318:	da09      	bge.n	801032e <scalbnf+0x9a>
 801031a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010354 <scalbnf+0xc0>
 801031e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010358 <scalbnf+0xc4>
 8010322:	ee10 3a10 	vmov	r3, s0
 8010326:	eeb0 7a67 	vmov.f32	s14, s15
 801032a:	2b00      	cmp	r3, #0
 801032c:	e7d9      	b.n	80102e2 <scalbnf+0x4e>
 801032e:	3019      	adds	r0, #25
 8010330:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010334:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010338:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801035c <scalbnf+0xc8>
 801033c:	ee07 3a90 	vmov	s15, r3
 8010340:	e7d7      	b.n	80102f2 <scalbnf+0x5e>
 8010342:	bf00      	nop
 8010344:	ffff3cb0 	.word	0xffff3cb0
 8010348:	4c000000 	.word	0x4c000000
 801034c:	7149f2ca 	.word	0x7149f2ca
 8010350:	f149f2ca 	.word	0xf149f2ca
 8010354:	0da24260 	.word	0x0da24260
 8010358:	8da24260 	.word	0x8da24260
 801035c:	33000000 	.word	0x33000000

08010360 <floorf>:
 8010360:	ee10 3a10 	vmov	r3, s0
 8010364:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010368:	3a7f      	subs	r2, #127	@ 0x7f
 801036a:	2a16      	cmp	r2, #22
 801036c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010370:	dc2b      	bgt.n	80103ca <floorf+0x6a>
 8010372:	2a00      	cmp	r2, #0
 8010374:	da12      	bge.n	801039c <floorf+0x3c>
 8010376:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80103dc <floorf+0x7c>
 801037a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801037e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010386:	dd06      	ble.n	8010396 <floorf+0x36>
 8010388:	2b00      	cmp	r3, #0
 801038a:	da24      	bge.n	80103d6 <floorf+0x76>
 801038c:	2900      	cmp	r1, #0
 801038e:	4b14      	ldr	r3, [pc, #80]	@ (80103e0 <floorf+0x80>)
 8010390:	bf08      	it	eq
 8010392:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010396:	ee00 3a10 	vmov	s0, r3
 801039a:	4770      	bx	lr
 801039c:	4911      	ldr	r1, [pc, #68]	@ (80103e4 <floorf+0x84>)
 801039e:	4111      	asrs	r1, r2
 80103a0:	420b      	tst	r3, r1
 80103a2:	d0fa      	beq.n	801039a <floorf+0x3a>
 80103a4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80103dc <floorf+0x7c>
 80103a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80103ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80103b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b4:	ddef      	ble.n	8010396 <floorf+0x36>
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	bfbe      	ittt	lt
 80103ba:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80103be:	fa40 f202 	asrlt.w	r2, r0, r2
 80103c2:	189b      	addlt	r3, r3, r2
 80103c4:	ea23 0301 	bic.w	r3, r3, r1
 80103c8:	e7e5      	b.n	8010396 <floorf+0x36>
 80103ca:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80103ce:	d3e4      	bcc.n	801039a <floorf+0x3a>
 80103d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80103d4:	4770      	bx	lr
 80103d6:	2300      	movs	r3, #0
 80103d8:	e7dd      	b.n	8010396 <floorf+0x36>
 80103da:	bf00      	nop
 80103dc:	7149f2ca 	.word	0x7149f2ca
 80103e0:	bf800000 	.word	0xbf800000
 80103e4:	007fffff 	.word	0x007fffff

080103e8 <_init>:
 80103e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ea:	bf00      	nop
 80103ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ee:	bc08      	pop	{r3}
 80103f0:	469e      	mov	lr, r3
 80103f2:	4770      	bx	lr

080103f4 <_fini>:
 80103f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f6:	bf00      	nop
 80103f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103fa:	bc08      	pop	{r3}
 80103fc:	469e      	mov	lr, r3
 80103fe:	4770      	bx	lr
