
109_Sinusmodulation_2Stufen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7d8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001318  0800f9b8  0800f9b8  000109b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cd0  08010cd0  000121dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010cd0  08010cd0  00011cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cd8  08010cd8  000121dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cd8  08010cd8  00011cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cdc  08010cdc  00011cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08010ce0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  200001dc  08010ebc  000121dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a0  08010ebc  000129a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d67e  00000000  00000000  0001220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e0  00000000  00000000  0002f88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00033070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001426  00000000  00000000  00034a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa6e  00000000  00000000  00035e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebfb  00000000  00000000  000608ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117ff3  00000000  00000000  0007f4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001974da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008278  00000000  00000000  00197520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0019f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f9a0 	.word	0x0800f9a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800f9a0 	.word	0x0800f9a0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	88b9      	ldrh	r1, [r7, #4]
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fab5 	bl	8001510 <ST7735_DrawPixel>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000fae:	b590      	push	{r4, r7, lr}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af02      	add	r7, sp, #8
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4611      	mov	r1, r2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4623      	mov	r3, r4
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	80bb      	strh	r3, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	88b9      	ldrh	r1, [r7, #4]
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	883c      	ldrh	r4, [r7, #0]
 8000fd4:	8b3b      	ldrh	r3, [r7, #24]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4623      	mov	r3, r4
 8000fda:	f000 fba3 	bl	8001724 <ST7735_FillRectangle>
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	80bb      	strh	r3, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffc0 	bl	8000f88 <drawPixel>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	4603      	mov	r3, r0
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	4613      	mov	r3, r2
 800102c:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800102e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800103c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001040:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001048:	1acb      	subs	r3, r1, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	bfb8      	it	lt
 800104e:	425b      	neglt	r3, r3
 8001050:	429a      	cmp	r2, r3
 8001052:	bfcc      	ite	gt
 8001054:	2301      	movgt	r3, #1
 8001056:	2300      	movle	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800105c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	833b      	strh	r3, [r7, #24]
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	82fb      	strh	r3, [r7, #22]
 8001074:	883b      	ldrh	r3, [r7, #0]
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	8afb      	ldrh	r3, [r7, #22]
 800107a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800107c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001080:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001084:	429a      	cmp	r2, r3
 8001086:	dd0b      	ble.n	80010a0 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	82bb      	strh	r3, [r7, #20]
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	8abb      	ldrh	r3, [r7, #20]
 8001092:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	827b      	strh	r3, [r7, #18]
 8001098:	883b      	ldrh	r3, [r7, #0]
 800109a:	80bb      	strh	r3, [r7, #4]
 800109c:	8a7b      	ldrh	r3, [r7, #18]
 800109e:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80010a0:	887a      	ldrh	r2, [r7, #2]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80010aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80010ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bfb8      	it	lt
 80010b8:	425b      	neglt	r3, r3
 80010ba:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80010bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010c0:	0fda      	lsrs	r2, r3, #31
 80010c2:	4413      	add	r3, r2
 80010c4:	105b      	asrs	r3, r3, #1
 80010c6:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80010c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	da02      	bge.n	80010da <writeLine+0xca>
        ystep = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	83bb      	strh	r3, [r7, #28]
 80010d8:	e031      	b.n	800113e <writeLine+0x12e>
    } else {
        ystep = -1;
 80010da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010de:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80010e0:	e02d      	b.n	800113e <writeLine+0x12e>
        if (steep) {
 80010e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <writeLine+0xec>
            writePixel(y0, x0, color);
 80010ea:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff76 	bl	8000fe6 <writePixel>
 80010fa:	e007      	b.n	800110c <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 80010fc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff6d 	bl	8000fe6 <writePixel>
        }
        err -= dy;
 800110c:	8bfa      	ldrh	r2, [r7, #30]
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8001116:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800111a:	2b00      	cmp	r3, #0
 800111c:	da09      	bge.n	8001132 <writeLine+0x122>
            y0 += ystep;
 800111e:	88ba      	ldrh	r2, [r7, #4]
 8001120:	8bbb      	ldrh	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	b29b      	uxth	r3, r3
 8001126:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001128:	8bfa      	ldrh	r2, [r7, #30]
 800112a:	8a3b      	ldrh	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	b29b      	uxth	r3, r3
 8001138:	3301      	adds	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001146:	429a      	cmp	r2, r3
 8001148:	ddcb      	ble.n	80010e2 <writeLine+0xd2>
        }
    }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3724      	adds	r7, #36	@ 0x24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}

08001154 <drawFastHLine>:
void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	writeLine(x, y, x, y + h - 1, color);
}
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af02      	add	r7, sp, #8
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	b21a      	sxth	r2, r3
 8001180:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001184:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001188:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4623      	mov	r3, r4
 8001192:	f7ff ff3d 	bl	8001010 <writeLine>
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
	...

080011a0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <fillScreen+0x2c>)
 80011ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <fillScreen+0x30>)
 80011b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fef5 	bl	8000fae <fillRect>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001f8 	.word	0x200001f8
 80011d0:	200001fa 	.word	0x200001fa

080011d4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e2:	f006 fcf3 	bl	8007bcc <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ST7735_Unselect>:

void ST7735_Unselect()
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f006 fce8 	bl	8007bcc <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <ST7735_Reset>:

void ST7735_Reset()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2140      	movs	r1, #64	@ 0x40
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f006 fcde 	bl	8007bcc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001210:	2005      	movs	r0, #5
 8001212:	f004 f9ad 	bl	8005570 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f006 fcd5 	bl	8007bcc <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001238:	4806      	ldr	r0, [pc, #24]	@ (8001254 <ST7735_WriteCommand+0x2c>)
 800123a:	f006 fcc7 	bl	8007bcc <HAL_GPIO_WritePin>
		{

		}
	#endif
	#ifdef WITHOUT_DMA
		HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800123e:	1df9      	adds	r1, r7, #7
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	2201      	movs	r2, #1
 8001246:	4804      	ldr	r0, [pc, #16]	@ (8001258 <ST7735_WriteCommand+0x30>)
 8001248:	f007 fde5 	bl	8008e16 <HAL_SPI_Transmit>
	#endif
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	48000400 	.word	0x48000400
 8001258:	2000039c 	.word	0x2000039c

0800125c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <ST7735_WriteData+0x30>)
 800126e:	f006 fcad 	bl	8007bcc <HAL_GPIO_WritePin>
    	{

    	}
	#endif
	#ifdef WITHOUT_DMA
    	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b29a      	uxth	r2, r3
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <ST7735_WriteData+0x34>)
 800127e:	f007 fdca 	bl	8008e16 <HAL_SPI_Transmit>
	#endif
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	48000400 	.word	0x48000400
 8001290:	2000039c 	.word	0x2000039c

08001294 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80012a6:	e034      	b.n	8001312 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffb7 	bl	8001228 <ST7735_WriteCommand>

        numArgs = *addr++;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80012c4:	7abb      	ldrb	r3, [r7, #10]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012cc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80012dc:	7abb      	ldrb	r3, [r7, #10]
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffbb 	bl	800125c <ST7735_WriteData>
            addr += numArgs;
 80012e6:	7abb      	ldrb	r3, [r7, #10]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80012ee:	89bb      	ldrh	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00e      	beq.n	8001312 <DisplayInit+0x7e>
            ms = *addr++;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80012fe:	89bb      	ldrh	r3, [r7, #12]
 8001300:	2bff      	cmp	r3, #255	@ 0xff
 8001302:	d102      	bne.n	800130a <DisplayInit+0x76>
 8001304:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001308:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	f004 f92f 	bl	8005570 <HAL_Delay>
    while(numCommands--) {
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	73fa      	strb	r2, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1c5      	bne.n	80012a8 <DisplayInit+0x14>
        }
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001346:	202a      	movs	r0, #42	@ 0x2a
 8001348:	f7ff ff6e 	bl	8001228 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800134c:	2300      	movs	r3, #0
 800134e:	733b      	strb	r3, [r7, #12]
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4413      	add	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	737b      	strb	r3, [r7, #13]
 800135c:	2300      	movs	r3, #0
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	797b      	ldrb	r3, [r7, #5]
 8001366:	4413      	add	r3, r2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff72 	bl	800125c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001378:	202b      	movs	r0, #43	@ 0x2b
 800137a:	f7ff ff55 	bl	8001228 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	4413      	add	r3, r2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	793b      	ldrb	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2104      	movs	r1, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5d 	bl	800125c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80013a2:	202c      	movs	r0, #44	@ 0x2c
 80013a4:	f7ff ff40 	bl	8001228 <ST7735_WriteCommand>
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	200001ff 	.word	0x200001ff
 80013b4:	20000200 	.word	0x20000200

080013b8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80013c2:	f7ff ff07 	bl	80011d4 <ST7735_Select>
    ST7735_Reset();
 80013c6:	f7ff ff1b 	bl	8001200 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80013ca:	480c      	ldr	r0, [pc, #48]	@ (80013fc <ST7735_Init+0x44>)
 80013cc:	f7ff ff62 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds2);
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <ST7735_Init+0x48>)
 80013d2:	f7ff ff5f 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds3);
 80013d6:	480b      	ldr	r0, [pc, #44]	@ (8001404 <ST7735_Init+0x4c>)
 80013d8:	f7ff ff5c 	bl	8001294 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <ST7735_Init+0x50>)
 80013de:	2202      	movs	r2, #2
 80013e0:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <ST7735_Init+0x54>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f810 	bl	8001410 <ST7735_SetRotation>
    ST7735_Unselect();
 80013f0:	f7ff fefb 	bl	80011ea <ST7735_Unselect>

}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0800fd6c 	.word	0x0800fd6c
 8001400:	0800fda4 	.word	0x0800fda4
 8001404:	0800fdb4 	.word	0x0800fdb4
 8001408:	200001fd 	.word	0x200001fd
 800140c:	200001fe 	.word	0x200001fe

08001410 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 8001428:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800142a:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d84e      	bhi.n	80014d0 <ST7735_SetRotation+0xc0>
 8001432:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <ST7735_SetRotation+0x28>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	0800146b 	.word	0x0800146b
 8001440:	0800148d 	.word	0x0800148d
 8001444:	080014af 	.word	0x080014af
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001448:	23c0      	movs	r3, #192	@ 0xc0
 800144a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <ST7735_SetRotation+0xf4>)
 800145e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001466:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001468:	e032      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800146a:	23a0      	movs	r3, #160	@ 0xa0
 800146c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001476:	2280      	movs	r2, #128	@ 0x80
 8001478:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001480:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <ST7735_SetRotation+0xf4>)
 8001488:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800148a:	e021      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014a2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014aa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ac:	e010      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80014ae:	2360      	movs	r3, #96	@ 0x60
 80014b0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <ST7735_SetRotation+0xec>)
 80014b4:	2280      	movs	r2, #128	@ 0x80
 80014b6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <ST7735_SetRotation+0xf0>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014c4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014cc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ce:	bf00      	nop
  }
  ST7735_Select();
 80014d0:	f7ff fe80 	bl	80011d4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80014d4:	2036      	movs	r0, #54	@ 0x36
 80014d6:	f7ff fea7 	bl	8001228 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80014da:	f107 030f 	add.w	r3, r7, #15
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff febb 	bl	800125c <ST7735_WriteData>
  ST7735_Unselect();
 80014e6:	f7ff fe80 	bl	80011ea <ST7735_Unselect>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200001fc 	.word	0x200001fc
 80014f8:	200001fa 	.word	0x200001fa
 80014fc:	200001f8 	.word	0x200001f8
 8001500:	200001fd 	.word	0x200001fd
 8001504:	200001ff 	.word	0x200001ff
 8001508:	200001fe 	.word	0x200001fe
 800150c:	20000200 	.word	0x20000200

08001510 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	460b      	mov	r3, r1
 800151c:	80bb      	strh	r3, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <ST7735_DrawPixel+0x74>)
 8001526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800152a:	4293      	cmp	r3, r2
 800152c:	da26      	bge.n	800157c <ST7735_DrawPixel+0x6c>
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	4a15      	ldr	r2, [pc, #84]	@ (8001588 <ST7735_DrawPixel+0x78>)
 8001532:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001536:	4293      	cmp	r3, r2
 8001538:	da20      	bge.n	800157c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800153a:	f7ff fe4b 	bl	80011d4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f7ff fee7 	bl	8001328 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	733b      	strb	r3, [r7, #12]
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2102      	movs	r1, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe73 	bl	800125c <ST7735_WriteData>

    ST7735_Unselect();
 8001576:	f7ff fe38 	bl	80011ea <ST7735_Unselect>
 800157a:	e000      	b.n	800157e <ST7735_DrawPixel+0x6e>
        return;
 800157c:	bf00      	nop
}
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200001f8 	.word	0x200001f8
 8001588:	200001fa 	.word	0x200001fa

0800158c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800158c:	b082      	sub	sp, #8
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b089      	sub	sp, #36	@ 0x24
 8001592:	af00      	add	r7, sp, #0
 8001594:	637b      	str	r3, [r7, #52]	@ 0x34
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	460b      	mov	r3, r1
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	b2d8      	uxtb	r0, r3
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	b2d9      	uxtb	r1, r3
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015b2:	4413      	add	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2dc      	uxtb	r4, r3
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4622      	mov	r2, r4
 80015cc:	f7ff feac 	bl	8001328 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e043      	b.n	800165e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80015d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	3b20      	subs	r3, #32
 80015dc:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	440b      	add	r3, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	e029      	b.n	800164c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00e      	beq.n	8001626 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001608:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	743b      	strb	r3, [r7, #16]
 8001612:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001614:	b2db      	uxtb	r3, r3
 8001616:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2102      	movs	r1, #2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fe1c 	bl	800125c <ST7735_WriteData>
 8001624:	e00f      	b.n	8001646 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	733b      	strb	r3, [r7, #12]
 8001632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001636:	b2db      	uxtb	r3, r3
 8001638:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2102      	movs	r1, #2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe0b 	bl	800125c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3301      	adds	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001650:	461a      	mov	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4293      	cmp	r3, r2
 8001656:	d3cf      	bcc.n	80015f8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001662:	461a      	mov	r2, r3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4293      	cmp	r3, r2
 8001668:	d3b5      	bcc.n	80015d6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3724      	adds	r7, #36	@ 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001676:	b002      	add	sp, #8
 8001678:	4770      	bx	lr
	...

0800167c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800167c:	b082      	sub	sp, #8
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af04      	add	r7, sp, #16
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	4603      	mov	r3, r0
 800168a:	80fb      	strh	r3, [r7, #6]
 800168c:	460b      	mov	r3, r1
 800168e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001690:	f7ff fda0 	bl	80011d4 <ST7735_Select>

    while(*str) {
 8001694:	e033      	b.n	80016fe <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	7d3a      	ldrb	r2, [r7, #20]
 800169a:	4413      	add	r3, r2
 800169c:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <ST7735_WriteString+0xa0>)
 800169e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016a2:	4293      	cmp	r3, r2
 80016a4:	db16      	blt.n	80016d4 <ST7735_WriteString+0x58>
            x = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80016aa:	7d7b      	ldrb	r3, [r7, #21]
 80016ac:	461a      	mov	r2, r3
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80016b4:	88bb      	ldrh	r3, [r7, #4]
 80016b6:	7d7a      	ldrb	r2, [r7, #21]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <ST7735_WriteString+0xa4>)
 80016bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	da21      	bge.n	8001708 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d103      	bne.n	80016d4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	603b      	str	r3, [r7, #0]
                continue;
 80016d2:	e014      	b.n	80016fe <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	88b9      	ldrh	r1, [r7, #4]
 80016da:	88f8      	ldrh	r0, [r7, #6]
 80016dc:	8c3b      	ldrh	r3, [r7, #32]
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	8bbb      	ldrh	r3, [r7, #28]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f7ff ff4f 	bl	800158c <ST7735_WriteChar>
        x += font.width;
 80016ee:	7d3b      	ldrb	r3, [r7, #20]
 80016f0:	461a      	mov	r2, r3
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4413      	add	r3, r2
 80016f6:	80fb      	strh	r3, [r7, #6]
        str++;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1c7      	bne.n	8001696 <ST7735_WriteString+0x1a>
 8001706:	e000      	b.n	800170a <ST7735_WriteString+0x8e>
                break;
 8001708:	bf00      	nop
    }

    ST7735_Unselect();
 800170a:	f7ff fd6e 	bl	80011ea <ST7735_Unselect>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001718:	b002      	add	sp, #8
 800171a:	4770      	bx	lr
 800171c:	200001f8 	.word	0x200001f8
 8001720:	200001fa 	.word	0x200001fa

08001724 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	4603      	mov	r3, r0
 8001738:	80bb      	strh	r3, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001746:	f9b2 2000 	ldrsh.w	r2, [r2]
 800174a:	4293      	cmp	r3, r2
 800174c:	da67      	bge.n	800181e <ST7735_FillRectangle+0xfa>
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	4a36      	ldr	r2, [pc, #216]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001752:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001756:	4293      	cmp	r3, r2
 8001758:	da61      	bge.n	800181e <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 800175a:	88fa      	ldrh	r2, [r7, #6]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4413      	add	r3, r2
 8001760:	4a31      	ldr	r2, [pc, #196]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001762:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001766:	4293      	cmp	r3, r2
 8001768:	dd06      	ble.n	8001778 <ST7735_FillRectangle+0x54>
 800176a:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <ST7735_FillRectangle+0x104>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	b29a      	uxth	r2, r3
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	883b      	ldrh	r3, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001780:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001784:	4293      	cmp	r3, r2
 8001786:	dd06      	ble.n	8001796 <ST7735_FillRectangle+0x72>
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <ST7735_FillRectangle+0x108>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b29a      	uxth	r2, r3
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001796:	f7ff fd1d 	bl	80011d4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	b2d8      	uxtb	r0, r3
 800179e:	88bb      	ldrh	r3, [r7, #4]
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b2dc      	uxtb	r4, r3
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	883b      	ldrh	r3, [r7, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4622      	mov	r2, r4
 80017c4:	f7ff fdb0 	bl	8001328 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80017c8:	8c3b      	ldrh	r3, [r7, #32]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	733b      	strb	r3, [r7, #12]
 80017d2:	8c3b      	ldrh	r3, [r7, #32]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017de:	4814      	ldr	r0, [pc, #80]	@ (8001830 <ST7735_FillRectangle+0x10c>)
 80017e0:	f006 f9f4 	bl	8007bcc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80017e4:	883b      	ldrh	r3, [r7, #0]
 80017e6:	80bb      	strh	r3, [r7, #4]
 80017e8:	e013      	b.n	8001812 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	e00a      	b.n	8001806 <ST7735_FillRectangle+0xe2>
				{

				}
			#endif
			#ifdef WITHOUT_DMA
				HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80017f0:	f107 010c 	add.w	r1, r7, #12
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	2202      	movs	r2, #2
 80017fa:	480e      	ldr	r0, [pc, #56]	@ (8001834 <ST7735_FillRectangle+0x110>)
 80017fc:	f007 fb0b 	bl	8008e16 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	3b01      	subs	r3, #1
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f1      	bne.n	80017f0 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e8      	bne.n	80017ea <ST7735_FillRectangle+0xc6>
			#endif
        }
    }

    ST7735_Unselect();
 8001818:	f7ff fce7 	bl	80011ea <ST7735_Unselect>
 800181c:	e000      	b.n	8001820 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800181e:	bf00      	nop
}
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	200001f8 	.word	0x200001f8
 800182c:	200001fa 	.word	0x200001fa
 8001830:	48000400 	.word	0x48000400
 8001834:	2000039c 	.word	0x2000039c

08001838 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Interrupts *****************************************************************/
// GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b0a0      	sub	sp, #128	@ 0x80
 800183c:	af04      	add	r7, sp, #16
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	// Variables
	uint8_t next_line = get_next_line(); // Offset in pixel
 8001842:	f003 fd4b 	bl	80052dc <get_next_line>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	char msg_console[80];
	char msg_display[20];
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	// Interrupt Routine
	switch (GPIO_Pin) {
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001852:	d008      	beq.n	8001866 <HAL_GPIO_EXTI_Callback+0x2e>
 8001854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001858:	f300 8097 	bgt.w	800198a <HAL_GPIO_EXTI_Callback+0x152>
 800185c:	2b02      	cmp	r3, #2
 800185e:	d016      	beq.n	800188e <HAL_GPIO_EXTI_Callback+0x56>
 8001860:	2b04      	cmp	r3, #4
 8001862:	d053      	beq.n	800190c <HAL_GPIO_EXTI_Callback+0xd4>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
		HAL_MAX_DELAY);
		break;
	default:
		break;
 8001864:	e091      	b.n	800198a <HAL_GPIO_EXTI_Callback+0x152>
		switch (handler_state) {
 8001866:	4b4b      	ldr	r3, [pc, #300]	@ (8001994 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_GPIO_EXTI_Callback+0x3c>
 800186e:	2b01      	cmp	r3, #1
 8001870:	d004      	beq.n	800187c <HAL_GPIO_EXTI_Callback+0x44>
 8001872:	e007      	b.n	8001884 <HAL_GPIO_EXTI_Callback+0x4c>
			set_handler_state(SINUS_MOD);
 8001874:	2001      	movs	r0, #1
 8001876:	f001 ff5f 	bl	8003738 <set_handler_state>
			break;
 800187a:	e007      	b.n	800188c <HAL_GPIO_EXTI_Callback+0x54>
			set_handler_state(IDLE);
 800187c:	2000      	movs	r0, #0
 800187e:	f001 ff5b 	bl	8003738 <set_handler_state>
			break;
 8001882:	e003      	b.n	800188c <HAL_GPIO_EXTI_Callback+0x54>
			set_handler_state(IDLE);
 8001884:	2000      	movs	r0, #0
 8001886:	f001 ff57 	bl	8003738 <set_handler_state>
			break;
 800188a:	bf00      	nop
		break;
 800188c:	e07e      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x154>
		ST7735_FillRectangle(0, 7 * next_line, 0, next_line, BLACK);
 800188e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001892:	b29b      	uxth	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	b299      	uxth	r1, r3
 800189c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	9200      	str	r2, [sp, #0]
 80018a6:	2200      	movs	r2, #0
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff ff3b 	bl	8001724 <ST7735_FillRectangle>
		sprintf(msg_display, "Taster1 gedrueckt!");
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	4939      	ldr	r1, [pc, #228]	@ (8001998 <HAL_GPIO_EXTI_Callback+0x160>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f00b fac3 	bl	800ce40 <siprintf>
		ST7735_WriteString(0, 8 * next_line, msg_display, Font_7x10, GREEN,
 80018ba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018be:	b29b      	uxth	r3, r3
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	b299      	uxth	r1, r3
 80018c4:	4b35      	ldr	r3, [pc, #212]	@ (800199c <HAL_GPIO_EXTI_Callback+0x164>)
 80018c6:	f107 0008 	add.w	r0, r7, #8
 80018ca:	2200      	movs	r2, #0
 80018cc:	9202      	str	r2, [sp, #8]
 80018ce:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80018d2:	9201      	str	r2, [sp, #4]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4602      	mov	r2, r0
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff fecd 	bl	800167c <ST7735_WriteString>
		sprintf(msg_console, "Taster1 gedrückt! \r\n");
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	492e      	ldr	r1, [pc, #184]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x168>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f00b faa9 	bl	800ce40 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fce4 	bl	80002c0 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	f107 011c 	add.w	r1, r7, #28
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	4827      	ldr	r0, [pc, #156]	@ (80019a4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001906:	f009 fe16 	bl	800b536 <HAL_UART_Transmit>
		break;
 800190a:	e03f      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x154>
		ST7735_FillRectangle(0, 7 * next_line, 0, next_line, BLACK);
 800190c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001910:	b29b      	uxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	00d2      	lsls	r2, r2, #3
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	b299      	uxth	r1, r3
 800191a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800191e:	b29b      	uxth	r3, r3
 8001920:	2200      	movs	r2, #0
 8001922:	9200      	str	r2, [sp, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff fefc 	bl	8001724 <ST7735_FillRectangle>
		sprintf(msg_display, "Taster2 gedrueckt!");
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	491d      	ldr	r1, [pc, #116]	@ (80019a8 <HAL_GPIO_EXTI_Callback+0x170>)
 8001932:	4618      	mov	r0, r3
 8001934:	f00b fa84 	bl	800ce40 <siprintf>
		ST7735_WriteString(0, 8 * next_line, msg_display, Font_7x10, GREEN,
 8001938:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800193c:	b29b      	uxth	r3, r3
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	b299      	uxth	r1, r3
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_GPIO_EXTI_Callback+0x164>)
 8001944:	f107 0008 	add.w	r0, r7, #8
 8001948:	2200      	movs	r2, #0
 800194a:	9202      	str	r2, [sp, #8]
 800194c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001950:	9201      	str	r2, [sp, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4602      	mov	r2, r0
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fe8e 	bl	800167c <ST7735_WriteString>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4911      	ldr	r1, [pc, #68]	@ (80019ac <HAL_GPIO_EXTI_Callback+0x174>)
 8001966:	4618      	mov	r0, r3
 8001968:	f00b fa6a 	bl	800ce40 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fca5 	bl	80002c0 <strlen>
 8001976:	4603      	mov	r3, r0
 8001978:	b29a      	uxth	r2, r3
 800197a:	f107 011c 	add.w	r1, r7, #28
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001984:	f009 fdd7 	bl	800b536 <HAL_UART_Transmit>
		break;
 8001988:	e000      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x154>
		break;
 800198a:	bf00      	nop
	}
}
 800198c:	bf00      	nop
 800198e:	3770      	adds	r7, #112	@ 0x70
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000080c 	.word	0x2000080c
 8001998:	0800f9b8 	.word	0x0800f9b8
 800199c:	20000000 	.word	0x20000000
 80019a0:	0800f9cc 	.word	0x0800f9cc
 80019a4:	20000770 	.word	0x20000770
 80019a8:	0800f9e4 	.word	0x0800f9e4
 80019ac:	0800f9f8 	.word	0x0800f9f8

080019b0 <HAL_TIM_PeriodElapsedCallback>:

// Timer timeout Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b0a6      	sub	sp, #152	@ 0x98
 80019b6:	af06      	add	r7, sp, #24
 80019b8:	6078      	str	r0, [r7, #4]
	// Variables
	uint8_t next_line = get_next_line(); // Offset in pixel
 80019ba:	f003 fc8f 	bl	80052dc <get_next_line>
 80019be:	4603      	mov	r3, r0
 80019c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	char msg_console[80];
	char msg_display[20];
	uint32_t f0 = get_f0();
 80019c4:	f003 fc92 	bl	80052ec <get_f0>
 80019c8:	67b8      	str	r0, [r7, #120]	@ 0x78
	float A0 = get_A0();
 80019ca:	f003 fc98 	bl	80052fe <get_A0>
 80019ce:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	// Überprüfe welcher Timer diese callback Funktion aufruft
	// time_val um 100ms inkrementieren
	if (htim == &htim16) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a83      	ldr	r2, [pc, #524]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d108      	bne.n	80019ec <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (handler_state == SINUS_MOD) {
 80019da:	4b83      	ldr	r3, [pc, #524]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80fb 	bne.w	8001bda <HAL_TIM_PeriodElapsedCallback+0x22a>
			inc_handler_currentTime(100);
 80019e4:	2064      	movs	r0, #100	@ 0x64
 80019e6:	f001 fec5 	bl	8003774 <inc_handler_currentTime>
		default:
			set_handler_state(IDLE);
			break;
		}
	}
}
 80019ea:	e0f6      	b.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x22a>
	else if (htim == &htim17) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a7f      	ldr	r2, [pc, #508]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	f040 80f2 	bne.w	8001bda <HAL_TIM_PeriodElapsedCallback+0x22a>
		switch (handler_state) {
 80019f6:	4b7c      	ldr	r3, [pc, #496]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x54>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d027      	beq.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8001a02:	e0e6      	b.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0x222>
			ST7735_WriteString(0, 4 * next_line, "Poti1: xx", Font_7x10, GREEN,
 8001a04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	4b78      	ldr	r3, [pc, #480]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	9202      	str	r2, [sp, #8]
 8001a14:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a18:	9201      	str	r2, [sp, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	9200      	str	r2, [sp, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a74      	ldr	r2, [pc, #464]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fe2a 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 5 * next_line, "Poti2: xx", Font_7x10, GREEN,
 8001a28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	b299      	uxth	r1, r3
 8001a36:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	9202      	str	r2, [sp, #8]
 8001a3c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a40:	9201      	str	r2, [sp, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6b      	ldr	r2, [pc, #428]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fe16 	bl	800167c <ST7735_WriteString>
			break;
 8001a50:	e0c3      	b.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x22a>
			adc_values *ptr = get_adc_values();
 8001a52:	f001 fea3 	bl	800379c <get_adc_values>
 8001a56:	6738      	str	r0, [r7, #112]	@ 0x70
			sprintf(msg_display, "Poti1: %2.2fV", ptr->poti1_Vf);
 8001a58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd9b 	bl	8000598 <__aeabi_f2d>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	f107 000c 	add.w	r0, r7, #12
 8001a6a:	4964      	ldr	r1, [pc, #400]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001a6c:	f00b f9e8 	bl	800ce40 <siprintf>
			ST7735_WriteString(0, 4 * next_line, msg_display, Font_7x10, GREEN,
 8001a70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001a7c:	f107 000c 	add.w	r0, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	9202      	str	r2, [sp, #8]
 8001a84:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a88:	9201      	str	r2, [sp, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	9200      	str	r2, [sp, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4602      	mov	r2, r0
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fdf2 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "Poti2: %2.2fV", ptr->poti2_Vf);
 8001a98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd7b 	bl	8000598 <__aeabi_f2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	f107 000c 	add.w	r0, r7, #12
 8001aaa:	4955      	ldr	r1, [pc, #340]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001aac:	f00b f9c8 	bl	800ce40 <siprintf>
			ST7735_WriteString(0, 5 * next_line, msg_display, Font_7x10, GREEN,
 8001ab0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	b299      	uxth	r1, r3
 8001abe:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001ac0:	f107 000c 	add.w	r0, r7, #12
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	9202      	str	r2, [sp, #8]
 8001ac8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001acc:	9201      	str	r2, [sp, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fdd0 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "f0 =%4luHz", f0);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001ae2:	4948      	ldr	r1, [pc, #288]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00b f9ab 	bl	800ce40 <siprintf>
			ST7735_WriteString(0, 6 * next_line, msg_display, Font_7x10, GREEN,
 8001aea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	0052      	lsls	r2, r2, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	b299      	uxth	r1, r3
 8001afa:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001afc:	f107 000c 	add.w	r0, r7, #12
 8001b00:	2200      	movs	r2, #0
 8001b02:	9202      	str	r2, [sp, #8]
 8001b04:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b08:	9201      	str	r2, [sp, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4602      	mov	r2, r0
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fdb2 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "A0 =  %2.0f%%", 100.0 * A0);
 8001b18:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001b1a:	f7fe fd3d 	bl	8000598 <__aeabi_f2d>
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	4b39      	ldr	r3, [pc, #228]	@ (8001c08 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001b24:	f7fe fd90 	bl	8000648 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	f107 000c 	add.w	r0, r7, #12
 8001b30:	4936      	ldr	r1, [pc, #216]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001b32:	f00b f985 	bl	800ce40 <siprintf>
			ST7735_WriteString(0, 7 * next_line, msg_display, Font_7x10, GREEN,
 8001b36:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	00d2      	lsls	r2, r2, #3
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	b299      	uxth	r1, r3
 8001b44:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001b46:	f107 000c 	add.w	r0, r7, #12
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	9202      	str	r2, [sp, #8]
 8001b4e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b52:	9201      	str	r2, [sp, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fd8d 	bl	800167c <ST7735_WriteString>
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 8001b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b64:	681b      	ldr	r3, [r3, #0]
			sprintf(msg_console,
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fd16 	bl	8000598 <__aeabi_f2d>
 8001b6c:	4682      	mov	sl, r0
 8001b6e:	468b      	mov	fp, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 8001b70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b72:	685b      	ldr	r3, [r3, #4]
			sprintf(msg_console,
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fd0f 	bl	8000598 <__aeabi_f2d>
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	460d      	mov	r5, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 8001b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b80:	689b      	ldr	r3, [r3, #8]
			sprintf(msg_console,
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fd08 	bl	8000598 <__aeabi_f2d>
 8001b88:	4680      	mov	r8, r0
 8001b8a:	4689      	mov	r9, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 8001b8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b8e:	68db      	ldr	r3, [r3, #12]
			sprintf(msg_console,
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fd01 	bl	8000598 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	f107 0020 	add.w	r0, r7, #32
 8001b9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ba2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ba6:	e9cd 4500 	strd	r4, r5, [sp]
 8001baa:	4652      	mov	r2, sl
 8001bac:	465b      	mov	r3, fp
 8001bae:	4918      	ldr	r1, [pc, #96]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bb0:	f00b f946 	bl	800ce40 <siprintf>
					strlen(msg_console), HAL_MAX_DELAY);
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fb81 	bl	80002c0 <strlen>
 8001bbe:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	f107 0120 	add.w	r1, r7, #32
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	4812      	ldr	r0, [pc, #72]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001bcc:	f009 fcb3 	bl	800b536 <HAL_UART_Transmit>
			break;
 8001bd0:	e003      	b.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x22a>
			set_handler_state(IDLE);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f001 fdb0 	bl	8003738 <set_handler_state>
			break;
 8001bd8:	bf00      	nop
}
 8001bda:	bf00      	nop
 8001bdc:	3780      	adds	r7, #128	@ 0x80
 8001bde:	46bd      	mov	sp, r7
 8001be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001be4:	20000498 	.word	0x20000498
 8001be8:	2000080c 	.word	0x2000080c
 8001bec:	200004e4 	.word	0x200004e4
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	0800fa10 	.word	0x0800fa10
 8001bf8:	0800fa1c 	.word	0x0800fa1c
 8001bfc:	0800fa28 	.word	0x0800fa28
 8001c00:	0800fa38 	.word	0x0800fa38
 8001c04:	0800fa48 	.word	0x0800fa48
 8001c08:	40590000 	.word	0x40590000
 8001c0c:	0800fa54 	.word	0x0800fa54
 8001c10:	0800fa64 	.word	0x0800fa64
 8001c14:	20000770 	.word	0x20000770

08001c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1c:	f003 fc37 	bl	800548e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c20:	f000 f820 	bl	8001c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c24:	f000 fd68 	bl	80026f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c28:	f000 fcf8 	bl	800261c <MX_DMA_Init>
  MX_SPI1_Init();
 8001c2c:	f000 f964 	bl	8001ef8 <MX_SPI1_Init>
  MX_TIM16_Init();
 8001c30:	f000 fc58 	bl	80024e4 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001c34:	f000 f862 	bl	8001cfc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001c38:	f000 fca4 	bl	8002584 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001c3c:	f000 fc7a 	bl	8002534 <MX_TIM17_Init>
  MX_ADC2_Init();
 8001c40:	f000 f8f4 	bl	8001e2c <MX_ADC2_Init>
  MX_TIM1_Init();
 8001c44:	f000 f996 	bl	8001f74 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001c48:	f000 fb20 	bl	800228c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

	// Display Init
	ST7735_Init(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7ff fbb3 	bl	80013b8 <ST7735_Init>
	fillScreen(BLACK);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff faa4 	bl	80011a0 <fillScreen>

	// Set first State
	set_handler_state(IDLE);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f001 fd6d 	bl	8003738 <set_handler_state>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Run StateMachine
		handler_task();
 8001c5e:	f001 fd5f 	bl	8003720 <handler_task>
 8001c62:	e7fc      	b.n	8001c5e <main+0x46>

08001c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b094      	sub	sp, #80	@ 0x50
 8001c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6a:	f107 0318 	add.w	r3, r7, #24
 8001c6e:	2238      	movs	r2, #56	@ 0x38
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f00b f947 	bl	800cf06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c86:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c8a:	f005 ffe9 	bl	8007c60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c98:	2340      	movs	r3, #64	@ 0x40
 8001c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001ca8:	234b      	movs	r3, #75	@ 0x4b
 8001caa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb8:	f107 0318 	add.w	r3, r7, #24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f006 f883 	bl	8007dc8 <HAL_RCC_OscConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001cc8:	f000 fddc 	bl	8002884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ccc:	230f      	movs	r3, #15
 8001cce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f006 fb81 	bl	80083ec <HAL_RCC_ClockConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001cf0:	f000 fdc8 	bl	8002884 <Error_Handler>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3750      	adds	r7, #80	@ 0x50
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2220      	movs	r2, #32
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f00b f8f6 	bl	800cf06 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d1a:	4b40      	ldr	r3, [pc, #256]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d22:	4b3e      	ldr	r3, [pc, #248]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d24:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d30:	4b3a      	ldr	r3, [pc, #232]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001d36:	4b39      	ldr	r3, [pc, #228]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d3c:	4b37      	ldr	r3, [pc, #220]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d42:	4b36      	ldr	r3, [pc, #216]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d44:	2208      	movs	r2, #8
 8001d46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d48:	4b34      	ldr	r3, [pc, #208]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d4e:	4b33      	ldr	r3, [pc, #204]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001d54:	4b31      	ldr	r3, [pc, #196]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d56:	2203      	movs	r2, #3
 8001d58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d5a:	4b30      	ldr	r3, [pc, #192]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d62:	4b2e      	ldr	r3, [pc, #184]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d68:	4b2c      	ldr	r3, [pc, #176]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d76:	4b29      	ldr	r3, [pc, #164]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001d7c:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d84:	4825      	ldr	r0, [pc, #148]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001d86:	f003 fe81 	bl	8005a8c <HAL_ADC_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001d90:	f000 fd78 	bl	8002884 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	481f      	ldr	r0, [pc, #124]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001da0:	f005 f830 	bl	8006e04 <HAL_ADCEx_MultiModeConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001daa:	f000 fd6b 	bl	8002884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	@ (8001e20 <MX_ADC1_Init+0x124>)
 8001db0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001db2:	2306      	movs	r3, #6
 8001db4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001db6:	2307      	movs	r3, #7
 8001db8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dba:	237f      	movs	r3, #127	@ 0x7f
 8001dbc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4814      	ldr	r0, [pc, #80]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001dcc:	f004 f96e 	bl	80060ac <HAL_ADC_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001dd6:	f000 fd55 	bl	8002884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001dda:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <MX_ADC1_Init+0x128>)
 8001ddc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001dde:	230c      	movs	r3, #12
 8001de0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	480d      	ldr	r0, [pc, #52]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001de8:	f004 f960 	bl	80060ac <HAL_ADC_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001df2:	f000 fd47 	bl	8002884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <MX_ADC1_Init+0x12c>)
 8001df8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001dfa:	2312      	movs	r3, #18
 8001dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4806      	ldr	r0, [pc, #24]	@ (8001e1c <MX_ADC1_Init+0x120>)
 8001e04:	f004 f952 	bl	80060ac <HAL_ADC_ConfigChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001e0e:	f000 fd39 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3730      	adds	r7, #48	@ 0x30
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000204 	.word	0x20000204
 8001e20:	04300002 	.word	0x04300002
 8001e24:	08600004 	.word	0x08600004
 8001e28:	3ef08000 	.word	0x3ef08000

08001e2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e32:	463b      	mov	r3, r7
 8001e34:	2220      	movs	r2, #32
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f00b f864 	bl	800cf06 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e40:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef0 <MX_ADC2_Init+0xc4>)
 8001e42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e44:	4b29      	ldr	r3, [pc, #164]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e4a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e4c:	4b27      	ldr	r3, [pc, #156]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e52:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001e58:	4b24      	ldr	r3, [pc, #144]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e5e:	4b23      	ldr	r3, [pc, #140]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e64:	4b21      	ldr	r3, [pc, #132]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e66:	2208      	movs	r2, #8
 8001e68:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e6a:	4b20      	ldr	r3, [pc, #128]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e70:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001e76:	4b1d      	ldr	r3, [pc, #116]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001e90:	4b16      	ldr	r3, [pc, #88]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e98:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ea6:	4811      	ldr	r0, [pc, #68]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001ea8:	f003 fdf0 	bl	8005a8c <HAL_ADC_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001eb2:	f000 fce7 	bl	8002884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <MX_ADC2_Init+0xc8>)
 8001eb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eba:	2306      	movs	r3, #6
 8001ebc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ec2:	237f      	movs	r3, #127	@ 0x7f
 8001ec4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ece:	463b      	mov	r3, r7
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4806      	ldr	r0, [pc, #24]	@ (8001eec <MX_ADC2_Init+0xc0>)
 8001ed4:	f004 f8ea 	bl	80060ac <HAL_ADC_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001ede:	f000 fcd1 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000270 	.word	0x20000270
 8001ef0:	50000100 	.word	0x50000100
 8001ef4:	47520000 	.word	0x47520000

08001ef8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001efe:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <MX_SPI1_Init+0x78>)
 8001f00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f10:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f2e:	2210      	movs	r2, #16
 8001f30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f46:	2207      	movs	r2, #7
 8001f48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f52:	2208      	movs	r2, #8
 8001f54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <MX_SPI1_Init+0x74>)
 8001f58:	f006 feb2 	bl	8008cc0 <HAL_SPI_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f62:	f000 fc8f 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000039c 	.word	0x2000039c
 8001f70:	40013000 	.word	0x40013000

08001f74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0b2      	sub	sp, #200	@ 0xc8
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f94:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
 8001fa4:	615a      	str	r2, [r3, #20]
 8001fa6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fa8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fac:	2234      	movs	r2, #52	@ 0x34
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00a ffa8 	bl	800cf06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fb6:	4bb1      	ldr	r3, [pc, #708]	@ (800227c <MX_TIM1_Init+0x308>)
 8001fb8:	4ab1      	ldr	r2, [pc, #708]	@ (8002280 <MX_TIM1_Init+0x30c>)
 8001fba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fbc:	4baf      	ldr	r3, [pc, #700]	@ (800227c <MX_TIM1_Init+0x308>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001fc2:	4bae      	ldr	r3, [pc, #696]	@ (800227c <MX_TIM1_Init+0x308>)
 8001fc4:	2240      	movs	r2, #64	@ 0x40
 8001fc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3749;
 8001fc8:	4bac      	ldr	r3, [pc, #688]	@ (800227c <MX_TIM1_Init+0x308>)
 8001fca:	f640 62a5 	movw	r2, #3749	@ 0xea5
 8001fce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd0:	4baa      	ldr	r3, [pc, #680]	@ (800227c <MX_TIM1_Init+0x308>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fd6:	4ba9      	ldr	r3, [pc, #676]	@ (800227c <MX_TIM1_Init+0x308>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fdc:	4ba7      	ldr	r3, [pc, #668]	@ (800227c <MX_TIM1_Init+0x308>)
 8001fde:	2280      	movs	r2, #128	@ 0x80
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fe2:	48a6      	ldr	r0, [pc, #664]	@ (800227c <MX_TIM1_Init+0x308>)
 8001fe4:	f007 f9f0 	bl	80093c8 <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001fee:	f000 fc49 	bl	8002884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ffa:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001ffe:	4619      	mov	r1, r3
 8002000:	489e      	ldr	r0, [pc, #632]	@ (800227c <MX_TIM1_Init+0x308>)
 8002002:	f008 f8cf 	bl	800a1a4 <HAL_TIM_ConfigClockSource>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800200c:	f000 fc3a 	bl	8002884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002010:	489a      	ldr	r0, [pc, #616]	@ (800227c <MX_TIM1_Init+0x308>)
 8002012:	f007 fad8 	bl	80095c6 <HAL_TIM_PWM_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800201c:	f000 fc32 	bl	8002884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002032:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002036:	4619      	mov	r1, r3
 8002038:	4890      	ldr	r0, [pc, #576]	@ (800227c <MX_TIM1_Init+0x308>)
 800203a:	f009 f897 	bl	800b16c <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8002044:	f000 fc1e 	bl	8002884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002048:	2360      	movs	r3, #96	@ 0x60
 800204a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  sConfigOC.Pulse = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002060:	2304      	movs	r3, #4
 8002062:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002072:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	4880      	ldr	r0, [pc, #512]	@ (800227c <MX_TIM1_Init+0x308>)
 800207c:	f007 ff7e 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002086:	f000 fbfd 	bl	8002884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800208a:	2370      	movs	r3, #112	@ 0x70
 800208c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002090:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002094:	2204      	movs	r2, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4878      	ldr	r0, [pc, #480]	@ (800227c <MX_TIM1_Init+0x308>)
 800209a:	f007 ff6f 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80020a4:	f000 fbee 	bl	8002884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a8:	2360      	movs	r3, #96	@ 0x60
 80020aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020ae:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80020b2:	2208      	movs	r2, #8
 80020b4:	4619      	mov	r1, r3
 80020b6:	4871      	ldr	r0, [pc, #452]	@ (800227c <MX_TIM1_Init+0x308>)
 80020b8:	f007 ff60 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80020c2:	f000 fbdf 	bl	8002884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80020c6:	2370      	movs	r3, #112	@ 0x70
 80020c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020cc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80020d0:	220c      	movs	r2, #12
 80020d2:	4619      	mov	r1, r3
 80020d4:	4869      	ldr	r0, [pc, #420]	@ (800227c <MX_TIM1_Init+0x308>)
 80020d6:	f007 ff51 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80020e0:	f000 fbd0 	bl	8002884 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020ec:	2300      	movs	r3, #0
 80020ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sBreakDeadTimeConfig.DeadTime = 139;
 80020f0:	238b      	movs	r3, #139	@ 0x8b
 80020f2:	663b      	str	r3, [r7, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	667b      	str	r3, [r7, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002102:	2300      	movs	r3, #0
 8002104:	673b      	str	r3, [r7, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	677b      	str	r3, [r7, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800210a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800210e:	67bb      	str	r3, [r7, #120]	@ 0x78
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	67fb      	str	r3, [r7, #124]	@ 0x7c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800211a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800211e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002122:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002126:	4619      	mov	r1, r3
 8002128:	4854      	ldr	r0, [pc, #336]	@ (800227c <MX_TIM1_Init+0x308>)
 800212a:	f009 f8b5 	bl	800b298 <HAL_TIMEx_ConfigBreakDeadTime>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM1_Init+0x1c4>
  {
    Error_Handler();
 8002134:	f000 fba6 	bl	8002884 <Error_Handler>
	//	CH1 = CH2 = PWM Mode 1
	// LEVEL_2
	//	CH1 = PWM Mode 1, CH2 = PWM Mode 2!
	// Variablen
	char msg_console[80]; // array für Ausgabe
	int level = get_level();
 8002138:	f003 f8ed 	bl	8005316 <get_level>
 800213c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
	int stufen = get_stufen();
 8002140:	f003 f8f1 	bl	8005326 <get_stufen>
 8002144:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

	switch (stufen) {
 8002148:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d004      	beq.n	800215a <MX_TIM1_Init+0x1e6>
 8002150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002154:	2b02      	cmp	r3, #2
 8002156:	d033      	beq.n	80021c0 <MX_TIM1_Init+0x24c>
			sprintf(msg_console, "Error: Level 2-3 moeglich!");
			break;
		}
		break;
	default:
		break;
 8002158:	e07d      	b.n	8002256 <MX_TIM1_Init+0x2e2>
 800215a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800215e:	2b02      	cmp	r3, #2
 8002160:	d004      	beq.n	800216c <MX_TIM1_Init+0x1f8>
 8002162:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002166:	2b03      	cmp	r3, #3
 8002168:	d010      	beq.n	800218c <MX_TIM1_Init+0x218>
 800216a:	e01f      	b.n	80021ac <MX_TIM1_Init+0x238>
			sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800216c:	2370      	movs	r3, #112	@ 0x70
 800216e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002172:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002176:	2204      	movs	r2, #4
 8002178:	4619      	mov	r1, r3
 800217a:	4840      	ldr	r0, [pc, #256]	@ (800227c <MX_TIM1_Init+0x308>)
 800217c:	f007 fefe 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d018      	beq.n	80021b8 <MX_TIM1_Init+0x244>
				Error_Handler();
 8002186:	f000 fb7d 	bl	8002884 <Error_Handler>
			break;
 800218a:	e015      	b.n	80021b8 <MX_TIM1_Init+0x244>
			sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218c:	2360      	movs	r3, #96	@ 0x60
 800218e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002192:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002196:	2204      	movs	r2, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4838      	ldr	r0, [pc, #224]	@ (800227c <MX_TIM1_Init+0x308>)
 800219c:	f007 feee 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <MX_TIM1_Init+0x248>
				Error_Handler();
 80021a6:	f000 fb6d 	bl	8002884 <Error_Handler>
			break;
 80021aa:	e007      	b.n	80021bc <MX_TIM1_Init+0x248>
			sprintf(msg_console, "Error: Level 2-3 moeglich!");
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	4935      	ldr	r1, [pc, #212]	@ (8002284 <MX_TIM1_Init+0x310>)
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00a fe45 	bl	800ce40 <siprintf>
			break;
 80021b6:	e002      	b.n	80021be <MX_TIM1_Init+0x24a>
			break;
 80021b8:	bf00      	nop
 80021ba:	e04c      	b.n	8002256 <MX_TIM1_Init+0x2e2>
			break;
 80021bc:	bf00      	nop
		break;
 80021be:	e04a      	b.n	8002256 <MX_TIM1_Init+0x2e2>
 80021c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d004      	beq.n	80021d2 <MX_TIM1_Init+0x25e>
 80021c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d01c      	beq.n	800220a <MX_TIM1_Init+0x296>
 80021d0:	e037      	b.n	8002242 <MX_TIM1_Init+0x2ce>
			sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80021d2:	2370      	movs	r3, #112	@ 0x70
 80021d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80021d8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80021dc:	2204      	movs	r2, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4826      	ldr	r0, [pc, #152]	@ (800227c <MX_TIM1_Init+0x308>)
 80021e2:	f007 fecb 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM1_Init+0x27c>
				Error_Handler();
 80021ec:	f000 fb4a 	bl	8002884 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 80021f0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80021f4:	220c      	movs	r2, #12
 80021f6:	4619      	mov	r1, r3
 80021f8:	4820      	ldr	r0, [pc, #128]	@ (800227c <MX_TIM1_Init+0x308>)
 80021fa:	f007 febf 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d024      	beq.n	800224e <MX_TIM1_Init+0x2da>
				Error_Handler();
 8002204:	f000 fb3e 	bl	8002884 <Error_Handler>
			break;
 8002208:	e021      	b.n	800224e <MX_TIM1_Init+0x2da>
			sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220a:	2360      	movs	r3, #96	@ 0x60
 800220c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002210:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002214:	2204      	movs	r2, #4
 8002216:	4619      	mov	r1, r3
 8002218:	4818      	ldr	r0, [pc, #96]	@ (800227c <MX_TIM1_Init+0x308>)
 800221a:	f007 feaf 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM1_Init+0x2b4>
				Error_Handler();
 8002224:	f000 fb2e 	bl	8002884 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8002228:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800222c:	220c      	movs	r2, #12
 800222e:	4619      	mov	r1, r3
 8002230:	4812      	ldr	r0, [pc, #72]	@ (800227c <MX_TIM1_Init+0x308>)
 8002232:	f007 fea3 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <MX_TIM1_Init+0x2de>
				Error_Handler();
 800223c:	f000 fb22 	bl	8002884 <Error_Handler>
			break;
 8002240:	e007      	b.n	8002252 <MX_TIM1_Init+0x2de>
			sprintf(msg_console, "Error: Level 2-3 moeglich!");
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	490f      	ldr	r1, [pc, #60]	@ (8002284 <MX_TIM1_Init+0x310>)
 8002246:	4618      	mov	r0, r3
 8002248:	f00a fdfa 	bl	800ce40 <siprintf>
			break;
 800224c:	e002      	b.n	8002254 <MX_TIM1_Init+0x2e0>
			break;
 800224e:	bf00      	nop
 8002250:	e000      	b.n	8002254 <MX_TIM1_Init+0x2e0>
			break;
 8002252:	bf00      	nop
		break;
 8002254:	bf00      	nop
	}
	// PuTTY Ausgabe
	HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f831 	bl	80002c0 <strlen>
 800225e:	4603      	mov	r3, r0
 8002260:	b29a      	uxth	r2, r3
 8002262:	1d39      	adds	r1, r7, #4
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	4807      	ldr	r0, [pc, #28]	@ (8002288 <MX_TIM1_Init+0x314>)
 800226a:	f009 f964 	bl	800b536 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800226e:	4803      	ldr	r0, [pc, #12]	@ (800227c <MX_TIM1_Init+0x308>)
 8002270:	f000 fe2c 	bl	8002ecc <HAL_TIM_MspPostInit>

}
 8002274:	bf00      	nop
 8002276:	37c8      	adds	r7, #200	@ 0xc8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000400 	.word	0x20000400
 8002280:	40012c00 	.word	0x40012c00
 8002284:	0800faa4 	.word	0x0800faa4
 8002288:	20000770 	.word	0x20000770

0800228c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b0b2      	sub	sp, #200	@ 0xc8
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ac:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	615a      	str	r2, [r3, #20]
 80022be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022c4:	2234      	movs	r2, #52	@ 0x34
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f00a fe1c 	bl	800cf06 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022ce:	4b82      	ldr	r3, [pc, #520]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80022d0:	4a82      	ldr	r2, [pc, #520]	@ (80024dc <MX_TIM8_Init+0x250>)
 80022d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022d4:	4b80      	ldr	r3, [pc, #512]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80022da:	4b7f      	ldr	r3, [pc, #508]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80022dc:	2240      	movs	r2, #64	@ 0x40
 80022de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3749;
 80022e0:	4b7d      	ldr	r3, [pc, #500]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80022e2:	f640 62a5 	movw	r2, #3749	@ 0xea5
 80022e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e8:	4b7b      	ldr	r3, [pc, #492]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022ee:	4b7a      	ldr	r3, [pc, #488]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022f4:	4b78      	ldr	r3, [pc, #480]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80022f6:	2280      	movs	r2, #128	@ 0x80
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022fa:	4877      	ldr	r0, [pc, #476]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80022fc:	f007 f864 	bl	80093c8 <HAL_TIM_Base_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8002306:	f000 fabd 	bl	8002884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800230a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800230e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002312:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002316:	4619      	mov	r1, r3
 8002318:	486f      	ldr	r0, [pc, #444]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 800231a:	f007 ff43 	bl	800a1a4 <HAL_TIM_ConfigClockSource>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8002324:	f000 faae 	bl	8002884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002328:	486b      	ldr	r0, [pc, #428]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 800232a:	f007 f94c 	bl	80095c6 <HAL_TIM_PWM_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM8_Init+0xac>
  {
    Error_Handler();
 8002334:	f000 faa6 	bl	8002884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800234a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800234e:	4619      	mov	r1, r3
 8002350:	4861      	ldr	r0, [pc, #388]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 8002352:	f008 ff0b 	bl	800b16c <HAL_TIMEx_MasterConfigSynchronization>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 800235c:	f000 fa92 	bl	8002884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002360:	2360      	movs	r3, #96	@ 0x60
 8002362:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  sConfigOC.Pulse = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002378:	2304      	movs	r3, #4
 800237a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800238a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800238e:	2200      	movs	r2, #0
 8002390:	4619      	mov	r1, r3
 8002392:	4851      	ldr	r0, [pc, #324]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 8002394:	f007 fdf2 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800239e:	f000 fa71 	bl	8002884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023a2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80023a6:	2204      	movs	r2, #4
 80023a8:	4619      	mov	r1, r3
 80023aa:	484b      	ldr	r0, [pc, #300]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80023ac:	f007 fde6 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80023b6:	f000 fa65 	bl	8002884 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023c2:	2300      	movs	r3, #0
 80023c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sBreakDeadTimeConfig.DeadTime = 139;
 80023c6:	238b      	movs	r3, #139	@ 0x8b
 80023c8:	663b      	str	r3, [r7, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	667b      	str	r3, [r7, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023d2:	66bb      	str	r3, [r7, #104]	@ 0x68
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80023d8:	2300      	movs	r3, #0
 80023da:	673b      	str	r3, [r7, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	677b      	str	r3, [r7, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80023f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80023f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80023f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023fc:	4619      	mov	r1, r3
 80023fe:	4836      	ldr	r0, [pc, #216]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 8002400:	f008 ff4a 	bl	800b298 <HAL_TIMEx_ConfigBreakDeadTime>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM8_Init+0x182>
  {
    Error_Handler();
 800240a:	f000 fa3b 	bl	8002884 <Error_Handler>
	//	CH1 = CH2 = PWM Mode 1
	// LEVEL_2
	//	CH1 = PWM Mode 1, CH2 = PWM Mode 2!
	// Variablen
  	char msg_console[80]; // array für Ausgabe
	int level = get_level();
 800240e:	f002 ff82 	bl	8005316 <get_level>
 8002412:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
	int stufen = get_stufen();
 8002416:	f002 ff86 	bl	8005326 <get_stufen>
 800241a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
	switch (stufen) {
 800241e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002422:	2b03      	cmp	r3, #3
 8002424:	d004      	beq.n	8002430 <MX_TIM8_Init+0x1a4>
 8002426:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800242a:	2b04      	cmp	r3, #4
 800242c:	d04b      	beq.n	80024c6 <MX_TIM8_Init+0x23a>
		}
		break;
	case 4:
		break;
	default:
		break;
 800242e:	e04b      	b.n	80024c8 <MX_TIM8_Init+0x23c>
 8002430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002434:	2b02      	cmp	r3, #2
 8002436:	d004      	beq.n	8002442 <MX_TIM8_Init+0x1b6>
 8002438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800243c:	2b03      	cmp	r3, #3
 800243e:	d01c      	beq.n	800247a <MX_TIM8_Init+0x1ee>
 8002440:	e037      	b.n	80024b2 <MX_TIM8_Init+0x226>
			sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002442:	2370      	movs	r3, #112	@ 0x70
 8002444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 8002448:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800244c:	2204      	movs	r2, #4
 800244e:	4619      	mov	r1, r3
 8002450:	4821      	ldr	r0, [pc, #132]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 8002452:	f007 fd93 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM8_Init+0x1d4>
				Error_Handler();
 800245c:	f000 fa12 	bl	8002884 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8002460:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002464:	220c      	movs	r2, #12
 8002466:	4619      	mov	r1, r3
 8002468:	481b      	ldr	r0, [pc, #108]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 800246a:	f007 fd87 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d024      	beq.n	80024be <MX_TIM8_Init+0x232>
				Error_Handler();
 8002474:	f000 fa06 	bl	8002884 <Error_Handler>
			break;
 8002478:	e021      	b.n	80024be <MX_TIM8_Init+0x232>
			sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247a:	2360      	movs	r3, #96	@ 0x60
 800247c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 8002480:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002484:	2204      	movs	r2, #4
 8002486:	4619      	mov	r1, r3
 8002488:	4813      	ldr	r0, [pc, #76]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 800248a:	f007 fd77 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM8_Init+0x20c>
				Error_Handler();
 8002494:	f000 f9f6 	bl	8002884 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8002498:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800249c:	220c      	movs	r2, #12
 800249e:	4619      	mov	r1, r3
 80024a0:	480d      	ldr	r0, [pc, #52]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80024a2:	f007 fd6b 	bl	8009f7c <HAL_TIM_PWM_ConfigChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <MX_TIM8_Init+0x236>
				Error_Handler();
 80024ac:	f000 f9ea 	bl	8002884 <Error_Handler>
			break;
 80024b0:	e007      	b.n	80024c2 <MX_TIM8_Init+0x236>
			sprintf(msg_console, "Error: Level 2-3 moeglich!");
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	490a      	ldr	r1, [pc, #40]	@ (80024e0 <MX_TIM8_Init+0x254>)
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00a fcc2 	bl	800ce40 <siprintf>
			break;
 80024bc:	e002      	b.n	80024c4 <MX_TIM8_Init+0x238>
			break;
 80024be:	bf00      	nop
 80024c0:	e002      	b.n	80024c8 <MX_TIM8_Init+0x23c>
			break;
 80024c2:	bf00      	nop
		break;
 80024c4:	e000      	b.n	80024c8 <MX_TIM8_Init+0x23c>
		break;
 80024c6:	bf00      	nop
	}
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80024c8:	4803      	ldr	r0, [pc, #12]	@ (80024d8 <MX_TIM8_Init+0x24c>)
 80024ca:	f000 fcff 	bl	8002ecc <HAL_TIM_MspPostInit>

}
 80024ce:	bf00      	nop
 80024d0:	37c8      	adds	r7, #200	@ 0xc8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000044c 	.word	0x2000044c
 80024dc:	40013400 	.word	0x40013400
 80024e0:	0800faa4 	.word	0x0800faa4

080024e4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80024e8:	4b10      	ldr	r3, [pc, #64]	@ (800252c <MX_TIM16_Init+0x48>)
 80024ea:	4a11      	ldr	r2, [pc, #68]	@ (8002530 <MX_TIM16_Init+0x4c>)
 80024ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15000 - 1;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <MX_TIM16_Init+0x48>)
 80024f0:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80024f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <MX_TIM16_Init+0x48>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <MX_TIM16_Init+0x48>)
 80024fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002502:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <MX_TIM16_Init+0x48>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800250a:	4b08      	ldr	r3, [pc, #32]	@ (800252c <MX_TIM16_Init+0x48>)
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <MX_TIM16_Init+0x48>)
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002516:	4805      	ldr	r0, [pc, #20]	@ (800252c <MX_TIM16_Init+0x48>)
 8002518:	f006 ff56 	bl	80093c8 <HAL_TIM_Base_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002522:	f000 f9af 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000498 	.word	0x20000498
 8002530:	40014400 	.word	0x40014400

08002534 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002538:	4b10      	ldr	r3, [pc, #64]	@ (800257c <MX_TIM17_Init+0x48>)
 800253a:	4a11      	ldr	r2, [pc, #68]	@ (8002580 <MX_TIM17_Init+0x4c>)
 800253c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15000-1;
 800253e:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <MX_TIM17_Init+0x48>)
 8002540:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002544:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <MX_TIM17_Init+0x48>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000;
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <MX_TIM17_Init+0x48>)
 800254e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002552:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002554:	4b09      	ldr	r3, [pc, #36]	@ (800257c <MX_TIM17_Init+0x48>)
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <MX_TIM17_Init+0x48>)
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <MX_TIM17_Init+0x48>)
 8002562:	2200      	movs	r2, #0
 8002564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	@ (800257c <MX_TIM17_Init+0x48>)
 8002568:	f006 ff2e 	bl	80093c8 <HAL_TIM_Base_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8002572:	f000 f987 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200004e4 	.word	0x200004e4
 8002580:	40014800 	.word	0x40014800

08002584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002588:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 800258a:	4a23      	ldr	r2, [pc, #140]	@ (8002618 <MX_USART2_UART_Init+0x94>)
 800258c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800258e:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 8002590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b1f      	ldr	r3, [pc, #124]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b17      	ldr	r3, [pc, #92]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ba:	4b16      	ldr	r3, [pc, #88]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025c0:	4b14      	ldr	r3, [pc, #80]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c6:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025cc:	4811      	ldr	r0, [pc, #68]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 80025ce:	f008 ff62 	bl	800b496 <HAL_UART_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80025d8:	f000 f954 	bl	8002884 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025dc:	2100      	movs	r1, #0
 80025de:	480d      	ldr	r0, [pc, #52]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 80025e0:	f009 fd8c 	bl	800c0fc <HAL_UARTEx_SetTxFifoThreshold>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80025ea:	f000 f94b 	bl	8002884 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ee:	2100      	movs	r1, #0
 80025f0:	4808      	ldr	r0, [pc, #32]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 80025f2:	f009 fdc1 	bl	800c178 <HAL_UARTEx_SetRxFifoThreshold>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80025fc:	f000 f942 	bl	8002884 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	@ (8002614 <MX_USART2_UART_Init+0x90>)
 8002602:	f009 fd42 	bl	800c08a <HAL_UARTEx_DisableFifoMode>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800260c:	f000 f93a 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000770 	.word	0x20000770
 8002618:	40004400 	.word	0x40004400

0800261c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002622:	4b34      	ldr	r3, [pc, #208]	@ (80026f4 <MX_DMA_Init+0xd8>)
 8002624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002626:	4a33      	ldr	r2, [pc, #204]	@ (80026f4 <MX_DMA_Init+0xd8>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6493      	str	r3, [r2, #72]	@ 0x48
 800262e:	4b31      	ldr	r3, [pc, #196]	@ (80026f4 <MX_DMA_Init+0xd8>)
 8002630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800263a:	4b2e      	ldr	r3, [pc, #184]	@ (80026f4 <MX_DMA_Init+0xd8>)
 800263c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800263e:	4a2d      	ldr	r2, [pc, #180]	@ (80026f4 <MX_DMA_Init+0xd8>)
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	6493      	str	r3, [r2, #72]	@ 0x48
 8002646:	4b2b      	ldr	r3, [pc, #172]	@ (80026f4 <MX_DMA_Init+0xd8>)
 8002648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002652:	4b28      	ldr	r3, [pc, #160]	@ (80026f4 <MX_DMA_Init+0xd8>)
 8002654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002656:	4a27      	ldr	r2, [pc, #156]	@ (80026f4 <MX_DMA_Init+0xd8>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6493      	str	r3, [r2, #72]	@ 0x48
 800265e:	4b25      	ldr	r3, [pc, #148]	@ (80026f4 <MX_DMA_Init+0xd8>)
 8002660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	200b      	movs	r0, #11
 8002670:	f004 fdab 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002674:	200b      	movs	r0, #11
 8002676:	f004 fdc2 	bl	80071fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	200c      	movs	r0, #12
 8002680:	f004 fda3 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002684:	200c      	movs	r0, #12
 8002686:	f004 fdba 	bl	80071fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	200d      	movs	r0, #13
 8002690:	f004 fd9b 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002694:	200d      	movs	r0, #13
 8002696:	f004 fdb2 	bl	80071fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	200e      	movs	r0, #14
 80026a0:	f004 fd93 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f004 fdaa 	bl	80071fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	200f      	movs	r0, #15
 80026b0:	f004 fd8b 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80026b4:	200f      	movs	r0, #15
 80026b6:	f004 fda2 	bl	80071fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	2010      	movs	r0, #16
 80026c0:	f004 fd83 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80026c4:	2010      	movs	r0, #16
 80026c6:	f004 fd9a 	bl	80071fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2011      	movs	r0, #17
 80026d0:	f004 fd7b 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80026d4:	2011      	movs	r0, #17
 80026d6:	f004 fd92 	bl	80071fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	2038      	movs	r0, #56	@ 0x38
 80026e0:	f004 fd73 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80026e4:	2038      	movs	r0, #56	@ 0x38
 80026e6:	f004 fd8a 	bl	80071fe <HAL_NVIC_EnableIRQ>

}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000

080026f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270e:	4b5a      	ldr	r3, [pc, #360]	@ (8002878 <MX_GPIO_Init+0x180>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	4a59      	ldr	r2, [pc, #356]	@ (8002878 <MX_GPIO_Init+0x180>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800271a:	4b57      	ldr	r3, [pc, #348]	@ (8002878 <MX_GPIO_Init+0x180>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002726:	4b54      	ldr	r3, [pc, #336]	@ (8002878 <MX_GPIO_Init+0x180>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	4a53      	ldr	r2, [pc, #332]	@ (8002878 <MX_GPIO_Init+0x180>)
 800272c:	f043 0320 	orr.w	r3, r3, #32
 8002730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002732:	4b51      	ldr	r3, [pc, #324]	@ (8002878 <MX_GPIO_Init+0x180>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	4b4e      	ldr	r3, [pc, #312]	@ (8002878 <MX_GPIO_Init+0x180>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002742:	4a4d      	ldr	r2, [pc, #308]	@ (8002878 <MX_GPIO_Init+0x180>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800274a:	4b4b      	ldr	r3, [pc, #300]	@ (8002878 <MX_GPIO_Init+0x180>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	4b48      	ldr	r3, [pc, #288]	@ (8002878 <MX_GPIO_Init+0x180>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	4a47      	ldr	r2, [pc, #284]	@ (8002878 <MX_GPIO_Init+0x180>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002762:	4b45      	ldr	r3, [pc, #276]	@ (8002878 <MX_GPIO_Init+0x180>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	2118      	movs	r1, #24
 8002772:	4842      	ldr	r0, [pc, #264]	@ (800287c <MX_GPIO_Init+0x184>)
 8002774:	f005 fa2a 	bl	8007bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI1_RST_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	f248 0160 	movw	r1, #32864	@ 0x8060
 800277e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002782:	f005 fa23 	bl	8007bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_DC_GPIO_Port, SPI1_DC_Pin, GPIO_PIN_RESET);
 8002786:	2200      	movs	r2, #0
 8002788:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800278c:	483c      	ldr	r0, [pc, #240]	@ (8002880 <MX_GPIO_Init+0x188>)
 800278e:	f005 fa1d 	bl	8007bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_EXTI13_Pin */
  GPIO_InitStruct.Pin = B1_EXTI13_Pin;
 8002792:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002798:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800279c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	4834      	ldr	r0, [pc, #208]	@ (800287c <MX_GPIO_Init+0x184>)
 80027aa:	f005 f875 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027ae:	2308      	movs	r3, #8
 80027b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	482d      	ldr	r0, [pc, #180]	@ (800287c <MX_GPIO_Init+0x184>)
 80027c6:	f005 f867 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI1_RST_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI1_RST_Pin|SPI1_CS_Pin;
 80027ca:	f248 0360 	movw	r3, #32864	@ 0x8060
 80027ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e6:	f005 f857 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ea:	2310      	movs	r3, #16
 80027ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fa:	f107 0314 	add.w	r3, r7, #20
 80027fe:	4619      	mov	r1, r3
 8002800:	481e      	ldr	r0, [pc, #120]	@ (800287c <MX_GPIO_Init+0x184>)
 8002802:	f005 f849 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pins : Tast1_EXTI1_Pin Tast2_EXTI2_Pin */
  GPIO_InitStruct.Pin = Tast1_EXTI1_Pin|Tast2_EXTI2_Pin;
 8002806:	2306      	movs	r3, #6
 8002808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800280a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800280e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002810:	2302      	movs	r3, #2
 8002812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	4819      	ldr	r0, [pc, #100]	@ (8002880 <MX_GPIO_Init+0x188>)
 800281c:	f005 f83c 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8002820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002826:	2301      	movs	r3, #1
 8002828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	4619      	mov	r1, r3
 8002838:	4811      	ldr	r0, [pc, #68]	@ (8002880 <MX_GPIO_Init+0x188>)
 800283a:	f005 f82d 	bl	8007898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	2007      	movs	r0, #7
 8002844:	f004 fcc1 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002848:	2007      	movs	r0, #7
 800284a:	f004 fcd8 	bl	80071fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	2008      	movs	r0, #8
 8002854:	f004 fcb9 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002858:	2008      	movs	r0, #8
 800285a:	f004 fcd0 	bl	80071fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2100      	movs	r1, #0
 8002862:	2028      	movs	r0, #40	@ 0x28
 8002864:	f004 fcb1 	bl	80071ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002868:	2028      	movs	r0, #40	@ 0x28
 800286a:	f004 fcc8 	bl	80071fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	@ 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	48000800 	.word	0x48000800
 8002880:	48000400 	.word	0x48000400

08002884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002888:	b672      	cpsid	i
}
 800288a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <Error_Handler+0x8>

08002890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002896:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <HAL_MspInit+0x44>)
 8002898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289a:	4a0e      	ldr	r2, [pc, #56]	@ (80028d4 <HAL_MspInit+0x44>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80028a2:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <HAL_MspInit+0x44>)
 80028a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_MspInit+0x44>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b2:	4a08      	ldr	r2, [pc, #32]	@ (80028d4 <HAL_MspInit+0x44>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_MspInit+0x44>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80028c6:	f005 fa6f 	bl	8007da8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000

080028d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0a2      	sub	sp, #136	@ 0x88
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028f0:	f107 0320 	add.w	r3, r7, #32
 80028f4:	2254      	movs	r2, #84	@ 0x54
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f00a fb04 	bl	800cf06 <memset>
  if(hadc->Instance==ADC1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002906:	f040 8082 	bne.w	8002a0e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800290a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800290e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002910:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002914:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002916:	f107 0320 	add.w	r3, r7, #32
 800291a:	4618      	mov	r0, r3
 800291c:	f005 ff82 	bl	8008824 <HAL_RCCEx_PeriphCLKConfig>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002926:	f7ff ffad 	bl	8002884 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800292a:	4b72      	ldr	r3, [pc, #456]	@ (8002af4 <HAL_ADC_MspInit+0x21c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3301      	adds	r3, #1
 8002930:	4a70      	ldr	r2, [pc, #448]	@ (8002af4 <HAL_ADC_MspInit+0x21c>)
 8002932:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002934:	4b6f      	ldr	r3, [pc, #444]	@ (8002af4 <HAL_ADC_MspInit+0x21c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d10b      	bne.n	8002954 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800293c:	4b6e      	ldr	r3, [pc, #440]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 800293e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002940:	4a6d      	ldr	r2, [pc, #436]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 8002942:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002946:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002948:	4b6b      	ldr	r3, [pc, #428]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 800294a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	4b68      	ldr	r3, [pc, #416]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002958:	4a67      	ldr	r2, [pc, #412]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002960:	4b65      	ldr	r3, [pc, #404]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296c:	4b62      	ldr	r3, [pc, #392]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 800296e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002970:	4a61      	ldr	r2, [pc, #388]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002978:	4b5f      	ldr	r3, [pc, #380]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 800297a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Poti1_Pin|ADC1_IN2_Poti2_Pin;
 8002984:	2303      	movs	r3, #3
 8002986:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002988:	2303      	movs	r3, #3
 800298a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002990:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002994:	4619      	mov	r1, r3
 8002996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800299a:	f004 ff7d 	bl	8007898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800299e:	2301      	movs	r3, #1
 80029a0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a2:	2303      	movs	r3, #3
 80029a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029aa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80029ae:	4619      	mov	r1, r3
 80029b0:	4852      	ldr	r0, [pc, #328]	@ (8002afc <HAL_ADC_MspInit+0x224>)
 80029b2:	f004 ff71 	bl	8007898 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 80029b6:	4b52      	ldr	r3, [pc, #328]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 80029b8:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_ADC_MspInit+0x22c>)
 80029ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80029bc:	4b50      	ldr	r3, [pc, #320]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 80029be:	2205      	movs	r2, #5
 80029c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 80029d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029dc:	4b48      	ldr	r3, [pc, #288]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 80029de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80029e4:	4b46      	ldr	r3, [pc, #280]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 80029e6:	2220      	movs	r2, #32
 80029e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029ea:	4b45      	ldr	r3, [pc, #276]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029f0:	4843      	ldr	r0, [pc, #268]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 80029f2:	f004 fc1f 	bl	8007234 <HAL_DMA_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 80029fc:	f7ff ff42 	bl	8002884 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3f      	ldr	r2, [pc, #252]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 8002a04:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a06:	4a3e      	ldr	r2, [pc, #248]	@ (8002b00 <HAL_ADC_MspInit+0x228>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002a0c:	e06d      	b.n	8002aea <HAL_ADC_MspInit+0x212>
  else if(hadc->Instance==ADC2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a3d      	ldr	r2, [pc, #244]	@ (8002b08 <HAL_ADC_MspInit+0x230>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d168      	bne.n	8002aea <HAL_ADC_MspInit+0x212>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002a18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a1c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002a1e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002a22:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a24:	f107 0320 	add.w	r3, r7, #32
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f005 fefb 	bl	8008824 <HAL_RCCEx_PeriphCLKConfig>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8002a34:	f7ff ff26 	bl	8002884 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002a38:	4b2e      	ldr	r3, [pc, #184]	@ (8002af4 <HAL_ADC_MspInit+0x21c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002af4 <HAL_ADC_MspInit+0x21c>)
 8002a40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002a42:	4b2c      	ldr	r3, [pc, #176]	@ (8002af4 <HAL_ADC_MspInit+0x21c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10b      	bne.n	8002a62 <HAL_ADC_MspInit+0x18a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 8002a50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a56:	4b28      	ldr	r3, [pc, #160]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a66:	4a24      	ldr	r2, [pc, #144]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a6e:	4b22      	ldr	r3, [pc, #136]	@ (8002af8 <HAL_ADC_MspInit+0x220>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a86:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a90:	f004 ff02 	bl	8007898 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002a96:	4a1e      	ldr	r2, [pc, #120]	@ (8002b10 <HAL_ADC_MspInit+0x238>)
 8002a98:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002a9c:	2224      	movs	r2, #36	@ 0x24
 8002a9e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002aac:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002aae:	2280      	movs	r2, #128	@ 0x80
 8002ab0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002aba:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002abc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ac0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002ac2:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002ac8:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002ace:	480f      	ldr	r0, [pc, #60]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002ad0:	f004 fbb0 	bl	8007234 <HAL_DMA_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_ADC_MspInit+0x206>
      Error_Handler();
 8002ada:	f7ff fed3 	bl	8002884 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ae4:	4a09      	ldr	r2, [pc, #36]	@ (8002b0c <HAL_ADC_MspInit+0x234>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002aea:	bf00      	nop
 8002aec:	3788      	adds	r7, #136	@ 0x88
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000804 	.word	0x20000804
 8002af8:	40021000 	.word	0x40021000
 8002afc:	48000400 	.word	0x48000400
 8002b00:	200002dc 	.word	0x200002dc
 8002b04:	40020408 	.word	0x40020408
 8002b08:	50000100 	.word	0x50000100
 8002b0c:	2000033c 	.word	0x2000033c
 8002b10:	40020058 	.word	0x40020058

08002b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	@ 0x28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a17      	ldr	r2, [pc, #92]	@ (8002b90 <HAL_SPI_MspInit+0x7c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d127      	bne.n	8002b86 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b36:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <HAL_SPI_MspInit+0x80>)
 8002b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3a:	4a16      	ldr	r2, [pc, #88]	@ (8002b94 <HAL_SPI_MspInit+0x80>)
 8002b3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b40:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b42:	4b14      	ldr	r3, [pc, #80]	@ (8002b94 <HAL_SPI_MspInit+0x80>)
 8002b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4e:	4b11      	ldr	r3, [pc, #68]	@ (8002b94 <HAL_SPI_MspInit+0x80>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b52:	4a10      	ldr	r2, [pc, #64]	@ (8002b94 <HAL_SPI_MspInit+0x80>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <HAL_SPI_MspInit+0x80>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002b66:	2328      	movs	r3, #40	@ 0x28
 8002b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b76:	2305      	movs	r3, #5
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4805      	ldr	r0, [pc, #20]	@ (8002b98 <HAL_SPI_MspInit+0x84>)
 8002b82:	f004 fe89 	bl	8007898 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b86:	bf00      	nop
 8002b88:	3728      	adds	r7, #40	@ 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40013000 	.word	0x40013000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	48000400 	.word	0x48000400

08002b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a9a      	ldr	r2, [pc, #616]	@ (8002e14 <HAL_TIM_Base_MspInit+0x278>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	f040 80c9 	bne.w	8002d42 <HAL_TIM_Base_MspInit+0x1a6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bb0:	4b99      	ldr	r3, [pc, #612]	@ (8002e18 <HAL_TIM_Base_MspInit+0x27c>)
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb4:	4a98      	ldr	r2, [pc, #608]	@ (8002e18 <HAL_TIM_Base_MspInit+0x27c>)
 8002bb6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bbc:	4b96      	ldr	r3, [pc, #600]	@ (8002e18 <HAL_TIM_Base_MspInit+0x27c>)
 8002bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8002bc8:	4b94      	ldr	r3, [pc, #592]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002bca:	4a95      	ldr	r2, [pc, #596]	@ (8002e20 <HAL_TIM_Base_MspInit+0x284>)
 8002bcc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8002bce:	4b93      	ldr	r3, [pc, #588]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002bd0:	222a      	movs	r2, #42	@ 0x2a
 8002bd2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bd4:	4b91      	ldr	r3, [pc, #580]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002bd6:	2210      	movs	r2, #16
 8002bd8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bda:	4b90      	ldr	r3, [pc, #576]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002be0:	4b8e      	ldr	r3, [pc, #568]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002be2:	2280      	movs	r2, #128	@ 0x80
 8002be4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002be6:	4b8d      	ldr	r3, [pc, #564]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bec:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bee:	4b8b      	ldr	r3, [pc, #556]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002bf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bf4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002bf6:	4b89      	ldr	r3, [pc, #548]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002bfc:	4b87      	ldr	r3, [pc, #540]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002c02:	4886      	ldr	r0, [pc, #536]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002c04:	f004 fb16 	bl	8007234 <HAL_DMA_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8002c0e:	f7ff fe39 	bl	8002884 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a81      	ldr	r2, [pc, #516]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c18:	4a80      	ldr	r2, [pc, #512]	@ (8002e1c <HAL_TIM_Base_MspInit+0x280>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 8002c1e:	4b81      	ldr	r3, [pc, #516]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c20:	4a81      	ldr	r2, [pc, #516]	@ (8002e28 <HAL_TIM_Base_MspInit+0x28c>)
 8002c22:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8002c24:	4b7f      	ldr	r3, [pc, #508]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c26:	222b      	movs	r2, #43	@ 0x2b
 8002c28:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c2a:	4b7e      	ldr	r3, [pc, #504]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c30:	4b7c      	ldr	r3, [pc, #496]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002c36:	4b7b      	ldr	r3, [pc, #492]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c38:	2280      	movs	r2, #128	@ 0x80
 8002c3a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c3c:	4b79      	ldr	r3, [pc, #484]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c42:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c44:	4b77      	ldr	r3, [pc, #476]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c4a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8002c4c:	4b75      	ldr	r3, [pc, #468]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c4e:	2220      	movs	r2, #32
 8002c50:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002c52:	4b74      	ldr	r3, [pc, #464]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002c58:	4872      	ldr	r0, [pc, #456]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c5a:	f004 faeb 	bl	8007234 <HAL_DMA_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_TIM_Base_MspInit+0xcc>
    {
      Error_Handler();
 8002c64:	f7ff fe0e 	bl	8002884 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c6e:	4a6d      	ldr	r2, [pc, #436]	@ (8002e24 <HAL_TIM_Base_MspInit+0x288>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel3;
 8002c74:	4b6d      	ldr	r3, [pc, #436]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002c76:	4a6e      	ldr	r2, [pc, #440]	@ (8002e30 <HAL_TIM_Base_MspInit+0x294>)
 8002c78:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8002c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002c7c:	222c      	movs	r2, #44	@ 0x2c
 8002c7e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c80:	4b6a      	ldr	r3, [pc, #424]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002c82:	2210      	movs	r2, #16
 8002c84:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c86:	4b69      	ldr	r3, [pc, #420]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002c8c:	4b67      	ldr	r3, [pc, #412]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002c8e:	2280      	movs	r2, #128	@ 0x80
 8002c90:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c92:	4b66      	ldr	r3, [pc, #408]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c98:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c9a:	4b64      	ldr	r3, [pc, #400]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002c9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ca0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 8002ca2:	4b62      	ldr	r3, [pc, #392]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002ca8:	4b60      	ldr	r3, [pc, #384]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8002cae:	485f      	ldr	r0, [pc, #380]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002cb0:	f004 fac0 	bl	8007234 <HAL_DMA_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_TIM_Base_MspInit+0x122>
    {
      Error_Handler();
 8002cba:	f7ff fde3 	bl	8002884 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a5a      	ldr	r2, [pc, #360]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002cc4:	4a59      	ldr	r2, [pc, #356]	@ (8002e2c <HAL_TIM_Base_MspInit+0x290>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH4 Init */
    hdma_tim1_ch4.Instance = DMA1_Channel4;
 8002cca:	4b5a      	ldr	r3, [pc, #360]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002ccc:	4a5a      	ldr	r2, [pc, #360]	@ (8002e38 <HAL_TIM_Base_MspInit+0x29c>)
 8002cce:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4.Init.Request = DMA_REQUEST_TIM1_CH4;
 8002cd0:	4b58      	ldr	r3, [pc, #352]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002cd2:	222d      	movs	r2, #45	@ 0x2d
 8002cd4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd6:	4b57      	ldr	r3, [pc, #348]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002cd8:	2210      	movs	r2, #16
 8002cda:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cdc:	4b55      	ldr	r3, [pc, #340]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002ce2:	4b54      	ldr	r3, [pc, #336]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002ce4:	2280      	movs	r2, #128	@ 0x80
 8002ce6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ce8:	4b52      	ldr	r3, [pc, #328]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cee:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cf0:	4b50      	ldr	r3, [pc, #320]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cf6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4.Init.Mode = DMA_CIRCULAR;
 8002cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch4) != HAL_OK)
 8002d04:	484b      	ldr	r0, [pc, #300]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002d06:	f004 fa95 	bl	8007234 <HAL_DMA_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_TIM_Base_MspInit+0x178>
    {
      Error_Handler();
 8002d10:	f7ff fdb8 	bl	8002884 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a47      	ldr	r2, [pc, #284]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002d18:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d1a:	4a46      	ldr	r2, [pc, #280]	@ (8002e34 <HAL_TIM_Base_MspInit+0x298>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002d20:	2200      	movs	r2, #0
 8002d22:	2100      	movs	r1, #0
 8002d24:	2019      	movs	r0, #25
 8002d26:	f004 fa50 	bl	80071ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002d2a:	2019      	movs	r0, #25
 8002d2c:	f004 fa67 	bl	80071fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2100      	movs	r1, #0
 8002d34:	201a      	movs	r0, #26
 8002d36:	f004 fa48 	bl	80071ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002d3a:	201a      	movs	r0, #26
 8002d3c:	f004 fa5f 	bl	80071fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002d40:	e0b9      	b.n	8002eb6 <HAL_TIM_Base_MspInit+0x31a>
  else if(htim_base->Instance==TIM8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a3d      	ldr	r2, [pc, #244]	@ (8002e3c <HAL_TIM_Base_MspInit+0x2a0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	f040 8081 	bne.w	8002e50 <HAL_TIM_Base_MspInit+0x2b4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d4e:	4b32      	ldr	r3, [pc, #200]	@ (8002e18 <HAL_TIM_Base_MspInit+0x27c>)
 8002d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d52:	4a31      	ldr	r2, [pc, #196]	@ (8002e18 <HAL_TIM_Base_MspInit+0x27c>)
 8002d54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d58:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e18 <HAL_TIM_Base_MspInit+0x27c>)
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]
    hdma_tim8_ch1.Instance = DMA1_Channel6;
 8002d66:	4b36      	ldr	r3, [pc, #216]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002d68:	4a36      	ldr	r2, [pc, #216]	@ (8002e44 <HAL_TIM_Base_MspInit+0x2a8>)
 8002d6a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 8002d6c:	4b34      	ldr	r3, [pc, #208]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002d6e:	2231      	movs	r2, #49	@ 0x31
 8002d70:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d72:	4b33      	ldr	r3, [pc, #204]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002d74:	2210      	movs	r2, #16
 8002d76:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d78:	4b31      	ldr	r3, [pc, #196]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002d7e:	4b30      	ldr	r3, [pc, #192]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002d80:	2280      	movs	r2, #128	@ 0x80
 8002d82:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d84:	4b2e      	ldr	r3, [pc, #184]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d8a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002d8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d92:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 8002d94:	4b2a      	ldr	r3, [pc, #168]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002d96:	2220      	movs	r2, #32
 8002d98:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002d9a:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8002da0:	4827      	ldr	r0, [pc, #156]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002da2:	f004 fa47 	bl	8007234 <HAL_DMA_Init>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_TIM_Base_MspInit+0x214>
      Error_Handler();
 8002dac:	f7ff fd6a 	bl	8002884 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a23      	ldr	r2, [pc, #140]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002db4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002db6:	4a22      	ldr	r2, [pc, #136]	@ (8002e40 <HAL_TIM_Base_MspInit+0x2a4>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim8_ch2.Instance = DMA1_Channel7;
 8002dbc:	4b22      	ldr	r3, [pc, #136]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002dbe:	4a23      	ldr	r2, [pc, #140]	@ (8002e4c <HAL_TIM_Base_MspInit+0x2b0>)
 8002dc0:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_TIM8_CH2;
 8002dc2:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002dc4:	2232      	movs	r2, #50	@ 0x32
 8002dc6:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002dca:	2210      	movs	r2, #16
 8002dcc:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dce:	4b1e      	ldr	r3, [pc, #120]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002dd6:	2280      	movs	r2, #128	@ 0x80
 8002dd8:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dda:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002de0:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002de2:	4b19      	ldr	r3, [pc, #100]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002de4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002de8:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 8002dea:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002dec:	2220      	movs	r2, #32
 8002dee:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002df0:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8002df6:	4814      	ldr	r0, [pc, #80]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002df8:	f004 fa1c 	bl	8007234 <HAL_DMA_Init>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_TIM_Base_MspInit+0x26a>
      Error_Handler();
 8002e02:	f7ff fd3f 	bl	8002884 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a0f      	ldr	r2, [pc, #60]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <HAL_TIM_Base_MspInit+0x2ac>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002e12:	e050      	b.n	8002eb6 <HAL_TIM_Base_MspInit+0x31a>
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	20000530 	.word	0x20000530
 8002e20:	40020008 	.word	0x40020008
 8002e24:	20000590 	.word	0x20000590
 8002e28:	4002001c 	.word	0x4002001c
 8002e2c:	200005f0 	.word	0x200005f0
 8002e30:	40020030 	.word	0x40020030
 8002e34:	20000650 	.word	0x20000650
 8002e38:	40020044 	.word	0x40020044
 8002e3c:	40013400 	.word	0x40013400
 8002e40:	200006b0 	.word	0x200006b0
 8002e44:	4002006c 	.word	0x4002006c
 8002e48:	20000710 	.word	0x20000710
 8002e4c:	40020080 	.word	0x40020080
  else if(htim_base->Instance==TIM16)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec0 <HAL_TIM_Base_MspInit+0x324>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d114      	bne.n	8002e84 <HAL_TIM_Base_MspInit+0x2e8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <HAL_TIM_Base_MspInit+0x328>)
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5e:	4a19      	ldr	r2, [pc, #100]	@ (8002ec4 <HAL_TIM_Base_MspInit+0x328>)
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e64:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e66:	4b17      	ldr	r3, [pc, #92]	@ (8002ec4 <HAL_TIM_Base_MspInit+0x328>)
 8002e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	2019      	movs	r0, #25
 8002e78:	f004 f9a7 	bl	80071ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002e7c:	2019      	movs	r0, #25
 8002e7e:	f004 f9be 	bl	80071fe <HAL_NVIC_EnableIRQ>
}
 8002e82:	e018      	b.n	8002eb6 <HAL_TIM_Base_MspInit+0x31a>
  else if(htim_base->Instance==TIM17)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec8 <HAL_TIM_Base_MspInit+0x32c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d113      	bne.n	8002eb6 <HAL_TIM_Base_MspInit+0x31a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <HAL_TIM_Base_MspInit+0x328>)
 8002e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e92:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec4 <HAL_TIM_Base_MspInit+0x328>)
 8002e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e98:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <HAL_TIM_Base_MspInit+0x328>)
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	201a      	movs	r0, #26
 8002eac:	f004 f98d 	bl	80071ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002eb0:	201a      	movs	r0, #26
 8002eb2:	f004 f9a4 	bl	80071fe <HAL_NVIC_EnableIRQ>
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40014800 	.word	0x40014800

08002ecc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08c      	sub	sp, #48	@ 0x30
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 031c 	add.w	r3, r7, #28
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a5a      	ldr	r2, [pc, #360]	@ (8003054 <HAL_TIM_MspPostInit+0x188>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	f040 808b 	bne.w	8003006 <HAL_TIM_MspPostInit+0x13a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef0:	4b59      	ldr	r3, [pc, #356]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef4:	4a58      	ldr	r2, [pc, #352]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002efc:	4b56      	ldr	r3, [pc, #344]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8002efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f08:	4b53      	ldr	r3, [pc, #332]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0c:	4a52      	ldr	r2, [pc, #328]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f14:	4b50      	ldr	r3, [pc, #320]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8002f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f20:	4b4d      	ldr	r3, [pc, #308]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8002f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f24:	4a4c      	ldr	r2, [pc, #304]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8002f26:	f043 0302 	orr.w	r3, r3, #2
 8002f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = TIM1_CH3_NMOS1_HS_Pin;
 8002f38:	2304      	movs	r3, #4
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f40:	2302      	movs	r3, #2
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM1_CH3_NMOS1_HS_GPIO_Port, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	4842      	ldr	r0, [pc, #264]	@ (800305c <HAL_TIM_MspPostInit+0x190>)
 8002f54:	f004 fca0 	bl	8007898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH1N_NMOS2_LS_Pin|TIM1_CH1_NMOS1_HS_Pin|TIM1_CH2_NMOS3_HS_Pin;
 8002f58:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f62:	2302      	movs	r3, #2
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002f6a:	2306      	movs	r3, #6
 8002f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6e:	f107 031c 	add.w	r3, r7, #28
 8002f72:	4619      	mov	r1, r3
 8002f74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f78:	f004 fc8e 	bl	8007898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH4N_NMOS4_LS_Pin;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f84:	2302      	movs	r3, #2
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002f8c:	2306      	movs	r3, #6
 8002f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM1_CH4N_NMOS4_LS_GPIO_Port, &GPIO_InitStruct);
 8002f90:	f107 031c 	add.w	r3, r7, #28
 8002f94:	4619      	mov	r1, r3
 8002f96:	4831      	ldr	r0, [pc, #196]	@ (800305c <HAL_TIM_MspPostInit+0x190>)
 8002f98:	f004 fc7e 	bl	8007898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH2N_NMOS4_LS_Pin;
 8002f9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002faa:	2300      	movs	r3, #0
 8002fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002fae:	2306      	movs	r3, #6
 8002fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM1_CH2N_NMOS4_LS_GPIO_Port, &GPIO_InitStruct);
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4829      	ldr	r0, [pc, #164]	@ (8003060 <HAL_TIM_MspPostInit+0x194>)
 8002fba:	f004 fc6d 	bl	8007898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH4_NMOS3_HS_Pin;
 8002fbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002fd0:	230b      	movs	r3, #11
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM1_CH4_NMOS3_HS_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	f107 031c 	add.w	r3, r7, #28
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fde:	f004 fc5b 	bl	8007898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH3N_NMOS2_LS_Pin;
 8002fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fec:	2302      	movs	r3, #2
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8002ff4:	230c      	movs	r3, #12
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM1_CH3N_NMOS2_LS_GPIO_Port, &GPIO_InitStruct);
 8002ff8:	f107 031c 	add.w	r3, r7, #28
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4818      	ldr	r0, [pc, #96]	@ (8003060 <HAL_TIM_MspPostInit+0x194>)
 8003000:	f004 fc4a 	bl	8007898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003004:	e021      	b.n	800304a <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a16      	ldr	r2, [pc, #88]	@ (8003064 <HAL_TIM_MspPostInit+0x198>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d11c      	bne.n	800304a <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003010:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003014:	4a10      	ldr	r2, [pc, #64]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <HAL_TIM_MspPostInit+0x18c>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_NMOS1_HS_Pin|TIM8_CH2_NMOS3_HS_Pin|TIM8_CH1N_NMOS2_LS_Pin|TIM8_CH2N_NMOS4_LS_Pin;
 8003028:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 800302c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003032:	2302      	movs	r3, #2
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800303a:	2304      	movs	r3, #4
 800303c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303e:	f107 031c 	add.w	r3, r7, #28
 8003042:	4619      	mov	r1, r3
 8003044:	4805      	ldr	r0, [pc, #20]	@ (800305c <HAL_TIM_MspPostInit+0x190>)
 8003046:	f004 fc27 	bl	8007898 <HAL_GPIO_Init>
}
 800304a:	bf00      	nop
 800304c:	3730      	adds	r7, #48	@ 0x30
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40021000 	.word	0x40021000
 800305c:	48000800 	.word	0x48000800
 8003060:	48000400 	.word	0x48000400
 8003064:	40013400 	.word	0x40013400

08003068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b09e      	sub	sp, #120	@ 0x78
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003080:	f107 0310 	add.w	r3, r7, #16
 8003084:	2254      	movs	r2, #84	@ 0x54
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f009 ff3c 	bl	800cf06 <memset>
  if(huart->Instance==USART2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1f      	ldr	r2, [pc, #124]	@ (8003110 <HAL_UART_MspInit+0xa8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d136      	bne.n	8003106 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003098:	2302      	movs	r3, #2
 800309a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	4618      	mov	r0, r3
 80030a6:	f005 fbbd 	bl	8008824 <HAL_RCCEx_PeriphCLKConfig>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030b0:	f7ff fbe8 	bl	8002884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030b4:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <HAL_UART_MspInit+0xac>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b8:	4a16      	ldr	r2, [pc, #88]	@ (8003114 <HAL_UART_MspInit+0xac>)
 80030ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030be:	6593      	str	r3, [r2, #88]	@ 0x58
 80030c0:	4b14      	ldr	r3, [pc, #80]	@ (8003114 <HAL_UART_MspInit+0xac>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030cc:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <HAL_UART_MspInit+0xac>)
 80030ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d0:	4a10      	ldr	r2, [pc, #64]	@ (8003114 <HAL_UART_MspInit+0xac>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <HAL_UART_MspInit+0xac>)
 80030da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030e4:	230c      	movs	r3, #12
 80030e6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030f4:	2307      	movs	r3, #7
 80030f6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80030fc:	4619      	mov	r1, r3
 80030fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003102:	f004 fbc9 	bl	8007898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003106:	bf00      	nop
 8003108:	3778      	adds	r7, #120	@ 0x78
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40004400 	.word	0x40004400
 8003114:	40021000 	.word	0x40021000

08003118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <NMI_Handler+0x4>

08003120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <HardFault_Handler+0x4>

08003128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800312c:	bf00      	nop
 800312e:	e7fd      	b.n	800312c <MemManage_Handler+0x4>

08003130 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003134:	bf00      	nop
 8003136:	e7fd      	b.n	8003134 <BusFault_Handler+0x4>

08003138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800313c:	bf00      	nop
 800313e:	e7fd      	b.n	800313c <UsageFault_Handler+0x4>

08003140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316e:	f002 f9e1 	bl	8005534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}

08003176 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast1_EXTI1_Pin);
 800317a:	2002      	movs	r0, #2
 800317c:	f004 fd58 	bl	8007c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}

08003184 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast2_EXTI2_Pin);
 8003188:	2004      	movs	r0, #4
 800318a:	f004 fd51 	bl	8007c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003198:	4802      	ldr	r0, [pc, #8]	@ (80031a4 <DMA1_Channel1_IRQHandler+0x10>)
 800319a:	f004 fa2e 	bl	80075fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000530 	.word	0x20000530

080031a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80031ac:	4802      	ldr	r0, [pc, #8]	@ (80031b8 <DMA1_Channel2_IRQHandler+0x10>)
 80031ae:	f004 fa24 	bl	80075fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000590 	.word	0x20000590

080031bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 80031c0:	4802      	ldr	r0, [pc, #8]	@ (80031cc <DMA1_Channel3_IRQHandler+0x10>)
 80031c2:	f004 fa1a 	bl	80075fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200005f0 	.word	0x200005f0

080031d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4);
 80031d4:	4802      	ldr	r0, [pc, #8]	@ (80031e0 <DMA1_Channel4_IRQHandler+0x10>)
 80031d6:	f004 fa10 	bl	80075fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000650 	.word	0x20000650

080031e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80031e8:	4802      	ldr	r0, [pc, #8]	@ (80031f4 <DMA1_Channel5_IRQHandler+0x10>)
 80031ea:	f004 fa06 	bl	80075fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	2000033c 	.word	0x2000033c

080031f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 80031fc:	4802      	ldr	r0, [pc, #8]	@ (8003208 <DMA1_Channel6_IRQHandler+0x10>)
 80031fe:	f004 f9fc 	bl	80075fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	200006b0 	.word	0x200006b0

0800320c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003210:	4802      	ldr	r0, [pc, #8]	@ (800321c <DMA1_Channel7_IRQHandler+0x10>)
 8003212:	f004 f9f2 	bl	80075fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000710 	.word	0x20000710

08003220 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003224:	4803      	ldr	r0, [pc, #12]	@ (8003234 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003226:	f006 fd59 	bl	8009cdc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800322a:	4803      	ldr	r0, [pc, #12]	@ (8003238 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800322c:	f006 fd56 	bl	8009cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000400 	.word	0x20000400
 8003238:	20000498 	.word	0x20000498

0800323c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003240:	4803      	ldr	r0, [pc, #12]	@ (8003250 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8003242:	f006 fd4b 	bl	8009cdc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8003246:	4803      	ldr	r0, [pc, #12]	@ (8003254 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003248:	f006 fd48 	bl	8009cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000400 	.word	0x20000400
 8003254:	200004e4 	.word	0x200004e4

08003258 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_EXTI13_Pin);
 800325c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003260:	f004 fce6 	bl	8007c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}

08003268 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800326c:	4802      	ldr	r0, [pc, #8]	@ (8003278 <DMA2_Channel1_IRQHandler+0x10>)
 800326e:	f004 f9c4 	bl	80075fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200002dc 	.word	0x200002dc

0800327c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return 1;
 8003280:	2301      	movs	r3, #1
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_kill>:

int _kill(int pid, int sig)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003296:	f009 fe99 	bl	800cfcc <__errno>
 800329a:	4603      	mov	r3, r0
 800329c:	2216      	movs	r2, #22
 800329e:	601a      	str	r2, [r3, #0]
  return -1;
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_exit>:

void _exit (int status)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032b4:	f04f 31ff 	mov.w	r1, #4294967295
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ffe7 	bl	800328c <_kill>
  while (1) {}    /* Make sure we hang here */
 80032be:	bf00      	nop
 80032c0:	e7fd      	b.n	80032be <_exit+0x12>

080032c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	e00a      	b.n	80032ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032d4:	f3af 8000 	nop.w
 80032d8:	4601      	mov	r1, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	60ba      	str	r2, [r7, #8]
 80032e0:	b2ca      	uxtb	r2, r1
 80032e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3301      	adds	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	dbf0      	blt.n	80032d4 <_read+0x12>
  }

  return len;
 80032f2:	687b      	ldr	r3, [r7, #4]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e009      	b.n	8003322 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	60ba      	str	r2, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	3301      	adds	r3, #1
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	429a      	cmp	r2, r3
 8003328:	dbf1      	blt.n	800330e <_write+0x12>
  }
  return len;
 800332a:	687b      	ldr	r3, [r7, #4]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_close>:

int _close(int file)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800335c:	605a      	str	r2, [r3, #4]
  return 0;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <_isatty>:

int _isatty(int file)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003374:	2301      	movs	r3, #1
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a4:	4a14      	ldr	r2, [pc, #80]	@ (80033f8 <_sbrk+0x5c>)
 80033a6:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <_sbrk+0x60>)
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b0:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <_sbrk+0x64>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b8:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <_sbrk+0x64>)
 80033ba:	4a12      	ldr	r2, [pc, #72]	@ (8003404 <_sbrk+0x68>)
 80033bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033be:	4b10      	ldr	r3, [pc, #64]	@ (8003400 <_sbrk+0x64>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d207      	bcs.n	80033dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033cc:	f009 fdfe 	bl	800cfcc <__errno>
 80033d0:	4603      	mov	r3, r0
 80033d2:	220c      	movs	r2, #12
 80033d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295
 80033da:	e009      	b.n	80033f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033dc:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <_sbrk+0x64>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033e2:	4b07      	ldr	r3, [pc, #28]	@ (8003400 <_sbrk+0x64>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	4a05      	ldr	r2, [pc, #20]	@ (8003400 <_sbrk+0x64>)
 80033ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20020000 	.word	0x20020000
 80033fc:	00000400 	.word	0x00000400
 8003400:	20000808 	.word	0x20000808
 8003404:	200009a0 	.word	0x200009a0

08003408 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <SystemInit+0x20>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003412:	4a05      	ldr	r2, [pc, #20]	@ (8003428 <SystemInit+0x20>)
 8003414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <enter_handler_state>:
const int level = 3;
const uint32_t fPWM = 20000;	// Schaltfrequenz in [Hz]
const uint32_t f0 = 500;		// Zu modulierende Frequenz [Hz]
const float A0 = 1.0;			// Zu modulierende Amplitude [0...1.5]

void enter_handler_state(int state) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af04      	add	r7, sp, #16
 8003432:	6078      	str	r0, [r7, #4]
	switch (state) {
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <enter_handler_state+0x16>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d023      	beq.n	8003488 <enter_handler_state+0x5c>
		// PWM Timer mit DMA starten
		start_pwm(stufen, level);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8003440:	e04e      	b.n	80034e0 <enter_handler_state+0xb4>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003442:	2200      	movs	r2, #0
 8003444:	2120      	movs	r1, #32
 8003446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800344a:	f004 fbbf 	bl	8007bcc <HAL_GPIO_WritePin>
		handler_state = IDLE;
 800344e:	4b26      	ldr	r3, [pc, #152]	@ (80034e8 <enter_handler_state+0xbc>)
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
		fillScreen(BLACK);
 8003454:	2000      	movs	r0, #0
 8003456:	f7fd fea3 	bl	80011a0 <fillScreen>
		ST7735_WriteString(0, 0, "State: IDLE", Font_7x10, GREEN, BLACK);
 800345a:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <enter_handler_state+0xc0>)
 800345c:	2200      	movs	r2, #0
 800345e:	9202      	str	r2, [sp, #8]
 8003460:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003464:	9201      	str	r2, [sp, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	9200      	str	r2, [sp, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a20      	ldr	r2, [pc, #128]	@ (80034f0 <enter_handler_state+0xc4>)
 800346e:	2100      	movs	r1, #0
 8003470:	2000      	movs	r0, #0
 8003472:	f7fe f903 	bl	800167c <ST7735_WriteString>
		drawFastHLine(0, next_line, 128, WHITE);
 8003476:	230c      	movs	r3, #12
 8003478:	b219      	sxth	r1, r3
 800347a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800347e:	2280      	movs	r2, #128	@ 0x80
 8003480:	2000      	movs	r0, #0
 8003482:	f7fd fe67 	bl	8001154 <drawFastHLine>
		break;
 8003486:	e02b      	b.n	80034e0 <enter_handler_state+0xb4>
		time_val = 0;
 8003488:	4b1a      	ldr	r3, [pc, #104]	@ (80034f4 <enter_handler_state+0xc8>)
 800348a:	2200      	movs	r2, #0
 800348c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800348e:	2201      	movs	r2, #1
 8003490:	2120      	movs	r1, #32
 8003492:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003496:	f004 fb99 	bl	8007bcc <HAL_GPIO_WritePin>
		set_display(stufen, level);
 800349a:	2303      	movs	r3, #3
 800349c:	2203      	movs	r2, #3
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 febd 	bl	8005220 <set_display>
		HAL_TIM_Base_Start_IT(&htim17);
 80034a6:	4814      	ldr	r0, [pc, #80]	@ (80034f8 <enter_handler_state+0xcc>)
 80034a8:	f005 ffe6 	bl	8009478 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim16);
 80034ac:	4813      	ldr	r0, [pc, #76]	@ (80034fc <enter_handler_state+0xd0>)
 80034ae:	f005 ffe3 	bl	8009478 <HAL_TIM_Base_Start_IT>
		HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER_ADC1, 3);
 80034b2:	2203      	movs	r2, #3
 80034b4:	4912      	ldr	r1, [pc, #72]	@ (8003500 <enter_handler_state+0xd4>)
 80034b6:	4813      	ldr	r0, [pc, #76]	@ (8003504 <enter_handler_state+0xd8>)
 80034b8:	f002 fca4 	bl	8005e04 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(&hadc2, AD_RES_BUFFER_ADC2, 1);
 80034bc:	2201      	movs	r2, #1
 80034be:	4912      	ldr	r1, [pc, #72]	@ (8003508 <enter_handler_state+0xdc>)
 80034c0:	4812      	ldr	r0, [pc, #72]	@ (800350c <enter_handler_state+0xe0>)
 80034c2:	f002 fc9f 	bl	8005e04 <HAL_ADC_Start_DMA>
		set_pwm_values(stufen, level);
 80034c6:	2303      	movs	r3, #3
 80034c8:	2203      	movs	r2, #3
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f96f 	bl	80037b0 <set_pwm_values>
		start_pwm(stufen, level);
 80034d2:	2303      	movs	r3, #3
 80034d4:	2203      	movs	r2, #3
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 fcab 	bl	8004e34 <start_pwm>
		break;
 80034de:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	2000080c 	.word	0x2000080c
 80034ec:	20000000 	.word	0x20000000
 80034f0:	0800fac0 	.word	0x0800fac0
 80034f4:	2000080e 	.word	0x2000080e
 80034f8:	200004e4 	.word	0x200004e4
 80034fc:	20000498 	.word	0x20000498
 8003500:	20000828 	.word	0x20000828
 8003504:	20000204 	.word	0x20000204
 8003508:	20000834 	.word	0x20000834
 800350c:	20000270 	.word	0x20000270

08003510 <exec_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(int state) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	switch (state) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80b9 	beq.w	8003692 <exec_handler_state+0x182>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d000      	beq.n	8003528 <exec_handler_state+0x18>

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8003526:	e0b5      	b.n	8003694 <exec_handler_state+0x184>
		if (time_val > 250) {
 8003528:	4b61      	ldr	r3, [pc, #388]	@ (80036b0 <exec_handler_state+0x1a0>)
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	2bfa      	cmp	r3, #250	@ 0xfa
 800352e:	d907      	bls.n	8003540 <exec_handler_state+0x30>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003530:	2120      	movs	r1, #32
 8003532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003536:	f004 fb61 	bl	8007bfc <HAL_GPIO_TogglePin>
			time_val = 0;
 800353a:	4b5d      	ldr	r3, [pc, #372]	@ (80036b0 <exec_handler_state+0x1a0>)
 800353c:	2200      	movs	r2, #0
 800353e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8003540:	2110      	movs	r1, #16
 8003542:	485c      	ldr	r0, [pc, #368]	@ (80036b4 <exec_handler_state+0x1a4>)
 8003544:	f004 fb5a 	bl	8007bfc <HAL_GPIO_TogglePin>
		adc_raw_values1.poti1_V = (AD_RES_BUFFER_ADC1[0] << 4); // Map 12 Bit to 16 Bit values
 8003548:	4b5b      	ldr	r3, [pc, #364]	@ (80036b8 <exec_handler_state+0x1a8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	b29a      	uxth	r2, r3
 8003552:	4b5a      	ldr	r3, [pc, #360]	@ (80036bc <exec_handler_state+0x1ac>)
 8003554:	801a      	strh	r2, [r3, #0]
		adc_values1.poti1_Vf = (3.3 * (float) adc_raw_values1.poti1_V) / 65535;
 8003556:	4b59      	ldr	r3, [pc, #356]	@ (80036bc <exec_handler_state+0x1ac>)
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	ee07 3a90 	vmov	s15, r3
 800355e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003562:	ee17 0a90 	vmov	r0, s15
 8003566:	f7fd f817 	bl	8000598 <__aeabi_f2d>
 800356a:	a34d      	add	r3, pc, #308	@ (adr r3, 80036a0 <exec_handler_state+0x190>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f7fd f86a 	bl	8000648 <__aeabi_dmul>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	a34a      	add	r3, pc, #296	@ (adr r3, 80036a8 <exec_handler_state+0x198>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f7fd f98b 	bl	800089c <__aeabi_ddiv>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	f7fd fb33 	bl	8000bf8 <__aeabi_d2f>
 8003592:	4603      	mov	r3, r0
 8003594:	4a4a      	ldr	r2, [pc, #296]	@ (80036c0 <exec_handler_state+0x1b0>)
 8003596:	6013      	str	r3, [r2, #0]
		adc_raw_values1.poti2_V = (AD_RES_BUFFER_ADC1[1] << 4);
 8003598:	4b47      	ldr	r3, [pc, #284]	@ (80036b8 <exec_handler_state+0x1a8>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	b29b      	uxth	r3, r3
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	4b46      	ldr	r3, [pc, #280]	@ (80036bc <exec_handler_state+0x1ac>)
 80035a4:	805a      	strh	r2, [r3, #2]
		adc_values1.poti2_Vf = (3.3 * (float) adc_raw_values1.poti2_V) / 65535;
 80035a6:	4b45      	ldr	r3, [pc, #276]	@ (80036bc <exec_handler_state+0x1ac>)
 80035a8:	885b      	ldrh	r3, [r3, #2]
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b2:	ee17 0a90 	vmov	r0, s15
 80035b6:	f7fc ffef 	bl	8000598 <__aeabi_f2d>
 80035ba:	a339      	add	r3, pc, #228	@ (adr r3, 80036a0 <exec_handler_state+0x190>)
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f7fd f842 	bl	8000648 <__aeabi_dmul>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	a336      	add	r3, pc, #216	@ (adr r3, 80036a8 <exec_handler_state+0x198>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f7fd f963 	bl	800089c <__aeabi_ddiv>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f7fd fb0b 	bl	8000bf8 <__aeabi_d2f>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4a36      	ldr	r2, [pc, #216]	@ (80036c0 <exec_handler_state+0x1b0>)
 80035e6:	6053      	str	r3, [r2, #4]
		adc_raw_values1.bnc1_V = (AD_RES_BUFFER_ADC1[2] << 4);
 80035e8:	4b33      	ldr	r3, [pc, #204]	@ (80036b8 <exec_handler_state+0x1a8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	4b32      	ldr	r3, [pc, #200]	@ (80036bc <exec_handler_state+0x1ac>)
 80035f4:	809a      	strh	r2, [r3, #4]
		adc_values1.bnc1_Vf = (3.3 * (float) adc_raw_values1.bnc1_V) / 65535;
 80035f6:	4b31      	ldr	r3, [pc, #196]	@ (80036bc <exec_handler_state+0x1ac>)
 80035f8:	889b      	ldrh	r3, [r3, #4]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	ee17 0a90 	vmov	r0, s15
 8003606:	f7fc ffc7 	bl	8000598 <__aeabi_f2d>
 800360a:	a325      	add	r3, pc, #148	@ (adr r3, 80036a0 <exec_handler_state+0x190>)
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f7fd f81a 	bl	8000648 <__aeabi_dmul>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	a322      	add	r3, pc, #136	@ (adr r3, 80036a8 <exec_handler_state+0x198>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f7fd f93b 	bl	800089c <__aeabi_ddiv>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f7fd fae3 	bl	8000bf8 <__aeabi_d2f>
 8003632:	4603      	mov	r3, r0
 8003634:	4a22      	ldr	r2, [pc, #136]	@ (80036c0 <exec_handler_state+0x1b0>)
 8003636:	6093      	str	r3, [r2, #8]
		adc_raw_values1.bnc2_V = (AD_RES_BUFFER_ADC2[0] << 4);
 8003638:	4b22      	ldr	r3, [pc, #136]	@ (80036c4 <exec_handler_state+0x1b4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	b29a      	uxth	r2, r3
 8003642:	4b1e      	ldr	r3, [pc, #120]	@ (80036bc <exec_handler_state+0x1ac>)
 8003644:	80da      	strh	r2, [r3, #6]
		adc_values1.bnc2_Vf = (3.3 * (float) adc_raw_values1.bnc2_V) / 65535;
 8003646:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <exec_handler_state+0x1ac>)
 8003648:	88db      	ldrh	r3, [r3, #6]
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003652:	ee17 0a90 	vmov	r0, s15
 8003656:	f7fc ff9f 	bl	8000598 <__aeabi_f2d>
 800365a:	a311      	add	r3, pc, #68	@ (adr r3, 80036a0 <exec_handler_state+0x190>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc fff2 	bl	8000648 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	a30e      	add	r3, pc, #56	@ (adr r3, 80036a8 <exec_handler_state+0x198>)
 800366e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003672:	f7fd f913 	bl	800089c <__aeabi_ddiv>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	f7fd fabb 	bl	8000bf8 <__aeabi_d2f>
 8003682:	4603      	mov	r3, r0
 8003684:	4a0e      	ldr	r2, [pc, #56]	@ (80036c0 <exec_handler_state+0x1b0>)
 8003686:	60d3      	str	r3, [r2, #12]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8003688:	2110      	movs	r1, #16
 800368a:	480a      	ldr	r0, [pc, #40]	@ (80036b4 <exec_handler_state+0x1a4>)
 800368c:	f004 fab6 	bl	8007bfc <HAL_GPIO_TogglePin>
		break;
 8003690:	e000      	b.n	8003694 <exec_handler_state+0x184>
		break;
 8003692:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	f3af 8000 	nop.w
 80036a0:	66666666 	.word	0x66666666
 80036a4:	400a6666 	.word	0x400a6666
 80036a8:	00000000 	.word	0x00000000
 80036ac:	40efffe0 	.word	0x40efffe0
 80036b0:	2000080e 	.word	0x2000080e
 80036b4:	48000800 	.word	0x48000800
 80036b8:	20000828 	.word	0x20000828
 80036bc:	20000810 	.word	0x20000810
 80036c0:	20000818 	.word	0x20000818
 80036c4:	20000834 	.word	0x20000834

080036c8 <leave_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	switch (state) {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <leave_handler_state+0x3c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d000      	beq.n	80036de <leave_handler_state+0x16>
		// PWM Timer mit DMA stoppen
		stopp_pwm(stufen, level);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 80036dc:	e013      	b.n	8003706 <leave_handler_state+0x3e>
		HAL_TIM_Base_Stop_IT(&htim17);
 80036de:	480c      	ldr	r0, [pc, #48]	@ (8003710 <leave_handler_state+0x48>)
 80036e0:	f005 ff42 	bl	8009568 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim16);
 80036e4:	480b      	ldr	r0, [pc, #44]	@ (8003714 <leave_handler_state+0x4c>)
 80036e6:	f005 ff3f 	bl	8009568 <HAL_TIM_Base_Stop_IT>
		HAL_ADC_Stop_DMA(&hadc1);
 80036ea:	480b      	ldr	r0, [pc, #44]	@ (8003718 <leave_handler_state+0x50>)
 80036ec:	f002 fc5e 	bl	8005fac <HAL_ADC_Stop_DMA>
		HAL_ADC_Stop_DMA(&hadc2);
 80036f0:	480a      	ldr	r0, [pc, #40]	@ (800371c <leave_handler_state+0x54>)
 80036f2:	f002 fc5b 	bl	8005fac <HAL_ADC_Stop_DMA>
		stopp_pwm(stufen, level);
 80036f6:	2303      	movs	r3, #3
 80036f8:	2203      	movs	r2, #3
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 f9ad 	bl	8004a5c <stopp_pwm>
		break;
 8003702:	e000      	b.n	8003706 <leave_handler_state+0x3e>
		break;
 8003704:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200004e4 	.word	0x200004e4
 8003714:	20000498 	.word	0x20000498
 8003718:	20000204 	.word	0x20000204
 800371c:	20000270 	.word	0x20000270

08003720 <handler_task>:

//-----------------------------------------------------------------------------------------------------------------------

void handler_task(void) {
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
	exec_handler_state(handler_state);
 8003724:	4b03      	ldr	r3, [pc, #12]	@ (8003734 <handler_task+0x14>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fef1 	bl	8003510 <exec_handler_state>
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	2000080c 	.word	0x2000080c

08003738 <set_handler_state>:

void set_handler_state(uint8_t state) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
	prev_handler_state = handler_state;
 8003742:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <set_handler_state+0x34>)
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <set_handler_state+0x38>)
 8003748:	701a      	strb	r2, [r3, #0]
	handler_state = state;
 800374a:	4a08      	ldr	r2, [pc, #32]	@ (800376c <set_handler_state+0x34>)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	7013      	strb	r3, [r2, #0]
	leave_handler_state(prev_handler_state);
 8003750:	4b07      	ldr	r3, [pc, #28]	@ (8003770 <set_handler_state+0x38>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ffb7 	bl	80036c8 <leave_handler_state>
	enter_handler_state(state);
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fe65 	bl	800342c <enter_handler_state>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	2000080c 	.word	0x2000080c
 8003770:	2000080d 	.word	0x2000080d

08003774 <inc_handler_currentTime>:

uint8_t get_handler_state(void) {
	return handler_state;
}

void inc_handler_currentTime(uint16_t dT) {
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	80fb      	strh	r3, [r7, #6]
	time_val = time_val + dT;
 800377e:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <inc_handler_currentTime+0x24>)
 8003780:	881a      	ldrh	r2, [r3, #0]
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	4413      	add	r3, r2
 8003786:	b29a      	uxth	r2, r3
 8003788:	4b03      	ldr	r3, [pc, #12]	@ (8003798 <inc_handler_currentTime+0x24>)
 800378a:	801a      	strh	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	2000080e 	.word	0x2000080e

0800379c <get_adc_values>:

adc_values* get_adc_values(void) {
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
	return &adc_values1;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <get_adc_values+0x10>)
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	20000818 	.word	0x20000818

080037b0 <set_pwm_values>:

void set_pwm_values(const int stufen, const int level) {
 80037b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b2:	b0d9      	sub	sp, #356	@ 0x164
 80037b4:	af0a      	add	r7, sp, #40	@ 0x28
 80037b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80037ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80037be:	6018      	str	r0, [r3, #0]
 80037c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80037c4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037c8:	6019      	str	r1, [r3, #0]
	// Char array für Ausgabe
	char msg_console[250] = "";
 80037ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80037ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	3304      	adds	r3, #4
 80037d8:	22f6      	movs	r2, #246	@ 0xf6
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f009 fb92 	bl	800cf06 <memset>
	// Konstanten
	const float pi = M_PI;
 80037e2:	4bd6      	ldr	r3, [pc, #856]	@ (8003b3c <set_pwm_values+0x38c>)
 80037e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	uint32_t sz = (uint32_t)(fPWM/f0);
 80037e8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80037ec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	const float dRad = (2 * pi) / (sz - 1);	// Winkelschritt [rad]
 80037f8:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 80037fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003800:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003804:	3b01      	subs	r3, #1
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800380e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003812:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124
	const float norm0 = ((TIM1->ARR) / 2) + 1;
 8003816:	4bca      	ldr	r3, [pc, #808]	@ (8003b40 <set_pwm_values+0x390>)
 8003818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	3301      	adds	r3, #1
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003826:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
	const float posOffset0 = 1;
 800382a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800382e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	// Variablen
	uint32_t i = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	float sin_val = 0;
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	float posOffsetCurr_1 = 0;
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	float normCurr_1 = 0;
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	// Speicher dynamisch allozieren
	switch (stufen) {
 8003850:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003854:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3b01      	subs	r3, #1
 800385c:	2b03      	cmp	r3, #3
 800385e:	f201 80dc 	bhi.w	8004a1a <set_pwm_values+0x126a>
 8003862:	a201      	add	r2, pc, #4	@ (adr r2, 8003868 <set_pwm_values+0xb8>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	08003879 	.word	0x08003879
 800386c:	08003b6b 	.word	0x08003b6b
 8003870:	08004133 	.word	0x08004133
 8003874:	080049e9 	.word	0x080049e9
 8003878:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800387c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d008      	beq.n	8003898 <set_pwm_values+0xe8>
 8003886:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800388a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b03      	cmp	r3, #3
 8003892:	f000 8082 	beq.w	800399a <set_pwm_values+0x1ea>
 8003896:	e15f      	b.n	8003b58 <set_pwm_values+0x3a8>
	case 1:
		switch (level) {
		case 2:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003898:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800389c:	3301      	adds	r3, #1
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f008 fcf5 	bl	800c290 <malloc>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461a      	mov	r2, r3
 80038aa:	4ba6      	ldr	r3, [pc, #664]	@ (8003b44 <set_pwm_values+0x394>)
 80038ac:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 80038ae:	4ba5      	ldr	r3, [pc, #660]	@ (8003b44 <set_pwm_values+0x394>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80038b6:	601a      	str	r2, [r3, #0]
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80038be:	e065      	b.n	800398c <set_pwm_values+0x1dc>
				if (i == 0) {
 80038c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10d      	bne.n	80038e4 <set_pwm_values+0x134>
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) norm0;
 80038c8:	4b9e      	ldr	r3, [pc, #632]	@ (8003b44 <set_pwm_values+0x394>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 80038d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d4:	ee17 1a90 	vmov	r1, s15
 80038d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	6059      	str	r1, [r3, #4]
 80038e2:	e032      	b.n	800394a <set_pwm_values+0x19a>
				} else {
					sin_val = A0 * sinf(i * dRad);
 80038e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038f0:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 80038f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f8:	eeb0 0a67 	vmov.f32	s0, s15
 80038fc:	f00b fb16 	bl	800ef2c <sinf>
 8003900:	eef0 7a40 	vmov.f32	s15, s0
 8003904:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800390c:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
					posOffsetCurr_1 = posOffset0 + sin_val;
 8003910:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8003914:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800391c:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
					normCurr_1 = norm0 * posOffsetCurr_1;
 8003920:	ed97 7a48 	vldr	s14, [r7, #288]	@ 0x120
 8003924:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8003928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392c:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) normCurr_1;
 8003930:	4b84      	ldr	r3, [pc, #528]	@ (8003b44 <set_pwm_values+0x394>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800393c:	ee17 1a90 	vmov	r1, s15
 8003940:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	6059      	str	r1, [r3, #4]
				}
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,"pwmPtr_m1p->ccr_arr[%lu]: %3lu\r\n",i, pwmPtr_m1p->ccr_arr[i]);
 800394a:	4b7e      	ldr	r3, [pc, #504]	@ (8003b44 <set_pwm_values+0x394>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f107 0008 	add.w	r0, r7, #8
 800395c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003960:	4979      	ldr	r1, [pc, #484]	@ (8003b48 <set_pwm_values+0x398>)
 8003962:	f009 fa6d 	bl	800ce40 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
 8003966:	f107 0308 	add.w	r3, r7, #8
 800396a:	4618      	mov	r0, r3
 800396c:	f7fc fca8 	bl	80002c0 <strlen>
 8003970:	4603      	mov	r3, r0
 8003972:	b29a      	uxth	r2, r3
 8003974:	f107 0108 	add.w	r1, r7, #8
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
 800397c:	4873      	ldr	r0, [pc, #460]	@ (8003b4c <set_pwm_values+0x39c>)
 800397e:	f007 fdda 	bl	800b536 <HAL_UART_Transmit>
			for (i = 0; i < sz; i++) {
 8003982:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003986:	3301      	adds	r3, #1
 8003988:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800398c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003990:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003994:	429a      	cmp	r2, r3
 8003996:	d393      	bcc.n	80038c0 <set_pwm_values+0x110>
			}
			break;
 8003998:	e0e5      	b.n	8003b66 <set_pwm_values+0x3b6>
		case 3:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 800399a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800399e:	3301      	adds	r3, #1
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f008 fc74 	bl	800c290 <malloc>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b65      	ldr	r3, [pc, #404]	@ (8003b44 <set_pwm_values+0x394>)
 80039ae:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 80039b0:	4b64      	ldr	r3, [pc, #400]	@ (8003b44 <set_pwm_values+0x394>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80039b8:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 80039ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80039be:	3301      	adds	r3, #1
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f008 fc64 	bl	800c290 <malloc>
 80039c8:	4603      	mov	r3, r0
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b60      	ldr	r3, [pc, #384]	@ (8003b50 <set_pwm_values+0x3a0>)
 80039ce:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n->NrOfEl = sz;
 80039d0:	4b5f      	ldr	r3, [pc, #380]	@ (8003b50 <set_pwm_values+0x3a0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80039d8:	601a      	str	r2, [r3, #0]
			// Variablen
			float posOffsetCurr_2 = 0;
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
			float normCurr_2 = 0;
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80039f0:	e09b      	b.n	8003b2a <set_pwm_values+0x37a>
				if (i == 0) {
 80039f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11a      	bne.n	8003a30 <set_pwm_values+0x280>
					// m1+, m1-
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) norm0;
 80039fa:	4b52      	ldr	r3, [pc, #328]	@ (8003b44 <set_pwm_values+0x394>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8003a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a06:	ee17 1a90 	vmov	r1, s15
 8003a0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	6059      	str	r1, [r3, #4]
					pwmPtr_m1n->ccr_arr[i] = (uint32_t) norm0;
 8003a14:	4b4e      	ldr	r3, [pc, #312]	@ (8003b50 <set_pwm_values+0x3a0>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8003a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a20:	ee17 1a90 	vmov	r1, s15
 8003a24:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	6059      	str	r1, [r3, #4]
 8003a2e:	e04f      	b.n	8003ad0 <set_pwm_values+0x320>
				} else {
					// m1+
					sin_val = A0 * sinf(i * dRad);
 8003a30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a3c:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8003a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a44:	eeb0 0a67 	vmov.f32	s0, s15
 8003a48:	f00b fa70 	bl	800ef2c <sinf>
 8003a4c:	eef0 7a40 	vmov.f32	s15, s0
 8003a50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a58:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
					posOffsetCurr_1 = posOffset0 + sin_val;
 8003a5c:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8003a60:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a68:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
					normCurr_1 = norm0 * posOffsetCurr_1;
 8003a6c:	ed97 7a48 	vldr	s14, [r7, #288]	@ 0x120
 8003a70:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8003a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a78:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) normCurr_1;
 8003a7c:	4b31      	ldr	r3, [pc, #196]	@ (8003b44 <set_pwm_values+0x394>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a88:	ee17 1a90 	vmov	r1, s15
 8003a8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	6059      	str	r1, [r3, #4]
					// m1-
					posOffsetCurr_2 = posOffset0 - sin_val; // Sinusreferenz für 3-Stufen hier MINUS!
 8003a96:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8003a9a:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa2:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
					normCurr_2 = norm0 * posOffsetCurr_2;
 8003aa6:	ed97 7a48 	vldr	s14, [r7, #288]	@ 0x120
 8003aaa:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8003aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab2:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
					pwmPtr_m1n->ccr_arr[i] = (uint32_t) normCurr_2;
 8003ab6:	4b26      	ldr	r3, [pc, #152]	@ (8003b50 <set_pwm_values+0x3a0>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8003abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac2:	ee17 1a90 	vmov	r1, s15
 8003ac6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	6059      	str	r1, [r3, #4]
				}
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,"pwmPtr_m1p[%lu]: %3lu  |  pwmPtr_m1n[%lu]: %3lu\r\n",
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i]);
 8003ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b44 <set_pwm_values+0x394>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,"pwmPtr_m1p[%lu]: %3lu  |  pwmPtr_m1n[%lu]: %3lu\r\n",
 8003ad4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	6859      	ldr	r1, [r3, #4]
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i]);
 8003ade:	4b1c      	ldr	r3, [pc, #112]	@ (8003b50 <set_pwm_values+0x3a0>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,"pwmPtr_m1p[%lu]: %3lu  |  pwmPtr_m1n[%lu]: %3lu\r\n",
 8003ae2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f107 0008 	add.w	r0, r7, #8
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	460b      	mov	r3, r1
 8003afa:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003afe:	4915      	ldr	r1, [pc, #84]	@ (8003b54 <set_pwm_values+0x3a4>)
 8003b00:	f009 f99e 	bl	800ce40 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
 8003b04:	f107 0308 	add.w	r3, r7, #8
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fc fbd9 	bl	80002c0 <strlen>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	f107 0108 	add.w	r1, r7, #8
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	480c      	ldr	r0, [pc, #48]	@ (8003b4c <set_pwm_values+0x39c>)
 8003b1c:	f007 fd0b 	bl	800b536 <HAL_UART_Transmit>
			for (i = 0; i < sz; i++) {
 8003b20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003b24:	3301      	adds	r3, #1
 8003b26:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003b2a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003b32:	429a      	cmp	r2, r3
 8003b34:	f4ff af5d 	bcc.w	80039f2 <set_pwm_values+0x242>
			}
			break;
 8003b38:	e015      	b.n	8003b66 <set_pwm_values+0x3b6>
 8003b3a:	bf00      	nop
 8003b3c:	40490fdb 	.word	0x40490fdb
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	20000838 	.word	0x20000838
 8003b48:	0800facc 	.word	0x0800facc
 8003b4c:	20000770 	.word	0x20000770
 8003b50:	2000083c 	.word	0x2000083c
 8003b54:	0800faf0 	.word	0x0800faf0
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8003b58:	f107 0308 	add.w	r3, r7, #8
 8003b5c:	49bd      	ldr	r1, [pc, #756]	@ (8003e54 <set_pwm_values+0x6a4>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f009 f96e 	bl	800ce40 <siprintf>
			break;
 8003b64:	bf00      	nop
		}
		break;
 8003b66:	f000 bf5f 	b.w	8004a28 <set_pwm_values+0x1278>
 8003b6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003b6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d008      	beq.n	8003b8a <set_pwm_values+0x3da>
 8003b78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003b7c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	f000 8121 	beq.w	8003dca <set_pwm_values+0x61a>
 8003b88:	e2ca      	b.n	8004120 <set_pwm_values+0x970>
	case 2:
		switch (level){
		case 2:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003b8e:	3301      	adds	r3, #1
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f008 fb7c 	bl	800c290 <malloc>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4bae      	ldr	r3, [pc, #696]	@ (8003e58 <set_pwm_values+0x6a8>)
 8003b9e:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 8003ba0:	4bad      	ldr	r3, [pc, #692]	@ (8003e58 <set_pwm_values+0x6a8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8003ba8:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003bae:	3301      	adds	r3, #1
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f008 fb6c 	bl	800c290 <malloc>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4ba7      	ldr	r3, [pc, #668]	@ (8003e5c <set_pwm_values+0x6ac>)
 8003bbe:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p->NrOfEl = sz;
 8003bc0:	4ba6      	ldr	r3, [pc, #664]	@ (8003e5c <set_pwm_values+0x6ac>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8003bc8:	601a      	str	r2, [r3, #0]
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003bd0:	e0f3      	b.n	8003dba <set_pwm_values+0x60a>
				if (i == 0) {
 8003bd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d14e      	bne.n	8003c78 <set_pwm_values+0x4c8>
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) norm0*stufen;
 8003bda:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8003bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be2:	ee17 0a90 	vmov	r0, s15
 8003be6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003bea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a99      	ldr	r2, [pc, #612]	@ (8003e58 <set_pwm_values+0x6a8>)
 8003bf2:	6811      	ldr	r1, [r2, #0]
 8003bf4:	fb03 f200 	mul.w	r2, r3, r0
 8003bf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	605a      	str	r2, [r3, #4]
					if(norm0*stufen - TIM1->ARR < 0)
 8003c02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003c06:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c14:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8003c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c1c:	4b90      	ldr	r3, [pc, #576]	@ (8003e60 <set_pwm_values+0x6b0>)
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	ee07 3a90 	vmov	s15, r3
 8003c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c34:	d508      	bpl.n	8003c48 <set_pwm_values+0x498>
					{
						pwmPtr_m2p->ccr_arr[i] = 0;
 8003c36:	4b89      	ldr	r3, [pc, #548]	@ (8003e5c <set_pwm_values+0x6ac>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	2200      	movs	r2, #0
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	e08b      	b.n	8003d60 <set_pwm_values+0x5b0>
					}
					else{
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) norm0*stufen - TIM1->ARR;
 8003c48:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8003c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c50:	ee17 2a90 	vmov	r2, s15
 8003c54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003c58:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	fb03 f202 	mul.w	r2, r3, r2
 8003c62:	4b7f      	ldr	r3, [pc, #508]	@ (8003e60 <set_pwm_values+0x6b0>)
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	497d      	ldr	r1, [pc, #500]	@ (8003e5c <set_pwm_values+0x6ac>)
 8003c68:	6809      	ldr	r1, [r1, #0]
 8003c6a:	1ad2      	subs	r2, r2, r3
 8003c6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	e073      	b.n	8003d60 <set_pwm_values+0x5b0>
					}
				} else {
					sin_val = A0 * sinf(i * dRad);
 8003c78:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c84:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8003c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c90:	f00b f94c 	bl	800ef2c <sinf>
 8003c94:	eef0 7a40 	vmov.f32	s15, s0
 8003c98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca0:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
					posOffsetCurr_1 = posOffset0 + sin_val;
 8003ca4:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8003ca8:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb0:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
					normCurr_1 = norm0 * posOffsetCurr_1;
 8003cb4:	ed97 7a48 	vldr	s14, [r7, #288]	@ 0x120
 8003cb8:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8003cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc0:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) normCurr_1*stufen;
 8003cc4:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ccc:	ee17 0a90 	vmov	r0, s15
 8003cd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003cd4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a5f      	ldr	r2, [pc, #380]	@ (8003e58 <set_pwm_values+0x6a8>)
 8003cdc:	6811      	ldr	r1, [r2, #0]
 8003cde:	fb03 f200 	mul.w	r2, r3, r0
 8003ce2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	605a      	str	r2, [r3, #4]
					if(normCurr_1*stufen - TIM1->ARR < 0)
 8003cec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003cf0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cfe:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d06:	4b56      	ldr	r3, [pc, #344]	@ (8003e60 <set_pwm_values+0x6b0>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	d508      	bpl.n	8003d32 <set_pwm_values+0x582>
					{
						pwmPtr_m2p->ccr_arr[i] = 0;
 8003d20:	4b4e      	ldr	r3, [pc, #312]	@ (8003e5c <set_pwm_values+0x6ac>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	e016      	b.n	8003d60 <set_pwm_values+0x5b0>
					}
					else{
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) normCurr_1*stufen - TIM1->ARR;
 8003d32:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d3a:	ee17 2a90 	vmov	r2, s15
 8003d3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003d42:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	fb03 f202 	mul.w	r2, r3, r2
 8003d4c:	4b44      	ldr	r3, [pc, #272]	@ (8003e60 <set_pwm_values+0x6b0>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	4942      	ldr	r1, [pc, #264]	@ (8003e5c <set_pwm_values+0x6ac>)
 8003d52:	6809      	ldr	r1, [r1, #0]
 8003d54:	1ad2      	subs	r2, r2, r3
 8003d56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	605a      	str	r2, [r3, #4]
					}
				}
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu\r\n",
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m2p->ccr_arr[i]);
 8003d60:	4b3d      	ldr	r3, [pc, #244]	@ (8003e58 <set_pwm_values+0x6a8>)
 8003d62:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu\r\n",
 8003d64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	6859      	ldr	r1, [r3, #4]
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m2p->ccr_arr[i]);
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e5c <set_pwm_values+0x6ac>)
 8003d70:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu\r\n",
 8003d72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f107 0008 	add.w	r0, r7, #8
 8003d80:	9301      	str	r3, [sp, #4]
 8003d82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003d8e:	4935      	ldr	r1, [pc, #212]	@ (8003e64 <set_pwm_values+0x6b4>)
 8003d90:	f009 f856 	bl	800ce40 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
 8003d94:	f107 0308 	add.w	r3, r7, #8
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fc fa91 	bl	80002c0 <strlen>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	f107 0108 	add.w	r1, r7, #8
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	482f      	ldr	r0, [pc, #188]	@ (8003e68 <set_pwm_values+0x6b8>)
 8003dac:	f007 fbc3 	bl	800b536 <HAL_UART_Transmit>
			for (i = 0; i < sz; i++) {
 8003db0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003db4:	3301      	adds	r3, #1
 8003db6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003dba:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003dbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	f4ff af05 	bcc.w	8003bd2 <set_pwm_values+0x422>
			}
			break;
 8003dc8:	e1b1      	b.n	800412e <set_pwm_values+0x97e>
		case 3:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003dce:	3301      	adds	r3, #1
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f008 fa5c 	bl	800c290 <malloc>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e58 <set_pwm_values+0x6a8>)
 8003dde:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 8003de0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e58 <set_pwm_values+0x6a8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8003de8:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003dea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003dee:	3301      	adds	r3, #1
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f008 fa4c 	bl	800c290 <malloc>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e6c <set_pwm_values+0x6bc>)
 8003dfe:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n->NrOfEl = sz;
 8003e00:	4b1a      	ldr	r3, [pc, #104]	@ (8003e6c <set_pwm_values+0x6bc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8003e08:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003e0e:	3301      	adds	r3, #1
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f008 fa3c 	bl	800c290 <malloc>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <set_pwm_values+0x6ac>)
 8003e1e:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p->NrOfEl = sz;
 8003e20:	4b0e      	ldr	r3, [pc, #56]	@ (8003e5c <set_pwm_values+0x6ac>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8003e28:	601a      	str	r2, [r3, #0]
			pwmPtr_m2n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8003e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003e2e:	3301      	adds	r3, #1
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f008 fa2c 	bl	800c290 <malloc>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <set_pwm_values+0x6c0>)
 8003e3e:	601a      	str	r2, [r3, #0]
			pwmPtr_m2n->NrOfEl = sz;
 8003e40:	4b0b      	ldr	r3, [pc, #44]	@ (8003e70 <set_pwm_values+0x6c0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8003e48:	601a      	str	r2, [r3, #0]
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003e50:	e0f8      	b.n	8004044 <set_pwm_values+0x894>
 8003e52:	bf00      	nop
 8003e54:	0800fb24 	.word	0x0800fb24
 8003e58:	20000838 	.word	0x20000838
 8003e5c:	20000840 	.word	0x20000840
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	0800fb50 	.word	0x0800fb50
 8003e68:	20000770 	.word	0x20000770
 8003e6c:	2000083c 	.word	0x2000083c
 8003e70:	20000844 	.word	0x20000844
				if (i == 0) {
 8003e74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d14e      	bne.n	8003f1a <set_pwm_values+0x76a>
					// m1p, m2p
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) norm0 * stufen;
 8003e7c:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8003e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e84:	ee17 0a90 	vmov	r0, s15
 8003e88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003e8c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4aca      	ldr	r2, [pc, #808]	@ (80041bc <set_pwm_values+0xa0c>)
 8003e94:	6811      	ldr	r1, [r2, #0]
 8003e96:	fb03 f200 	mul.w	r2, r3, r0
 8003e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	605a      	str	r2, [r3, #4]
					if (norm0 * stufen - TIM1->ARR < 0) {
 8003ea4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003ea8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb6:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8003eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ebe:	4bc0      	ldr	r3, [pc, #768]	@ (80041c0 <set_pwm_values+0xa10>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ece:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed6:	d508      	bpl.n	8003eea <set_pwm_values+0x73a>
						pwmPtr_m2p->ccr_arr[i] = 0;
 8003ed8:	4bba      	ldr	r3, [pc, #744]	@ (80041c4 <set_pwm_values+0xa14>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	e08b      	b.n	8004002 <set_pwm_values+0x852>
					} else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) norm0 * stufen
 8003eea:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8003eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ef2:	ee17 2a90 	vmov	r2, s15
 8003ef6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003efa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	fb03 f202 	mul.w	r2, r3, r2
								- TIM1->ARR;
 8003f04:	4bae      	ldr	r3, [pc, #696]	@ (80041c0 <set_pwm_values+0xa10>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) norm0 * stufen
 8003f08:	49ae      	ldr	r1, [pc, #696]	@ (80041c4 <set_pwm_values+0xa14>)
 8003f0a:	6809      	ldr	r1, [r1, #0]
								- TIM1->ARR;
 8003f0c:	1ad2      	subs	r2, r2, r3
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) norm0 * stufen
 8003f0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	e073      	b.n	8004002 <set_pwm_values+0x852>
					}
				} else {
					// m1p, m2p
					sin_val = A0 * sinf(i * dRad);
 8003f1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f26:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8003f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f32:	f00a fffb 	bl	800ef2c <sinf>
 8003f36:	eef0 7a40 	vmov.f32	s15, s0
 8003f3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f42:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
					posOffsetCurr_1 = posOffset0 + sin_val;
 8003f46:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8003f4a:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f52:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
					normCurr_1 = norm0 * posOffsetCurr_1;
 8003f56:	ed97 7a48 	vldr	s14, [r7, #288]	@ 0x120
 8003f5a:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8003f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f62:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen;
 8003f66:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f6e:	ee17 0a90 	vmov	r0, s15
 8003f72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003f76:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a8f      	ldr	r2, [pc, #572]	@ (80041bc <set_pwm_values+0xa0c>)
 8003f7e:	6811      	ldr	r1, [r2, #0]
 8003f80:	fb03 f200 	mul.w	r2, r3, r0
 8003f84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	605a      	str	r2, [r3, #4]
					if (normCurr_1 * stufen - TIM1->ARR < 0) {
 8003f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003f92:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa0:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fa8:	4b85      	ldr	r3, [pc, #532]	@ (80041c0 <set_pwm_values+0xa10>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc0:	d508      	bpl.n	8003fd4 <set_pwm_values+0x824>
						pwmPtr_m2p->ccr_arr[i] = 0;
 8003fc2:	4b80      	ldr	r3, [pc, #512]	@ (80041c4 <set_pwm_values+0xa14>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	2200      	movs	r2, #0
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	e016      	b.n	8004002 <set_pwm_values+0x852>
					} else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 8003fd4:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fdc:	ee17 2a90 	vmov	r2, s15
 8003fe0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003fe4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	fb03 f202 	mul.w	r2, r3, r2
								- TIM1->ARR;
 8003fee:	4b74      	ldr	r3, [pc, #464]	@ (80041c0 <set_pwm_values+0xa10>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 8003ff2:	4974      	ldr	r1, [pc, #464]	@ (80041c4 <set_pwm_values+0xa14>)
 8003ff4:	6809      	ldr	r1, [r1, #0]
								- TIM1->ARR;
 8003ff6:	1ad2      	subs	r2, r2, r3
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 8003ff8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	605a      	str	r2, [r3, #4]
					}
				}
				// m1n, m2n, Werte kopieren
				pwmPtr_m1n->ccr_arr[i] = pwmPtr_m2p->ccr_arr[i];
 8004002:	4b70      	ldr	r3, [pc, #448]	@ (80041c4 <set_pwm_values+0xa14>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4b70      	ldr	r3, [pc, #448]	@ (80041c8 <set_pwm_values+0xa18>)
 8004008:	6819      	ldr	r1, [r3, #0]
 800400a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	605a      	str	r2, [r3, #4]
				pwmPtr_m2n->ccr_arr[i] = pwmPtr_m1p->ccr_arr[i];
 800401e:	4b67      	ldr	r3, [pc, #412]	@ (80041bc <set_pwm_values+0xa0c>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b6a      	ldr	r3, [pc, #424]	@ (80041cc <set_pwm_values+0xa1c>)
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	605a      	str	r2, [r3, #4]
			for (i = 0; i < sz; i++) {
 800403a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800403e:	3301      	adds	r3, #1
 8004040:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004044:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8004048:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800404c:	429a      	cmp	r2, r3
 800404e:	f4ff af11 	bcc.w	8003e74 <set_pwm_values+0x6c4>
			}
			// m1n, m2n, Array drehen
			int d = sz/2;
 8004052:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			Rotate(pwmPtr_m1n->ccr_arr, d, sz);
 800405c:	4b5a      	ldr	r3, [pc, #360]	@ (80041c8 <set_pwm_values+0xa18>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3304      	adds	r3, #4
 8004062:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004066:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800406a:	4618      	mov	r0, r3
 800406c:	f001 f963 	bl	8005336 <Rotate>
			Rotate(pwmPtr_m2n->ccr_arr, d, sz);
 8004070:	4b56      	ldr	r3, [pc, #344]	@ (80041cc <set_pwm_values+0xa1c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3304      	adds	r3, #4
 8004076:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800407a:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800407e:	4618      	mov	r0, r3
 8004080:	f001 f959 	bl	8005336 <Rotate>
			// Werte Ausgeben
			for (i = 0; i < sz; i++){
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800408a:	e042      	b.n	8004112 <set_pwm_values+0x962>
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,
						"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m1n->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu | pwmPtr_m2n->ccr_arr[%lu]: %3lu\r\n",
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i],
 800408c:	4b4b      	ldr	r3, [pc, #300]	@ (80041bc <set_pwm_values+0xa0c>)
 800408e:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 8004090:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	685c      	ldr	r4, [r3, #4]
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i],
 800409a:	4b4b      	ldr	r3, [pc, #300]	@ (80041c8 <set_pwm_values+0xa18>)
 800409c:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 800409e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	685a      	ldr	r2, [r3, #4]
						i, pwmPtr_m2p->ccr_arr[i], i, pwmPtr_m2n->ccr_arr[i]);
 80040a8:	4b46      	ldr	r3, [pc, #280]	@ (80041c4 <set_pwm_values+0xa14>)
 80040aa:	6819      	ldr	r1, [r3, #0]
				sprintf(msg_console,
 80040ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	6859      	ldr	r1, [r3, #4]
						i, pwmPtr_m2p->ccr_arr[i], i, pwmPtr_m2n->ccr_arr[i]);
 80040b6:	4b45      	ldr	r3, [pc, #276]	@ (80041cc <set_pwm_values+0xa1c>)
 80040b8:	6818      	ldr	r0, [r3, #0]
				sprintf(msg_console,
 80040ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4403      	add	r3, r0
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f107 0008 	add.w	r0, r7, #8
 80040c8:	9305      	str	r3, [sp, #20]
 80040ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	9103      	str	r1, [sp, #12]
 80040d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	9201      	str	r2, [sp, #4]
 80040da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4623      	mov	r3, r4
 80040e2:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80040e6:	493a      	ldr	r1, [pc, #232]	@ (80041d0 <set_pwm_values+0xa20>)
 80040e8:	f008 feaa 	bl	800ce40 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
						strlen(msg_console), HAL_MAX_DELAY);
 80040ec:	f107 0308 	add.w	r3, r7, #8
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fc f8e5 	bl	80002c0 <strlen>
 80040f6:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	f107 0108 	add.w	r1, r7, #8
 80040fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004102:	4834      	ldr	r0, [pc, #208]	@ (80041d4 <set_pwm_values+0xa24>)
 8004104:	f007 fa17 	bl	800b536 <HAL_UART_Transmit>
			for (i = 0; i < sz; i++){
 8004108:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800410c:	3301      	adds	r3, #1
 800410e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004112:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8004116:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800411a:	429a      	cmp	r2, r3
 800411c:	d3b6      	bcc.n	800408c <set_pwm_values+0x8dc>
			}
			break;
 800411e:	e006      	b.n	800412e <set_pwm_values+0x97e>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	492c      	ldr	r1, [pc, #176]	@ (80041d8 <set_pwm_values+0xa28>)
 8004126:	4618      	mov	r0, r3
 8004128:	f008 fe8a 	bl	800ce40 <siprintf>
			break;
 800412c:	bf00      	nop
		}
		break;
 800412e:	f000 bc7b 	b.w	8004a28 <set_pwm_values+0x1278>
 8004132:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004136:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d009      	beq.n	8004154 <set_pwm_values+0x9a4>
 8004140:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004144:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b03      	cmp	r3, #3
 800414c:	f000 81d4 	beq.w	80044f8 <set_pwm_values+0xd48>
 8004150:	f000 bc42 	b.w	80049d8 <set_pwm_values+0x1228>
	case 3:
		switch (level){
		case 2:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004154:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004158:	3301      	adds	r3, #1
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4618      	mov	r0, r3
 800415e:	f008 f897 	bl	800c290 <malloc>
 8004162:	4603      	mov	r3, r0
 8004164:	461a      	mov	r2, r3
 8004166:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <set_pwm_values+0xa0c>)
 8004168:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 800416a:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <set_pwm_values+0xa0c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004172:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004174:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004178:	3301      	adds	r3, #1
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4618      	mov	r0, r3
 800417e:	f008 f887 	bl	800c290 <malloc>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <set_pwm_values+0xa14>)
 8004188:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p->NrOfEl = sz;
 800418a:	4b0e      	ldr	r3, [pc, #56]	@ (80041c4 <set_pwm_values+0xa14>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004192:	601a      	str	r2, [r3, #0]
			pwmPtr_m3p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004194:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004198:	3301      	adds	r3, #1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f008 f877 	bl	800c290 <malloc>
 80041a2:	4603      	mov	r3, r0
 80041a4:	461a      	mov	r2, r3
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <set_pwm_values+0xa2c>)
 80041a8:	601a      	str	r2, [r3, #0]
			pwmPtr_m3p->NrOfEl = sz;
 80041aa:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <set_pwm_values+0xa2c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80041b2:	601a      	str	r2, [r3, #0]
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80041ba:	e189      	b.n	80044d0 <set_pwm_values+0xd20>
 80041bc:	20000838 	.word	0x20000838
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	20000840 	.word	0x20000840
 80041c8:	2000083c 	.word	0x2000083c
 80041cc:	20000844 	.word	0x20000844
 80041d0:	0800fb94 	.word	0x0800fb94
 80041d4:	20000770 	.word	0x20000770
 80041d8:	0800fb24 	.word	0x0800fb24
 80041dc:	20000848 	.word	0x20000848
				if (i == 0) {
 80041e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 808b 	bne.w	8004300 <set_pwm_values+0xb50>
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) norm0 * stufen;
 80041ea:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 80041ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f2:	ee17 0a90 	vmov	r0, s15
 80041f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80041fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4ab7      	ldr	r2, [pc, #732]	@ (80044e0 <set_pwm_values+0xd30>)
 8004202:	6811      	ldr	r1, [r2, #0]
 8004204:	fb03 f200 	mul.w	r2, r3, r0
 8004208:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	605a      	str	r2, [r3, #4]
					if (norm0 * stufen - TIM1->ARR < 0) {
 8004212:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004216:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	ee07 3a90 	vmov	s15, r3
 8004220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004224:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8004228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800422c:	4bad      	ldr	r3, [pc, #692]	@ (80044e4 <set_pwm_values+0xd34>)
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800423c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004244:	d508      	bpl.n	8004258 <set_pwm_values+0xaa8>
						pwmPtr_m2p->ccr_arr[i] = 0;
 8004246:	4ba8      	ldr	r3, [pc, #672]	@ (80044e8 <set_pwm_values+0xd38>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	2200      	movs	r2, #0
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	e103      	b.n	8004460 <set_pwm_values+0xcb0>
					}
					else if (normCurr_1 * stufen - (2 * TIM1->ARR) < 0){
 8004258:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800425c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800426a:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 800426e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004272:	4b9c      	ldr	r3, [pc, #624]	@ (80044e4 <set_pwm_values+0xd34>)
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428c:	d508      	bpl.n	80042a0 <set_pwm_values+0xaf0>
						pwmPtr_m3p->ccr_arr[i] = 0;
 800428e:	4b97      	ldr	r3, [pc, #604]	@ (80044ec <set_pwm_values+0xd3c>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	2200      	movs	r2, #0
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	e0df      	b.n	8004460 <set_pwm_values+0xcb0>
					}
					else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) norm0 * stufen
 80042a0:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 80042a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a8:	ee17 2a90 	vmov	r2, s15
 80042ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80042b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	fb03 f202 	mul.w	r2, r3, r2
								- TIM1->ARR;
 80042ba:	4b8a      	ldr	r3, [pc, #552]	@ (80044e4 <set_pwm_values+0xd34>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) norm0 * stufen
 80042be:	498a      	ldr	r1, [pc, #552]	@ (80044e8 <set_pwm_values+0xd38>)
 80042c0:	6809      	ldr	r1, [r1, #0]
								- TIM1->ARR;
 80042c2:	1ad2      	subs	r2, r2, r3
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) norm0 * stufen
 80042c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	605a      	str	r2, [r3, #4]
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) norm0 * stufen
 80042ce:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 80042d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042d6:	ee17 2a90 	vmov	r2, s15
 80042da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80042de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	fb03 f202 	mul.w	r2, r3, r2
								- 2 * TIM1->ARR;
 80042e8:	4b7e      	ldr	r3, [pc, #504]	@ (80044e4 <set_pwm_values+0xd34>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	005b      	lsls	r3, r3, #1
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) norm0 * stufen
 80042ee:	497f      	ldr	r1, [pc, #508]	@ (80044ec <set_pwm_values+0xd3c>)
 80042f0:	6809      	ldr	r1, [r1, #0]
								- 2 * TIM1->ARR;
 80042f2:	1ad2      	subs	r2, r2, r3
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) norm0 * stufen
 80042f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	e0af      	b.n	8004460 <set_pwm_values+0xcb0>
					}
				} else {
					sin_val = A0 * sinf(i * dRad);
 8004300:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800430c:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8004310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004314:	eeb0 0a67 	vmov.f32	s0, s15
 8004318:	f00a fe08 	bl	800ef2c <sinf>
 800431c:	eef0 7a40 	vmov.f32	s15, s0
 8004320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004328:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
					posOffsetCurr_1 = posOffset0 + sin_val;
 800432c:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8004330:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8004334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004338:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
					normCurr_1 = norm0 * posOffsetCurr_1;
 800433c:	ed97 7a48 	vldr	s14, [r7, #288]	@ 0x120
 8004340:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8004344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004348:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen;
 800434c:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8004350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004354:	ee17 0a90 	vmov	r0, s15
 8004358:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800435c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a5f      	ldr	r2, [pc, #380]	@ (80044e0 <set_pwm_values+0xd30>)
 8004364:	6811      	ldr	r1, [r2, #0]
 8004366:	fb03 f200 	mul.w	r2, r3, r0
 800436a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	605a      	str	r2, [r3, #4]
					if (normCurr_1 * stufen - TIM1->ARR < 0) {
 8004374:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004378:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004386:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 800438a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800438e:	4b55      	ldr	r3, [pc, #340]	@ (80044e4 <set_pwm_values+0xd34>)
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800439e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	d508      	bpl.n	80043ba <set_pwm_values+0xc0a>
						pwmPtr_m2p->ccr_arr[i] = 0;
 80043a8:	4b4f      	ldr	r3, [pc, #316]	@ (80044e8 <set_pwm_values+0xd38>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	2200      	movs	r2, #0
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	e052      	b.n	8004460 <set_pwm_values+0xcb0>
					} else if (normCurr_1 * stufen - (2 * TIM1->ARR) < 0) {
 80043ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80043be:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	ee07 3a90 	vmov	s15, r3
 80043c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043cc:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 80043d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043d4:	4b43      	ldr	r3, [pc, #268]	@ (80044e4 <set_pwm_values+0xd34>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ee:	d508      	bpl.n	8004402 <set_pwm_values+0xc52>
						pwmPtr_m3p->ccr_arr[i] = 0;
 80043f0:	4b3e      	ldr	r3, [pc, #248]	@ (80044ec <set_pwm_values+0xd3c>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	2200      	movs	r2, #0
 80043fe:	605a      	str	r2, [r3, #4]
 8004400:	e02e      	b.n	8004460 <set_pwm_values+0xcb0>
					} else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 8004402:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8004406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800440a:	ee17 2a90 	vmov	r2, s15
 800440e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004412:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	fb03 f202 	mul.w	r2, r3, r2
								- TIM1->ARR;
 800441c:	4b31      	ldr	r3, [pc, #196]	@ (80044e4 <set_pwm_values+0xd34>)
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 8004420:	4931      	ldr	r1, [pc, #196]	@ (80044e8 <set_pwm_values+0xd38>)
 8004422:	6809      	ldr	r1, [r1, #0]
								- TIM1->ARR;
 8004424:	1ad2      	subs	r2, r2, r3
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 8004426:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	605a      	str	r2, [r3, #4]
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 8004430:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8004434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004438:	ee17 2a90 	vmov	r2, s15
 800443c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004440:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	fb03 f202 	mul.w	r2, r3, r2
								- 2 * TIM1->ARR;
 800444a:	4b26      	ldr	r3, [pc, #152]	@ (80044e4 <set_pwm_values+0xd34>)
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	005b      	lsls	r3, r3, #1
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 8004450:	4926      	ldr	r1, [pc, #152]	@ (80044ec <set_pwm_values+0xd3c>)
 8004452:	6809      	ldr	r1, [r1, #0]
								- 2 * TIM1->ARR;
 8004454:	1ad2      	subs	r2, r2, r3
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 8004456:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	605a      	str	r2, [r3, #4]
					}
				}
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,
						"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu | pwmPtr_m3p->ccr_arr[%lu]: %3lu\r\n",
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m2p->ccr_arr[i],
 8004460:	4b1f      	ldr	r3, [pc, #124]	@ (80044e0 <set_pwm_values+0xd30>)
 8004462:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 8004464:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	685c      	ldr	r4, [r3, #4]
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m2p->ccr_arr[i],
 800446e:	4b1e      	ldr	r3, [pc, #120]	@ (80044e8 <set_pwm_values+0xd38>)
 8004470:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 8004472:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	685a      	ldr	r2, [r3, #4]
						i, pwmPtr_m3p->ccr_arr[i]);
 800447c:	4b1b      	ldr	r3, [pc, #108]	@ (80044ec <set_pwm_values+0xd3c>)
 800447e:	6819      	ldr	r1, [r3, #0]
				sprintf(msg_console,
 8004480:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f107 0008 	add.w	r0, r7, #8
 800448e:	9303      	str	r3, [sp, #12]
 8004490:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004494:	9302      	str	r3, [sp, #8]
 8004496:	9201      	str	r2, [sp, #4]
 8004498:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	4623      	mov	r3, r4
 80044a0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80044a4:	4912      	ldr	r1, [pc, #72]	@ (80044f0 <set_pwm_values+0xd40>)
 80044a6:	f008 fccb 	bl	800ce40 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
						strlen(msg_console), HAL_MAX_DELAY);
 80044aa:	f107 0308 	add.w	r3, r7, #8
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fb ff06 	bl	80002c0 <strlen>
 80044b4:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	f107 0108 	add.w	r1, r7, #8
 80044bc:	f04f 33ff 	mov.w	r3, #4294967295
 80044c0:	480c      	ldr	r0, [pc, #48]	@ (80044f4 <set_pwm_values+0xd44>)
 80044c2:	f007 f838 	bl	800b536 <HAL_UART_Transmit>
			for (i = 0; i < sz; i++) {
 80044c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80044ca:	3301      	adds	r3, #1
 80044cc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80044d0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80044d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80044d8:	429a      	cmp	r2, r3
 80044da:	f4ff ae81 	bcc.w	80041e0 <set_pwm_values+0xa30>
			}
			break;
 80044de:	e282      	b.n	80049e6 <set_pwm_values+0x1236>
 80044e0:	20000838 	.word	0x20000838
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	20000840 	.word	0x20000840
 80044ec:	20000848 	.word	0x20000848
 80044f0:	0800fc18 	.word	0x0800fc18
 80044f4:	20000770 	.word	0x20000770
		case 3:
			pwmPtr_m1p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 80044f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80044fc:	3301      	adds	r3, #1
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4618      	mov	r0, r3
 8004502:	f007 fec5 	bl	800c290 <malloc>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	4bc1      	ldr	r3, [pc, #772]	@ (8004810 <set_pwm_values+0x1060>)
 800450c:	601a      	str	r2, [r3, #0]
			pwmPtr_m1p->NrOfEl = sz;
 800450e:	4bc0      	ldr	r3, [pc, #768]	@ (8004810 <set_pwm_values+0x1060>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004516:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004518:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800451c:	3301      	adds	r3, #1
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4618      	mov	r0, r3
 8004522:	f007 feb5 	bl	800c290 <malloc>
 8004526:	4603      	mov	r3, r0
 8004528:	461a      	mov	r2, r3
 800452a:	4bba      	ldr	r3, [pc, #744]	@ (8004814 <set_pwm_values+0x1064>)
 800452c:	601a      	str	r2, [r3, #0]
			pwmPtr_m1n->NrOfEl = sz;
 800452e:	4bb9      	ldr	r3, [pc, #740]	@ (8004814 <set_pwm_values+0x1064>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004536:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004538:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800453c:	3301      	adds	r3, #1
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4618      	mov	r0, r3
 8004542:	f007 fea5 	bl	800c290 <malloc>
 8004546:	4603      	mov	r3, r0
 8004548:	461a      	mov	r2, r3
 800454a:	4bb3      	ldr	r3, [pc, #716]	@ (8004818 <set_pwm_values+0x1068>)
 800454c:	601a      	str	r2, [r3, #0]
			pwmPtr_m2p->NrOfEl = sz;
 800454e:	4bb2      	ldr	r3, [pc, #712]	@ (8004818 <set_pwm_values+0x1068>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004556:	601a      	str	r2, [r3, #0]
			pwmPtr_m2n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004558:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800455c:	3301      	adds	r3, #1
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f007 fe95 	bl	800c290 <malloc>
 8004566:	4603      	mov	r3, r0
 8004568:	461a      	mov	r2, r3
 800456a:	4bac      	ldr	r3, [pc, #688]	@ (800481c <set_pwm_values+0x106c>)
 800456c:	601a      	str	r2, [r3, #0]
			pwmPtr_m2n->NrOfEl = sz;
 800456e:	4bab      	ldr	r3, [pc, #684]	@ (800481c <set_pwm_values+0x106c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004576:	601a      	str	r2, [r3, #0]
			pwmPtr_m3p = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004578:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800457c:	3301      	adds	r3, #1
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4618      	mov	r0, r3
 8004582:	f007 fe85 	bl	800c290 <malloc>
 8004586:	4603      	mov	r3, r0
 8004588:	461a      	mov	r2, r3
 800458a:	4ba5      	ldr	r3, [pc, #660]	@ (8004820 <set_pwm_values+0x1070>)
 800458c:	601a      	str	r2, [r3, #0]
			pwmPtr_m3p->NrOfEl = sz;
 800458e:	4ba4      	ldr	r3, [pc, #656]	@ (8004820 <set_pwm_values+0x1070>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004596:	601a      	str	r2, [r3, #0]
			pwmPtr_m3n = malloc(sizeof(pwm_sin_mod) + sz * sizeof(uint32_t));
 8004598:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800459c:	3301      	adds	r3, #1
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f007 fe75 	bl	800c290 <malloc>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b9e      	ldr	r3, [pc, #632]	@ (8004824 <set_pwm_values+0x1074>)
 80045ac:	601a      	str	r2, [r3, #0]
			pwmPtr_m3n->NrOfEl = sz;
 80045ae:	4b9d      	ldr	r3, [pc, #628]	@ (8004824 <set_pwm_values+0x1074>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80045b6:	601a      	str	r2, [r3, #0]
			// Struktur mit Werten füllen
			for (i = 0; i < sz; i++) {
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80045be:	e17c      	b.n	80048ba <set_pwm_values+0x110a>
				if (i == 0) {
 80045c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f040 808b 	bne.w	80046e0 <set_pwm_values+0xf30>
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) norm0 * stufen;
 80045ca:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 80045ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d2:	ee17 0a90 	vmov	r0, s15
 80045d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80045da:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a8b      	ldr	r2, [pc, #556]	@ (8004810 <set_pwm_values+0x1060>)
 80045e2:	6811      	ldr	r1, [r2, #0]
 80045e4:	fb03 f200 	mul.w	r2, r3, r0
 80045e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	605a      	str	r2, [r3, #4]
					if (norm0 * stufen - TIM1->ARR < 0) {
 80045f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80045f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004604:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8004608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800460c:	4b86      	ldr	r3, [pc, #536]	@ (8004828 <set_pwm_values+0x1078>)
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800461c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004624:	d508      	bpl.n	8004638 <set_pwm_values+0xe88>
						pwmPtr_m2p->ccr_arr[i] = 0;
 8004626:	4b7c      	ldr	r3, [pc, #496]	@ (8004818 <set_pwm_values+0x1068>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	2200      	movs	r2, #0
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	e016      	b.n	8004666 <set_pwm_values+0xeb6>
					} else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) norm0 * stufen
 8004638:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 800463c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004640:	ee17 2a90 	vmov	r2, s15
 8004644:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004648:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	fb03 f202 	mul.w	r2, r3, r2
								- TIM1->ARR;
 8004652:	4b75      	ldr	r3, [pc, #468]	@ (8004828 <set_pwm_values+0x1078>)
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) norm0 * stufen
 8004656:	4970      	ldr	r1, [pc, #448]	@ (8004818 <set_pwm_values+0x1068>)
 8004658:	6809      	ldr	r1, [r1, #0]
								- TIM1->ARR;
 800465a:	1ad2      	subs	r2, r2, r3
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) norm0 * stufen
 800465c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	605a      	str	r2, [r3, #4]
					}
					if (normCurr_1 * stufen - (2 * TIM1->ARR) < 0) {
 8004666:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800466a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004678:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 800467c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004680:	4b69      	ldr	r3, [pc, #420]	@ (8004828 <set_pwm_values+0x1078>)
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004692:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469a:	d508      	bpl.n	80046ae <set_pwm_values+0xefe>
						pwmPtr_m3p->ccr_arr[i] = 0;
 800469c:	4b60      	ldr	r3, [pc, #384]	@ (8004820 <set_pwm_values+0x1070>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	e0d6      	b.n	800485c <set_pwm_values+0x10ac>
					} else {
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) norm0 * stufen
 80046ae:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 80046b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b6:	ee17 2a90 	vmov	r2, s15
 80046ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80046be:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	fb03 f202 	mul.w	r2, r3, r2
								- 2 * TIM1->ARR;
 80046c8:	4b57      	ldr	r3, [pc, #348]	@ (8004828 <set_pwm_values+0x1078>)
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	005b      	lsls	r3, r3, #1
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) norm0 * stufen
 80046ce:	4954      	ldr	r1, [pc, #336]	@ (8004820 <set_pwm_values+0x1070>)
 80046d0:	6809      	ldr	r1, [r1, #0]
								- 2 * TIM1->ARR;
 80046d2:	1ad2      	subs	r2, r2, r3
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) norm0 * stufen
 80046d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	e0bd      	b.n	800485c <set_pwm_values+0x10ac>
					}
				} else {
					sin_val = A0 * sinf(i * dRad);
 80046e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046e4:	ee07 3a90 	vmov	s15, r3
 80046e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046ec:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 80046f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f4:	eeb0 0a67 	vmov.f32	s0, s15
 80046f8:	f00a fc18 	bl	800ef2c <sinf>
 80046fc:	eef0 7a40 	vmov.f32	s15, s0
 8004700:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004708:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
					posOffsetCurr_1 = posOffset0 + sin_val;
 800470c:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 8004710:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8004714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004718:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
					normCurr_1 = norm0 * posOffsetCurr_1;
 800471c:	ed97 7a48 	vldr	s14, [r7, #288]	@ 0x120
 8004720:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8004724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004728:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
					pwmPtr_m1p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen;
 800472c:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8004730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004734:	ee17 0a90 	vmov	r0, s15
 8004738:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800473c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a33      	ldr	r2, [pc, #204]	@ (8004810 <set_pwm_values+0x1060>)
 8004744:	6811      	ldr	r1, [r2, #0]
 8004746:	fb03 f200 	mul.w	r2, r3, r0
 800474a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	605a      	str	r2, [r3, #4]
					if (normCurr_1 * stufen - TIM1->ARR < 0) {
 8004754:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004758:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004766:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 800476a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800476e:	4b2e      	ldr	r3, [pc, #184]	@ (8004828 <set_pwm_values+0x1078>)
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800477e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004786:	d508      	bpl.n	800479a <set_pwm_values+0xfea>
						pwmPtr_m2p->ccr_arr[i] = 0;
 8004788:	4b23      	ldr	r3, [pc, #140]	@ (8004818 <set_pwm_values+0x1068>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]
 8004798:	e016      	b.n	80047c8 <set_pwm_values+0x1018>
					} else {
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 800479a:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 800479e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a2:	ee17 2a90 	vmov	r2, s15
 80047a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80047aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	fb03 f202 	mul.w	r2, r3, r2
								- TIM1->ARR;
 80047b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004828 <set_pwm_values+0x1078>)
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 80047b8:	4917      	ldr	r1, [pc, #92]	@ (8004818 <set_pwm_values+0x1068>)
 80047ba:	6809      	ldr	r1, [r1, #0]
								- TIM1->ARR;
 80047bc:	1ad2      	subs	r2, r2, r3
						pwmPtr_m2p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 80047be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	605a      	str	r2, [r3, #4]
					}
					if (normCurr_1 * stufen - (2 * TIM1->ARR) < 0) {
 80047c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80047cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047da:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 80047de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047e2:	4b11      	ldr	r3, [pc, #68]	@ (8004828 <set_pwm_values+0x1078>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	ee07 3a90 	vmov	s15, r3
 80047ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fc:	d516      	bpl.n	800482c <set_pwm_values+0x107c>
						pwmPtr_m3p->ccr_arr[i] = 0;
 80047fe:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <set_pwm_values+0x1070>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	2200      	movs	r2, #0
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	e025      	b.n	800485c <set_pwm_values+0x10ac>
 8004810:	20000838 	.word	0x20000838
 8004814:	2000083c 	.word	0x2000083c
 8004818:	20000840 	.word	0x20000840
 800481c:	20000844 	.word	0x20000844
 8004820:	20000848 	.word	0x20000848
 8004824:	2000084c 	.word	0x2000084c
 8004828:	40012c00 	.word	0x40012c00
					} else {
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 800482c:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8004830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004834:	ee17 2a90 	vmov	r2, s15
 8004838:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800483c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	fb03 f202 	mul.w	r2, r3, r2
								- 2 * TIM1->ARR;
 8004846:	4b7b      	ldr	r3, [pc, #492]	@ (8004a34 <set_pwm_values+0x1284>)
 8004848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484a:	005b      	lsls	r3, r3, #1
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 800484c:	497a      	ldr	r1, [pc, #488]	@ (8004a38 <set_pwm_values+0x1288>)
 800484e:	6809      	ldr	r1, [r1, #0]
								- 2 * TIM1->ARR;
 8004850:	1ad2      	subs	r2, r2, r3
						pwmPtr_m3p->ccr_arr[i] = (uint32_t) normCurr_1 * stufen
 8004852:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	605a      	str	r2, [r3, #4]
					}
				}
				// m1n, m2n, m3n, Werte kopieren
				pwmPtr_m1n->ccr_arr[i] = pwmPtr_m3p->ccr_arr[i];
 800485c:	4b76      	ldr	r3, [pc, #472]	@ (8004a38 <set_pwm_values+0x1288>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b76      	ldr	r3, [pc, #472]	@ (8004a3c <set_pwm_values+0x128c>)
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	605a      	str	r2, [r3, #4]
				pwmPtr_m2n->ccr_arr[i] = pwmPtr_m2p->ccr_arr[i];
 8004878:	4b71      	ldr	r3, [pc, #452]	@ (8004a40 <set_pwm_values+0x1290>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b71      	ldr	r3, [pc, #452]	@ (8004a44 <set_pwm_values+0x1294>)
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	605a      	str	r2, [r3, #4]
				pwmPtr_m3n->ccr_arr[i] = pwmPtr_m1p->ccr_arr[i];
 8004894:	4b6c      	ldr	r3, [pc, #432]	@ (8004a48 <set_pwm_values+0x1298>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b6c      	ldr	r3, [pc, #432]	@ (8004a4c <set_pwm_values+0x129c>)
 800489a:	6819      	ldr	r1, [r3, #0]
 800489c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	605a      	str	r2, [r3, #4]
			for (i = 0; i < sz; i++) {
 80048b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80048b4:	3301      	adds	r3, #1
 80048b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80048ba:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80048be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80048c2:	429a      	cmp	r2, r3
 80048c4:	f4ff ae7c 	bcc.w	80045c0 <set_pwm_values+0xe10>
			}
			// m1n, m2n, m3n, Array drehen
			int d = sz/2;
 80048c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
			Rotate(pwmPtr_m1n->ccr_arr, d, sz);
 80048d2:	4b5a      	ldr	r3, [pc, #360]	@ (8004a3c <set_pwm_values+0x128c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3304      	adds	r3, #4
 80048d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80048dc:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fd28 	bl	8005336 <Rotate>
			Rotate(pwmPtr_m2n->ccr_arr, d, sz);
 80048e6:	4b57      	ldr	r3, [pc, #348]	@ (8004a44 <set_pwm_values+0x1294>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3304      	adds	r3, #4
 80048ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80048f0:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fd1e 	bl	8005336 <Rotate>
			Rotate(pwmPtr_m3n->ccr_arr, d, sz);
 80048fa:	4b54      	ldr	r3, [pc, #336]	@ (8004a4c <set_pwm_values+0x129c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3304      	adds	r3, #4
 8004900:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004904:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fd14 	bl	8005336 <Rotate>
			// Werte Ausgeben
			for (i = 0; i < sz; i++){
 800490e:	2300      	movs	r3, #0
 8004910:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004914:	e059      	b.n	80049ca <set_pwm_values+0x121a>
				// Dynamisch allozierter Speicher mit PuTTY Konsole ausgeben
				sprintf(msg_console,
						"pwmPtr_m1p->ccr_arr[%lu]: %3lu | pwmPtr_m1n->ccr_arr[%lu]: %3lu | pwmPtr_m2p->ccr_arr[%lu]: %3lu | pwmPtr_m2n->ccr_arr[%lu]: %3lu | pwmPtr_m3p->ccr_arr[%lu]: %3lu | pwmPtr_m3n->ccr_arr[%lu]: %3lu\r\n",
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i],
 8004916:	4b4c      	ldr	r3, [pc, #304]	@ (8004a48 <set_pwm_values+0x1298>)
 8004918:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 800491a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	685e      	ldr	r6, [r3, #4]
						i, pwmPtr_m1p->ccr_arr[i], i, pwmPtr_m1n->ccr_arr[i],
 8004924:	4b45      	ldr	r3, [pc, #276]	@ (8004a3c <set_pwm_values+0x128c>)
 8004926:	681a      	ldr	r2, [r3, #0]
				sprintf(msg_console,
 8004928:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	685a      	ldr	r2, [r3, #4]
						i, pwmPtr_m2p->ccr_arr[i], i, pwmPtr_m2n->ccr_arr[i],
 8004932:	4b43      	ldr	r3, [pc, #268]	@ (8004a40 <set_pwm_values+0x1290>)
 8004934:	6819      	ldr	r1, [r3, #0]
				sprintf(msg_console,
 8004936:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	6859      	ldr	r1, [r3, #4]
						i, pwmPtr_m2p->ccr_arr[i], i, pwmPtr_m2n->ccr_arr[i],
 8004940:	4b40      	ldr	r3, [pc, #256]	@ (8004a44 <set_pwm_values+0x1294>)
 8004942:	6818      	ldr	r0, [r3, #0]
				sprintf(msg_console,
 8004944:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4403      	add	r3, r0
 800494c:	6858      	ldr	r0, [r3, #4]
						i, pwmPtr_m3p->ccr_arr[i], i, pwmPtr_m3n->ccr_arr[i]);
 800494e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a38 <set_pwm_values+0x1288>)
 8004950:	681c      	ldr	r4, [r3, #0]
				sprintf(msg_console,
 8004952:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4423      	add	r3, r4
 800495a:	685c      	ldr	r4, [r3, #4]
						i, pwmPtr_m3p->ccr_arr[i], i, pwmPtr_m3n->ccr_arr[i]);
 800495c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a4c <set_pwm_values+0x129c>)
 800495e:	681d      	ldr	r5, [r3, #0]
				sprintf(msg_console,
 8004960:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	442b      	add	r3, r5
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f107 0508 	add.w	r5, r7, #8
 800496e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004970:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004974:	9308      	str	r3, [sp, #32]
 8004976:	9407      	str	r4, [sp, #28]
 8004978:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800497c:	9306      	str	r3, [sp, #24]
 800497e:	9005      	str	r0, [sp, #20]
 8004980:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004984:	9304      	str	r3, [sp, #16]
 8004986:	9103      	str	r1, [sp, #12]
 8004988:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800498c:	9302      	str	r3, [sp, #8]
 800498e:	9201      	str	r2, [sp, #4]
 8004990:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	4633      	mov	r3, r6
 8004998:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800499c:	492c      	ldr	r1, [pc, #176]	@ (8004a50 <set_pwm_values+0x12a0>)
 800499e:	4628      	mov	r0, r5
 80049a0:	f008 fa4e 	bl	800ce40 <siprintf>
				// PuTTY Ausgabe
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
						strlen(msg_console), HAL_MAX_DELAY);
 80049a4:	f107 0308 	add.w	r3, r7, #8
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fb fc89 	bl	80002c0 <strlen>
 80049ae:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	f107 0108 	add.w	r1, r7, #8
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ba:	4826      	ldr	r0, [pc, #152]	@ (8004a54 <set_pwm_values+0x12a4>)
 80049bc:	f006 fdbb 	bl	800b536 <HAL_UART_Transmit>
			for (i = 0; i < sz; i++){
 80049c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80049c4:	3301      	adds	r3, #1
 80049c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80049ca:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80049ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d39f      	bcc.n	8004916 <set_pwm_values+0x1166>
			}
			break;
 80049d6:	e006      	b.n	80049e6 <set_pwm_values+0x1236>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	491e      	ldr	r1, [pc, #120]	@ (8004a58 <set_pwm_values+0x12a8>)
 80049de:	4618      	mov	r0, r3
 80049e0:	f008 fa2e 	bl	800ce40 <siprintf>
			break;
 80049e4:	bf00      	nop
		}
		break;
 80049e6:	e01f      	b.n	8004a28 <set_pwm_values+0x1278>
 80049e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049ec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d00d      	beq.n	8004a12 <set_pwm_values+0x1262>
 80049f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d008      	beq.n	8004a16 <set_pwm_values+0x1266>
		case 2:
			break;
		case 3:
			break;
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	4913      	ldr	r1, [pc, #76]	@ (8004a58 <set_pwm_values+0x12a8>)
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f008 fa18 	bl	800ce40 <siprintf>
			break;
 8004a10:	e002      	b.n	8004a18 <set_pwm_values+0x1268>
			break;
 8004a12:	bf00      	nop
 8004a14:	e008      	b.n	8004a28 <set_pwm_values+0x1278>
			break;
 8004a16:	bf00      	nop
		}
		break;
 8004a18:	e006      	b.n	8004a28 <set_pwm_values+0x1278>
	default:
		sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004a1a:	f107 0308 	add.w	r3, r7, #8
 8004a1e:	490e      	ldr	r1, [pc, #56]	@ (8004a58 <set_pwm_values+0x12a8>)
 8004a20:	4618      	mov	r0, r3
 8004a22:	f008 fa0d 	bl	800ce40 <siprintf>
		break;
 8004a26:	bf00      	nop
	}
}
 8004a28:	bf00      	nop
 8004a2a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	20000848 	.word	0x20000848
 8004a3c:	2000083c 	.word	0x2000083c
 8004a40:	20000840 	.word	0x20000840
 8004a44:	20000844 	.word	0x20000844
 8004a48:	20000838 	.word	0x20000838
 8004a4c:	2000084c 	.word	0x2000084c
 8004a50:	0800fc7c 	.word	0x0800fc7c
 8004a54:	20000770 	.word	0x20000770
 8004a58:	0800fb24 	.word	0x0800fb24

08004a5c <stopp_pwm>:

void stopp_pwm(const int stufen, const int level) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b098      	sub	sp, #96	@ 0x60
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
	// Debug
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8004a66:	2201      	movs	r2, #1
 8004a68:	2108      	movs	r1, #8
 8004a6a:	48b5      	ldr	r0, [pc, #724]	@ (8004d40 <stopp_pwm+0x2e4>)
 8004a6c:	f003 f8ae 	bl	8007bcc <HAL_GPIO_WritePin>
	// Variablen
	char msg_console[80] = ""; // array für Ausgabe
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	f107 0310 	add.w	r3, r7, #16
 8004a78:	224c      	movs	r2, #76	@ 0x4c
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f008 fa42 	bl	800cf06 <memset>
	uint16_t gpio_state = GPIO_PIN_SET;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	switch(stufen){
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	f000 80dd 	beq.w	8004c4a <stopp_pwm+0x1ee>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	f300 819d 	bgt.w	8004dd2 <stopp_pwm+0x376>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d00b      	beq.n	8004ab6 <stopp_pwm+0x5a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d051      	beq.n	8004b48 <stopp_pwm+0xec>
 8004aa4:	e195      	b.n	8004dd2 <stopp_pwm+0x376>
	case 1:

		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH1N_NMOS2_LS_GPIO_Port,
 8004aa6:	2180      	movs	r1, #128	@ 0x80
 8004aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004aac:	f003 f876 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004ab6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f3      	bne.n	8004aa6 <stopp_pwm+0x4a>
			TIM1_CH1N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8004abe:	2100      	movs	r1, #0
 8004ac0:	48a0      	ldr	r0, [pc, #640]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004ac2:	f006 faf5 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	489e      	ldr	r0, [pc, #632]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004aca:	f005 f809 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8004ace:	e007      	b.n	8004ae0 <stopp_pwm+0x84>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH2N_NMOS4_LS_GPIO_Port,
 8004ad0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ad4:	489c      	ldr	r0, [pc, #624]	@ (8004d48 <stopp_pwm+0x2ec>)
 8004ad6:	f003 f861 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004ae0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f3      	bne.n	8004ad0 <stopp_pwm+0x74>
			TIM1_CH2N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8004ae8:	2104      	movs	r1, #4
 8004aea:	4896      	ldr	r0, [pc, #600]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004aec:	f006 fae0 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8004af0:	2104      	movs	r1, #4
 8004af2:	4894      	ldr	r0, [pc, #592]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004af4:	f004 fff4 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d003      	beq.n	8004b06 <stopp_pwm+0xaa>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d006      	beq.n	8004b12 <stopp_pwm+0xb6>
 8004b04:	e010      	b.n	8004b28 <stopp_pwm+0xcc>

		// dynamisch allozierter Speicher freigeben
		switch(level){
		case 2:
			free(pwmPtr_m1p);
 8004b06:	4b91      	ldr	r3, [pc, #580]	@ (8004d4c <stopp_pwm+0x2f0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f007 fbc8 	bl	800c2a0 <free>
			break;
 8004b10:	e011      	b.n	8004b36 <stopp_pwm+0xda>
		case 3:
			free(pwmPtr_m1p);
 8004b12:	4b8e      	ldr	r3, [pc, #568]	@ (8004d4c <stopp_pwm+0x2f0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f007 fbc2 	bl	800c2a0 <free>
			free(pwmPtr_m1n);
 8004b1c:	4b8c      	ldr	r3, [pc, #560]	@ (8004d50 <stopp_pwm+0x2f4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f007 fbbd 	bl	800c2a0 <free>
			break;
 8004b26:	e006      	b.n	8004b36 <stopp_pwm+0xda>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004b28:	f107 030c 	add.w	r3, r7, #12
 8004b2c:	4989      	ldr	r1, [pc, #548]	@ (8004d54 <stopp_pwm+0x2f8>)
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f008 f986 	bl	800ce40 <siprintf>
			break;
 8004b34:	bf00      	nop
		}
		break;
 8004b36:	e153      	b.n	8004de0 <stopp_pwm+0x384>
	case 2:

		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH1N_NMOS2_LS_GPIO_Port,
 8004b38:	2180      	movs	r1, #128	@ 0x80
 8004b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b3e:	f003 f82d 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004b48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f3      	bne.n	8004b38 <stopp_pwm+0xdc>
			TIM1_CH1N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8004b50:	2100      	movs	r1, #0
 8004b52:	487c      	ldr	r0, [pc, #496]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004b54:	f006 faac 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8004b58:	2100      	movs	r1, #0
 8004b5a:	487a      	ldr	r0, [pc, #488]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004b5c:	f004 ffc0 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8004b60:	e007      	b.n	8004b72 <stopp_pwm+0x116>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH2N_NMOS4_LS_GPIO_Port,
 8004b62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b66:	4878      	ldr	r0, [pc, #480]	@ (8004d48 <stopp_pwm+0x2ec>)
 8004b68:	f003 f818 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004b72:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f3      	bne.n	8004b62 <stopp_pwm+0x106>
			TIM1_CH2N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8004b7a:	2104      	movs	r1, #4
 8004b7c:	4871      	ldr	r0, [pc, #452]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004b7e:	f006 fa97 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8004b82:	2104      	movs	r1, #4
 8004b84:	486f      	ldr	r0, [pc, #444]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004b86:	f004 ffab 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>

		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
 8004b8a:	e007      	b.n	8004b9c <stopp_pwm+0x140>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH3N_NMOS2_LS_GPIO_Port,
 8004b8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004b90:	486d      	ldr	r0, [pc, #436]	@ (8004d48 <stopp_pwm+0x2ec>)
 8004b92:	f003 f803 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004b9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f3      	bne.n	8004b8c <stopp_pwm+0x130>
			TIM1_CH3N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8004ba4:	2108      	movs	r1, #8
 8004ba6:	4867      	ldr	r0, [pc, #412]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004ba8:	f006 fa82 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8004bac:	2108      	movs	r1, #8
 8004bae:	4865      	ldr	r0, [pc, #404]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004bb0:	f004 ff96 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8004bb4:	e006      	b.n	8004bc4 <stopp_pwm+0x168>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH4N_NMOS4_LS_GPIO_Port,
 8004bb6:	2120      	movs	r1, #32
 8004bb8:	4861      	ldr	r0, [pc, #388]	@ (8004d40 <stopp_pwm+0x2e4>)
 8004bba:	f002 ffef 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004bc4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f4      	bne.n	8004bb6 <stopp_pwm+0x15a>
			TIM1_CH4N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 8004bcc:	210c      	movs	r1, #12
 8004bce:	485d      	ldr	r0, [pc, #372]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004bd0:	f006 fa6e 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_4);
 8004bd4:	210c      	movs	r1, #12
 8004bd6:	485b      	ldr	r0, [pc, #364]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004bd8:	f004 ff82 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d003      	beq.n	8004bea <stopp_pwm+0x18e>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d00b      	beq.n	8004c00 <stopp_pwm+0x1a4>
 8004be8:	e01f      	b.n	8004c2a <stopp_pwm+0x1ce>

		// dynamisch allozierter Speicher freigeben
		switch(level){
		case 2:
			free(pwmPtr_m1p);
 8004bea:	4b58      	ldr	r3, [pc, #352]	@ (8004d4c <stopp_pwm+0x2f0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f007 fb56 	bl	800c2a0 <free>
			free(pwmPtr_m2p);
 8004bf4:	4b58      	ldr	r3, [pc, #352]	@ (8004d58 <stopp_pwm+0x2fc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f007 fb51 	bl	800c2a0 <free>
			break;
 8004bfe:	e01b      	b.n	8004c38 <stopp_pwm+0x1dc>
		case 3:
			free(pwmPtr_m1p);
 8004c00:	4b52      	ldr	r3, [pc, #328]	@ (8004d4c <stopp_pwm+0x2f0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f007 fb4b 	bl	800c2a0 <free>
			free(pwmPtr_m1n);
 8004c0a:	4b51      	ldr	r3, [pc, #324]	@ (8004d50 <stopp_pwm+0x2f4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f007 fb46 	bl	800c2a0 <free>
			free(pwmPtr_m2p);
 8004c14:	4b50      	ldr	r3, [pc, #320]	@ (8004d58 <stopp_pwm+0x2fc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f007 fb41 	bl	800c2a0 <free>
			free(pwmPtr_m2n);
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8004d5c <stopp_pwm+0x300>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f007 fb3c 	bl	800c2a0 <free>
			break;
 8004c28:	e006      	b.n	8004c38 <stopp_pwm+0x1dc>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004c2a:	f107 030c 	add.w	r3, r7, #12
 8004c2e:	4949      	ldr	r1, [pc, #292]	@ (8004d54 <stopp_pwm+0x2f8>)
 8004c30:	4618      	mov	r0, r3
 8004c32:	f008 f905 	bl	800ce40 <siprintf>
			break;
 8004c36:	bf00      	nop
		}
		break;
 8004c38:	e0d2      	b.n	8004de0 <stopp_pwm+0x384>
	case 3:
		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH1N_NMOS2_LS_GPIO_Port,
 8004c3a:	2180      	movs	r1, #128	@ 0x80
 8004c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c40:	f002 ffac 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004c4a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f3      	bne.n	8004c3a <stopp_pwm+0x1de>
			TIM1_CH1N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8004c52:	2100      	movs	r1, #0
 8004c54:	483b      	ldr	r0, [pc, #236]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004c56:	f006 fa2b 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4839      	ldr	r0, [pc, #228]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004c5e:	f004 ff3f 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8004c62:	e007      	b.n	8004c74 <stopp_pwm+0x218>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH2N_NMOS4_LS_GPIO_Port,
 8004c64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c68:	4837      	ldr	r0, [pc, #220]	@ (8004d48 <stopp_pwm+0x2ec>)
 8004c6a:	f002 ff97 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004c74:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f3      	bne.n	8004c64 <stopp_pwm+0x208>
			TIM1_CH2N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	4831      	ldr	r0, [pc, #196]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004c80:	f006 fa16 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8004c84:	2104      	movs	r1, #4
 8004c86:	482f      	ldr	r0, [pc, #188]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004c88:	f004 ff2a 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>

		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
 8004c8c:	e007      	b.n	8004c9e <stopp_pwm+0x242>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH3N_NMOS2_LS_GPIO_Port,
 8004c8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c92:	482d      	ldr	r0, [pc, #180]	@ (8004d48 <stopp_pwm+0x2ec>)
 8004c94:	f002 ff82 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004c9e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f3      	bne.n	8004c8e <stopp_pwm+0x232>
			TIM1_CH3N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8004ca6:	2108      	movs	r1, #8
 8004ca8:	4826      	ldr	r0, [pc, #152]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004caa:	f006 fa01 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8004cae:	2108      	movs	r1, #8
 8004cb0:	4824      	ldr	r0, [pc, #144]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004cb2:	f004 ff15 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8004cb6:	e006      	b.n	8004cc6 <stopp_pwm+0x26a>
			gpio_state = HAL_GPIO_ReadPin(TIM1_CH4N_NMOS4_LS_GPIO_Port,
 8004cb8:	2120      	movs	r1, #32
 8004cba:	4821      	ldr	r0, [pc, #132]	@ (8004d40 <stopp_pwm+0x2e4>)
 8004cbc:	f002 ff6e 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004cc6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f4      	bne.n	8004cb8 <stopp_pwm+0x25c>
			TIM1_CH4N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 8004cce:	210c      	movs	r1, #12
 8004cd0:	481c      	ldr	r0, [pc, #112]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004cd2:	f006 f9ed 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_4);
 8004cd6:	210c      	movs	r1, #12
 8004cd8:	481a      	ldr	r0, [pc, #104]	@ (8004d44 <stopp_pwm+0x2e8>)
 8004cda:	f004 ff01 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>

		// PWM Stoppen ohne Kurzschluss
		while (gpio_state != GPIO_PIN_RESET) {
 8004cde:	e007      	b.n	8004cf0 <stopp_pwm+0x294>
			gpio_state = HAL_GPIO_ReadPin(TIM8_CH1N_NMOS2_LS_GPIO_Port,
 8004ce0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004ce4:	4816      	ldr	r0, [pc, #88]	@ (8004d40 <stopp_pwm+0x2e4>)
 8004ce6:	f002 ff59 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004cf0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f3      	bne.n	8004ce0 <stopp_pwm+0x284>
			TIM8_CH1N_NMOS2_LS_Pin);
		}
		// Stop PWM NMOS1 & NMOS2
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4819      	ldr	r0, [pc, #100]	@ (8004d60 <stopp_pwm+0x304>)
 8004cfc:	f006 f9d8 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
 8004d00:	2100      	movs	r1, #0
 8004d02:	4817      	ldr	r0, [pc, #92]	@ (8004d60 <stopp_pwm+0x304>)
 8004d04:	f004 feec 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>

		while (gpio_state != GPIO_PIN_RESET) {
 8004d08:	e007      	b.n	8004d1a <stopp_pwm+0x2be>
			gpio_state = HAL_GPIO_ReadPin(TIM8_CH2N_NMOS4_LS_GPIO_Port,
 8004d0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d0e:	480c      	ldr	r0, [pc, #48]	@ (8004d40 <stopp_pwm+0x2e4>)
 8004d10:	f002 ff44 	bl	8007b9c <HAL_GPIO_ReadPin>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		while (gpio_state != GPIO_PIN_RESET) {
 8004d1a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f3      	bne.n	8004d0a <stopp_pwm+0x2ae>
			TIM8_CH2N_NMOS4_LS_Pin);
		}
		// Stop PWM NMOS3 & NMOS4
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8004d22:	2104      	movs	r1, #4
 8004d24:	480e      	ldr	r0, [pc, #56]	@ (8004d60 <stopp_pwm+0x304>)
 8004d26:	f006 f9c3 	bl	800b0b0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_2);
 8004d2a:	2104      	movs	r1, #4
 8004d2c:	480c      	ldr	r0, [pc, #48]	@ (8004d60 <stopp_pwm+0x304>)
 8004d2e:	f004 fed7 	bl	8009ae0 <HAL_TIM_PWM_Stop_DMA>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d015      	beq.n	8004d64 <stopp_pwm+0x308>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d022      	beq.n	8004d84 <stopp_pwm+0x328>
 8004d3e:	e040      	b.n	8004dc2 <stopp_pwm+0x366>
 8004d40:	48000800 	.word	0x48000800
 8004d44:	20000400 	.word	0x20000400
 8004d48:	48000400 	.word	0x48000400
 8004d4c:	20000838 	.word	0x20000838
 8004d50:	2000083c 	.word	0x2000083c
 8004d54:	0800fb24 	.word	0x0800fb24
 8004d58:	20000840 	.word	0x20000840
 8004d5c:	20000844 	.word	0x20000844
 8004d60:	2000044c 	.word	0x2000044c

		// dynamisch allozierter Speicher freigeben
		switch(level){
		case 2:
			free(pwmPtr_m1p);
 8004d64:	4b2a      	ldr	r3, [pc, #168]	@ (8004e10 <stopp_pwm+0x3b4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f007 fa99 	bl	800c2a0 <free>
			free(pwmPtr_m2p);
 8004d6e:	4b29      	ldr	r3, [pc, #164]	@ (8004e14 <stopp_pwm+0x3b8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f007 fa94 	bl	800c2a0 <free>
			free(pwmPtr_m3p);
 8004d78:	4b27      	ldr	r3, [pc, #156]	@ (8004e18 <stopp_pwm+0x3bc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f007 fa8f 	bl	800c2a0 <free>
			break;
 8004d82:	e025      	b.n	8004dd0 <stopp_pwm+0x374>
		case 3:
			free(pwmPtr_m1p);
 8004d84:	4b22      	ldr	r3, [pc, #136]	@ (8004e10 <stopp_pwm+0x3b4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f007 fa89 	bl	800c2a0 <free>
			free(pwmPtr_m1n);
 8004d8e:	4b23      	ldr	r3, [pc, #140]	@ (8004e1c <stopp_pwm+0x3c0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f007 fa84 	bl	800c2a0 <free>
			free(pwmPtr_m2p);
 8004d98:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <stopp_pwm+0x3b8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f007 fa7f 	bl	800c2a0 <free>
			free(pwmPtr_m2n);
 8004da2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e20 <stopp_pwm+0x3c4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f007 fa7a 	bl	800c2a0 <free>
			free(pwmPtr_m3p);
 8004dac:	4b1a      	ldr	r3, [pc, #104]	@ (8004e18 <stopp_pwm+0x3bc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f007 fa75 	bl	800c2a0 <free>
			free(pwmPtr_m3n);
 8004db6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e24 <stopp_pwm+0x3c8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f007 fa70 	bl	800c2a0 <free>
			break;
 8004dc0:	e006      	b.n	8004dd0 <stopp_pwm+0x374>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004dc2:	f107 030c 	add.w	r3, r7, #12
 8004dc6:	4918      	ldr	r1, [pc, #96]	@ (8004e28 <stopp_pwm+0x3cc>)
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f008 f839 	bl	800ce40 <siprintf>
			break;
 8004dce:	bf00      	nop
		}
		break;
 8004dd0:	e006      	b.n	8004de0 <stopp_pwm+0x384>
	case 4:
	default:
		sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004dd2:	f107 030c 	add.w	r3, r7, #12
 8004dd6:	4914      	ldr	r1, [pc, #80]	@ (8004e28 <stopp_pwm+0x3cc>)
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f008 f831 	bl	800ce40 <siprintf>
		break;
 8004dde:	bf00      	nop
	}
	// Debug
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8004de0:	2200      	movs	r2, #0
 8004de2:	2108      	movs	r1, #8
 8004de4:	4811      	ldr	r0, [pc, #68]	@ (8004e2c <stopp_pwm+0x3d0>)
 8004de6:	f002 fef1 	bl	8007bcc <HAL_GPIO_WritePin>
	// PuTTY Ausgabe
	HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
 8004dea:	f107 030c 	add.w	r3, r7, #12
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fb fa66 	bl	80002c0 <strlen>
 8004df4:	4603      	mov	r3, r0
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	f107 010c 	add.w	r1, r7, #12
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004e00:	480b      	ldr	r0, [pc, #44]	@ (8004e30 <stopp_pwm+0x3d4>)
 8004e02:	f006 fb98 	bl	800b536 <HAL_UART_Transmit>
}
 8004e06:	bf00      	nop
 8004e08:	3760      	adds	r7, #96	@ 0x60
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000838 	.word	0x20000838
 8004e14:	20000840 	.word	0x20000840
 8004e18:	20000848 	.word	0x20000848
 8004e1c:	2000083c 	.word	0x2000083c
 8004e20:	20000844 	.word	0x20000844
 8004e24:	2000084c 	.word	0x2000084c
 8004e28:	0800fb24 	.word	0x0800fb24
 8004e2c:	48000800 	.word	0x48000800
 8004e30:	20000770 	.word	0x20000770

08004e34 <start_pwm>:

void start_pwm(const int stufen, const int level)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b096      	sub	sp, #88	@ 0x58
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
	// Variablen
	char msg_console[80] = ""; // array für Ausgabe
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	f107 030c 	add.w	r3, r7, #12
 8004e46:	224c      	movs	r2, #76	@ 0x4c
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f008 f85b 	bl	800cf06 <memset>

	switch (stufen) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	f000 80e1 	beq.w	800501a <start_pwm+0x1e6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	f300 81b3 	bgt.w	80051c6 <start_pwm+0x392>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d003      	beq.n	8004e6e <start_pwm+0x3a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d04d      	beq.n	8004f08 <start_pwm+0xd4>
 8004e6c:	e1ab      	b.n	80051c6 <start_pwm+0x392>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d003      	beq.n	8004e7c <start_pwm+0x48>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d01f      	beq.n	8004eba <start_pwm+0x86>
 8004e7a:	e03d      	b.n	8004ef8 <start_pwm+0xc4>
	case 1:
		switch (level) {
		case 2:
			// TIM1_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8004e7c:	4b98      	ldr	r3, [pc, #608]	@ (80050e0 <start_pwm+0x2ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	4b97      	ldr	r3, [pc, #604]	@ (80050e0 <start_pwm+0x2ac>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4895      	ldr	r0, [pc, #596]	@ (80050e4 <start_pwm+0x2b0>)
 8004e8e:	f004 fbfb 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004e92:	2100      	movs	r1, #0
 8004e94:	4893      	ldr	r0, [pc, #588]	@ (80050e4 <start_pwm+0x2b0>)
 8004e96:	f006 f849 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8004e9a:	4b91      	ldr	r3, [pc, #580]	@ (80050e0 <start_pwm+0x2ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80050e0 <start_pwm+0x2ac>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	488e      	ldr	r0, [pc, #568]	@ (80050e4 <start_pwm+0x2b0>)
 8004eac:	f004 fbec 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004eb0:	2104      	movs	r1, #4
 8004eb2:	488c      	ldr	r0, [pc, #560]	@ (80050e4 <start_pwm+0x2b0>)
 8004eb4:	f006 f83a 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			break;
 8004eb8:	e025      	b.n	8004f06 <start_pwm+0xd2>
		case 3:
			// TIM1 CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8004eba:	4b89      	ldr	r3, [pc, #548]	@ (80050e0 <start_pwm+0x2ac>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	1d1a      	adds	r2, r3, #4
 8004ec0:	4b87      	ldr	r3, [pc, #540]	@ (80050e0 <start_pwm+0x2ac>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4886      	ldr	r0, [pc, #536]	@ (80050e4 <start_pwm+0x2b0>)
 8004ecc:	f004 fbdc 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4884      	ldr	r0, [pc, #528]	@ (80050e4 <start_pwm+0x2b0>)
 8004ed4:	f006 f82a 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1n->ccr_arr, pwmPtr_m1n->NrOfEl);
 8004ed8:	4b83      	ldr	r3, [pc, #524]	@ (80050e8 <start_pwm+0x2b4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	1d1a      	adds	r2, r3, #4
 8004ede:	4b82      	ldr	r3, [pc, #520]	@ (80050e8 <start_pwm+0x2b4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	487e      	ldr	r0, [pc, #504]	@ (80050e4 <start_pwm+0x2b0>)
 8004eea:	f004 fbcd 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004eee:	2104      	movs	r1, #4
 8004ef0:	487c      	ldr	r0, [pc, #496]	@ (80050e4 <start_pwm+0x2b0>)
 8004ef2:	f006 f81b 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			break;
 8004ef6:	e006      	b.n	8004f06 <start_pwm+0xd2>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	497b      	ldr	r1, [pc, #492]	@ (80050ec <start_pwm+0x2b8>)
 8004efe:	4618      	mov	r0, r3
 8004f00:	f007 ff9e 	bl	800ce40 <siprintf>
			break;
 8004f04:	bf00      	nop
		}
		break;
 8004f06:	e165      	b.n	80051d4 <start_pwm+0x3a0>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d003      	beq.n	8004f16 <start_pwm+0xe2>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d03d      	beq.n	8004f90 <start_pwm+0x15c>
 8004f14:	e079      	b.n	800500a <start_pwm+0x1d6>
	case 2:
		switch (level) {
		case 2:
			// TIM1_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8004f16:	4b72      	ldr	r3, [pc, #456]	@ (80050e0 <start_pwm+0x2ac>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	1d1a      	adds	r2, r3, #4
 8004f1c:	4b70      	ldr	r3, [pc, #448]	@ (80050e0 <start_pwm+0x2ac>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2100      	movs	r1, #0
 8004f26:	486f      	ldr	r0, [pc, #444]	@ (80050e4 <start_pwm+0x2b0>)
 8004f28:	f004 fbae 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	486d      	ldr	r0, [pc, #436]	@ (80050e4 <start_pwm+0x2b0>)
 8004f30:	f005 fffc 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8004f34:	4b6a      	ldr	r3, [pc, #424]	@ (80050e0 <start_pwm+0x2ac>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	1d1a      	adds	r2, r3, #4
 8004f3a:	4b69      	ldr	r3, [pc, #420]	@ (80050e0 <start_pwm+0x2ac>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2104      	movs	r1, #4
 8004f44:	4867      	ldr	r0, [pc, #412]	@ (80050e4 <start_pwm+0x2b0>)
 8004f46:	f004 fb9f 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004f4a:	2104      	movs	r1, #4
 8004f4c:	4865      	ldr	r0, [pc, #404]	@ (80050e4 <start_pwm+0x2b0>)
 8004f4e:	f005 ffed 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1_CH3 & CH3N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 8004f52:	4b67      	ldr	r3, [pc, #412]	@ (80050f0 <start_pwm+0x2bc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	1d1a      	adds	r2, r3, #4
 8004f58:	4b65      	ldr	r3, [pc, #404]	@ (80050f0 <start_pwm+0x2bc>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2108      	movs	r1, #8
 8004f62:	4860      	ldr	r0, [pc, #384]	@ (80050e4 <start_pwm+0x2b0>)
 8004f64:	f004 fb90 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004f68:	2108      	movs	r1, #8
 8004f6a:	485e      	ldr	r0, [pc, #376]	@ (80050e4 <start_pwm+0x2b0>)
 8004f6c:	f005 ffde 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1 CH4 & CH4N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 8004f70:	4b5f      	ldr	r3, [pc, #380]	@ (80050f0 <start_pwm+0x2bc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	1d1a      	adds	r2, r3, #4
 8004f76:	4b5e      	ldr	r3, [pc, #376]	@ (80050f0 <start_pwm+0x2bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	210c      	movs	r1, #12
 8004f80:	4858      	ldr	r0, [pc, #352]	@ (80050e4 <start_pwm+0x2b0>)
 8004f82:	f004 fb81 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 8004f86:	210c      	movs	r1, #12
 8004f88:	4856      	ldr	r0, [pc, #344]	@ (80050e4 <start_pwm+0x2b0>)
 8004f8a:	f005 ffcf 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			break;
 8004f8e:	e043      	b.n	8005018 <start_pwm+0x1e4>
		case 3:
			// TIM1_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8004f90:	4b53      	ldr	r3, [pc, #332]	@ (80050e0 <start_pwm+0x2ac>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1d1a      	adds	r2, r3, #4
 8004f96:	4b52      	ldr	r3, [pc, #328]	@ (80050e0 <start_pwm+0x2ac>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4850      	ldr	r0, [pc, #320]	@ (80050e4 <start_pwm+0x2b0>)
 8004fa2:	f004 fb71 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	484e      	ldr	r0, [pc, #312]	@ (80050e4 <start_pwm+0x2b0>)
 8004faa:	f005 ffbf 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1n->ccr_arr, pwmPtr_m1n->NrOfEl);
 8004fae:	4b4e      	ldr	r3, [pc, #312]	@ (80050e8 <start_pwm+0x2b4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	4b4c      	ldr	r3, [pc, #304]	@ (80050e8 <start_pwm+0x2b4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2104      	movs	r1, #4
 8004fbe:	4849      	ldr	r0, [pc, #292]	@ (80050e4 <start_pwm+0x2b0>)
 8004fc0:	f004 fb62 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004fc4:	2104      	movs	r1, #4
 8004fc6:	4847      	ldr	r0, [pc, #284]	@ (80050e4 <start_pwm+0x2b0>)
 8004fc8:	f005 ffb0 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1_CH3 & CH3N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 8004fcc:	4b48      	ldr	r3, [pc, #288]	@ (80050f0 <start_pwm+0x2bc>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1d1a      	adds	r2, r3, #4
 8004fd2:	4b47      	ldr	r3, [pc, #284]	@ (80050f0 <start_pwm+0x2bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2108      	movs	r1, #8
 8004fdc:	4841      	ldr	r0, [pc, #260]	@ (80050e4 <start_pwm+0x2b0>)
 8004fde:	f004 fb53 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004fe2:	2108      	movs	r1, #8
 8004fe4:	483f      	ldr	r0, [pc, #252]	@ (80050e4 <start_pwm+0x2b0>)
 8004fe6:	f005 ffa1 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1 CH4 & CH4N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
					(uint32_t*) pwmPtr_m2n->ccr_arr, pwmPtr_m2n->NrOfEl);
 8004fea:	4b42      	ldr	r3, [pc, #264]	@ (80050f4 <start_pwm+0x2c0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	1d1a      	adds	r2, r3, #4
 8004ff0:	4b40      	ldr	r3, [pc, #256]	@ (80050f4 <start_pwm+0x2c0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	210c      	movs	r1, #12
 8004ffa:	483a      	ldr	r0, [pc, #232]	@ (80050e4 <start_pwm+0x2b0>)
 8004ffc:	f004 fb44 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 8005000:	210c      	movs	r1, #12
 8005002:	4838      	ldr	r0, [pc, #224]	@ (80050e4 <start_pwm+0x2b0>)
 8005004:	f005 ff92 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			break;
 8005008:	e006      	b.n	8005018 <start_pwm+0x1e4>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 800500a:	f107 0308 	add.w	r3, r7, #8
 800500e:	4937      	ldr	r1, [pc, #220]	@ (80050ec <start_pwm+0x2b8>)
 8005010:	4618      	mov	r0, r3
 8005012:	f007 ff15 	bl	800ce40 <siprintf>
			break;
 8005016:	bf00      	nop
		}
		break;
 8005018:	e0dc      	b.n	80051d4 <start_pwm+0x3a0>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d003      	beq.n	8005028 <start_pwm+0x1f4>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b03      	cmp	r3, #3
 8005024:	d06c      	beq.n	8005100 <start_pwm+0x2cc>
 8005026:	e0c6      	b.n	80051b6 <start_pwm+0x382>
	case 3:
		switch (level) {
		case 2:
			// TIM1_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8005028:	4b2d      	ldr	r3, [pc, #180]	@ (80050e0 <start_pwm+0x2ac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	1d1a      	adds	r2, r3, #4
 800502e:	4b2c      	ldr	r3, [pc, #176]	@ (80050e0 <start_pwm+0x2ac>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 8005034:	b29b      	uxth	r3, r3
 8005036:	2100      	movs	r1, #0
 8005038:	482a      	ldr	r0, [pc, #168]	@ (80050e4 <start_pwm+0x2b0>)
 800503a:	f004 fb25 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800503e:	2100      	movs	r1, #0
 8005040:	4828      	ldr	r0, [pc, #160]	@ (80050e4 <start_pwm+0x2b0>)
 8005042:	f005 ff73 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8005046:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <start_pwm+0x2ac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1d1a      	adds	r2, r3, #4
 800504c:	4b24      	ldr	r3, [pc, #144]	@ (80050e0 <start_pwm+0x2ac>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 8005052:	b29b      	uxth	r3, r3
 8005054:	2104      	movs	r1, #4
 8005056:	4823      	ldr	r0, [pc, #140]	@ (80050e4 <start_pwm+0x2b0>)
 8005058:	f004 fb16 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800505c:	2104      	movs	r1, #4
 800505e:	4821      	ldr	r0, [pc, #132]	@ (80050e4 <start_pwm+0x2b0>)
 8005060:	f005 ff64 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1_CH3 & CH3N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 8005064:	4b22      	ldr	r3, [pc, #136]	@ (80050f0 <start_pwm+0x2bc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1d1a      	adds	r2, r3, #4
 800506a:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <start_pwm+0x2bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
 8005070:	b29b      	uxth	r3, r3
 8005072:	2108      	movs	r1, #8
 8005074:	481b      	ldr	r0, [pc, #108]	@ (80050e4 <start_pwm+0x2b0>)
 8005076:	f004 fb07 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800507a:	2108      	movs	r1, #8
 800507c:	4819      	ldr	r0, [pc, #100]	@ (80050e4 <start_pwm+0x2b0>)
 800507e:	f005 ff55 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1 CH4 & CH4N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 8005082:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <start_pwm+0x2bc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1d1a      	adds	r2, r3, #4
 8005088:	4b19      	ldr	r3, [pc, #100]	@ (80050f0 <start_pwm+0x2bc>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
 800508e:	b29b      	uxth	r3, r3
 8005090:	210c      	movs	r1, #12
 8005092:	4814      	ldr	r0, [pc, #80]	@ (80050e4 <start_pwm+0x2b0>)
 8005094:	f004 faf8 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 8005098:	210c      	movs	r1, #12
 800509a:	4812      	ldr	r0, [pc, #72]	@ (80050e4 <start_pwm+0x2b0>)
 800509c:	f005 ff46 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM8_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m3p->ccr_arr, pwmPtr_m3p->NrOfEl);
 80050a0:	4b15      	ldr	r3, [pc, #84]	@ (80050f8 <start_pwm+0x2c4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	1d1a      	adds	r2, r3, #4
 80050a6:	4b14      	ldr	r3, [pc, #80]	@ (80050f8 <start_pwm+0x2c4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1,
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2100      	movs	r1, #0
 80050b0:	4812      	ldr	r0, [pc, #72]	@ (80050fc <start_pwm+0x2c8>)
 80050b2:	f004 fae9 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80050b6:	2100      	movs	r1, #0
 80050b8:	4810      	ldr	r0, [pc, #64]	@ (80050fc <start_pwm+0x2c8>)
 80050ba:	f005 ff37 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM8 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m3p->ccr_arr, pwmPtr_m3p->NrOfEl);
 80050be:	4b0e      	ldr	r3, [pc, #56]	@ (80050f8 <start_pwm+0x2c4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	1d1a      	adds	r2, r3, #4
 80050c4:	4b0c      	ldr	r3, [pc, #48]	@ (80050f8 <start_pwm+0x2c4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2,
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2104      	movs	r1, #4
 80050ce:	480b      	ldr	r0, [pc, #44]	@ (80050fc <start_pwm+0x2c8>)
 80050d0:	f004 fada 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80050d4:	2104      	movs	r1, #4
 80050d6:	4809      	ldr	r0, [pc, #36]	@ (80050fc <start_pwm+0x2c8>)
 80050d8:	f005 ff28 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			break;
 80050dc:	e072      	b.n	80051c4 <start_pwm+0x390>
 80050de:	bf00      	nop
 80050e0:	20000838 	.word	0x20000838
 80050e4:	20000400 	.word	0x20000400
 80050e8:	2000083c 	.word	0x2000083c
 80050ec:	0800fb24 	.word	0x0800fb24
 80050f0:	20000840 	.word	0x20000840
 80050f4:	20000844 	.word	0x20000844
 80050f8:	20000848 	.word	0x20000848
 80050fc:	2000044c 	.word	0x2000044c
		case 3:
			// TIM1_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m1p->ccr_arr, pwmPtr_m1p->NrOfEl);
 8005100:	4b3d      	ldr	r3, [pc, #244]	@ (80051f8 <start_pwm+0x3c4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	1d1a      	adds	r2, r3, #4
 8005106:	4b3c      	ldr	r3, [pc, #240]	@ (80051f8 <start_pwm+0x3c4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 800510c:	b29b      	uxth	r3, r3
 800510e:	2100      	movs	r1, #0
 8005110:	483a      	ldr	r0, [pc, #232]	@ (80051fc <start_pwm+0x3c8>)
 8005112:	f004 fab9 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8005116:	2100      	movs	r1, #0
 8005118:	4838      	ldr	r0, [pc, #224]	@ (80051fc <start_pwm+0x3c8>)
 800511a:	f005 ff07 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m1n->ccr_arr, pwmPtr_m1n->NrOfEl);
 800511e:	4b38      	ldr	r3, [pc, #224]	@ (8005200 <start_pwm+0x3cc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	1d1a      	adds	r2, r3, #4
 8005124:	4b36      	ldr	r3, [pc, #216]	@ (8005200 <start_pwm+0x3cc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 800512a:	b29b      	uxth	r3, r3
 800512c:	2104      	movs	r1, #4
 800512e:	4833      	ldr	r0, [pc, #204]	@ (80051fc <start_pwm+0x3c8>)
 8005130:	f004 faaa 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8005134:	2104      	movs	r1, #4
 8005136:	4831      	ldr	r0, [pc, #196]	@ (80051fc <start_pwm+0x3c8>)
 8005138:	f005 fef8 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1_CH3 & CH3N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
					(uint32_t*) pwmPtr_m2p->ccr_arr, pwmPtr_m2p->NrOfEl);
 800513c:	4b31      	ldr	r3, [pc, #196]	@ (8005204 <start_pwm+0x3d0>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	4b30      	ldr	r3, [pc, #192]	@ (8005204 <start_pwm+0x3d0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,
 8005148:	b29b      	uxth	r3, r3
 800514a:	2108      	movs	r1, #8
 800514c:	482b      	ldr	r0, [pc, #172]	@ (80051fc <start_pwm+0x3c8>)
 800514e:	f004 fa9b 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8005152:	2108      	movs	r1, #8
 8005154:	4829      	ldr	r0, [pc, #164]	@ (80051fc <start_pwm+0x3c8>)
 8005156:	f005 fee9 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM1 CH4 & CH4N
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
					(uint32_t*) pwmPtr_m2n->ccr_arr, pwmPtr_m2n->NrOfEl);
 800515a:	4b2b      	ldr	r3, [pc, #172]	@ (8005208 <start_pwm+0x3d4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	1d1a      	adds	r2, r3, #4
 8005160:	4b29      	ldr	r3, [pc, #164]	@ (8005208 <start_pwm+0x3d4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4,
 8005166:	b29b      	uxth	r3, r3
 8005168:	210c      	movs	r1, #12
 800516a:	4824      	ldr	r0, [pc, #144]	@ (80051fc <start_pwm+0x3c8>)
 800516c:	f004 fa8c 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 8005170:	210c      	movs	r1, #12
 8005172:	4822      	ldr	r0, [pc, #136]	@ (80051fc <start_pwm+0x3c8>)
 8005174:	f005 feda 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM8_CH1 & CH1N
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1,
					(uint32_t*) pwmPtr_m3p->ccr_arr, pwmPtr_m3p->NrOfEl);
 8005178:	4b24      	ldr	r3, [pc, #144]	@ (800520c <start_pwm+0x3d8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	1d1a      	adds	r2, r3, #4
 800517e:	4b23      	ldr	r3, [pc, #140]	@ (800520c <start_pwm+0x3d8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1,
 8005184:	b29b      	uxth	r3, r3
 8005186:	2100      	movs	r1, #0
 8005188:	4821      	ldr	r0, [pc, #132]	@ (8005210 <start_pwm+0x3dc>)
 800518a:	f004 fa7d 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 800518e:	2100      	movs	r1, #0
 8005190:	481f      	ldr	r0, [pc, #124]	@ (8005210 <start_pwm+0x3dc>)
 8005192:	f005 fecb 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			// TIM8 CH2 & CH2N
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2,
					(uint32_t*) pwmPtr_m3n->ccr_arr, pwmPtr_m3n->NrOfEl);
 8005196:	4b1f      	ldr	r3, [pc, #124]	@ (8005214 <start_pwm+0x3e0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	1d1a      	adds	r2, r3, #4
 800519c:	4b1d      	ldr	r3, [pc, #116]	@ (8005214 <start_pwm+0x3e0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
			HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2,
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2104      	movs	r1, #4
 80051a6:	481a      	ldr	r0, [pc, #104]	@ (8005210 <start_pwm+0x3dc>)
 80051a8:	f004 fa6e 	bl	8009688 <HAL_TIM_PWM_Start_DMA>
			HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80051ac:	2104      	movs	r1, #4
 80051ae:	4818      	ldr	r0, [pc, #96]	@ (8005210 <start_pwm+0x3dc>)
 80051b0:	f005 febc 	bl	800af2c <HAL_TIMEx_PWMN_Start>
			break;
 80051b4:	e006      	b.n	80051c4 <start_pwm+0x390>
		default:
			sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	4917      	ldr	r1, [pc, #92]	@ (8005218 <start_pwm+0x3e4>)
 80051bc:	4618      	mov	r0, r3
 80051be:	f007 fe3f 	bl	800ce40 <siprintf>
			break;
 80051c2:	bf00      	nop
		}
		break;
 80051c4:	e006      	b.n	80051d4 <start_pwm+0x3a0>
	case 4:
	default:
		sprintf(msg_console, "Error: Stufen 1-4 und Level 2-3 moeglich!\n");
 80051c6:	f107 0308 	add.w	r3, r7, #8
 80051ca:	4913      	ldr	r1, [pc, #76]	@ (8005218 <start_pwm+0x3e4>)
 80051cc:	4618      	mov	r0, r3
 80051ce:	f007 fe37 	bl	800ce40 <siprintf>
		break;
 80051d2:	bf00      	nop
	}
	// PuTTY Ausgabe
	HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
 80051d4:	f107 0308 	add.w	r3, r7, #8
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fb f871 	bl	80002c0 <strlen>
 80051de:	4603      	mov	r3, r0
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	f107 0108 	add.w	r1, r7, #8
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ea:	480c      	ldr	r0, [pc, #48]	@ (800521c <start_pwm+0x3e8>)
 80051ec:	f006 f9a3 	bl	800b536 <HAL_UART_Transmit>
}
 80051f0:	bf00      	nop
 80051f2:	3758      	adds	r7, #88	@ 0x58
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000838 	.word	0x20000838
 80051fc:	20000400 	.word	0x20000400
 8005200:	2000083c 	.word	0x2000083c
 8005204:	20000840 	.word	0x20000840
 8005208:	20000844 	.word	0x20000844
 800520c:	20000848 	.word	0x20000848
 8005210:	2000044c 	.word	0x2000044c
 8005214:	2000084c 	.word	0x2000084c
 8005218:	0800fb24 	.word	0x0800fb24
 800521c:	20000770 	.word	0x20000770

08005220 <set_display>:

void set_display(const int stufen, const int level){
 8005220:	b580      	push	{r7, lr}
 8005222:	b08c      	sub	sp, #48	@ 0x30
 8005224:	af04      	add	r7, sp, #16
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	// Ausgabe Display
	char msg_display[20];
	fillScreen(BLACK);
 800522a:	2000      	movs	r0, #0
 800522c:	f7fb ffb8 	bl	80011a0 <fillScreen>

	ST7735_WriteString(0, 0, "State: SINUS", Font_7x10, GREEN, BLACK);
 8005230:	4b26      	ldr	r3, [pc, #152]	@ (80052cc <set_display+0xac>)
 8005232:	2200      	movs	r2, #0
 8005234:	9202      	str	r2, [sp, #8]
 8005236:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800523a:	9201      	str	r2, [sp, #4]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	9200      	str	r2, [sp, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a23      	ldr	r2, [pc, #140]	@ (80052d0 <set_display+0xb0>)
 8005244:	2100      	movs	r1, #0
 8005246:	2000      	movs	r0, #0
 8005248:	f7fc fa18 	bl	800167c <ST7735_WriteString>
	drawFastHLine(0, next_line, 128, WHITE);
 800524c:	230c      	movs	r3, #12
 800524e:	b219      	sxth	r1, r3
 8005250:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005254:	2280      	movs	r2, #128	@ 0x80
 8005256:	2000      	movs	r0, #0
 8005258:	f7fb ff7c 	bl	8001154 <drawFastHLine>

	sprintf(msg_display, "Stufen: %u", stufen);
 800525c:	f107 030c 	add.w	r3, r7, #12
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	491c      	ldr	r1, [pc, #112]	@ (80052d4 <set_display+0xb4>)
 8005264:	4618      	mov	r0, r3
 8005266:	f007 fdeb 	bl	800ce40 <siprintf>
	ST7735_WriteString(0, 2*next_line, msg_display, Font_7x10, GREEN, BLACK);
 800526a:	230c      	movs	r3, #12
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	b299      	uxth	r1, r3
 8005270:	4b16      	ldr	r3, [pc, #88]	@ (80052cc <set_display+0xac>)
 8005272:	f107 000c 	add.w	r0, r7, #12
 8005276:	2200      	movs	r2, #0
 8005278:	9202      	str	r2, [sp, #8]
 800527a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800527e:	9201      	str	r2, [sp, #4]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	9200      	str	r2, [sp, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4602      	mov	r2, r0
 8005288:	2000      	movs	r0, #0
 800528a:	f7fc f9f7 	bl	800167c <ST7735_WriteString>

	sprintf(msg_display, "Level:  %u", level);
 800528e:	f107 030c 	add.w	r3, r7, #12
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	4910      	ldr	r1, [pc, #64]	@ (80052d8 <set_display+0xb8>)
 8005296:	4618      	mov	r0, r3
 8005298:	f007 fdd2 	bl	800ce40 <siprintf>
	ST7735_WriteString(0, 3*next_line, msg_display, Font_7x10, GREEN, BLACK);
 800529c:	230c      	movs	r3, #12
 800529e:	461a      	mov	r2, r3
 80052a0:	0052      	lsls	r2, r2, #1
 80052a2:	4413      	add	r3, r2
 80052a4:	b299      	uxth	r1, r3
 80052a6:	4b09      	ldr	r3, [pc, #36]	@ (80052cc <set_display+0xac>)
 80052a8:	f107 000c 	add.w	r0, r7, #12
 80052ac:	2200      	movs	r2, #0
 80052ae:	9202      	str	r2, [sp, #8]
 80052b0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80052b4:	9201      	str	r2, [sp, #4]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	9200      	str	r2, [sp, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4602      	mov	r2, r0
 80052be:	2000      	movs	r0, #0
 80052c0:	f7fc f9dc 	bl	800167c <ST7735_WriteString>
}
 80052c4:	bf00      	nop
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000000 	.word	0x20000000
 80052d0:	0800fd44 	.word	0x0800fd44
 80052d4:	0800fd54 	.word	0x0800fd54
 80052d8:	0800fd60 	.word	0x0800fd60

080052dc <get_next_line>:

uint8_t get_next_line(void){
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
	return next_line;
 80052e0:	230c      	movs	r3, #12
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <get_f0>:

uint32_t get_f0(void) {
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
	return f0;
 80052f0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <get_A0>:

float get_A0(void) {
 80052fe:	b480      	push	{r7}
 8005300:	af00      	add	r7, sp, #0
	return A0;
 8005302:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005306:	ee07 3a90 	vmov	s15, r3
}
 800530a:	eeb0 0a67 	vmov.f32	s0, s15
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <get_level>:

int get_level(void) {
 8005316:	b480      	push	{r7}
 8005318:	af00      	add	r7, sp, #0
	return level;
 800531a:	2303      	movs	r3, #3
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <get_stufen>:

int get_stufen(void) {
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0
	return stufen;
 800532a:	2303      	movs	r3, #3
}
 800532c:	4618      	mov	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <Rotate>:

// Function to rotate array
void Rotate(uint32_t arr[], int d, int n)
{    d=d%n;
 8005336:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800533a:	b08b      	sub	sp, #44	@ 0x2c
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	466b      	mov	r3, sp
 8005346:	4618      	mov	r0, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	fb93 f2f2 	sdiv	r2, r3, r2
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	fb01 f202 	mul.w	r2, r1, r2
 8005356:	1a9b      	subs	r3, r3, r2
 8005358:	60bb      	str	r3, [r7, #8]
    // Storing rotated version of array
    uint32_t temp[n];
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	1e4b      	subs	r3, r1, #1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	460a      	mov	r2, r1
 8005362:	2300      	movs	r3, #0
 8005364:	4690      	mov	r8, r2
 8005366:	4699      	mov	r9, r3
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8005374:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8005378:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800537c:	460a      	mov	r2, r1
 800537e:	2300      	movs	r3, #0
 8005380:	4614      	mov	r4, r2
 8005382:	461d      	mov	r5, r3
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	016b      	lsls	r3, r5, #5
 800538e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8005392:	0162      	lsls	r2, r4, #5
 8005394:	460b      	mov	r3, r1
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	3307      	adds	r3, #7
 800539a:	08db      	lsrs	r3, r3, #3
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	ebad 0d03 	sub.w	sp, sp, r3
 80053a2:	466b      	mov	r3, sp
 80053a4:	3303      	adds	r3, #3
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	613b      	str	r3, [r7, #16]

    // Keeping track of the current index
    // of temp[]
    int k = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24

    // Storing the n - d elements of
    // array arr[] to the front of temp[]
    for (int i = d; i < n; i++) {
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	623b      	str	r3, [r7, #32]
 80053b4:	e00e      	b.n	80053d4 <Rotate+0x9e>
        temp[k] = arr[i];
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        k++;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	3301      	adds	r3, #1
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = d; i < n; i++) {
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	3301      	adds	r3, #1
 80053d2:	623b      	str	r3, [r7, #32]
 80053d4:	6a3a      	ldr	r2, [r7, #32]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	dbec      	blt.n	80053b6 <Rotate+0x80>
    }

    // Storing the first d elements of array arr[]
    //  into temp
    for (int i = 0; i < d; i++) {
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	e00e      	b.n	8005400 <Rotate+0xca>
        temp[k] = arr[i];
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	6819      	ldr	r1, [r3, #0]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        k++;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	3301      	adds	r3, #1
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < d; i++) {
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	3301      	adds	r3, #1
 80053fe:	61fb      	str	r3, [r7, #28]
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	dbec      	blt.n	80053e2 <Rotate+0xac>
    }

    // Copying the elements of temp[] in arr[]
    // to get the final rotated array
    for (int i = 0; i < n; i++) {
 8005408:	2300      	movs	r3, #0
 800540a:	61bb      	str	r3, [r7, #24]
 800540c:	e00b      	b.n	8005426 <Rotate+0xf0>
        arr[i] = temp[i];
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800541e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	3301      	adds	r3, #1
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	dbef      	blt.n	800540e <Rotate+0xd8>
 800542e:	4685      	mov	sp, r0
    }
}
 8005430:	bf00      	nop
 8005432:	372c      	adds	r7, #44	@ 0x2c
 8005434:	46bd      	mov	sp, r7
 8005436:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800543a:	4770      	bx	lr

0800543c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800543c:	480d      	ldr	r0, [pc, #52]	@ (8005474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800543e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005440:	f7fd ffe2 	bl	8003408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005444:	480c      	ldr	r0, [pc, #48]	@ (8005478 <LoopForever+0x6>)
  ldr r1, =_edata
 8005446:	490d      	ldr	r1, [pc, #52]	@ (800547c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005448:	4a0d      	ldr	r2, [pc, #52]	@ (8005480 <LoopForever+0xe>)
  movs r3, #0
 800544a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800544c:	e002      	b.n	8005454 <LoopCopyDataInit>

0800544e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800544e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005452:	3304      	adds	r3, #4

08005454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005458:	d3f9      	bcc.n	800544e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800545a:	4a0a      	ldr	r2, [pc, #40]	@ (8005484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800545c:	4c0a      	ldr	r4, [pc, #40]	@ (8005488 <LoopForever+0x16>)
  movs r3, #0
 800545e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005460:	e001      	b.n	8005466 <LoopFillZerobss>

08005462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005464:	3204      	adds	r2, #4

08005466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005468:	d3fb      	bcc.n	8005462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800546a:	f007 fdb5 	bl	800cfd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800546e:	f7fc fbd3 	bl	8001c18 <main>

08005472 <LoopForever>:

LoopForever:
    b LoopForever
 8005472:	e7fe      	b.n	8005472 <LoopForever>
  ldr   r0, =_estack
 8005474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800547c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8005480:	08010ce0 	.word	0x08010ce0
  ldr r2, =_sbss
 8005484:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8005488:	200009a0 	.word	0x200009a0

0800548c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800548c:	e7fe      	b.n	800548c <ADC1_2_IRQHandler>

0800548e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005498:	2003      	movs	r0, #3
 800549a:	f001 fe8b 	bl	80071b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800549e:	200f      	movs	r0, #15
 80054a0:	f000 f80e 	bl	80054c0 <HAL_InitTick>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	71fb      	strb	r3, [r7, #7]
 80054ae:	e001      	b.n	80054b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054b0:	f7fd f9ee 	bl	8002890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054b4:	79fb      	ldrb	r3, [r7, #7]

}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054cc:	4b16      	ldr	r3, [pc, #88]	@ (8005528 <HAL_InitTick+0x68>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d022      	beq.n	800551a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054d4:	4b15      	ldr	r3, [pc, #84]	@ (800552c <HAL_InitTick+0x6c>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b13      	ldr	r3, [pc, #76]	@ (8005528 <HAL_InitTick+0x68>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 fe96 	bl	800721a <HAL_SYSTICK_Config>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10f      	bne.n	8005514 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b0f      	cmp	r3, #15
 80054f8:	d809      	bhi.n	800550e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054fa:	2200      	movs	r2, #0
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005502:	f001 fe62 	bl	80071ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005506:	4a0a      	ldr	r2, [pc, #40]	@ (8005530 <HAL_InitTick+0x70>)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	e007      	b.n	800551e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
 8005512:	e004      	b.n	800551e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
 8005518:	e001      	b.n	800551e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20000010 	.word	0x20000010
 800552c:	20000008 	.word	0x20000008
 8005530:	2000000c 	.word	0x2000000c

08005534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005538:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <HAL_IncTick+0x1c>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <HAL_IncTick+0x20>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4413      	add	r3, r2
 8005542:	4a03      	ldr	r2, [pc, #12]	@ (8005550 <HAL_IncTick+0x1c>)
 8005544:	6013      	str	r3, [r2, #0]
}
 8005546:	bf00      	nop
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	20000850 	.word	0x20000850
 8005554:	20000010 	.word	0x20000010

08005558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return uwTick;
 800555c:	4b03      	ldr	r3, [pc, #12]	@ (800556c <HAL_GetTick+0x14>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000850 	.word	0x20000850

08005570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005578:	f7ff ffee 	bl	8005558 <HAL_GetTick>
 800557c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d004      	beq.n	8005594 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800558a:	4b09      	ldr	r3, [pc, #36]	@ (80055b0 <HAL_Delay+0x40>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005594:	bf00      	nop
 8005596:	f7ff ffdf 	bl	8005558 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d8f7      	bhi.n	8005596 <HAL_Delay+0x26>
  {
  }
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000010 	.word	0x20000010

080055b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	609a      	str	r2, [r3, #8]
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3360      	adds	r3, #96	@ 0x60
 800562e:	461a      	mov	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4b08      	ldr	r3, [pc, #32]	@ (8005660 <LL_ADC_SetOffset+0x44>)
 800563e:	4013      	ands	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	4313      	orrs	r3, r2
 800564c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	03fff000 	.word	0x03fff000

08005664 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3360      	adds	r3, #96	@ 0x60
 8005672:	461a      	mov	r2, r3
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3360      	adds	r3, #96	@ 0x60
 80056a0:	461a      	mov	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b087      	sub	sp, #28
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3360      	adds	r3, #96	@ 0x60
 80056d6:	461a      	mov	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3360      	adds	r3, #96	@ 0x60
 800570c:	461a      	mov	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	431a      	orrs	r2, r3
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	615a      	str	r2, [r3, #20]
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800577e:	b480      	push	{r7}
 8005780:	b087      	sub	sp, #28
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3330      	adds	r3, #48	@ 0x30
 800578e:	461a      	mov	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	0a1b      	lsrs	r3, r3, #8
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	f003 030c 	and.w	r3, r3, #12
 800579a:	4413      	add	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f003 031f 	and.w	r3, r3, #31
 80057a8:	211f      	movs	r1, #31
 80057aa:	fa01 f303 	lsl.w	r3, r1, r3
 80057ae:	43db      	mvns	r3, r3
 80057b0:	401a      	ands	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	0e9b      	lsrs	r3, r3, #26
 80057b6:	f003 011f 	and.w	r1, r3, #31
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	fa01 f303 	lsl.w	r3, r1, r3
 80057c4:	431a      	orrs	r2, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b087      	sub	sp, #28
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3314      	adds	r3, #20
 80057e6:	461a      	mov	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	0e5b      	lsrs	r3, r3, #25
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	4413      	add	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	0d1b      	lsrs	r3, r3, #20
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2107      	movs	r1, #7
 8005804:	fa01 f303 	lsl.w	r3, r1, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	401a      	ands	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	0d1b      	lsrs	r3, r3, #20
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	fa01 f303 	lsl.w	r3, r1, r3
 800581a:	431a      	orrs	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005844:	43db      	mvns	r3, r3
 8005846:	401a      	ands	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f003 0318 	and.w	r3, r3, #24
 800584e:	4908      	ldr	r1, [pc, #32]	@ (8005870 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005850:	40d9      	lsrs	r1, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	400b      	ands	r3, r1
 8005856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585a:	431a      	orrs	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	0007ffff 	.word	0x0007ffff

08005874 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 031f 	and.w	r3, r3, #31
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80058a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6093      	str	r3, [r2, #8]
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058c8:	d101      	bne.n	80058ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80058ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005918:	d101      	bne.n	800591e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800593c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005940:	f043 0201 	orr.w	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005964:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005968:	f043 0202 	orr.w	r2, r3, #2
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <LL_ADC_IsEnabled+0x18>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <LL_ADC_IsEnabled+0x1a>
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d101      	bne.n	80059ba <LL_ADC_IsDisableOngoing+0x18>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <LL_ADC_IsDisableOngoing+0x1a>
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059dc:	f043 0204 	orr.w	r2, r3, #4
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a04:	f043 0210 	orr.w	r2, r3, #16
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d101      	bne.n	8005a30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d101      	bne.n	8005a7e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a8c:	b590      	push	{r4, r7, lr}
 8005a8e:	b089      	sub	sp, #36	@ 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e1a9      	b.n	8005dfa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d109      	bne.n	8005ac8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7fc ff0f 	bl	80028d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fef1 	bl	80058b4 <LL_ADC_IsDeepPowerDownEnabled>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff fed7 	bl	8005890 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff ff0c 	bl	8005904 <LL_ADC_IsInternalRegulatorEnabled>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d115      	bne.n	8005b1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fef0 	bl	80058dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005afc:	4b9c      	ldr	r3, [pc, #624]	@ (8005d70 <HAL_ADC_Init+0x2e4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	099b      	lsrs	r3, r3, #6
 8005b02:	4a9c      	ldr	r2, [pc, #624]	@ (8005d74 <HAL_ADC_Init+0x2e8>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	099b      	lsrs	r3, r3, #6
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b10:	e002      	b.n	8005b18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f9      	bne.n	8005b12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff feee 	bl	8005904 <LL_ADC_IsInternalRegulatorEnabled>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10d      	bne.n	8005b4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b32:	f043 0210 	orr.w	r2, r3, #16
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b3e:	f043 0201 	orr.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff ff62 	bl	8005a18 <LL_ADC_REG_IsConversionOngoing>
 8005b54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5a:	f003 0310 	and.w	r3, r3, #16
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 8142 	bne.w	8005de8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 813e 	bne.w	8005de8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b70:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005b74:	f043 0202 	orr.w	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fefb 	bl	800597c <LL_ADC_IsEnabled>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d141      	bne.n	8005c10 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b94:	d004      	beq.n	8005ba0 <HAL_ADC_Init+0x114>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a77      	ldr	r2, [pc, #476]	@ (8005d78 <HAL_ADC_Init+0x2ec>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d10f      	bne.n	8005bc0 <HAL_ADC_Init+0x134>
 8005ba0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005ba4:	f7ff feea 	bl	800597c <LL_ADC_IsEnabled>
 8005ba8:	4604      	mov	r4, r0
 8005baa:	4873      	ldr	r0, [pc, #460]	@ (8005d78 <HAL_ADC_Init+0x2ec>)
 8005bac:	f7ff fee6 	bl	800597c <LL_ADC_IsEnabled>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4323      	orrs	r3, r4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	bf0c      	ite	eq
 8005bb8:	2301      	moveq	r3, #1
 8005bba:	2300      	movne	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	e012      	b.n	8005be6 <HAL_ADC_Init+0x15a>
 8005bc0:	486e      	ldr	r0, [pc, #440]	@ (8005d7c <HAL_ADC_Init+0x2f0>)
 8005bc2:	f7ff fedb 	bl	800597c <LL_ADC_IsEnabled>
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	486d      	ldr	r0, [pc, #436]	@ (8005d80 <HAL_ADC_Init+0x2f4>)
 8005bca:	f7ff fed7 	bl	800597c <LL_ADC_IsEnabled>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	431c      	orrs	r4, r3
 8005bd2:	486c      	ldr	r0, [pc, #432]	@ (8005d84 <HAL_ADC_Init+0x2f8>)
 8005bd4:	f7ff fed2 	bl	800597c <LL_ADC_IsEnabled>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	4323      	orrs	r3, r4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bf0c      	ite	eq
 8005be0:	2301      	moveq	r3, #1
 8005be2:	2300      	movne	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d012      	beq.n	8005c10 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bf2:	d004      	beq.n	8005bfe <HAL_ADC_Init+0x172>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a5f      	ldr	r2, [pc, #380]	@ (8005d78 <HAL_ADC_Init+0x2ec>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d101      	bne.n	8005c02 <HAL_ADC_Init+0x176>
 8005bfe:	4a62      	ldr	r2, [pc, #392]	@ (8005d88 <HAL_ADC_Init+0x2fc>)
 8005c00:	e000      	b.n	8005c04 <HAL_ADC_Init+0x178>
 8005c02:	4a62      	ldr	r2, [pc, #392]	@ (8005d8c <HAL_ADC_Init+0x300>)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f7ff fcd2 	bl	80055b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	7f5b      	ldrb	r3, [r3, #29]
 8005c14:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c1a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005c20:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005c26:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c2e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d106      	bne.n	8005c4c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c42:	3b01      	subs	r3, #1
 8005c44:	045b      	lsls	r3, r3, #17
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d009      	beq.n	8005c68 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c60:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	4b48      	ldr	r3, [pc, #288]	@ (8005d90 <HAL_ADC_Init+0x304>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	69b9      	ldr	r1, [r7, #24]
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fee5 	bl	8005a66 <LL_ADC_INJ_IsConversionOngoing>
 8005c9c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d17f      	bne.n	8005da4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d17c      	bne.n	8005da4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005cae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005cb6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cc6:	f023 0302 	bic.w	r3, r3, #2
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	69b9      	ldr	r1, [r7, #24]
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d017      	beq.n	8005d0c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005cea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005cf4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005cf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6911      	ldr	r1, [r2, #16]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	430b      	orrs	r3, r1
 8005d06:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005d0a:	e013      	b.n	8005d34 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691a      	ldr	r2, [r3, #16]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005d1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005d2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d30:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d12a      	bne.n	8005d94 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d48:	f023 0304 	bic.w	r3, r3, #4
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d54:	4311      	orrs	r1, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005d5a:	4311      	orrs	r1, r2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d60:	430a      	orrs	r2, r1
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	611a      	str	r2, [r3, #16]
 8005d6e:	e019      	b.n	8005da4 <HAL_ADC_Init+0x318>
 8005d70:	20000008 	.word	0x20000008
 8005d74:	053e2d63 	.word	0x053e2d63
 8005d78:	50000100 	.word	0x50000100
 8005d7c:	50000400 	.word	0x50000400
 8005d80:	50000500 	.word	0x50000500
 8005d84:	50000600 	.word	0x50000600
 8005d88:	50000300 	.word	0x50000300
 8005d8c:	50000700 	.word	0x50000700
 8005d90:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d10c      	bne.n	8005dc6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db2:	f023 010f 	bic.w	r1, r3, #15
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	1e5a      	subs	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005dc4:	e007      	b.n	8005dd6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 020f 	bic.w	r2, r2, #15
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dda:	f023 0303 	bic.w	r3, r3, #3
 8005dde:	f043 0201 	orr.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005de6:	e007      	b.n	8005df8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dec:	f043 0210 	orr.w	r2, r3, #16
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3724      	adds	r7, #36	@ 0x24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd90      	pop	{r4, r7, pc}
 8005e02:	bf00      	nop

08005e04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e18:	d004      	beq.n	8005e24 <HAL_ADC_Start_DMA+0x20>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a5a      	ldr	r2, [pc, #360]	@ (8005f88 <HAL_ADC_Start_DMA+0x184>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d101      	bne.n	8005e28 <HAL_ADC_Start_DMA+0x24>
 8005e24:	4b59      	ldr	r3, [pc, #356]	@ (8005f8c <HAL_ADC_Start_DMA+0x188>)
 8005e26:	e000      	b.n	8005e2a <HAL_ADC_Start_DMA+0x26>
 8005e28:	4b59      	ldr	r3, [pc, #356]	@ (8005f90 <HAL_ADC_Start_DMA+0x18c>)
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff fd22 	bl	8005874 <LL_ADC_GetMultimode>
 8005e30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff fdee 	bl	8005a18 <LL_ADC_REG_IsConversionOngoing>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f040 809b 	bne.w	8005f7a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_ADC_Start_DMA+0x4e>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e096      	b.n	8005f80 <HAL_ADC_Start_DMA+0x17c>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a4d      	ldr	r2, [pc, #308]	@ (8005f94 <HAL_ADC_Start_DMA+0x190>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d008      	beq.n	8005e76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b05      	cmp	r3, #5
 8005e6e:	d002      	beq.n	8005e76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b09      	cmp	r3, #9
 8005e74:	d17a      	bne.n	8005f6c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fe14 	bl	8006aa4 <ADC_Enable>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d16d      	bne.n	8005f62 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f88 <HAL_ADC_Start_DMA+0x184>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <HAL_ADC_Start_DMA+0xb4>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8005f98 <HAL_ADC_Start_DMA+0x194>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d002      	beq.n	8005eb4 <HAL_ADC_Start_DMA+0xb0>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	e003      	b.n	8005ebc <HAL_ADC_Start_DMA+0xb8>
 8005eb4:	4b39      	ldr	r3, [pc, #228]	@ (8005f9c <HAL_ADC_Start_DMA+0x198>)
 8005eb6:	e001      	b.n	8005ebc <HAL_ADC_Start_DMA+0xb8>
 8005eb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d002      	beq.n	8005eca <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ece:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee6:	f023 0206 	bic.w	r2, r3, #6
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	661a      	str	r2, [r3, #96]	@ 0x60
 8005eee:	e002      	b.n	8005ef6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efa:	4a29      	ldr	r2, [pc, #164]	@ (8005fa0 <HAL_ADC_Start_DMA+0x19c>)
 8005efc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f02:	4a28      	ldr	r2, [pc, #160]	@ (8005fa4 <HAL_ADC_Start_DMA+0x1a0>)
 8005f04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0a:	4a27      	ldr	r2, [pc, #156]	@ (8005fa8 <HAL_ADC_Start_DMA+0x1a4>)
 8005f0c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	221c      	movs	r2, #28
 8005f14:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0210 	orr.w	r2, r2, #16
 8005f2c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0201 	orr.w	r2, r2, #1
 8005f3c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3340      	adds	r3, #64	@ 0x40
 8005f48:	4619      	mov	r1, r3
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f001 fa19 	bl	8007384 <HAL_DMA_Start_IT>
 8005f52:	4603      	mov	r3, r0
 8005f54:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fd34 	bl	80059c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005f60:	e00d      	b.n	8005f7e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005f6a:	e008      	b.n	8005f7e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005f78:	e001      	b.n	8005f7e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	50000100 	.word	0x50000100
 8005f8c:	50000300 	.word	0x50000300
 8005f90:	50000700 	.word	0x50000700
 8005f94:	50000600 	.word	0x50000600
 8005f98:	50000500 	.word	0x50000500
 8005f9c:	50000400 	.word	0x50000400
 8005fa0:	08006c8f 	.word	0x08006c8f
 8005fa4:	08006d67 	.word	0x08006d67
 8005fa8:	08006d83 	.word	0x08006d83

08005fac <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_ADC_Stop_DMA+0x16>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e051      	b.n	8006066 <HAL_ADC_Stop_DMA+0xba>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005fca:	2103      	movs	r1, #3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fcad 	bl	800692c <ADC_ConversionStop>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d13f      	bne.n	800605c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d10f      	bne.n	800601a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fa3b 	bl	800747a <HAL_DMA_Abort>
 8006004:	4603      	mov	r3, r0
 8006006:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006012:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0210 	bic.w	r2, r2, #16
 8006028:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d105      	bne.n	800603c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fdcd 	bl	8006bd0 <ADC_Disable>
 8006036:	4603      	mov	r3, r0
 8006038:	73fb      	strb	r3, [r7, #15]
 800603a:	e002      	b.n	8006042 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fdc7 	bl	8006bd0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d109      	bne.n	800605c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	f043 0201 	orr.w	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
	...

080060ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b0b6      	sub	sp, #216	@ 0xd8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d102      	bne.n	80060d0 <HAL_ADC_ConfigChannel+0x24>
 80060ca:	2302      	movs	r3, #2
 80060cc:	f000 bc13 	b.w	80068f6 <HAL_ADC_ConfigChannel+0x84a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fc9b 	bl	8005a18 <LL_ADC_REG_IsConversionOngoing>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f040 83f3 	bne.w	80068d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7ff fb41 	bl	800577e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff fc89 	bl	8005a18 <LL_ADC_REG_IsConversionOngoing>
 8006106:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff fca9 	bl	8005a66 <LL_ADC_INJ_IsConversionOngoing>
 8006114:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006118:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800611c:	2b00      	cmp	r3, #0
 800611e:	f040 81d9 	bne.w	80064d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 81d4 	bne.w	80064d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006134:	d10f      	bne.n	8006156 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	4619      	mov	r1, r3
 8006142:	f7ff fb48 	bl	80057d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff faef 	bl	8005732 <LL_ADC_SetSamplingTimeCommonConfig>
 8006154:	e00e      	b.n	8006174 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6819      	ldr	r1, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	461a      	mov	r2, r3
 8006164:	f7ff fb37 	bl	80057d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fadf 	bl	8005732 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	08db      	lsrs	r3, r3, #3
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b04      	cmp	r3, #4
 8006194:	d022      	beq.n	80061dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6919      	ldr	r1, [r3, #16]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061a6:	f7ff fa39 	bl	800561c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6919      	ldr	r1, [r3, #16]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7ff fa85 	bl	80056c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d102      	bne.n	80061d2 <HAL_ADC_ConfigChannel+0x126>
 80061cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061d0:	e000      	b.n	80061d4 <HAL_ADC_ConfigChannel+0x128>
 80061d2:	2300      	movs	r3, #0
 80061d4:	461a      	mov	r2, r3
 80061d6:	f7ff fa91 	bl	80056fc <LL_ADC_SetOffsetSaturation>
 80061da:	e17b      	b.n	80064d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2100      	movs	r1, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fa3e 	bl	8005664 <LL_ADC_GetOffsetChannel>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <HAL_ADC_ConfigChannel+0x15c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fa33 	bl	8005664 <LL_ADC_GetOffsetChannel>
 80061fe:	4603      	mov	r3, r0
 8006200:	0e9b      	lsrs	r3, r3, #26
 8006202:	f003 021f 	and.w	r2, r3, #31
 8006206:	e01e      	b.n	8006246 <HAL_ADC_ConfigChannel+0x19a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2100      	movs	r1, #0
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff fa28 	bl	8005664 <LL_ADC_GetOffsetChannel>
 8006214:	4603      	mov	r3, r0
 8006216:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800621e:	fa93 f3a3 	rbit	r3, r3
 8006222:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800622a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800622e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006236:	2320      	movs	r3, #32
 8006238:	e004      	b.n	8006244 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800623a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800623e:	fab3 f383 	clz	r3, r3
 8006242:	b2db      	uxtb	r3, r3
 8006244:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624e:	2b00      	cmp	r3, #0
 8006250:	d105      	bne.n	800625e <HAL_ADC_ConfigChannel+0x1b2>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	0e9b      	lsrs	r3, r3, #26
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	e018      	b.n	8006290 <HAL_ADC_ConfigChannel+0x1e4>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006266:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800626a:	fa93 f3a3 	rbit	r3, r3
 800626e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800627a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006282:	2320      	movs	r3, #32
 8006284:	e004      	b.n	8006290 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006286:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800628a:	fab3 f383 	clz	r3, r3
 800628e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006290:	429a      	cmp	r2, r3
 8006292:	d106      	bne.n	80062a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2200      	movs	r2, #0
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f7ff f9f7 	bl	8005690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2101      	movs	r1, #1
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff f9db 	bl	8005664 <LL_ADC_GetOffsetChannel>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <HAL_ADC_ConfigChannel+0x222>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2101      	movs	r1, #1
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff f9d0 	bl	8005664 <LL_ADC_GetOffsetChannel>
 80062c4:	4603      	mov	r3, r0
 80062c6:	0e9b      	lsrs	r3, r3, #26
 80062c8:	f003 021f 	and.w	r2, r3, #31
 80062cc:	e01e      	b.n	800630c <HAL_ADC_ConfigChannel+0x260>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2101      	movs	r1, #1
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff f9c5 	bl	8005664 <LL_ADC_GetOffsetChannel>
 80062da:	4603      	mov	r3, r0
 80062dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80062e4:	fa93 f3a3 	rbit	r3, r3
 80062e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80062ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80062f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80062fc:	2320      	movs	r3, #32
 80062fe:	e004      	b.n	800630a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006304:	fab3 f383 	clz	r3, r3
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006314:	2b00      	cmp	r3, #0
 8006316:	d105      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x278>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	0e9b      	lsrs	r3, r3, #26
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	e018      	b.n	8006356 <HAL_ADC_ConfigChannel+0x2aa>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006330:	fa93 f3a3 	rbit	r3, r3
 8006334:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006338:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800633c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006340:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006348:	2320      	movs	r3, #32
 800634a:	e004      	b.n	8006356 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800634c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006350:	fab3 f383 	clz	r3, r3
 8006354:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006356:	429a      	cmp	r2, r3
 8006358:	d106      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2200      	movs	r2, #0
 8006360:	2101      	movs	r1, #1
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff f994 	bl	8005690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2102      	movs	r1, #2
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff f978 	bl	8005664 <LL_ADC_GetOffsetChannel>
 8006374:	4603      	mov	r3, r0
 8006376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <HAL_ADC_ConfigChannel+0x2e8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff f96d 	bl	8005664 <LL_ADC_GetOffsetChannel>
 800638a:	4603      	mov	r3, r0
 800638c:	0e9b      	lsrs	r3, r3, #26
 800638e:	f003 021f 	and.w	r2, r3, #31
 8006392:	e01e      	b.n	80063d2 <HAL_ADC_ConfigChannel+0x326>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2102      	movs	r1, #2
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff f962 	bl	8005664 <LL_ADC_GetOffsetChannel>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063aa:	fa93 f3a3 	rbit	r3, r3
 80063ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80063b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80063ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80063c2:	2320      	movs	r3, #32
 80063c4:	e004      	b.n	80063d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80063c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80063ca:	fab3 f383 	clz	r3, r3
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d105      	bne.n	80063ea <HAL_ADC_ConfigChannel+0x33e>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	0e9b      	lsrs	r3, r3, #26
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	e016      	b.n	8006418 <HAL_ADC_ConfigChannel+0x36c>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80063f6:	fa93 f3a3 	rbit	r3, r3
 80063fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80063fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006402:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800640a:	2320      	movs	r3, #32
 800640c:	e004      	b.n	8006418 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800640e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006412:	fab3 f383 	clz	r3, r3
 8006416:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006418:	429a      	cmp	r2, r3
 800641a:	d106      	bne.n	800642a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2200      	movs	r2, #0
 8006422:	2102      	movs	r1, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff f933 	bl	8005690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2103      	movs	r1, #3
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff f917 	bl	8005664 <LL_ADC_GetOffsetChannel>
 8006436:	4603      	mov	r3, r0
 8006438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x3aa>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2103      	movs	r1, #3
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff f90c 	bl	8005664 <LL_ADC_GetOffsetChannel>
 800644c:	4603      	mov	r3, r0
 800644e:	0e9b      	lsrs	r3, r3, #26
 8006450:	f003 021f 	and.w	r2, r3, #31
 8006454:	e017      	b.n	8006486 <HAL_ADC_ConfigChannel+0x3da>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2103      	movs	r1, #3
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff f901 	bl	8005664 <LL_ADC_GetOffsetChannel>
 8006462:	4603      	mov	r3, r0
 8006464:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006468:	fa93 f3a3 	rbit	r3, r3
 800646c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800646e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006470:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006472:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006478:	2320      	movs	r3, #32
 800647a:	e003      	b.n	8006484 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800647c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800647e:	fab3 f383 	clz	r3, r3
 8006482:	b2db      	uxtb	r3, r3
 8006484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800648e:	2b00      	cmp	r3, #0
 8006490:	d105      	bne.n	800649e <HAL_ADC_ConfigChannel+0x3f2>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	0e9b      	lsrs	r3, r3, #26
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	e011      	b.n	80064c2 <HAL_ADC_ConfigChannel+0x416>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064a6:	fa93 f3a3 	rbit	r3, r3
 80064aa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80064ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80064b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80064b6:	2320      	movs	r3, #32
 80064b8:	e003      	b.n	80064c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80064ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064bc:	fab3 f383 	clz	r3, r3
 80064c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d106      	bne.n	80064d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2200      	movs	r2, #0
 80064cc:	2103      	movs	r1, #3
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff f8de 	bl	8005690 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff fa4f 	bl	800597c <LL_ADC_IsEnabled>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f040 813d 	bne.w	8006760 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6819      	ldr	r1, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f7ff f99a 	bl	800582c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	4aa2      	ldr	r2, [pc, #648]	@ (8006788 <HAL_ADC_ConfigChannel+0x6dc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	f040 812e 	bne.w	8006760 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <HAL_ADC_ConfigChannel+0x480>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	0e9b      	lsrs	r3, r3, #26
 800651a:	3301      	adds	r3, #1
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	2b09      	cmp	r3, #9
 8006522:	bf94      	ite	ls
 8006524:	2301      	movls	r3, #1
 8006526:	2300      	movhi	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	e019      	b.n	8006560 <HAL_ADC_ConfigChannel+0x4b4>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006534:	fa93 f3a3 	rbit	r3, r3
 8006538:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800653a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800653c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800653e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006544:	2320      	movs	r3, #32
 8006546:	e003      	b.n	8006550 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006548:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800654a:	fab3 f383 	clz	r3, r3
 800654e:	b2db      	uxtb	r3, r3
 8006550:	3301      	adds	r3, #1
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	2b09      	cmp	r3, #9
 8006558:	bf94      	ite	ls
 800655a:	2301      	movls	r3, #1
 800655c:	2300      	movhi	r3, #0
 800655e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006560:	2b00      	cmp	r3, #0
 8006562:	d079      	beq.n	8006658 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800656c:	2b00      	cmp	r3, #0
 800656e:	d107      	bne.n	8006580 <HAL_ADC_ConfigChannel+0x4d4>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	0e9b      	lsrs	r3, r3, #26
 8006576:	3301      	adds	r3, #1
 8006578:	069b      	lsls	r3, r3, #26
 800657a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800657e:	e015      	b.n	80065ac <HAL_ADC_ConfigChannel+0x500>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006588:	fa93 f3a3 	rbit	r3, r3
 800658c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800658e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006590:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006598:	2320      	movs	r3, #32
 800659a:	e003      	b.n	80065a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800659c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800659e:	fab3 f383 	clz	r3, r3
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	3301      	adds	r3, #1
 80065a6:	069b      	lsls	r3, r3, #26
 80065a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <HAL_ADC_ConfigChannel+0x520>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	0e9b      	lsrs	r3, r3, #26
 80065be:	3301      	adds	r3, #1
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	2101      	movs	r1, #1
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	e017      	b.n	80065fc <HAL_ADC_ConfigChannel+0x550>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d4:	fa93 f3a3 	rbit	r3, r3
 80065d8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80065da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80065de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80065e4:	2320      	movs	r3, #32
 80065e6:	e003      	b.n	80065f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80065e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ea:	fab3 f383 	clz	r3, r3
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	3301      	adds	r3, #1
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	2101      	movs	r1, #1
 80065f8:	fa01 f303 	lsl.w	r3, r1, r3
 80065fc:	ea42 0103 	orr.w	r1, r2, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <HAL_ADC_ConfigChannel+0x576>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	0e9b      	lsrs	r3, r3, #26
 8006612:	3301      	adds	r3, #1
 8006614:	f003 021f 	and.w	r2, r3, #31
 8006618:	4613      	mov	r3, r2
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	4413      	add	r3, r2
 800661e:	051b      	lsls	r3, r3, #20
 8006620:	e018      	b.n	8006654 <HAL_ADC_ConfigChannel+0x5a8>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662a:	fa93 f3a3 	rbit	r3, r3
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800663a:	2320      	movs	r3, #32
 800663c:	e003      	b.n	8006646 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800663e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006640:	fab3 f383 	clz	r3, r3
 8006644:	b2db      	uxtb	r3, r3
 8006646:	3301      	adds	r3, #1
 8006648:	f003 021f 	and.w	r2, r3, #31
 800664c:	4613      	mov	r3, r2
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	4413      	add	r3, r2
 8006652:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006654:	430b      	orrs	r3, r1
 8006656:	e07e      	b.n	8006756 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006660:	2b00      	cmp	r3, #0
 8006662:	d107      	bne.n	8006674 <HAL_ADC_ConfigChannel+0x5c8>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	0e9b      	lsrs	r3, r3, #26
 800666a:	3301      	adds	r3, #1
 800666c:	069b      	lsls	r3, r3, #26
 800666e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006672:	e015      	b.n	80066a0 <HAL_ADC_ConfigChannel+0x5f4>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667c:	fa93 f3a3 	rbit	r3, r3
 8006680:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006684:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800668c:	2320      	movs	r3, #32
 800668e:	e003      	b.n	8006698 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	fab3 f383 	clz	r3, r3
 8006696:	b2db      	uxtb	r3, r3
 8006698:	3301      	adds	r3, #1
 800669a:	069b      	lsls	r3, r3, #26
 800669c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d109      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x614>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	0e9b      	lsrs	r3, r3, #26
 80066b2:	3301      	adds	r3, #1
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	2101      	movs	r1, #1
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	e017      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x644>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	fa93 f3a3 	rbit	r3, r3
 80066cc:	61fb      	str	r3, [r7, #28]
  return result;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80066d8:	2320      	movs	r3, #32
 80066da:	e003      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80066dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066de:	fab3 f383 	clz	r3, r3
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	3301      	adds	r3, #1
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	2101      	movs	r1, #1
 80066ec:	fa01 f303 	lsl.w	r3, r1, r3
 80066f0:	ea42 0103 	orr.w	r1, r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10d      	bne.n	800671c <HAL_ADC_ConfigChannel+0x670>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	0e9b      	lsrs	r3, r3, #26
 8006706:	3301      	adds	r3, #1
 8006708:	f003 021f 	and.w	r2, r3, #31
 800670c:	4613      	mov	r3, r2
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	4413      	add	r3, r2
 8006712:	3b1e      	subs	r3, #30
 8006714:	051b      	lsls	r3, r3, #20
 8006716:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800671a:	e01b      	b.n	8006754 <HAL_ADC_ConfigChannel+0x6a8>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	fa93 f3a3 	rbit	r3, r3
 8006728:	613b      	str	r3, [r7, #16]
  return result;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006734:	2320      	movs	r3, #32
 8006736:	e003      	b.n	8006740 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	fab3 f383 	clz	r3, r3
 800673e:	b2db      	uxtb	r3, r3
 8006740:	3301      	adds	r3, #1
 8006742:	f003 021f 	and.w	r2, r3, #31
 8006746:	4613      	mov	r3, r2
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	4413      	add	r3, r2
 800674c:	3b1e      	subs	r3, #30
 800674e:	051b      	lsls	r3, r3, #20
 8006750:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006754:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800675a:	4619      	mov	r1, r3
 800675c:	f7ff f83b 	bl	80057d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4b09      	ldr	r3, [pc, #36]	@ (800678c <HAL_ADC_ConfigChannel+0x6e0>)
 8006766:	4013      	ands	r3, r2
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 80be 	beq.w	80068ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006776:	d004      	beq.n	8006782 <HAL_ADC_ConfigChannel+0x6d6>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a04      	ldr	r2, [pc, #16]	@ (8006790 <HAL_ADC_ConfigChannel+0x6e4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d10a      	bne.n	8006798 <HAL_ADC_ConfigChannel+0x6ec>
 8006782:	4b04      	ldr	r3, [pc, #16]	@ (8006794 <HAL_ADC_ConfigChannel+0x6e8>)
 8006784:	e009      	b.n	800679a <HAL_ADC_ConfigChannel+0x6ee>
 8006786:	bf00      	nop
 8006788:	407f0000 	.word	0x407f0000
 800678c:	80080000 	.word	0x80080000
 8006790:	50000100 	.word	0x50000100
 8006794:	50000300 	.word	0x50000300
 8006798:	4b59      	ldr	r3, [pc, #356]	@ (8006900 <HAL_ADC_ConfigChannel+0x854>)
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe ff30 	bl	8005600 <LL_ADC_GetCommonPathInternalCh>
 80067a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a56      	ldr	r2, [pc, #344]	@ (8006904 <HAL_ADC_ConfigChannel+0x858>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <HAL_ADC_ConfigChannel+0x70c>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a55      	ldr	r2, [pc, #340]	@ (8006908 <HAL_ADC_ConfigChannel+0x85c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d13a      	bne.n	800682e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80067b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d134      	bne.n	800682e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067cc:	d005      	beq.n	80067da <HAL_ADC_ConfigChannel+0x72e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a4e      	ldr	r2, [pc, #312]	@ (800690c <HAL_ADC_ConfigChannel+0x860>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	f040 8085 	bne.w	80068e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067e2:	d004      	beq.n	80067ee <HAL_ADC_ConfigChannel+0x742>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a49      	ldr	r2, [pc, #292]	@ (8006910 <HAL_ADC_ConfigChannel+0x864>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d101      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x746>
 80067ee:	4a49      	ldr	r2, [pc, #292]	@ (8006914 <HAL_ADC_ConfigChannel+0x868>)
 80067f0:	e000      	b.n	80067f4 <HAL_ADC_ConfigChannel+0x748>
 80067f2:	4a43      	ldr	r2, [pc, #268]	@ (8006900 <HAL_ADC_ConfigChannel+0x854>)
 80067f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f7fe feeb 	bl	80055da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006804:	4b44      	ldr	r3, [pc, #272]	@ (8006918 <HAL_ADC_ConfigChannel+0x86c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	099b      	lsrs	r3, r3, #6
 800680a:	4a44      	ldr	r2, [pc, #272]	@ (800691c <HAL_ADC_ConfigChannel+0x870>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	099b      	lsrs	r3, r3, #6
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	4613      	mov	r3, r2
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800681e:	e002      	b.n	8006826 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3b01      	subs	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1f9      	bne.n	8006820 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800682c:	e05a      	b.n	80068e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a3b      	ldr	r2, [pc, #236]	@ (8006920 <HAL_ADC_ConfigChannel+0x874>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d125      	bne.n	8006884 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800683c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11f      	bne.n	8006884 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a31      	ldr	r2, [pc, #196]	@ (8006910 <HAL_ADC_ConfigChannel+0x864>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d104      	bne.n	8006858 <HAL_ADC_ConfigChannel+0x7ac>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a34      	ldr	r2, [pc, #208]	@ (8006924 <HAL_ADC_ConfigChannel+0x878>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d047      	beq.n	80068e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006860:	d004      	beq.n	800686c <HAL_ADC_ConfigChannel+0x7c0>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2a      	ldr	r2, [pc, #168]	@ (8006910 <HAL_ADC_ConfigChannel+0x864>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d101      	bne.n	8006870 <HAL_ADC_ConfigChannel+0x7c4>
 800686c:	4a29      	ldr	r2, [pc, #164]	@ (8006914 <HAL_ADC_ConfigChannel+0x868>)
 800686e:	e000      	b.n	8006872 <HAL_ADC_ConfigChannel+0x7c6>
 8006870:	4a23      	ldr	r2, [pc, #140]	@ (8006900 <HAL_ADC_ConfigChannel+0x854>)
 8006872:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f7fe feac 	bl	80055da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006882:	e031      	b.n	80068e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a27      	ldr	r2, [pc, #156]	@ (8006928 <HAL_ADC_ConfigChannel+0x87c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d12d      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800688e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d127      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1c      	ldr	r2, [pc, #112]	@ (8006910 <HAL_ADC_ConfigChannel+0x864>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d022      	beq.n	80068ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068ac:	d004      	beq.n	80068b8 <HAL_ADC_ConfigChannel+0x80c>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a17      	ldr	r2, [pc, #92]	@ (8006910 <HAL_ADC_ConfigChannel+0x864>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d101      	bne.n	80068bc <HAL_ADC_ConfigChannel+0x810>
 80068b8:	4a16      	ldr	r2, [pc, #88]	@ (8006914 <HAL_ADC_ConfigChannel+0x868>)
 80068ba:	e000      	b.n	80068be <HAL_ADC_ConfigChannel+0x812>
 80068bc:	4a10      	ldr	r2, [pc, #64]	@ (8006900 <HAL_ADC_ConfigChannel+0x854>)
 80068be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80068c6:	4619      	mov	r1, r3
 80068c8:	4610      	mov	r0, r2
 80068ca:	f7fe fe86 	bl	80055da <LL_ADC_SetCommonPathInternalCh>
 80068ce:	e00c      	b.n	80068ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d4:	f043 0220 	orr.w	r2, r3, #32
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80068e2:	e002      	b.n	80068ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068e4:	bf00      	nop
 80068e6:	e000      	b.n	80068ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80068f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	37d8      	adds	r7, #216	@ 0xd8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	50000700 	.word	0x50000700
 8006904:	c3210000 	.word	0xc3210000
 8006908:	90c00010 	.word	0x90c00010
 800690c:	50000600 	.word	0x50000600
 8006910:	50000100 	.word	0x50000100
 8006914:	50000300 	.word	0x50000300
 8006918:	20000008 	.word	0x20000008
 800691c:	053e2d63 	.word	0x053e2d63
 8006920:	c7520000 	.word	0xc7520000
 8006924:	50000500 	.word	0x50000500
 8006928:	cb840000 	.word	0xcb840000

0800692c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff f868 	bl	8005a18 <LL_ADC_REG_IsConversionOngoing>
 8006948:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff f889 	bl	8005a66 <LL_ADC_INJ_IsConversionOngoing>
 8006954:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8098 	beq.w	8006a94 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d02a      	beq.n	80069c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	7f5b      	ldrb	r3, [r3, #29]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d126      	bne.n	80069c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	7f1b      	ldrb	r3, [r3, #28]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d122      	bne.n	80069c8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006982:	2301      	movs	r3, #1
 8006984:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006986:	e014      	b.n	80069b2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4a45      	ldr	r2, [pc, #276]	@ (8006aa0 <ADC_ConversionStop+0x174>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d90d      	bls.n	80069ac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006994:	f043 0210 	orr.w	r2, r3, #16
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a0:	f043 0201 	orr.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e074      	b.n	8006a96 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	3301      	adds	r3, #1
 80069b0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069bc:	2b40      	cmp	r3, #64	@ 0x40
 80069be:	d1e3      	bne.n	8006988 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2240      	movs	r2, #64	@ 0x40
 80069c6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d014      	beq.n	80069f8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff f820 	bl	8005a18 <LL_ADC_REG_IsConversionOngoing>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00c      	beq.n	80069f8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe ffdd 	bl	80059a2 <LL_ADC_IsDisableOngoing>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe fffc 	bl	80059f0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d014      	beq.n	8006a28 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff f82f 	bl	8005a66 <LL_ADC_INJ_IsConversionOngoing>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00c      	beq.n	8006a28 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe ffc5 	bl	80059a2 <LL_ADC_IsDisableOngoing>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d104      	bne.n	8006a28 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff f80b 	bl	8005a3e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d005      	beq.n	8006a3a <ADC_ConversionStop+0x10e>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d105      	bne.n	8006a40 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006a34:	230c      	movs	r3, #12
 8006a36:	617b      	str	r3, [r7, #20]
        break;
 8006a38:	e005      	b.n	8006a46 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	617b      	str	r3, [r7, #20]
        break;
 8006a3e:	e002      	b.n	8006a46 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006a40:	2304      	movs	r3, #4
 8006a42:	617b      	str	r3, [r7, #20]
        break;
 8006a44:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006a46:	f7fe fd87 	bl	8005558 <HAL_GetTick>
 8006a4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006a4c:	e01b      	b.n	8006a86 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006a4e:	f7fe fd83 	bl	8005558 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b05      	cmp	r3, #5
 8006a5a:	d914      	bls.n	8006a86 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00d      	beq.n	8006a86 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6e:	f043 0210 	orr.w	r2, r3, #16
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7a:	f043 0201 	orr.w	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e007      	b.n	8006a96 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1dc      	bne.n	8006a4e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3720      	adds	r7, #32
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	a33fffff 	.word	0xa33fffff

08006aa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe ff61 	bl	800597c <LL_ADC_IsEnabled>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d176      	bne.n	8006bae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8006bb8 <ADC_Enable+0x114>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00d      	beq.n	8006aea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad2:	f043 0210 	orr.w	r2, r3, #16
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ade:	f043 0201 	orr.w	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e062      	b.n	8006bb0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe ff1c 	bl	800592c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006afc:	d004      	beq.n	8006b08 <ADC_Enable+0x64>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a2e      	ldr	r2, [pc, #184]	@ (8006bbc <ADC_Enable+0x118>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d101      	bne.n	8006b0c <ADC_Enable+0x68>
 8006b08:	4b2d      	ldr	r3, [pc, #180]	@ (8006bc0 <ADC_Enable+0x11c>)
 8006b0a:	e000      	b.n	8006b0e <ADC_Enable+0x6a>
 8006b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8006bc4 <ADC_Enable+0x120>)
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe fd76 	bl	8005600 <LL_ADC_GetCommonPathInternalCh>
 8006b14:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006b16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d013      	beq.n	8006b46 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bc8 <ADC_Enable+0x124>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	099b      	lsrs	r3, r3, #6
 8006b24:	4a29      	ldr	r2, [pc, #164]	@ (8006bcc <ADC_Enable+0x128>)
 8006b26:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2a:	099b      	lsrs	r3, r3, #6
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	4613      	mov	r3, r2
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006b38:	e002      	b.n	8006b40 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f9      	bne.n	8006b3a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006b46:	f7fe fd07 	bl	8005558 <HAL_GetTick>
 8006b4a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b4c:	e028      	b.n	8006ba0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe ff12 	bl	800597c <LL_ADC_IsEnabled>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fee2 	bl	800592c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b68:	f7fe fcf6 	bl	8005558 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d914      	bls.n	8006ba0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d00d      	beq.n	8006ba0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b88:	f043 0210 	orr.w	r2, r3, #16
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b94:	f043 0201 	orr.w	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e007      	b.n	8006bb0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d1cf      	bne.n	8006b4e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	8000003f 	.word	0x8000003f
 8006bbc:	50000100 	.word	0x50000100
 8006bc0:	50000300 	.word	0x50000300
 8006bc4:	50000700 	.word	0x50000700
 8006bc8:	20000008 	.word	0x20000008
 8006bcc:	053e2d63 	.word	0x053e2d63

08006bd0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fe fee0 	bl	80059a2 <LL_ADC_IsDisableOngoing>
 8006be2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe fec7 	bl	800597c <LL_ADC_IsEnabled>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d047      	beq.n	8006c84 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d144      	bne.n	8006c84 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f003 030d 	and.w	r3, r3, #13
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d10c      	bne.n	8006c22 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe fea1 	bl	8005954 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2203      	movs	r2, #3
 8006c18:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006c1a:	f7fe fc9d 	bl	8005558 <HAL_GetTick>
 8006c1e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c20:	e029      	b.n	8006c76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c26:	f043 0210 	orr.w	r2, r3, #16
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c32:	f043 0201 	orr.w	r2, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e023      	b.n	8006c86 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006c3e:	f7fe fc8b 	bl	8005558 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d914      	bls.n	8006c76 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00d      	beq.n	8006c76 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c5e:	f043 0210 	orr.w	r2, r3, #16
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c6a:	f043 0201 	orr.w	r2, r3, #1
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e007      	b.n	8006c86 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1dc      	bne.n	8006c3e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d14b      	bne.n	8006d40 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d021      	beq.n	8006d06 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fd46 	bl	8005758 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d032      	beq.n	8006d38 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d12b      	bne.n	8006d38 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d11f      	bne.n	8006d38 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfc:	f043 0201 	orr.w	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d04:	e018      	b.n	8006d38 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d111      	bne.n	8006d38 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d30:	f043 0201 	orr.w	r2, r3, #1
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff f998 	bl	800606e <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d3e:	e00e      	b.n	8006d5e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff f9a2 	bl	8006096 <HAL_ADC_ErrorCallback>
}
 8006d52:	e004      	b.n	8006d5e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7ff f984 	bl	8006082 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d7a:	bf00      	nop
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da0:	f043 0204 	orr.w	r2, r3, #4
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff f974 	bl	8006096 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <LL_ADC_IsEnabled>:
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <LL_ADC_IsEnabled+0x18>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e000      	b.n	8006dd0 <LL_ADC_IsEnabled+0x1a>
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <LL_ADC_REG_IsConversionOngoing>:
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d101      	bne.n	8006df4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
	...

08006e04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006e04:	b590      	push	{r4, r7, lr}
 8006e06:	b0a1      	sub	sp, #132	@ 0x84
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d101      	bne.n	8006e22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e0e7      	b.n	8006ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006e2e:	2300      	movs	r3, #0
 8006e30:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e3a:	d102      	bne.n	8006e42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8006ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006e3e:	60bb      	str	r3, [r7, #8]
 8006e40:	e009      	b.n	8006e56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a6e      	ldr	r2, [pc, #440]	@ (8007000 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d102      	bne.n	8006e52 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8007004 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006e4e:	60bb      	str	r3, [r7, #8]
 8006e50:	e001      	b.n	8006e56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006e52:	2300      	movs	r3, #0
 8006e54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10b      	bne.n	8006e74 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e60:	f043 0220 	orr.w	r2, r3, #32
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0be      	b.n	8006ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff ffb0 	bl	8006ddc <LL_ADC_REG_IsConversionOngoing>
 8006e7c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff ffaa 	bl	8006ddc <LL_ADC_REG_IsConversionOngoing>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f040 80a0 	bne.w	8006fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f040 809c 	bne.w	8006fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ea0:	d004      	beq.n	8006eac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a55      	ldr	r2, [pc, #340]	@ (8006ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d101      	bne.n	8006eb0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006eac:	4b56      	ldr	r3, [pc, #344]	@ (8007008 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006eae:	e000      	b.n	8006eb2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006eb0:	4b56      	ldr	r3, [pc, #344]	@ (800700c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006eb2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d04b      	beq.n	8006f54 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006ebc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	6859      	ldr	r1, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ece:	035b      	lsls	r3, r3, #13
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ed6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ee0:	d004      	beq.n	8006eec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a45      	ldr	r2, [pc, #276]	@ (8006ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d10f      	bne.n	8006f0c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006eec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006ef0:	f7ff ff61 	bl	8006db6 <LL_ADC_IsEnabled>
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	4841      	ldr	r0, [pc, #260]	@ (8006ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006ef8:	f7ff ff5d 	bl	8006db6 <LL_ADC_IsEnabled>
 8006efc:	4603      	mov	r3, r0
 8006efe:	4323      	orrs	r3, r4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	bf0c      	ite	eq
 8006f04:	2301      	moveq	r3, #1
 8006f06:	2300      	movne	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	e012      	b.n	8006f32 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006f0c:	483c      	ldr	r0, [pc, #240]	@ (8007000 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006f0e:	f7ff ff52 	bl	8006db6 <LL_ADC_IsEnabled>
 8006f12:	4604      	mov	r4, r0
 8006f14:	483b      	ldr	r0, [pc, #236]	@ (8007004 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006f16:	f7ff ff4e 	bl	8006db6 <LL_ADC_IsEnabled>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	431c      	orrs	r4, r3
 8006f1e:	483c      	ldr	r0, [pc, #240]	@ (8007010 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006f20:	f7ff ff49 	bl	8006db6 <LL_ADC_IsEnabled>
 8006f24:	4603      	mov	r3, r0
 8006f26:	4323      	orrs	r3, r4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2301      	moveq	r3, #1
 8006f2e:	2300      	movne	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d056      	beq.n	8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006f3e:	f023 030f 	bic.w	r3, r3, #15
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	6811      	ldr	r1, [r2, #0]
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	6892      	ldr	r2, [r2, #8]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f50:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006f52:	e047      	b.n	8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f68:	d004      	beq.n	8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a23      	ldr	r2, [pc, #140]	@ (8006ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d10f      	bne.n	8006f94 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006f74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006f78:	f7ff ff1d 	bl	8006db6 <LL_ADC_IsEnabled>
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	481f      	ldr	r0, [pc, #124]	@ (8006ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f80:	f7ff ff19 	bl	8006db6 <LL_ADC_IsEnabled>
 8006f84:	4603      	mov	r3, r0
 8006f86:	4323      	orrs	r3, r4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	e012      	b.n	8006fba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006f94:	481a      	ldr	r0, [pc, #104]	@ (8007000 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006f96:	f7ff ff0e 	bl	8006db6 <LL_ADC_IsEnabled>
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4819      	ldr	r0, [pc, #100]	@ (8007004 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006f9e:	f7ff ff0a 	bl	8006db6 <LL_ADC_IsEnabled>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	431c      	orrs	r4, r3
 8006fa6:	481a      	ldr	r0, [pc, #104]	@ (8007010 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006fa8:	f7ff ff05 	bl	8006db6 <LL_ADC_IsEnabled>
 8006fac:	4603      	mov	r3, r0
 8006fae:	4323      	orrs	r3, r4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf0c      	ite	eq
 8006fb4:	2301      	moveq	r3, #1
 8006fb6:	2300      	movne	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d012      	beq.n	8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006fbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006fc6:	f023 030f 	bic.w	r3, r3, #15
 8006fca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006fcc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006fce:	e009      	b.n	8006fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fd4:	f043 0220 	orr.w	r2, r3, #32
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006fe2:	e000      	b.n	8006fe6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006fe4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006fee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3784      	adds	r7, #132	@ 0x84
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd90      	pop	{r4, r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	50000100 	.word	0x50000100
 8007000:	50000400 	.word	0x50000400
 8007004:	50000500 	.word	0x50000500
 8007008:	50000300 	.word	0x50000300
 800700c:	50000700 	.word	0x50000700
 8007010:	50000600 	.word	0x50000600

08007014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007024:	4b0c      	ldr	r3, [pc, #48]	@ (8007058 <__NVIC_SetPriorityGrouping+0x44>)
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007030:	4013      	ands	r3, r2
 8007032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800703c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007046:	4a04      	ldr	r2, [pc, #16]	@ (8007058 <__NVIC_SetPriorityGrouping+0x44>)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	60d3      	str	r3, [r2, #12]
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	e000ed00 	.word	0xe000ed00

0800705c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007060:	4b04      	ldr	r3, [pc, #16]	@ (8007074 <__NVIC_GetPriorityGrouping+0x18>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	0a1b      	lsrs	r3, r3, #8
 8007066:	f003 0307 	and.w	r3, r3, #7
}
 800706a:	4618      	mov	r0, r3
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	e000ed00 	.word	0xe000ed00

08007078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007086:	2b00      	cmp	r3, #0
 8007088:	db0b      	blt.n	80070a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	f003 021f 	and.w	r2, r3, #31
 8007090:	4907      	ldr	r1, [pc, #28]	@ (80070b0 <__NVIC_EnableIRQ+0x38>)
 8007092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	2001      	movs	r0, #1
 800709a:	fa00 f202 	lsl.w	r2, r0, r2
 800709e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	e000e100 	.word	0xe000e100

080070b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	6039      	str	r1, [r7, #0]
 80070be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	db0a      	blt.n	80070de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	490c      	ldr	r1, [pc, #48]	@ (8007100 <__NVIC_SetPriority+0x4c>)
 80070ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070d2:	0112      	lsls	r2, r2, #4
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	440b      	add	r3, r1
 80070d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070dc:	e00a      	b.n	80070f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	4908      	ldr	r1, [pc, #32]	@ (8007104 <__NVIC_SetPriority+0x50>)
 80070e4:	79fb      	ldrb	r3, [r7, #7]
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	3b04      	subs	r3, #4
 80070ec:	0112      	lsls	r2, r2, #4
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	440b      	add	r3, r1
 80070f2:	761a      	strb	r2, [r3, #24]
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	e000e100 	.word	0xe000e100
 8007104:	e000ed00 	.word	0xe000ed00

08007108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007108:	b480      	push	{r7}
 800710a:	b089      	sub	sp, #36	@ 0x24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f1c3 0307 	rsb	r3, r3, #7
 8007122:	2b04      	cmp	r3, #4
 8007124:	bf28      	it	cs
 8007126:	2304      	movcs	r3, #4
 8007128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	3304      	adds	r3, #4
 800712e:	2b06      	cmp	r3, #6
 8007130:	d902      	bls.n	8007138 <NVIC_EncodePriority+0x30>
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	3b03      	subs	r3, #3
 8007136:	e000      	b.n	800713a <NVIC_EncodePriority+0x32>
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800713c:	f04f 32ff 	mov.w	r2, #4294967295
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	fa02 f303 	lsl.w	r3, r2, r3
 8007146:	43da      	mvns	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	401a      	ands	r2, r3
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007150:	f04f 31ff 	mov.w	r1, #4294967295
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	fa01 f303 	lsl.w	r3, r1, r3
 800715a:	43d9      	mvns	r1, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007160:	4313      	orrs	r3, r2
         );
}
 8007162:	4618      	mov	r0, r3
 8007164:	3724      	adds	r7, #36	@ 0x24
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3b01      	subs	r3, #1
 800717c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007180:	d301      	bcc.n	8007186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007182:	2301      	movs	r3, #1
 8007184:	e00f      	b.n	80071a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007186:	4a0a      	ldr	r2, [pc, #40]	@ (80071b0 <SysTick_Config+0x40>)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3b01      	subs	r3, #1
 800718c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800718e:	210f      	movs	r1, #15
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	f7ff ff8e 	bl	80070b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007198:	4b05      	ldr	r3, [pc, #20]	@ (80071b0 <SysTick_Config+0x40>)
 800719a:	2200      	movs	r2, #0
 800719c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800719e:	4b04      	ldr	r3, [pc, #16]	@ (80071b0 <SysTick_Config+0x40>)
 80071a0:	2207      	movs	r2, #7
 80071a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	e000e010 	.word	0xe000e010

080071b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff ff29 	bl	8007014 <__NVIC_SetPriorityGrouping>
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b086      	sub	sp, #24
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	4603      	mov	r3, r0
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80071d8:	f7ff ff40 	bl	800705c <__NVIC_GetPriorityGrouping>
 80071dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	6978      	ldr	r0, [r7, #20]
 80071e4:	f7ff ff90 	bl	8007108 <NVIC_EncodePriority>
 80071e8:	4602      	mov	r2, r0
 80071ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ee:	4611      	mov	r1, r2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff ff5f 	bl	80070b4 <__NVIC_SetPriority>
}
 80071f6:	bf00      	nop
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	4603      	mov	r3, r0
 8007206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff ff33 	bl	8007078 <__NVIC_EnableIRQ>
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff ffa4 	bl	8007170 <SysTick_Config>
 8007228:	4603      	mov	r3, r0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e08d      	b.n	8007362 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	4b47      	ldr	r3, [pc, #284]	@ (800736c <HAL_DMA_Init+0x138>)
 800724e:	429a      	cmp	r2, r3
 8007250:	d80f      	bhi.n	8007272 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	4b45      	ldr	r3, [pc, #276]	@ (8007370 <HAL_DMA_Init+0x13c>)
 800725a:	4413      	add	r3, r2
 800725c:	4a45      	ldr	r2, [pc, #276]	@ (8007374 <HAL_DMA_Init+0x140>)
 800725e:	fba2 2303 	umull	r2, r3, r2, r3
 8007262:	091b      	lsrs	r3, r3, #4
 8007264:	009a      	lsls	r2, r3, #2
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a42      	ldr	r2, [pc, #264]	@ (8007378 <HAL_DMA_Init+0x144>)
 800726e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007270:	e00e      	b.n	8007290 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	4b40      	ldr	r3, [pc, #256]	@ (800737c <HAL_DMA_Init+0x148>)
 800727a:	4413      	add	r3, r2
 800727c:	4a3d      	ldr	r2, [pc, #244]	@ (8007374 <HAL_DMA_Init+0x140>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	091b      	lsrs	r3, r3, #4
 8007284:	009a      	lsls	r2, r3, #2
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a3c      	ldr	r2, [pc, #240]	@ (8007380 <HAL_DMA_Init+0x14c>)
 800728e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80072a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80072b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa76 	bl	80077d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072f0:	d102      	bne.n	80072f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007300:	b2d2      	uxtb	r2, r2
 8007302:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800730c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d010      	beq.n	8007338 <HAL_DMA_Init+0x104>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b04      	cmp	r3, #4
 800731c:	d80c      	bhi.n	8007338 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa96 	bl	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007334:	605a      	str	r2, [r3, #4]
 8007336:	e008      	b.n	800734a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	40020407 	.word	0x40020407
 8007370:	bffdfff8 	.word	0xbffdfff8
 8007374:	cccccccd 	.word	0xcccccccd
 8007378:	40020000 	.word	0x40020000
 800737c:	bffdfbf8 	.word	0xbffdfbf8
 8007380:	40020400 	.word	0x40020400

08007384 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_DMA_Start_IT+0x20>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e066      	b.n	8007472 <HAL_DMA_Start_IT+0xee>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d155      	bne.n	8007464 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0201 	bic.w	r2, r2, #1
 80073d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 f9bb 	bl	8007758 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d008      	beq.n	80073fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 020e 	orr.w	r2, r2, #14
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	e00f      	b.n	800741c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0204 	bic.w	r2, r2, #4
 800740a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 020a 	orr.w	r2, r2, #10
 800741a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007434:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007438:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007450:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 0201 	orr.w	r2, r2, #1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e005      	b.n	8007470 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800746c:	2302      	movs	r3, #2
 800746e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d005      	beq.n	800749e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2204      	movs	r2, #4
 8007496:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
 800749c:	e037      	b.n	800750e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 020e 	bic.w	r2, r2, #14
 80074ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0201 	bic.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d2:	f003 021f 	and.w	r2, r3, #31
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074da:	2101      	movs	r1, #1
 80074dc:	fa01 f202 	lsl.w	r2, r1, r2
 80074e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80074ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00c      	beq.n	800750e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007502:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800750c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d00d      	beq.n	8007560 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2204      	movs	r2, #4
 8007548:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	73fb      	strb	r3, [r7, #15]
 800755e:	e047      	b.n	80075f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 020e 	bic.w	r2, r2, #14
 800756e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800758a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800758e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007594:	f003 021f 	and.w	r2, r3, #31
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759c:	2101      	movs	r1, #1
 800759e:	fa01 f202 	lsl.w	r2, r1, r2
 80075a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80075ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00c      	beq.n	80075d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80075ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
    }
  }
  return status;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007616:	f003 031f 	and.w	r3, r3, #31
 800761a:	2204      	movs	r2, #4
 800761c:	409a      	lsls	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4013      	ands	r3, r2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d026      	beq.n	8007674 <HAL_DMA_IRQHandler+0x7a>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d021      	beq.n	8007674 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d107      	bne.n	800764e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0204 	bic.w	r2, r2, #4
 800764c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007652:	f003 021f 	and.w	r2, r3, #31
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765a:	2104      	movs	r1, #4
 800765c:	fa01 f202 	lsl.w	r2, r1, r2
 8007660:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007666:	2b00      	cmp	r3, #0
 8007668:	d071      	beq.n	800774e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007672:	e06c      	b.n	800774e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2202      	movs	r2, #2
 800767e:	409a      	lsls	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4013      	ands	r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02e      	beq.n	80076e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d029      	beq.n	80076e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0320 	and.w	r3, r3, #32
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10b      	bne.n	80076b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 020a 	bic.w	r2, r2, #10
 80076ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076bc:	f003 021f 	and.w	r2, r3, #31
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c4:	2102      	movs	r1, #2
 80076c6:	fa01 f202 	lsl.w	r2, r1, r2
 80076ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d038      	beq.n	800774e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80076e4:	e033      	b.n	800774e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	2208      	movs	r2, #8
 80076f0:	409a      	lsls	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d02a      	beq.n	8007750 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d025      	beq.n	8007750 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 020e 	bic.w	r2, r2, #14
 8007712:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007718:	f003 021f 	and.w	r2, r3, #31
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007720:	2101      	movs	r1, #1
 8007722:	fa01 f202 	lsl.w	r2, r1, r2
 8007726:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007742:	2b00      	cmp	r3, #0
 8007744:	d004      	beq.n	8007750 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800774e:	bf00      	nop
 8007750:	bf00      	nop
}
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800776e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007780:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	f003 021f 	and.w	r2, r3, #31
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778e:	2101      	movs	r1, #1
 8007790:	fa01 f202 	lsl.w	r2, r1, r2
 8007794:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d108      	bne.n	80077b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80077b6:	e007      	b.n	80077c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	60da      	str	r2, [r3, #12]
}
 80077c8:	bf00      	nop
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	461a      	mov	r2, r3
 80077e2:	4b16      	ldr	r3, [pc, #88]	@ (800783c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d802      	bhi.n	80077ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80077e8:	4b15      	ldr	r3, [pc, #84]	@ (8007840 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e001      	b.n	80077f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80077ee:	4b15      	ldr	r3, [pc, #84]	@ (8007844 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80077f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	3b08      	subs	r3, #8
 80077fe:	4a12      	ldr	r2, [pc, #72]	@ (8007848 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007800:	fba2 2303 	umull	r2, r3, r2, r3
 8007804:	091b      	lsrs	r3, r3, #4
 8007806:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780c:	089b      	lsrs	r3, r3, #2
 800780e:	009a      	lsls	r2, r3, #2
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	4413      	add	r3, r2
 8007814:	461a      	mov	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a0b      	ldr	r2, [pc, #44]	@ (800784c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800781e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	2201      	movs	r2, #1
 8007828:	409a      	lsls	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800782e:	bf00      	nop
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	40020407 	.word	0x40020407
 8007840:	40020800 	.word	0x40020800
 8007844:	40020820 	.word	0x40020820
 8007848:	cccccccd 	.word	0xcccccccd
 800784c:	40020880 	.word	0x40020880

08007850 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4b0b      	ldr	r3, [pc, #44]	@ (8007890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	461a      	mov	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a08      	ldr	r2, [pc, #32]	@ (8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007872:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3b01      	subs	r3, #1
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	2201      	movs	r2, #1
 800787e:	409a      	lsls	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	1000823f 	.word	0x1000823f
 8007894:	40020940 	.word	0x40020940

08007898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80078a6:	e15a      	b.n	8007b5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	2101      	movs	r1, #1
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	fa01 f303 	lsl.w	r3, r1, r3
 80078b4:	4013      	ands	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 814c 	beq.w	8007b58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d005      	beq.n	80078d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d130      	bne.n	800793a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	2203      	movs	r2, #3
 80078e4:	fa02 f303 	lsl.w	r3, r2, r3
 80078e8:	43db      	mvns	r3, r3
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4013      	ands	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	fa02 f303 	lsl.w	r3, r2, r3
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800790e:	2201      	movs	r2, #1
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	fa02 f303 	lsl.w	r3, r2, r3
 8007916:	43db      	mvns	r3, r3
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4013      	ands	r3, r2
 800791c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	091b      	lsrs	r3, r3, #4
 8007924:	f003 0201 	and.w	r2, r3, #1
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	4313      	orrs	r3, r2
 8007932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	2b03      	cmp	r3, #3
 8007944:	d017      	beq.n	8007976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	2203      	movs	r2, #3
 8007952:	fa02 f303 	lsl.w	r3, r2, r3
 8007956:	43db      	mvns	r3, r3
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4013      	ands	r3, r2
 800795c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	fa02 f303 	lsl.w	r3, r2, r3
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	4313      	orrs	r3, r2
 800796e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f003 0303 	and.w	r3, r3, #3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d123      	bne.n	80079ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	08da      	lsrs	r2, r3, #3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3208      	adds	r2, #8
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	220f      	movs	r2, #15
 800799a:	fa02 f303 	lsl.w	r3, r2, r3
 800799e:	43db      	mvns	r3, r3
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	4013      	ands	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	691a      	ldr	r2, [r3, #16]
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	08da      	lsrs	r2, r3, #3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3208      	adds	r2, #8
 80079c4:	6939      	ldr	r1, [r7, #16]
 80079c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	2203      	movs	r2, #3
 80079d6:	fa02 f303 	lsl.w	r3, r2, r3
 80079da:	43db      	mvns	r3, r3
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4013      	ands	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f003 0203 	and.w	r2, r3, #3
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 80a6 	beq.w	8007b58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a0c:	4b5b      	ldr	r3, [pc, #364]	@ (8007b7c <HAL_GPIO_Init+0x2e4>)
 8007a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a10:	4a5a      	ldr	r2, [pc, #360]	@ (8007b7c <HAL_GPIO_Init+0x2e4>)
 8007a12:	f043 0301 	orr.w	r3, r3, #1
 8007a16:	6613      	str	r3, [r2, #96]	@ 0x60
 8007a18:	4b58      	ldr	r3, [pc, #352]	@ (8007b7c <HAL_GPIO_Init+0x2e4>)
 8007a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	60bb      	str	r3, [r7, #8]
 8007a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a24:	4a56      	ldr	r2, [pc, #344]	@ (8007b80 <HAL_GPIO_Init+0x2e8>)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	089b      	lsrs	r3, r3, #2
 8007a2a:	3302      	adds	r3, #2
 8007a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	220f      	movs	r2, #15
 8007a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a40:	43db      	mvns	r3, r3
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	4013      	ands	r3, r2
 8007a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007a4e:	d01f      	beq.n	8007a90 <HAL_GPIO_Init+0x1f8>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a4c      	ldr	r2, [pc, #304]	@ (8007b84 <HAL_GPIO_Init+0x2ec>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d019      	beq.n	8007a8c <HAL_GPIO_Init+0x1f4>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a4b      	ldr	r2, [pc, #300]	@ (8007b88 <HAL_GPIO_Init+0x2f0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d013      	beq.n	8007a88 <HAL_GPIO_Init+0x1f0>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a4a      	ldr	r2, [pc, #296]	@ (8007b8c <HAL_GPIO_Init+0x2f4>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d00d      	beq.n	8007a84 <HAL_GPIO_Init+0x1ec>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a49      	ldr	r2, [pc, #292]	@ (8007b90 <HAL_GPIO_Init+0x2f8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d007      	beq.n	8007a80 <HAL_GPIO_Init+0x1e8>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a48      	ldr	r2, [pc, #288]	@ (8007b94 <HAL_GPIO_Init+0x2fc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d101      	bne.n	8007a7c <HAL_GPIO_Init+0x1e4>
 8007a78:	2305      	movs	r3, #5
 8007a7a:	e00a      	b.n	8007a92 <HAL_GPIO_Init+0x1fa>
 8007a7c:	2306      	movs	r3, #6
 8007a7e:	e008      	b.n	8007a92 <HAL_GPIO_Init+0x1fa>
 8007a80:	2304      	movs	r3, #4
 8007a82:	e006      	b.n	8007a92 <HAL_GPIO_Init+0x1fa>
 8007a84:	2303      	movs	r3, #3
 8007a86:	e004      	b.n	8007a92 <HAL_GPIO_Init+0x1fa>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e002      	b.n	8007a92 <HAL_GPIO_Init+0x1fa>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e000      	b.n	8007a92 <HAL_GPIO_Init+0x1fa>
 8007a90:	2300      	movs	r3, #0
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	f002 0203 	and.w	r2, r2, #3
 8007a98:	0092      	lsls	r2, r2, #2
 8007a9a:	4093      	lsls	r3, r2
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007aa2:	4937      	ldr	r1, [pc, #220]	@ (8007b80 <HAL_GPIO_Init+0x2e8>)
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	089b      	lsrs	r3, r3, #2
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ab0:	4b39      	ldr	r3, [pc, #228]	@ (8007b98 <HAL_GPIO_Init+0x300>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4013      	ands	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007ad4:	4a30      	ldr	r2, [pc, #192]	@ (8007b98 <HAL_GPIO_Init+0x300>)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007ada:	4b2f      	ldr	r3, [pc, #188]	@ (8007b98 <HAL_GPIO_Init+0x300>)
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007afe:	4a26      	ldr	r2, [pc, #152]	@ (8007b98 <HAL_GPIO_Init+0x300>)
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007b04:	4b24      	ldr	r3, [pc, #144]	@ (8007b98 <HAL_GPIO_Init+0x300>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4013      	ands	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007b28:	4a1b      	ldr	r2, [pc, #108]	@ (8007b98 <HAL_GPIO_Init+0x300>)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007b98 <HAL_GPIO_Init+0x300>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	43db      	mvns	r3, r3
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b52:	4a11      	ldr	r2, [pc, #68]	@ (8007b98 <HAL_GPIO_Init+0x300>)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f47f ae9d 	bne.w	80078a8 <HAL_GPIO_Init+0x10>
  }
}
 8007b6e:	bf00      	nop
 8007b70:	bf00      	nop
 8007b72:	371c      	adds	r7, #28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	40021000 	.word	0x40021000
 8007b80:	40010000 	.word	0x40010000
 8007b84:	48000400 	.word	0x48000400
 8007b88:	48000800 	.word	0x48000800
 8007b8c:	48000c00 	.word	0x48000c00
 8007b90:	48001000 	.word	0x48001000
 8007b94:	48001400 	.word	0x48001400
 8007b98:	40010400 	.word	0x40010400

08007b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	887b      	ldrh	r3, [r7, #2]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	73fb      	strb	r3, [r7, #15]
 8007bb8:	e001      	b.n	8007bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	807b      	strh	r3, [r7, #2]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007bdc:	787b      	ldrb	r3, [r7, #1]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007be2:	887a      	ldrh	r2, [r7, #2]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007be8:	e002      	b.n	8007bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007bea:	887a      	ldrh	r2, [r7, #2]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c0e:	887a      	ldrh	r2, [r7, #2]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4013      	ands	r3, r2
 8007c14:	041a      	lsls	r2, r3, #16
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	43d9      	mvns	r1, r3
 8007c1a:	887b      	ldrh	r3, [r7, #2]
 8007c1c:	400b      	ands	r3, r1
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	619a      	str	r2, [r3, #24]
}
 8007c24:	bf00      	nop
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c3a:	4b08      	ldr	r3, [pc, #32]	@ (8007c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c3c:	695a      	ldr	r2, [r3, #20]
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	4013      	ands	r3, r2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d006      	beq.n	8007c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c46:	4a05      	ldr	r2, [pc, #20]	@ (8007c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c48:	88fb      	ldrh	r3, [r7, #6]
 8007c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c4c:	88fb      	ldrh	r3, [r7, #6]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7f9 fdf2 	bl	8001838 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40010400 	.word	0x40010400

08007c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d141      	bne.n	8007cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c7a:	d131      	bne.n	8007ce0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c7c:	4b47      	ldr	r3, [pc, #284]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c82:	4a46      	ldr	r2, [pc, #280]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c8c:	4b43      	ldr	r3, [pc, #268]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c94:	4a41      	ldr	r2, [pc, #260]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c9c:	4b40      	ldr	r3, [pc, #256]	@ (8007da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2232      	movs	r2, #50	@ 0x32
 8007ca2:	fb02 f303 	mul.w	r3, r2, r3
 8007ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8007da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cac:	0c9b      	lsrs	r3, r3, #18
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cb2:	e002      	b.n	8007cba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cba:	4b38      	ldr	r3, [pc, #224]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cc6:	d102      	bne.n	8007cce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1f2      	bne.n	8007cb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007cce:	4b33      	ldr	r3, [pc, #204]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cda:	d158      	bne.n	8007d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e057      	b.n	8007d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007cf0:	e04d      	b.n	8007d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cf8:	d141      	bne.n	8007d7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007cfa:	4b28      	ldr	r3, [pc, #160]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d06:	d131      	bne.n	8007d6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d08:	4b24      	ldr	r3, [pc, #144]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0e:	4a23      	ldr	r2, [pc, #140]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d18:	4b20      	ldr	r3, [pc, #128]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007d20:	4a1e      	ldr	r2, [pc, #120]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d28:	4b1d      	ldr	r3, [pc, #116]	@ (8007da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2232      	movs	r2, #50	@ 0x32
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
 8007d32:	4a1c      	ldr	r2, [pc, #112]	@ (8007da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d34:	fba2 2303 	umull	r2, r3, r2, r3
 8007d38:	0c9b      	lsrs	r3, r3, #18
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d3e:	e002      	b.n	8007d46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d46:	4b15      	ldr	r3, [pc, #84]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d52:	d102      	bne.n	8007d5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f2      	bne.n	8007d40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d5a:	4b10      	ldr	r3, [pc, #64]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d66:	d112      	bne.n	8007d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e011      	b.n	8007d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d72:	4a0a      	ldr	r2, [pc, #40]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007d7c:	e007      	b.n	8007d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007d7e:	4b07      	ldr	r3, [pc, #28]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007d86:	4a05      	ldr	r2, [pc, #20]	@ (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	40007000 	.word	0x40007000
 8007da0:	20000008 	.word	0x20000008
 8007da4:	431bde83 	.word	0x431bde83

08007da8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007dac:	4b05      	ldr	r3, [pc, #20]	@ (8007dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	4a04      	ldr	r2, [pc, #16]	@ (8007dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007db2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007db6:	6093      	str	r3, [r2, #8]
}
 8007db8:	bf00      	nop
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	40007000 	.word	0x40007000

08007dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b088      	sub	sp, #32
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e2fe      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d075      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007de6:	4b97      	ldr	r3, [pc, #604]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 030c 	and.w	r3, r3, #12
 8007dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007df0:	4b94      	ldr	r3, [pc, #592]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0303 	and.w	r3, r3, #3
 8007df8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b0c      	cmp	r3, #12
 8007dfe:	d102      	bne.n	8007e06 <HAL_RCC_OscConfig+0x3e>
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d002      	beq.n	8007e0c <HAL_RCC_OscConfig+0x44>
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d10b      	bne.n	8007e24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e0c:	4b8d      	ldr	r3, [pc, #564]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d05b      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x108>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d157      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e2d9      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e2c:	d106      	bne.n	8007e3c <HAL_RCC_OscConfig+0x74>
 8007e2e:	4b85      	ldr	r3, [pc, #532]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a84      	ldr	r2, [pc, #528]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	e01d      	b.n	8007e78 <HAL_RCC_OscConfig+0xb0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e44:	d10c      	bne.n	8007e60 <HAL_RCC_OscConfig+0x98>
 8007e46:	4b7f      	ldr	r3, [pc, #508]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	4b7c      	ldr	r3, [pc, #496]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a7b      	ldr	r2, [pc, #492]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	e00b      	b.n	8007e78 <HAL_RCC_OscConfig+0xb0>
 8007e60:	4b78      	ldr	r3, [pc, #480]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a77      	ldr	r2, [pc, #476]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	4b75      	ldr	r3, [pc, #468]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a74      	ldr	r2, [pc, #464]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d013      	beq.n	8007ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e80:	f7fd fb6a 	bl	8005558 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e88:	f7fd fb66 	bl	8005558 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b64      	cmp	r3, #100	@ 0x64
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e29e      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0f0      	beq.n	8007e88 <HAL_RCC_OscConfig+0xc0>
 8007ea6:	e014      	b.n	8007ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea8:	f7fd fb56 	bl	8005558 <HAL_GetTick>
 8007eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007eae:	e008      	b.n	8007ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eb0:	f7fd fb52 	bl	8005558 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b64      	cmp	r3, #100	@ 0x64
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e28a      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ec2:	4b60      	ldr	r3, [pc, #384]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f0      	bne.n	8007eb0 <HAL_RCC_OscConfig+0xe8>
 8007ece:	e000      	b.n	8007ed2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d075      	beq.n	8007fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ede:	4b59      	ldr	r3, [pc, #356]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f003 030c 	and.w	r3, r3, #12
 8007ee6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ee8:	4b56      	ldr	r3, [pc, #344]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	f003 0303 	and.w	r3, r3, #3
 8007ef0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b0c      	cmp	r3, #12
 8007ef6:	d102      	bne.n	8007efe <HAL_RCC_OscConfig+0x136>
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d002      	beq.n	8007f04 <HAL_RCC_OscConfig+0x13c>
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d11f      	bne.n	8007f44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f04:	4b4f      	ldr	r3, [pc, #316]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_RCC_OscConfig+0x154>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e25d      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1c:	4b49      	ldr	r3, [pc, #292]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	061b      	lsls	r3, r3, #24
 8007f2a:	4946      	ldr	r1, [pc, #280]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f30:	4b45      	ldr	r3, [pc, #276]	@ (8008048 <HAL_RCC_OscConfig+0x280>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fd fac3 	bl	80054c0 <HAL_InitTick>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d043      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e249      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d023      	beq.n	8007f94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a3c      	ldr	r2, [pc, #240]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f58:	f7fd fafe 	bl	8005558 <HAL_GetTick>
 8007f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f60:	f7fd fafa 	bl	8005558 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e232      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f72:	4b34      	ldr	r3, [pc, #208]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0f0      	beq.n	8007f60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f7e:	4b31      	ldr	r3, [pc, #196]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	061b      	lsls	r3, r3, #24
 8007f8c:	492d      	ldr	r1, [pc, #180]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	604b      	str	r3, [r1, #4]
 8007f92:	e01a      	b.n	8007fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f94:	4b2b      	ldr	r3, [pc, #172]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a2a      	ldr	r2, [pc, #168]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007f9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa0:	f7fd fada 	bl	8005558 <HAL_GetTick>
 8007fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fa6:	e008      	b.n	8007fba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fa8:	f7fd fad6 	bl	8005558 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e20e      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fba:	4b22      	ldr	r3, [pc, #136]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f0      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x1e0>
 8007fc6:	e000      	b.n	8007fca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d041      	beq.n	800805a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d01c      	beq.n	8008018 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fde:	4b19      	ldr	r3, [pc, #100]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fe4:	4a17      	ldr	r2, [pc, #92]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8007fe6:	f043 0301 	orr.w	r3, r3, #1
 8007fea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fee:	f7fd fab3 	bl	8005558 <HAL_GetTick>
 8007ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ff4:	e008      	b.n	8008008 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ff6:	f7fd faaf 	bl	8005558 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d901      	bls.n	8008008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e1e7      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008008:	4b0e      	ldr	r3, [pc, #56]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 800800a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0ef      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x22e>
 8008016:	e020      	b.n	800805a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008018:	4b0a      	ldr	r3, [pc, #40]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 800801a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800801e:	4a09      	ldr	r2, [pc, #36]	@ (8008044 <HAL_RCC_OscConfig+0x27c>)
 8008020:	f023 0301 	bic.w	r3, r3, #1
 8008024:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008028:	f7fd fa96 	bl	8005558 <HAL_GetTick>
 800802c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800802e:	e00d      	b.n	800804c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008030:	f7fd fa92 	bl	8005558 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d906      	bls.n	800804c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e1ca      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
 8008042:	bf00      	nop
 8008044:	40021000 	.word	0x40021000
 8008048:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800804c:	4b8c      	ldr	r3, [pc, #560]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 800804e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1ea      	bne.n	8008030 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0304 	and.w	r3, r3, #4
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 80a6 	beq.w	80081b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008068:	2300      	movs	r3, #0
 800806a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800806c:	4b84      	ldr	r3, [pc, #528]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 800806e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <HAL_RCC_OscConfig+0x2b4>
 8008078:	2301      	movs	r3, #1
 800807a:	e000      	b.n	800807e <HAL_RCC_OscConfig+0x2b6>
 800807c:	2300      	movs	r3, #0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00d      	beq.n	800809e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008082:	4b7f      	ldr	r3, [pc, #508]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008086:	4a7e      	ldr	r2, [pc, #504]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800808c:	6593      	str	r3, [r2, #88]	@ 0x58
 800808e:	4b7c      	ldr	r3, [pc, #496]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800809a:	2301      	movs	r3, #1
 800809c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800809e:	4b79      	ldr	r3, [pc, #484]	@ (8008284 <HAL_RCC_OscConfig+0x4bc>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d118      	bne.n	80080dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080aa:	4b76      	ldr	r3, [pc, #472]	@ (8008284 <HAL_RCC_OscConfig+0x4bc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a75      	ldr	r2, [pc, #468]	@ (8008284 <HAL_RCC_OscConfig+0x4bc>)
 80080b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080b6:	f7fd fa4f 	bl	8005558 <HAL_GetTick>
 80080ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080bc:	e008      	b.n	80080d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080be:	f7fd fa4b 	bl	8005558 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e183      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080d0:	4b6c      	ldr	r3, [pc, #432]	@ (8008284 <HAL_RCC_OscConfig+0x4bc>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0f0      	beq.n	80080be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d108      	bne.n	80080f6 <HAL_RCC_OscConfig+0x32e>
 80080e4:	4b66      	ldr	r3, [pc, #408]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 80080e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ea:	4a65      	ldr	r2, [pc, #404]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 80080ec:	f043 0301 	orr.w	r3, r3, #1
 80080f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080f4:	e024      	b.n	8008140 <HAL_RCC_OscConfig+0x378>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	d110      	bne.n	8008120 <HAL_RCC_OscConfig+0x358>
 80080fe:	4b60      	ldr	r3, [pc, #384]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008104:	4a5e      	ldr	r2, [pc, #376]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008106:	f043 0304 	orr.w	r3, r3, #4
 800810a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800810e:	4b5c      	ldr	r3, [pc, #368]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008114:	4a5a      	ldr	r2, [pc, #360]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008116:	f043 0301 	orr.w	r3, r3, #1
 800811a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800811e:	e00f      	b.n	8008140 <HAL_RCC_OscConfig+0x378>
 8008120:	4b57      	ldr	r3, [pc, #348]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008126:	4a56      	ldr	r2, [pc, #344]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008128:	f023 0301 	bic.w	r3, r3, #1
 800812c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008130:	4b53      	ldr	r3, [pc, #332]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008136:	4a52      	ldr	r2, [pc, #328]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008138:	f023 0304 	bic.w	r3, r3, #4
 800813c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d016      	beq.n	8008176 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008148:	f7fd fa06 	bl	8005558 <HAL_GetTick>
 800814c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800814e:	e00a      	b.n	8008166 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008150:	f7fd fa02 	bl	8005558 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800815e:	4293      	cmp	r3, r2
 8008160:	d901      	bls.n	8008166 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e138      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008166:	4b46      	ldr	r3, [pc, #280]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0ed      	beq.n	8008150 <HAL_RCC_OscConfig+0x388>
 8008174:	e015      	b.n	80081a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008176:	f7fd f9ef 	bl	8005558 <HAL_GetTick>
 800817a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800817c:	e00a      	b.n	8008194 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800817e:	f7fd f9eb 	bl	8005558 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800818c:	4293      	cmp	r3, r2
 800818e:	d901      	bls.n	8008194 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e121      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008194:	4b3a      	ldr	r3, [pc, #232]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1ed      	bne.n	800817e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081a2:	7ffb      	ldrb	r3, [r7, #31]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d105      	bne.n	80081b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081a8:	4b35      	ldr	r3, [pc, #212]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 80081aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ac:	4a34      	ldr	r2, [pc, #208]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 80081ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d03c      	beq.n	800823a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01c      	beq.n	8008202 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 80081ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 80081d0:	f043 0301 	orr.w	r3, r3, #1
 80081d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d8:	f7fd f9be 	bl	8005558 <HAL_GetTick>
 80081dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80081de:	e008      	b.n	80081f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081e0:	f7fd f9ba 	bl	8005558 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d901      	bls.n	80081f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e0f2      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80081f2:	4b23      	ldr	r3, [pc, #140]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 80081f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0ef      	beq.n	80081e0 <HAL_RCC_OscConfig+0x418>
 8008200:	e01b      	b.n	800823a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008202:	4b1f      	ldr	r3, [pc, #124]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008208:	4a1d      	ldr	r2, [pc, #116]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 800820a:	f023 0301 	bic.w	r3, r3, #1
 800820e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008212:	f7fd f9a1 	bl	8005558 <HAL_GetTick>
 8008216:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008218:	e008      	b.n	800822c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800821a:	f7fd f99d 	bl	8005558 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e0d5      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800822c:	4b14      	ldr	r3, [pc, #80]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 800822e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1ef      	bne.n	800821a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 80c9 	beq.w	80083d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008244:	4b0e      	ldr	r3, [pc, #56]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f003 030c 	and.w	r3, r3, #12
 800824c:	2b0c      	cmp	r3, #12
 800824e:	f000 8083 	beq.w	8008358 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d15e      	bne.n	8008318 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800825a:	4b09      	ldr	r3, [pc, #36]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a08      	ldr	r2, [pc, #32]	@ (8008280 <HAL_RCC_OscConfig+0x4b8>)
 8008260:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008266:	f7fd f977 	bl	8005558 <HAL_GetTick>
 800826a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800826c:	e00c      	b.n	8008288 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800826e:	f7fd f973 	bl	8005558 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d905      	bls.n	8008288 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e0ab      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
 8008280:	40021000 	.word	0x40021000
 8008284:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008288:	4b55      	ldr	r3, [pc, #340]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1ec      	bne.n	800826e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008294:	4b52      	ldr	r3, [pc, #328]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	4b52      	ldr	r3, [pc, #328]	@ (80083e4 <HAL_RCC_OscConfig+0x61c>)
 800829a:	4013      	ands	r3, r2
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	6a11      	ldr	r1, [r2, #32]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80082a4:	3a01      	subs	r2, #1
 80082a6:	0112      	lsls	r2, r2, #4
 80082a8:	4311      	orrs	r1, r2
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80082ae:	0212      	lsls	r2, r2, #8
 80082b0:	4311      	orrs	r1, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80082b6:	0852      	lsrs	r2, r2, #1
 80082b8:	3a01      	subs	r2, #1
 80082ba:	0552      	lsls	r2, r2, #21
 80082bc:	4311      	orrs	r1, r2
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80082c2:	0852      	lsrs	r2, r2, #1
 80082c4:	3a01      	subs	r2, #1
 80082c6:	0652      	lsls	r2, r2, #25
 80082c8:	4311      	orrs	r1, r2
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80082ce:	06d2      	lsls	r2, r2, #27
 80082d0:	430a      	orrs	r2, r1
 80082d2:	4943      	ldr	r1, [pc, #268]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082d8:	4b41      	ldr	r3, [pc, #260]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a40      	ldr	r2, [pc, #256]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 80082de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80082e4:	4b3e      	ldr	r3, [pc, #248]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	4a3d      	ldr	r2, [pc, #244]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 80082ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f0:	f7fd f932 	bl	8005558 <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082f6:	e008      	b.n	800830a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082f8:	f7fd f92e 	bl	8005558 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e066      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800830a:	4b35      	ldr	r3, [pc, #212]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0f0      	beq.n	80082f8 <HAL_RCC_OscConfig+0x530>
 8008316:	e05e      	b.n	80083d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008318:	4b31      	ldr	r3, [pc, #196]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a30      	ldr	r2, [pc, #192]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 800831e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008324:	f7fd f918 	bl	8005558 <HAL_GetTick>
 8008328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800832a:	e008      	b.n	800833e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800832c:	f7fd f914 	bl	8005558 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b02      	cmp	r3, #2
 8008338:	d901      	bls.n	800833e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e04c      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800833e:	4b28      	ldr	r3, [pc, #160]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f0      	bne.n	800832c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800834a:	4b25      	ldr	r3, [pc, #148]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	4924      	ldr	r1, [pc, #144]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 8008350:	4b25      	ldr	r3, [pc, #148]	@ (80083e8 <HAL_RCC_OscConfig+0x620>)
 8008352:	4013      	ands	r3, r2
 8008354:	60cb      	str	r3, [r1, #12]
 8008356:	e03e      	b.n	80083d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d101      	bne.n	8008364 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e039      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008364:	4b1e      	ldr	r3, [pc, #120]	@ (80083e0 <HAL_RCC_OscConfig+0x618>)
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f003 0203 	and.w	r2, r3, #3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	429a      	cmp	r2, r3
 8008376:	d12c      	bne.n	80083d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008382:	3b01      	subs	r3, #1
 8008384:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008386:	429a      	cmp	r2, r3
 8008388:	d123      	bne.n	80083d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008394:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008396:	429a      	cmp	r2, r3
 8008398:	d11b      	bne.n	80083d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d113      	bne.n	80083d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	3b01      	subs	r3, #1
 80083b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d109      	bne.n	80083d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c8:	085b      	lsrs	r3, r3, #1
 80083ca:	3b01      	subs	r3, #1
 80083cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d001      	beq.n	80083d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e000      	b.n	80083d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3720      	adds	r7, #32
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	40021000 	.word	0x40021000
 80083e4:	019f800c 	.word	0x019f800c
 80083e8:	feeefffc 	.word	0xfeeefffc

080083ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80083f6:	2300      	movs	r3, #0
 80083f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e11e      	b.n	8008642 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008404:	4b91      	ldr	r3, [pc, #580]	@ (800864c <HAL_RCC_ClockConfig+0x260>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 030f 	and.w	r3, r3, #15
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d910      	bls.n	8008434 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008412:	4b8e      	ldr	r3, [pc, #568]	@ (800864c <HAL_RCC_ClockConfig+0x260>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f023 020f 	bic.w	r2, r3, #15
 800841a:	498c      	ldr	r1, [pc, #560]	@ (800864c <HAL_RCC_ClockConfig+0x260>)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	4313      	orrs	r3, r2
 8008420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008422:	4b8a      	ldr	r3, [pc, #552]	@ (800864c <HAL_RCC_ClockConfig+0x260>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 030f 	and.w	r3, r3, #15
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	429a      	cmp	r2, r3
 800842e:	d001      	beq.n	8008434 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e106      	b.n	8008642 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d073      	beq.n	8008528 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	2b03      	cmp	r3, #3
 8008446:	d129      	bne.n	800849c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008448:	4b81      	ldr	r3, [pc, #516]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e0f4      	b.n	8008642 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008458:	f000 f99e 	bl	8008798 <RCC_GetSysClockFreqFromPLLSource>
 800845c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	4a7c      	ldr	r2, [pc, #496]	@ (8008654 <HAL_RCC_ClockConfig+0x268>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d93f      	bls.n	80084e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008466:	4b7a      	ldr	r3, [pc, #488]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d009      	beq.n	8008486 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800847a:	2b00      	cmp	r3, #0
 800847c:	d033      	beq.n	80084e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008482:	2b00      	cmp	r3, #0
 8008484:	d12f      	bne.n	80084e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008486:	4b72      	ldr	r3, [pc, #456]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800848e:	4a70      	ldr	r2, [pc, #448]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008494:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008496:	2380      	movs	r3, #128	@ 0x80
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	e024      	b.n	80084e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d107      	bne.n	80084b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d109      	bne.n	80084c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e0c6      	b.n	8008642 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084b4:	4b66      	ldr	r3, [pc, #408]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e0be      	b.n	8008642 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80084c4:	f000 f8ce 	bl	8008664 <HAL_RCC_GetSysClockFreq>
 80084c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	4a61      	ldr	r2, [pc, #388]	@ (8008654 <HAL_RCC_ClockConfig+0x268>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d909      	bls.n	80084e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80084d2:	4b5f      	ldr	r3, [pc, #380]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084da:	4a5d      	ldr	r2, [pc, #372]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 80084dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80084e2:	2380      	movs	r3, #128	@ 0x80
 80084e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084e6:	4b5a      	ldr	r3, [pc, #360]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f023 0203 	bic.w	r2, r3, #3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	4957      	ldr	r1, [pc, #348]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084f8:	f7fd f82e 	bl	8005558 <HAL_GetTick>
 80084fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084fe:	e00a      	b.n	8008516 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008500:	f7fd f82a 	bl	8005558 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800850e:	4293      	cmp	r3, r2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e095      	b.n	8008642 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008516:	4b4e      	ldr	r3, [pc, #312]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f003 020c 	and.w	r2, r3, #12
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	429a      	cmp	r2, r3
 8008526:	d1eb      	bne.n	8008500 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d023      	beq.n	800857c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008540:	4b43      	ldr	r3, [pc, #268]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	4a42      	ldr	r2, [pc, #264]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008546:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800854a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0308 	and.w	r3, r3, #8
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008558:	4b3d      	ldr	r3, [pc, #244]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008560:	4a3b      	ldr	r2, [pc, #236]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008562:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008568:	4b39      	ldr	r3, [pc, #228]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	4936      	ldr	r1, [pc, #216]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008576:	4313      	orrs	r3, r2
 8008578:	608b      	str	r3, [r1, #8]
 800857a:	e008      	b.n	800858e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2b80      	cmp	r3, #128	@ 0x80
 8008580:	d105      	bne.n	800858e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008582:	4b33      	ldr	r3, [pc, #204]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	4a32      	ldr	r2, [pc, #200]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008588:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800858c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800858e:	4b2f      	ldr	r3, [pc, #188]	@ (800864c <HAL_RCC_ClockConfig+0x260>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 030f 	and.w	r3, r3, #15
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d21d      	bcs.n	80085d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859c:	4b2b      	ldr	r3, [pc, #172]	@ (800864c <HAL_RCC_ClockConfig+0x260>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f023 020f 	bic.w	r2, r3, #15
 80085a4:	4929      	ldr	r1, [pc, #164]	@ (800864c <HAL_RCC_ClockConfig+0x260>)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80085ac:	f7fc ffd4 	bl	8005558 <HAL_GetTick>
 80085b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085b2:	e00a      	b.n	80085ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085b4:	f7fc ffd0 	bl	8005558 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e03b      	b.n	8008642 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ca:	4b20      	ldr	r3, [pc, #128]	@ (800864c <HAL_RCC_ClockConfig+0x260>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d1ed      	bne.n	80085b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d008      	beq.n	80085f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	4917      	ldr	r1, [pc, #92]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0308 	and.w	r3, r3, #8
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008602:	4b13      	ldr	r3, [pc, #76]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	490f      	ldr	r1, [pc, #60]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 8008612:	4313      	orrs	r3, r2
 8008614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008616:	f000 f825 	bl	8008664 <HAL_RCC_GetSysClockFreq>
 800861a:	4602      	mov	r2, r0
 800861c:	4b0c      	ldr	r3, [pc, #48]	@ (8008650 <HAL_RCC_ClockConfig+0x264>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	091b      	lsrs	r3, r3, #4
 8008622:	f003 030f 	and.w	r3, r3, #15
 8008626:	490c      	ldr	r1, [pc, #48]	@ (8008658 <HAL_RCC_ClockConfig+0x26c>)
 8008628:	5ccb      	ldrb	r3, [r1, r3]
 800862a:	f003 031f 	and.w	r3, r3, #31
 800862e:	fa22 f303 	lsr.w	r3, r2, r3
 8008632:	4a0a      	ldr	r2, [pc, #40]	@ (800865c <HAL_RCC_ClockConfig+0x270>)
 8008634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008636:	4b0a      	ldr	r3, [pc, #40]	@ (8008660 <HAL_RCC_ClockConfig+0x274>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f7fc ff40 	bl	80054c0 <HAL_InitTick>
 8008640:	4603      	mov	r3, r0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40022000 	.word	0x40022000
 8008650:	40021000 	.word	0x40021000
 8008654:	04c4b400 	.word	0x04c4b400
 8008658:	0801054c 	.word	0x0801054c
 800865c:	20000008 	.word	0x20000008
 8008660:	2000000c 	.word	0x2000000c

08008664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800866a:	4b2c      	ldr	r3, [pc, #176]	@ (800871c <HAL_RCC_GetSysClockFreq+0xb8>)
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f003 030c 	and.w	r3, r3, #12
 8008672:	2b04      	cmp	r3, #4
 8008674:	d102      	bne.n	800867c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008676:	4b2a      	ldr	r3, [pc, #168]	@ (8008720 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008678:	613b      	str	r3, [r7, #16]
 800867a:	e047      	b.n	800870c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800867c:	4b27      	ldr	r3, [pc, #156]	@ (800871c <HAL_RCC_GetSysClockFreq+0xb8>)
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f003 030c 	and.w	r3, r3, #12
 8008684:	2b08      	cmp	r3, #8
 8008686:	d102      	bne.n	800868e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008688:	4b26      	ldr	r3, [pc, #152]	@ (8008724 <HAL_RCC_GetSysClockFreq+0xc0>)
 800868a:	613b      	str	r3, [r7, #16]
 800868c:	e03e      	b.n	800870c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800868e:	4b23      	ldr	r3, [pc, #140]	@ (800871c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f003 030c 	and.w	r3, r3, #12
 8008696:	2b0c      	cmp	r3, #12
 8008698:	d136      	bne.n	8008708 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800869a:	4b20      	ldr	r3, [pc, #128]	@ (800871c <HAL_RCC_GetSysClockFreq+0xb8>)
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086a4:	4b1d      	ldr	r3, [pc, #116]	@ (800871c <HAL_RCC_GetSysClockFreq+0xb8>)
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	091b      	lsrs	r3, r3, #4
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	3301      	adds	r3, #1
 80086b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d10c      	bne.n	80086d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c0:	4a16      	ldr	r2, [pc, #88]	@ (800871c <HAL_RCC_GetSysClockFreq+0xb8>)
 80086c2:	68d2      	ldr	r2, [r2, #12]
 80086c4:	0a12      	lsrs	r2, r2, #8
 80086c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086ca:	fb02 f303 	mul.w	r3, r2, r3
 80086ce:	617b      	str	r3, [r7, #20]
      break;
 80086d0:	e00c      	b.n	80086ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086d2:	4a13      	ldr	r2, [pc, #76]	@ (8008720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086da:	4a10      	ldr	r2, [pc, #64]	@ (800871c <HAL_RCC_GetSysClockFreq+0xb8>)
 80086dc:	68d2      	ldr	r2, [r2, #12]
 80086de:	0a12      	lsrs	r2, r2, #8
 80086e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086e4:	fb02 f303 	mul.w	r3, r2, r3
 80086e8:	617b      	str	r3, [r7, #20]
      break;
 80086ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80086ec:	4b0b      	ldr	r3, [pc, #44]	@ (800871c <HAL_RCC_GetSysClockFreq+0xb8>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	0e5b      	lsrs	r3, r3, #25
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	3301      	adds	r3, #1
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	fbb2 f3f3 	udiv	r3, r2, r3
 8008704:	613b      	str	r3, [r7, #16]
 8008706:	e001      	b.n	800870c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800870c:	693b      	ldr	r3, [r7, #16]
}
 800870e:	4618      	mov	r0, r3
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40021000 	.word	0x40021000
 8008720:	00f42400 	.word	0x00f42400
 8008724:	02dc6c00 	.word	0x02dc6c00

08008728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800872c:	4b03      	ldr	r3, [pc, #12]	@ (800873c <HAL_RCC_GetHCLKFreq+0x14>)
 800872e:	681b      	ldr	r3, [r3, #0]
}
 8008730:	4618      	mov	r0, r3
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20000008 	.word	0x20000008

08008740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008744:	f7ff fff0 	bl	8008728 <HAL_RCC_GetHCLKFreq>
 8008748:	4602      	mov	r2, r0
 800874a:	4b06      	ldr	r3, [pc, #24]	@ (8008764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	0a1b      	lsrs	r3, r3, #8
 8008750:	f003 0307 	and.w	r3, r3, #7
 8008754:	4904      	ldr	r1, [pc, #16]	@ (8008768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008756:	5ccb      	ldrb	r3, [r1, r3]
 8008758:	f003 031f 	and.w	r3, r3, #31
 800875c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008760:	4618      	mov	r0, r3
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40021000 	.word	0x40021000
 8008768:	0801055c 	.word	0x0801055c

0800876c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008770:	f7ff ffda 	bl	8008728 <HAL_RCC_GetHCLKFreq>
 8008774:	4602      	mov	r2, r0
 8008776:	4b06      	ldr	r3, [pc, #24]	@ (8008790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	0adb      	lsrs	r3, r3, #11
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	4904      	ldr	r1, [pc, #16]	@ (8008794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008782:	5ccb      	ldrb	r3, [r1, r3]
 8008784:	f003 031f 	and.w	r3, r3, #31
 8008788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800878c:	4618      	mov	r0, r3
 800878e:	bd80      	pop	{r7, pc}
 8008790:	40021000 	.word	0x40021000
 8008794:	0801055c 	.word	0x0801055c

08008798 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800879e:	4b1e      	ldr	r3, [pc, #120]	@ (8008818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	091b      	lsrs	r3, r3, #4
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	3301      	adds	r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d10c      	bne.n	80087d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087bc:	4a17      	ldr	r2, [pc, #92]	@ (800881c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c4:	4a14      	ldr	r2, [pc, #80]	@ (8008818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087c6:	68d2      	ldr	r2, [r2, #12]
 80087c8:	0a12      	lsrs	r2, r2, #8
 80087ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80087ce:	fb02 f303 	mul.w	r3, r2, r3
 80087d2:	617b      	str	r3, [r7, #20]
    break;
 80087d4:	e00c      	b.n	80087f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087d6:	4a12      	ldr	r2, [pc, #72]	@ (8008820 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	fbb2 f3f3 	udiv	r3, r2, r3
 80087de:	4a0e      	ldr	r2, [pc, #56]	@ (8008818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087e0:	68d2      	ldr	r2, [r2, #12]
 80087e2:	0a12      	lsrs	r2, r2, #8
 80087e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80087e8:	fb02 f303 	mul.w	r3, r2, r3
 80087ec:	617b      	str	r3, [r7, #20]
    break;
 80087ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087f0:	4b09      	ldr	r3, [pc, #36]	@ (8008818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	0e5b      	lsrs	r3, r3, #25
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	3301      	adds	r3, #1
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	fbb2 f3f3 	udiv	r3, r2, r3
 8008808:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800880a:	687b      	ldr	r3, [r7, #4]
}
 800880c:	4618      	mov	r0, r3
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	40021000 	.word	0x40021000
 800881c:	02dc6c00 	.word	0x02dc6c00
 8008820:	00f42400 	.word	0x00f42400

08008824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800882c:	2300      	movs	r3, #0
 800882e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008830:	2300      	movs	r3, #0
 8008832:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 8098 	beq.w	8008972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008842:	2300      	movs	r3, #0
 8008844:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008846:	4b43      	ldr	r3, [pc, #268]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800884a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10d      	bne.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008852:	4b40      	ldr	r3, [pc, #256]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008856:	4a3f      	ldr	r2, [pc, #252]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800885c:	6593      	str	r3, [r2, #88]	@ 0x58
 800885e:	4b3d      	ldr	r3, [pc, #244]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008866:	60bb      	str	r3, [r7, #8]
 8008868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800886a:	2301      	movs	r3, #1
 800886c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800886e:	4b3a      	ldr	r3, [pc, #232]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a39      	ldr	r2, [pc, #228]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008878:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800887a:	f7fc fe6d 	bl	8005558 <HAL_GetTick>
 800887e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008880:	e009      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008882:	f7fc fe69 	bl	8005558 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b02      	cmp	r3, #2
 800888e:	d902      	bls.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	74fb      	strb	r3, [r7, #19]
        break;
 8008894:	e005      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008896:	4b30      	ldr	r3, [pc, #192]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0ef      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80088a2:	7cfb      	ldrb	r3, [r7, #19]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d159      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80088a8:	4b2a      	ldr	r3, [pc, #168]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d01e      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d019      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088c4:	4b23      	ldr	r3, [pc, #140]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088d0:	4b20      	ldr	r3, [pc, #128]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088f0:	4a18      	ldr	r2, [pc, #96]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d016      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008902:	f7fc fe29 	bl	8005558 <HAL_GetTick>
 8008906:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008908:	e00b      	b.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800890a:	f7fc fe25 	bl	8005558 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008918:	4293      	cmp	r3, r2
 800891a:	d902      	bls.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	74fb      	strb	r3, [r7, #19]
            break;
 8008920:	e006      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008922:	4b0c      	ldr	r3, [pc, #48]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0ec      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008930:	7cfb      	ldrb	r3, [r7, #19]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008936:	4b07      	ldr	r3, [pc, #28]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800893c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008944:	4903      	ldr	r1, [pc, #12]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008946:	4313      	orrs	r3, r2
 8008948:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800894c:	e008      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800894e:	7cfb      	ldrb	r3, [r7, #19]
 8008950:	74bb      	strb	r3, [r7, #18]
 8008952:	e005      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008954:	40021000 	.word	0x40021000
 8008958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895c:	7cfb      	ldrb	r3, [r7, #19]
 800895e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008960:	7c7b      	ldrb	r3, [r7, #17]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d105      	bne.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008966:	4ba7      	ldr	r3, [pc, #668]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896a:	4aa6      	ldr	r2, [pc, #664]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800896c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008970:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800897e:	4ba1      	ldr	r3, [pc, #644]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008984:	f023 0203 	bic.w	r2, r3, #3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	499d      	ldr	r1, [pc, #628]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800898e:	4313      	orrs	r3, r2
 8008990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00a      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80089a0:	4b98      	ldr	r3, [pc, #608]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a6:	f023 020c 	bic.w	r2, r3, #12
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	4995      	ldr	r1, [pc, #596]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0304 	and.w	r3, r3, #4
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80089c2:	4b90      	ldr	r3, [pc, #576]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	498c      	ldr	r1, [pc, #560]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00a      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80089e4:	4b87      	ldr	r3, [pc, #540]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	4984      	ldr	r1, [pc, #528]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008a06:	4b7f      	ldr	r3, [pc, #508]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	497b      	ldr	r1, [pc, #492]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0320 	and.w	r3, r3, #32
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00a      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a28:	4b76      	ldr	r3, [pc, #472]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	4973      	ldr	r1, [pc, #460]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a50:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	496a      	ldr	r1, [pc, #424]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a6c:	4b65      	ldr	r3, [pc, #404]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a72:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	4962      	ldr	r1, [pc, #392]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9c:	4959      	ldr	r1, [pc, #356]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ab0:	4b54      	ldr	r3, [pc, #336]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ab6:	f023 0203 	bic.w	r2, r3, #3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abe:	4951      	ldr	r1, [pc, #324]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ad2:	4b4c      	ldr	r3, [pc, #304]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ad8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae0:	4948      	ldr	r1, [pc, #288]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d015      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008af4:	4b43      	ldr	r3, [pc, #268]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008afa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b02:	4940      	ldr	r1, [pc, #256]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b12:	d105      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b14:	4b3b      	ldr	r3, [pc, #236]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	4a3a      	ldr	r2, [pc, #232]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d015      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008b2c:	4b35      	ldr	r3, [pc, #212]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b3a:	4932      	ldr	r1, [pc, #200]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b4a:	d105      	bne.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	4a2c      	ldr	r2, [pc, #176]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d015      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008b64:	4b27      	ldr	r3, [pc, #156]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b72:	4924      	ldr	r1, [pc, #144]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b82:	d105      	bne.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b84:	4b1f      	ldr	r3, [pc, #124]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	4a1e      	ldr	r2, [pc, #120]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d015      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b9c:	4b19      	ldr	r3, [pc, #100]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ba2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008baa:	4916      	ldr	r1, [pc, #88]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bba:	d105      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bbc:	4b11      	ldr	r3, [pc, #68]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	4a10      	ldr	r2, [pc, #64]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d019      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be2:	4908      	ldr	r1, [pc, #32]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bf2:	d109      	bne.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bf4:	4b03      	ldr	r3, [pc, #12]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	4a02      	ldr	r2, [pc, #8]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bfe:	60d3      	str	r3, [r2, #12]
 8008c00:	e002      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008c02:	bf00      	nop
 8008c04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d015      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008c14:	4b29      	ldr	r3, [pc, #164]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c22:	4926      	ldr	r1, [pc, #152]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c32:	d105      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008c34:	4b21      	ldr	r3, [pc, #132]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4a20      	ldr	r2, [pc, #128]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d015      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c52:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c5a:	4918      	ldr	r1, [pc, #96]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c6a:	d105      	bne.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008c6c:	4b13      	ldr	r3, [pc, #76]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	4a12      	ldr	r2, [pc, #72]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d015      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c84:	4b0d      	ldr	r3, [pc, #52]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c92:	490a      	ldr	r1, [pc, #40]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c94:	4313      	orrs	r3, r2
 8008c96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ca2:	d105      	bne.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ca4:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	4a04      	ldr	r2, [pc, #16]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008caa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008cb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	40021000 	.word	0x40021000

08008cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e09d      	b.n	8008e0e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d108      	bne.n	8008cec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ce2:	d009      	beq.n	8008cf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	61da      	str	r2, [r3, #28]
 8008cea:	e005      	b.n	8008cf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7f9 fefe 	bl	8002b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d38:	d902      	bls.n	8008d40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	60fb      	str	r3, [r7, #12]
 8008d3e:	e002      	b.n	8008d46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008d4e:	d007      	beq.n	8008d60 <HAL_SPI_Init+0xa0>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d58:	d002      	beq.n	8008d60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008d70:	431a      	orrs	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	431a      	orrs	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008da2:	ea42 0103 	orr.w	r1, r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008daa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	0c1b      	lsrs	r3, r3, #16
 8008dbc:	f003 0204 	and.w	r2, r3, #4
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc4:	f003 0310 	and.w	r3, r3, #16
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dce:	f003 0308 	and.w	r3, r3, #8
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008ddc:	ea42 0103 	orr.w	r1, r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	69da      	ldr	r2, [r3, #28]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008dfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b088      	sub	sp, #32
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	603b      	str	r3, [r7, #0]
 8008e22:	4613      	mov	r3, r2
 8008e24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d101      	bne.n	8008e38 <HAL_SPI_Transmit+0x22>
 8008e34:	2302      	movs	r3, #2
 8008e36:	e15f      	b.n	80090f8 <HAL_SPI_Transmit+0x2e2>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e40:	f7fc fb8a 	bl	8005558 <HAL_GetTick>
 8008e44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d002      	beq.n	8008e5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008e56:	2302      	movs	r3, #2
 8008e58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e5a:	e148      	b.n	80090ee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_SPI_Transmit+0x52>
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e6c:	e13f      	b.n	80090ee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2203      	movs	r2, #3
 8008e72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	88fa      	ldrh	r2, [r7, #6]
 8008e86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	88fa      	ldrh	r2, [r7, #6]
 8008e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008eb8:	d10f      	bne.n	8008eda <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ec8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ed8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee4:	2b40      	cmp	r3, #64	@ 0x40
 8008ee6:	d007      	beq.n	8008ef8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ef6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008f00:	d94f      	bls.n	8008fa2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <HAL_SPI_Transmit+0xfa>
 8008f0a:	8afb      	ldrh	r3, [r7, #22]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d142      	bne.n	8008f96 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f14:	881a      	ldrh	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f20:	1c9a      	adds	r2, r3, #2
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f34:	e02f      	b.n	8008f96 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f003 0302 	and.w	r3, r3, #2
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d112      	bne.n	8008f6a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f48:	881a      	ldrh	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f54:	1c9a      	adds	r2, r3, #2
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	3b01      	subs	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f68:	e015      	b.n	8008f96 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f6a:	f7fc faf5 	bl	8005558 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d803      	bhi.n	8008f82 <HAL_SPI_Transmit+0x16c>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d102      	bne.n	8008f88 <HAL_SPI_Transmit+0x172>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d106      	bne.n	8008f96 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008f94:	e0ab      	b.n	80090ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1ca      	bne.n	8008f36 <HAL_SPI_Transmit+0x120>
 8008fa0:	e080      	b.n	80090a4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <HAL_SPI_Transmit+0x19a>
 8008faa:	8afb      	ldrh	r3, [r7, #22]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d174      	bne.n	800909a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d912      	bls.n	8008fe0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fbe:	881a      	ldrh	r2, [r3, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fca:	1c9a      	adds	r2, r3, #2
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b02      	subs	r3, #2
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008fde:	e05c      	b.n	800909a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	330c      	adds	r3, #12
 8008fea:	7812      	ldrb	r2, [r2, #0]
 8008fec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	3b01      	subs	r3, #1
 8009000:	b29a      	uxth	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009006:	e048      	b.n	800909a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b02      	cmp	r3, #2
 8009014:	d12b      	bne.n	800906e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800901a:	b29b      	uxth	r3, r3
 800901c:	2b01      	cmp	r3, #1
 800901e:	d912      	bls.n	8009046 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	881a      	ldrh	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009030:	1c9a      	adds	r2, r3, #2
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800903a:	b29b      	uxth	r3, r3
 800903c:	3b02      	subs	r3, #2
 800903e:	b29a      	uxth	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009044:	e029      	b.n	800909a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	330c      	adds	r3, #12
 8009050:	7812      	ldrb	r2, [r2, #0]
 8009052:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009062:	b29b      	uxth	r3, r3
 8009064:	3b01      	subs	r3, #1
 8009066:	b29a      	uxth	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800906c:	e015      	b.n	800909a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800906e:	f7fc fa73 	bl	8005558 <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	d803      	bhi.n	8009086 <HAL_SPI_Transmit+0x270>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009084:	d102      	bne.n	800908c <HAL_SPI_Transmit+0x276>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d106      	bne.n	800909a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009098:	e029      	b.n	80090ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800909e:	b29b      	uxth	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1b1      	bne.n	8009008 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090a4:	69ba      	ldr	r2, [r7, #24]
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f947 	bl	800933c <SPI_EndRxTxTransaction>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2220      	movs	r2, #32
 80090b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090c2:	2300      	movs	r3, #0
 80090c4:	613b      	str	r3, [r7, #16]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	613b      	str	r3, [r7, #16]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	77fb      	strb	r3, [r7, #31]
 80090e4:	e003      	b.n	80090ee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80090f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	4613      	mov	r3, r2
 800910e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009110:	f7fc fa22 	bl	8005558 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009118:	1a9b      	subs	r3, r3, r2
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	4413      	add	r3, r2
 800911e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009120:	f7fc fa1a 	bl	8005558 <HAL_GetTick>
 8009124:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009126:	4b39      	ldr	r3, [pc, #228]	@ (800920c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	015b      	lsls	r3, r3, #5
 800912c:	0d1b      	lsrs	r3, r3, #20
 800912e:	69fa      	ldr	r2, [r7, #28]
 8009130:	fb02 f303 	mul.w	r3, r2, r3
 8009134:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009136:	e054      	b.n	80091e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913e:	d050      	beq.n	80091e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009140:	f7fc fa0a 	bl	8005558 <HAL_GetTick>
 8009144:	4602      	mov	r2, r0
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	429a      	cmp	r2, r3
 800914e:	d902      	bls.n	8009156 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d13d      	bne.n	80091d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009164:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800916e:	d111      	bne.n	8009194 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009178:	d004      	beq.n	8009184 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009182:	d107      	bne.n	8009194 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009192:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800919c:	d10f      	bne.n	80091be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e017      	b.n	8009202 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	3b01      	subs	r3, #1
 80091e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4013      	ands	r3, r2
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	bf0c      	ite	eq
 80091f2:	2301      	moveq	r3, #1
 80091f4:	2300      	movne	r3, #0
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	461a      	mov	r2, r3
 80091fa:	79fb      	ldrb	r3, [r7, #7]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d19b      	bne.n	8009138 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3720      	adds	r7, #32
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000008 	.word	0x20000008

08009210 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b08a      	sub	sp, #40	@ 0x28
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009222:	f7fc f999 	bl	8005558 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	4413      	add	r3, r2
 8009230:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009232:	f7fc f991 	bl	8005558 <HAL_GetTick>
 8009236:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	330c      	adds	r3, #12
 800923e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009240:	4b3d      	ldr	r3, [pc, #244]	@ (8009338 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	00da      	lsls	r2, r3, #3
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	0d1b      	lsrs	r3, r3, #20
 8009250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009252:	fb02 f303 	mul.w	r3, r2, r3
 8009256:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009258:	e060      	b.n	800931c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009260:	d107      	bne.n	8009272 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d104      	bne.n	8009272 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009270:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009278:	d050      	beq.n	800931c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800927a:	f7fc f96d 	bl	8005558 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	6a3b      	ldr	r3, [r7, #32]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009286:	429a      	cmp	r2, r3
 8009288:	d902      	bls.n	8009290 <SPI_WaitFifoStateUntilTimeout+0x80>
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	2b00      	cmp	r3, #0
 800928e:	d13d      	bne.n	800930c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800929e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092a8:	d111      	bne.n	80092ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092b2:	d004      	beq.n	80092be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092bc:	d107      	bne.n	80092ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d6:	d10f      	bne.n	80092f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e010      	b.n	800932e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	3b01      	subs	r3, #1
 800931a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689a      	ldr	r2, [r3, #8]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	4013      	ands	r3, r2
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	429a      	cmp	r2, r3
 800932a:	d196      	bne.n	800925a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3728      	adds	r7, #40	@ 0x28
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20000008 	.word	0x20000008

0800933c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af02      	add	r7, sp, #8
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2200      	movs	r2, #0
 8009350:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f7ff ff5b 	bl	8009210 <SPI_WaitFifoStateUntilTimeout>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d007      	beq.n	8009370 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009364:	f043 0220 	orr.w	r2, r3, #32
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800936c:	2303      	movs	r3, #3
 800936e:	e027      	b.n	80093c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	2180      	movs	r1, #128	@ 0x80
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7ff fec0 	bl	8009100 <SPI_WaitFlagStateUntilTimeout>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d007      	beq.n	8009396 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800938a:	f043 0220 	orr.w	r2, r3, #32
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e014      	b.n	80093c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2200      	movs	r2, #0
 800939e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff ff34 	bl	8009210 <SPI_WaitFifoStateUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d007      	beq.n	80093be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093b2:	f043 0220 	orr.w	r2, r3, #32
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e000      	b.n	80093c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e049      	b.n	800946e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7f9 fbd4 	bl	8002b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3304      	adds	r3, #4
 8009404:	4619      	mov	r1, r3
 8009406:	4610      	mov	r0, r2
 8009408:	f001 f8f0 	bl	800a5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b01      	cmp	r3, #1
 800948a:	d001      	beq.n	8009490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e054      	b.n	800953a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0201 	orr.w	r2, r2, #1
 80094a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a26      	ldr	r2, [pc, #152]	@ (8009548 <HAL_TIM_Base_Start_IT+0xd0>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d022      	beq.n	80094f8 <HAL_TIM_Base_Start_IT+0x80>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ba:	d01d      	beq.n	80094f8 <HAL_TIM_Base_Start_IT+0x80>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a22      	ldr	r2, [pc, #136]	@ (800954c <HAL_TIM_Base_Start_IT+0xd4>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d018      	beq.n	80094f8 <HAL_TIM_Base_Start_IT+0x80>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a21      	ldr	r2, [pc, #132]	@ (8009550 <HAL_TIM_Base_Start_IT+0xd8>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d013      	beq.n	80094f8 <HAL_TIM_Base_Start_IT+0x80>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a1f      	ldr	r2, [pc, #124]	@ (8009554 <HAL_TIM_Base_Start_IT+0xdc>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d00e      	beq.n	80094f8 <HAL_TIM_Base_Start_IT+0x80>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a1e      	ldr	r2, [pc, #120]	@ (8009558 <HAL_TIM_Base_Start_IT+0xe0>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d009      	beq.n	80094f8 <HAL_TIM_Base_Start_IT+0x80>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a1c      	ldr	r2, [pc, #112]	@ (800955c <HAL_TIM_Base_Start_IT+0xe4>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d004      	beq.n	80094f8 <HAL_TIM_Base_Start_IT+0x80>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a1b      	ldr	r2, [pc, #108]	@ (8009560 <HAL_TIM_Base_Start_IT+0xe8>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d115      	bne.n	8009524 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	4b19      	ldr	r3, [pc, #100]	@ (8009564 <HAL_TIM_Base_Start_IT+0xec>)
 8009500:	4013      	ands	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b06      	cmp	r3, #6
 8009508:	d015      	beq.n	8009536 <HAL_TIM_Base_Start_IT+0xbe>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009510:	d011      	beq.n	8009536 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f042 0201 	orr.w	r2, r2, #1
 8009520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009522:	e008      	b.n	8009536 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f042 0201 	orr.w	r2, r2, #1
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	e000      	b.n	8009538 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009536:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	40012c00 	.word	0x40012c00
 800954c:	40000400 	.word	0x40000400
 8009550:	40000800 	.word	0x40000800
 8009554:	40000c00 	.word	0x40000c00
 8009558:	40013400 	.word	0x40013400
 800955c:	40014000 	.word	0x40014000
 8009560:	40015000 	.word	0x40015000
 8009564:	00010007 	.word	0x00010007

08009568 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68da      	ldr	r2, [r3, #12]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f022 0201 	bic.w	r2, r2, #1
 800957e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6a1a      	ldr	r2, [r3, #32]
 8009586:	f241 1311 	movw	r3, #4369	@ 0x1111
 800958a:	4013      	ands	r3, r2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10f      	bne.n	80095b0 <HAL_TIM_Base_Stop_IT+0x48>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6a1a      	ldr	r2, [r3, #32]
 8009596:	f244 4344 	movw	r3, #17476	@ 0x4444
 800959a:	4013      	ands	r3, r2
 800959c:	2b00      	cmp	r3, #0
 800959e:	d107      	bne.n	80095b0 <HAL_TIM_Base_Stop_IT+0x48>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 0201 	bic.w	r2, r2, #1
 80095ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e049      	b.n	800966c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f841 	bl	8009674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3304      	adds	r3, #4
 8009602:	4619      	mov	r1, r3
 8009604:	4610      	mov	r0, r2
 8009606:	f000 fff1 	bl	800a5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d109      	bne.n	80096b4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	bf0c      	ite	eq
 80096ac:	2301      	moveq	r3, #1
 80096ae:	2300      	movne	r3, #0
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	e03c      	b.n	800972e <HAL_TIM_PWM_Start_DMA+0xa6>
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d109      	bne.n	80096ce <HAL_TIM_PWM_Start_DMA+0x46>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	bf0c      	ite	eq
 80096c6:	2301      	moveq	r3, #1
 80096c8:	2300      	movne	r3, #0
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	e02f      	b.n	800972e <HAL_TIM_PWM_Start_DMA+0xa6>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b08      	cmp	r3, #8
 80096d2:	d109      	bne.n	80096e8 <HAL_TIM_PWM_Start_DMA+0x60>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b02      	cmp	r3, #2
 80096de:	bf0c      	ite	eq
 80096e0:	2301      	moveq	r3, #1
 80096e2:	2300      	movne	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	e022      	b.n	800972e <HAL_TIM_PWM_Start_DMA+0xa6>
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b0c      	cmp	r3, #12
 80096ec:	d109      	bne.n	8009702 <HAL_TIM_PWM_Start_DMA+0x7a>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	bf0c      	ite	eq
 80096fa:	2301      	moveq	r3, #1
 80096fc:	2300      	movne	r3, #0
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	e015      	b.n	800972e <HAL_TIM_PWM_Start_DMA+0xa6>
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2b10      	cmp	r3, #16
 8009706:	d109      	bne.n	800971c <HAL_TIM_PWM_Start_DMA+0x94>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b02      	cmp	r3, #2
 8009712:	bf0c      	ite	eq
 8009714:	2301      	moveq	r3, #1
 8009716:	2300      	movne	r3, #0
 8009718:	b2db      	uxtb	r3, r3
 800971a:	e008      	b.n	800972e <HAL_TIM_PWM_Start_DMA+0xa6>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	bf0c      	ite	eq
 8009728:	2301      	moveq	r3, #1
 800972a:	2300      	movne	r3, #0
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8009732:	2302      	movs	r3, #2
 8009734:	e1b5      	b.n	8009aa2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <HAL_TIM_PWM_Start_DMA+0xc8>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009742:	b2db      	uxtb	r3, r3
 8009744:	2b01      	cmp	r3, #1
 8009746:	bf0c      	ite	eq
 8009748:	2301      	moveq	r3, #1
 800974a:	2300      	movne	r3, #0
 800974c:	b2db      	uxtb	r3, r3
 800974e:	e03c      	b.n	80097ca <HAL_TIM_PWM_Start_DMA+0x142>
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b04      	cmp	r3, #4
 8009754:	d109      	bne.n	800976a <HAL_TIM_PWM_Start_DMA+0xe2>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b01      	cmp	r3, #1
 8009760:	bf0c      	ite	eq
 8009762:	2301      	moveq	r3, #1
 8009764:	2300      	movne	r3, #0
 8009766:	b2db      	uxtb	r3, r3
 8009768:	e02f      	b.n	80097ca <HAL_TIM_PWM_Start_DMA+0x142>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b08      	cmp	r3, #8
 800976e:	d109      	bne.n	8009784 <HAL_TIM_PWM_Start_DMA+0xfc>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b01      	cmp	r3, #1
 800977a:	bf0c      	ite	eq
 800977c:	2301      	moveq	r3, #1
 800977e:	2300      	movne	r3, #0
 8009780:	b2db      	uxtb	r3, r3
 8009782:	e022      	b.n	80097ca <HAL_TIM_PWM_Start_DMA+0x142>
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b0c      	cmp	r3, #12
 8009788:	d109      	bne.n	800979e <HAL_TIM_PWM_Start_DMA+0x116>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b01      	cmp	r3, #1
 8009794:	bf0c      	ite	eq
 8009796:	2301      	moveq	r3, #1
 8009798:	2300      	movne	r3, #0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	e015      	b.n	80097ca <HAL_TIM_PWM_Start_DMA+0x142>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2b10      	cmp	r3, #16
 80097a2:	d109      	bne.n	80097b8 <HAL_TIM_PWM_Start_DMA+0x130>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	bf0c      	ite	eq
 80097b0:	2301      	moveq	r3, #1
 80097b2:	2300      	movne	r3, #0
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	e008      	b.n	80097ca <HAL_TIM_PWM_Start_DMA+0x142>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	bf0c      	ite	eq
 80097c4:	2301      	moveq	r3, #1
 80097c6:	2300      	movne	r3, #0
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d034      	beq.n	8009838 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <HAL_TIM_PWM_Start_DMA+0x152>
 80097d4:	887b      	ldrh	r3, [r7, #2]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e161      	b.n	8009aa2 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d104      	bne.n	80097ee <HAL_TIM_PWM_Start_DMA+0x166>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2202      	movs	r2, #2
 80097e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097ec:	e026      	b.n	800983c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d104      	bne.n	80097fe <HAL_TIM_PWM_Start_DMA+0x176>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2202      	movs	r2, #2
 80097f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097fc:	e01e      	b.n	800983c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2b08      	cmp	r3, #8
 8009802:	d104      	bne.n	800980e <HAL_TIM_PWM_Start_DMA+0x186>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2202      	movs	r2, #2
 8009808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800980c:	e016      	b.n	800983c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b0c      	cmp	r3, #12
 8009812:	d104      	bne.n	800981e <HAL_TIM_PWM_Start_DMA+0x196>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2202      	movs	r2, #2
 8009818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800981c:	e00e      	b.n	800983c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b10      	cmp	r3, #16
 8009822:	d104      	bne.n	800982e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800982c:	e006      	b.n	800983c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2202      	movs	r2, #2
 8009832:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009836:	e001      	b.n	800983c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e132      	b.n	8009aa2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b0c      	cmp	r3, #12
 8009840:	f200 80ae 	bhi.w	80099a0 <HAL_TIM_PWM_Start_DMA+0x318>
 8009844:	a201      	add	r2, pc, #4	@ (adr r2, 800984c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8009846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984a:	bf00      	nop
 800984c:	08009881 	.word	0x08009881
 8009850:	080099a1 	.word	0x080099a1
 8009854:	080099a1 	.word	0x080099a1
 8009858:	080099a1 	.word	0x080099a1
 800985c:	080098c9 	.word	0x080098c9
 8009860:	080099a1 	.word	0x080099a1
 8009864:	080099a1 	.word	0x080099a1
 8009868:	080099a1 	.word	0x080099a1
 800986c:	08009911 	.word	0x08009911
 8009870:	080099a1 	.word	0x080099a1
 8009874:	080099a1 	.word	0x080099a1
 8009878:	080099a1 	.word	0x080099a1
 800987c:	08009959 	.word	0x08009959
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009884:	4a89      	ldr	r2, [pc, #548]	@ (8009aac <HAL_TIM_PWM_Start_DMA+0x424>)
 8009886:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988c:	4a88      	ldr	r2, [pc, #544]	@ (8009ab0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800988e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009894:	4a87      	ldr	r2, [pc, #540]	@ (8009ab4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8009896:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3334      	adds	r3, #52	@ 0x34
 80098a4:	461a      	mov	r2, r3
 80098a6:	887b      	ldrh	r3, [r7, #2]
 80098a8:	f7fd fd6c 	bl	8007384 <HAL_DMA_Start_IT>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e0f5      	b.n	8009aa2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098c4:	60da      	str	r2, [r3, #12]
      break;
 80098c6:	e06e      	b.n	80099a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098cc:	4a77      	ldr	r2, [pc, #476]	@ (8009aac <HAL_TIM_PWM_Start_DMA+0x424>)
 80098ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d4:	4a76      	ldr	r2, [pc, #472]	@ (8009ab0 <HAL_TIM_PWM_Start_DMA+0x428>)
 80098d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098dc:	4a75      	ldr	r2, [pc, #468]	@ (8009ab4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80098de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80098e4:	6879      	ldr	r1, [r7, #4]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3338      	adds	r3, #56	@ 0x38
 80098ec:	461a      	mov	r2, r3
 80098ee:	887b      	ldrh	r3, [r7, #2]
 80098f0:	f7fd fd48 	bl	8007384 <HAL_DMA_Start_IT>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e0d1      	b.n	8009aa2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800990c:	60da      	str	r2, [r3, #12]
      break;
 800990e:	e04a      	b.n	80099a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009914:	4a65      	ldr	r2, [pc, #404]	@ (8009aac <HAL_TIM_PWM_Start_DMA+0x424>)
 8009916:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	4a64      	ldr	r2, [pc, #400]	@ (8009ab0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800991e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009924:	4a63      	ldr	r2, [pc, #396]	@ (8009ab4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8009926:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800992c:	6879      	ldr	r1, [r7, #4]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	333c      	adds	r3, #60	@ 0x3c
 8009934:	461a      	mov	r2, r3
 8009936:	887b      	ldrh	r3, [r7, #2]
 8009938:	f7fd fd24 	bl	8007384 <HAL_DMA_Start_IT>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e0ad      	b.n	8009aa2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009954:	60da      	str	r2, [r3, #12]
      break;
 8009956:	e026      	b.n	80099a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800995c:	4a53      	ldr	r2, [pc, #332]	@ (8009aac <HAL_TIM_PWM_Start_DMA+0x424>)
 800995e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009964:	4a52      	ldr	r2, [pc, #328]	@ (8009ab0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8009966:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996c:	4a51      	ldr	r2, [pc, #324]	@ (8009ab4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800996e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009974:	6879      	ldr	r1, [r7, #4]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3340      	adds	r3, #64	@ 0x40
 800997c:	461a      	mov	r2, r3
 800997e:	887b      	ldrh	r3, [r7, #2]
 8009980:	f7fd fd00 	bl	8007384 <HAL_DMA_Start_IT>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e089      	b.n	8009aa2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68da      	ldr	r2, [r3, #12]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800999c:	60da      	str	r2, [r3, #12]
      break;
 800999e:	e002      	b.n	80099a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	75fb      	strb	r3, [r7, #23]
      break;
 80099a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d179      	bne.n	8009aa0 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2201      	movs	r2, #1
 80099b2:	68b9      	ldr	r1, [r7, #8]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f001 fa93 	bl	800aee0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a3e      	ldr	r2, [pc, #248]	@ (8009ab8 <HAL_TIM_PWM_Start_DMA+0x430>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d018      	beq.n	80099f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a3c      	ldr	r2, [pc, #240]	@ (8009abc <HAL_TIM_PWM_Start_DMA+0x434>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d013      	beq.n	80099f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a3b      	ldr	r2, [pc, #236]	@ (8009ac0 <HAL_TIM_PWM_Start_DMA+0x438>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d00e      	beq.n	80099f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a39      	ldr	r2, [pc, #228]	@ (8009ac4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d009      	beq.n	80099f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a38      	ldr	r2, [pc, #224]	@ (8009ac8 <HAL_TIM_PWM_Start_DMA+0x440>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d004      	beq.n	80099f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a36      	ldr	r2, [pc, #216]	@ (8009acc <HAL_TIM_PWM_Start_DMA+0x444>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d101      	bne.n	80099fa <HAL_TIM_PWM_Start_DMA+0x372>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e000      	b.n	80099fc <HAL_TIM_PWM_Start_DMA+0x374>
 80099fa:	2300      	movs	r3, #0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d007      	beq.n	8009a10 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a0e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a28      	ldr	r2, [pc, #160]	@ (8009ab8 <HAL_TIM_PWM_Start_DMA+0x430>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d022      	beq.n	8009a60 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a22:	d01d      	beq.n	8009a60 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a29      	ldr	r2, [pc, #164]	@ (8009ad0 <HAL_TIM_PWM_Start_DMA+0x448>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d018      	beq.n	8009a60 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a28      	ldr	r2, [pc, #160]	@ (8009ad4 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d013      	beq.n	8009a60 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a26      	ldr	r2, [pc, #152]	@ (8009ad8 <HAL_TIM_PWM_Start_DMA+0x450>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d00e      	beq.n	8009a60 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a1d      	ldr	r2, [pc, #116]	@ (8009abc <HAL_TIM_PWM_Start_DMA+0x434>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d009      	beq.n	8009a60 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac0 <HAL_TIM_PWM_Start_DMA+0x438>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d004      	beq.n	8009a60 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8009acc <HAL_TIM_PWM_Start_DMA+0x444>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d115      	bne.n	8009a8c <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689a      	ldr	r2, [r3, #8]
 8009a66:	4b1d      	ldr	r3, [pc, #116]	@ (8009adc <HAL_TIM_PWM_Start_DMA+0x454>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b06      	cmp	r3, #6
 8009a70:	d015      	beq.n	8009a9e <HAL_TIM_PWM_Start_DMA+0x416>
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a78:	d011      	beq.n	8009a9e <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f042 0201 	orr.w	r2, r2, #1
 8009a88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a8a:	e008      	b.n	8009a9e <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0201 	orr.w	r2, r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	e000      	b.n	8009aa0 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3718      	adds	r7, #24
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	0800a4db 	.word	0x0800a4db
 8009ab0:	0800a583 	.word	0x0800a583
 8009ab4:	0800a449 	.word	0x0800a449
 8009ab8:	40012c00 	.word	0x40012c00
 8009abc:	40013400 	.word	0x40013400
 8009ac0:	40014000 	.word	0x40014000
 8009ac4:	40014400 	.word	0x40014400
 8009ac8:	40014800 	.word	0x40014800
 8009acc:	40015000 	.word	0x40015000
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	00010007 	.word	0x00010007

08009ae0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b0c      	cmp	r3, #12
 8009af2:	d855      	bhi.n	8009ba0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8009af4:	a201      	add	r2, pc, #4	@ (adr r2, 8009afc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8009af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afa:	bf00      	nop
 8009afc:	08009b31 	.word	0x08009b31
 8009b00:	08009ba1 	.word	0x08009ba1
 8009b04:	08009ba1 	.word	0x08009ba1
 8009b08:	08009ba1 	.word	0x08009ba1
 8009b0c:	08009b4d 	.word	0x08009b4d
 8009b10:	08009ba1 	.word	0x08009ba1
 8009b14:	08009ba1 	.word	0x08009ba1
 8009b18:	08009ba1 	.word	0x08009ba1
 8009b1c:	08009b69 	.word	0x08009b69
 8009b20:	08009ba1 	.word	0x08009ba1
 8009b24:	08009ba1 	.word	0x08009ba1
 8009b28:	08009ba1 	.word	0x08009ba1
 8009b2c:	08009b85 	.word	0x08009b85
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009b3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fd fcf1 	bl	800752c <HAL_DMA_Abort_IT>
      break;
 8009b4a:	e02c      	b.n	8009ba6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fd fce3 	bl	800752c <HAL_DMA_Abort_IT>
      break;
 8009b66:	e01e      	b.n	8009ba6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68da      	ldr	r2, [r3, #12]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fd fcd5 	bl	800752c <HAL_DMA_Abort_IT>
      break;
 8009b82:	e010      	b.n	8009ba6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009b92:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fd fcc7 	bl	800752c <HAL_DMA_Abort_IT>
      break;
 8009b9e:	e002      	b.n	8009ba6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ba4:	bf00      	nop
  }

  if (status == HAL_OK)
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f040 8086 	bne.w	8009cba <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f001 f992 	bl	800aee0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a40      	ldr	r2, [pc, #256]	@ (8009cc4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d018      	beq.n	8009bf8 <HAL_TIM_PWM_Stop_DMA+0x118>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a3f      	ldr	r2, [pc, #252]	@ (8009cc8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d013      	beq.n	8009bf8 <HAL_TIM_PWM_Stop_DMA+0x118>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a3d      	ldr	r2, [pc, #244]	@ (8009ccc <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d00e      	beq.n	8009bf8 <HAL_TIM_PWM_Stop_DMA+0x118>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a3c      	ldr	r2, [pc, #240]	@ (8009cd0 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d009      	beq.n	8009bf8 <HAL_TIM_PWM_Stop_DMA+0x118>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a3a      	ldr	r2, [pc, #232]	@ (8009cd4 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d004      	beq.n	8009bf8 <HAL_TIM_PWM_Stop_DMA+0x118>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a39      	ldr	r2, [pc, #228]	@ (8009cd8 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d101      	bne.n	8009bfc <HAL_TIM_PWM_Stop_DMA+0x11c>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e000      	b.n	8009bfe <HAL_TIM_PWM_Stop_DMA+0x11e>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d017      	beq.n	8009c32 <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6a1a      	ldr	r2, [r3, #32]
 8009c08:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10f      	bne.n	8009c32 <HAL_TIM_PWM_Stop_DMA+0x152>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6a1a      	ldr	r2, [r3, #32]
 8009c18:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d107      	bne.n	8009c32 <HAL_TIM_PWM_Stop_DMA+0x152>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6a1a      	ldr	r2, [r3, #32]
 8009c38:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10f      	bne.n	8009c62 <HAL_TIM_PWM_Stop_DMA+0x182>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6a1a      	ldr	r2, [r3, #32]
 8009c48:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d107      	bne.n	8009c62 <HAL_TIM_PWM_Stop_DMA+0x182>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 0201 	bic.w	r2, r2, #1
 8009c60:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d104      	bne.n	8009c72 <HAL_TIM_PWM_Stop_DMA+0x192>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c70:	e023      	b.n	8009cba <HAL_TIM_PWM_Stop_DMA+0x1da>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b04      	cmp	r3, #4
 8009c76:	d104      	bne.n	8009c82 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c80:	e01b      	b.n	8009cba <HAL_TIM_PWM_Stop_DMA+0x1da>
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b08      	cmp	r3, #8
 8009c86:	d104      	bne.n	8009c92 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c90:	e013      	b.n	8009cba <HAL_TIM_PWM_Stop_DMA+0x1da>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b0c      	cmp	r3, #12
 8009c96:	d104      	bne.n	8009ca2 <HAL_TIM_PWM_Stop_DMA+0x1c2>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ca0:	e00b      	b.n	8009cba <HAL_TIM_PWM_Stop_DMA+0x1da>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b10      	cmp	r3, #16
 8009ca6:	d104      	bne.n	8009cb2 <HAL_TIM_PWM_Stop_DMA+0x1d2>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009cb0:	e003      	b.n	8009cba <HAL_TIM_PWM_Stop_DMA+0x1da>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	40012c00 	.word	0x40012c00
 8009cc8:	40013400 	.word	0x40013400
 8009ccc:	40014000 	.word	0x40014000
 8009cd0:	40014400 	.word	0x40014400
 8009cd4:	40014800 	.word	0x40014800
 8009cd8:	40015000 	.word	0x40015000

08009cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d020      	beq.n	8009d40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d01b      	beq.n	8009d40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f06f 0202 	mvn.w	r2, #2
 8009d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	f003 0303 	and.w	r3, r3, #3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fb5c 	bl	800a3e4 <HAL_TIM_IC_CaptureCallback>
 8009d2c:	e005      	b.n	8009d3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fb4e 	bl	800a3d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fb5f 	bl	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f003 0304 	and.w	r3, r3, #4
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d020      	beq.n	8009d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d01b      	beq.n	8009d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f06f 0204 	mvn.w	r2, #4
 8009d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2202      	movs	r2, #2
 8009d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fb36 	bl	800a3e4 <HAL_TIM_IC_CaptureCallback>
 8009d78:	e005      	b.n	8009d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fb28 	bl	800a3d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fb39 	bl	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	f003 0308 	and.w	r3, r3, #8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d020      	beq.n	8009dd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f003 0308 	and.w	r3, r3, #8
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01b      	beq.n	8009dd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f06f 0208 	mvn.w	r2, #8
 8009da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2204      	movs	r2, #4
 8009dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fb10 	bl	800a3e4 <HAL_TIM_IC_CaptureCallback>
 8009dc4:	e005      	b.n	8009dd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fb02 	bl	800a3d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fb13 	bl	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f003 0310 	and.w	r3, r3, #16
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d020      	beq.n	8009e24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d01b      	beq.n	8009e24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f06f 0210 	mvn.w	r2, #16
 8009df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2208      	movs	r2, #8
 8009dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 faea 	bl	800a3e4 <HAL_TIM_IC_CaptureCallback>
 8009e10:	e005      	b.n	8009e1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fadc 	bl	800a3d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 faed 	bl	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f003 0301 	and.w	r3, r3, #1
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00c      	beq.n	8009e48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d007      	beq.n	8009e48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f06f 0201 	mvn.w	r2, #1
 8009e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7f7 fdb4 	bl	80019b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d104      	bne.n	8009e5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00c      	beq.n	8009e76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d007      	beq.n	8009e76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 faaf 	bl	800b3d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00c      	beq.n	8009e9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d007      	beq.n	8009e9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 faa7 	bl	800b3e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00c      	beq.n	8009ebe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d007      	beq.n	8009ebe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fab1 	bl	800a420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f003 0320 	and.w	r3, r3, #32
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00c      	beq.n	8009ee2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f003 0320 	and.w	r3, r3, #32
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d007      	beq.n	8009ee2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f06f 0220 	mvn.w	r2, #32
 8009eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 fa6f 	bl	800b3c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00c      	beq.n	8009f06 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d007      	beq.n	8009f06 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f001 fa7b 	bl	800b3fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00c      	beq.n	8009f2a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d007      	beq.n	8009f2a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f001 fa73 	bl	800b410 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00c      	beq.n	8009f4e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d007      	beq.n	8009f4e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 fa6b 	bl	800b424 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00c      	beq.n	8009f72 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d007      	beq.n	8009f72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 fa63 	bl	800b438 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d101      	bne.n	8009f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f96:	2302      	movs	r3, #2
 8009f98:	e0ff      	b.n	800a19a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b14      	cmp	r3, #20
 8009fa6:	f200 80f0 	bhi.w	800a18a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009faa:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb0:	0800a005 	.word	0x0800a005
 8009fb4:	0800a18b 	.word	0x0800a18b
 8009fb8:	0800a18b 	.word	0x0800a18b
 8009fbc:	0800a18b 	.word	0x0800a18b
 8009fc0:	0800a045 	.word	0x0800a045
 8009fc4:	0800a18b 	.word	0x0800a18b
 8009fc8:	0800a18b 	.word	0x0800a18b
 8009fcc:	0800a18b 	.word	0x0800a18b
 8009fd0:	0800a087 	.word	0x0800a087
 8009fd4:	0800a18b 	.word	0x0800a18b
 8009fd8:	0800a18b 	.word	0x0800a18b
 8009fdc:	0800a18b 	.word	0x0800a18b
 8009fe0:	0800a0c7 	.word	0x0800a0c7
 8009fe4:	0800a18b 	.word	0x0800a18b
 8009fe8:	0800a18b 	.word	0x0800a18b
 8009fec:	0800a18b 	.word	0x0800a18b
 8009ff0:	0800a109 	.word	0x0800a109
 8009ff4:	0800a18b 	.word	0x0800a18b
 8009ff8:	0800a18b 	.word	0x0800a18b
 8009ffc:	0800a18b 	.word	0x0800a18b
 800a000:	0800a149 	.word	0x0800a149
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68b9      	ldr	r1, [r7, #8]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 fba2 	bl	800a754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699a      	ldr	r2, [r3, #24]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0208 	orr.w	r2, r2, #8
 800a01e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	699a      	ldr	r2, [r3, #24]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f022 0204 	bic.w	r2, r2, #4
 800a02e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6999      	ldr	r1, [r3, #24]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	691a      	ldr	r2, [r3, #16]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	430a      	orrs	r2, r1
 800a040:	619a      	str	r2, [r3, #24]
      break;
 800a042:	e0a5      	b.n	800a190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68b9      	ldr	r1, [r7, #8]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 fc1c 	bl	800a888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699a      	ldr	r2, [r3, #24]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a05e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699a      	ldr	r2, [r3, #24]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a06e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6999      	ldr	r1, [r3, #24]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	021a      	lsls	r2, r3, #8
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	619a      	str	r2, [r3, #24]
      break;
 800a084:	e084      	b.n	800a190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fc8f 	bl	800a9b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69da      	ldr	r2, [r3, #28]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f042 0208 	orr.w	r2, r2, #8
 800a0a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	69da      	ldr	r2, [r3, #28]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f022 0204 	bic.w	r2, r2, #4
 800a0b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69d9      	ldr	r1, [r3, #28]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	61da      	str	r2, [r3, #28]
      break;
 800a0c4:	e064      	b.n	800a190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 fd01 	bl	800aad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69da      	ldr	r2, [r3, #28]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	69da      	ldr	r2, [r3, #28]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	69d9      	ldr	r1, [r3, #28]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	021a      	lsls	r2, r3, #8
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	61da      	str	r2, [r3, #28]
      break;
 800a106:	e043      	b.n	800a190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68b9      	ldr	r1, [r7, #8]
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fd74 	bl	800abfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0208 	orr.w	r2, r2, #8
 800a122:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0204 	bic.w	r2, r2, #4
 800a132:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	691a      	ldr	r2, [r3, #16]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a146:	e023      	b.n	800a190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68b9      	ldr	r1, [r7, #8]
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 fdbe 	bl	800acd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a162:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a172:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	021a      	lsls	r2, r3, #8
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	430a      	orrs	r2, r1
 800a186:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a188:	e002      	b.n	800a190 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	75fb      	strb	r3, [r7, #23]
      break;
 800a18e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a198:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop

0800a1a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d101      	bne.n	800a1c0 <HAL_TIM_ConfigClockSource+0x1c>
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e0f6      	b.n	800a3ae <HAL_TIM_ConfigClockSource+0x20a>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a1de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a1e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a6f      	ldr	r2, [pc, #444]	@ (800a3b8 <HAL_TIM_ConfigClockSource+0x214>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	f000 80c1 	beq.w	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a200:	4a6d      	ldr	r2, [pc, #436]	@ (800a3b8 <HAL_TIM_ConfigClockSource+0x214>)
 800a202:	4293      	cmp	r3, r2
 800a204:	f200 80c6 	bhi.w	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a208:	4a6c      	ldr	r2, [pc, #432]	@ (800a3bc <HAL_TIM_ConfigClockSource+0x218>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	f000 80b9 	beq.w	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a210:	4a6a      	ldr	r2, [pc, #424]	@ (800a3bc <HAL_TIM_ConfigClockSource+0x218>)
 800a212:	4293      	cmp	r3, r2
 800a214:	f200 80be 	bhi.w	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a218:	4a69      	ldr	r2, [pc, #420]	@ (800a3c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	f000 80b1 	beq.w	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a220:	4a67      	ldr	r2, [pc, #412]	@ (800a3c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800a222:	4293      	cmp	r3, r2
 800a224:	f200 80b6 	bhi.w	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a228:	4a66      	ldr	r2, [pc, #408]	@ (800a3c4 <HAL_TIM_ConfigClockSource+0x220>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	f000 80a9 	beq.w	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a230:	4a64      	ldr	r2, [pc, #400]	@ (800a3c4 <HAL_TIM_ConfigClockSource+0x220>)
 800a232:	4293      	cmp	r3, r2
 800a234:	f200 80ae 	bhi.w	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a238:	4a63      	ldr	r2, [pc, #396]	@ (800a3c8 <HAL_TIM_ConfigClockSource+0x224>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	f000 80a1 	beq.w	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a240:	4a61      	ldr	r2, [pc, #388]	@ (800a3c8 <HAL_TIM_ConfigClockSource+0x224>)
 800a242:	4293      	cmp	r3, r2
 800a244:	f200 80a6 	bhi.w	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a248:	4a60      	ldr	r2, [pc, #384]	@ (800a3cc <HAL_TIM_ConfigClockSource+0x228>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	f000 8099 	beq.w	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a250:	4a5e      	ldr	r2, [pc, #376]	@ (800a3cc <HAL_TIM_ConfigClockSource+0x228>)
 800a252:	4293      	cmp	r3, r2
 800a254:	f200 809e 	bhi.w	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a258:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a25c:	f000 8091 	beq.w	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a260:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a264:	f200 8096 	bhi.w	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a268:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a26c:	f000 8089 	beq.w	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a270:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a274:	f200 808e 	bhi.w	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a27c:	d03e      	beq.n	800a2fc <HAL_TIM_ConfigClockSource+0x158>
 800a27e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a282:	f200 8087 	bhi.w	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a28a:	f000 8086 	beq.w	800a39a <HAL_TIM_ConfigClockSource+0x1f6>
 800a28e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a292:	d87f      	bhi.n	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a294:	2b70      	cmp	r3, #112	@ 0x70
 800a296:	d01a      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x12a>
 800a298:	2b70      	cmp	r3, #112	@ 0x70
 800a29a:	d87b      	bhi.n	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a29c:	2b60      	cmp	r3, #96	@ 0x60
 800a29e:	d050      	beq.n	800a342 <HAL_TIM_ConfigClockSource+0x19e>
 800a2a0:	2b60      	cmp	r3, #96	@ 0x60
 800a2a2:	d877      	bhi.n	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2a4:	2b50      	cmp	r3, #80	@ 0x50
 800a2a6:	d03c      	beq.n	800a322 <HAL_TIM_ConfigClockSource+0x17e>
 800a2a8:	2b50      	cmp	r3, #80	@ 0x50
 800a2aa:	d873      	bhi.n	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2ac:	2b40      	cmp	r3, #64	@ 0x40
 800a2ae:	d058      	beq.n	800a362 <HAL_TIM_ConfigClockSource+0x1be>
 800a2b0:	2b40      	cmp	r3, #64	@ 0x40
 800a2b2:	d86f      	bhi.n	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2b4:	2b30      	cmp	r3, #48	@ 0x30
 800a2b6:	d064      	beq.n	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a2b8:	2b30      	cmp	r3, #48	@ 0x30
 800a2ba:	d86b      	bhi.n	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2bc:	2b20      	cmp	r3, #32
 800a2be:	d060      	beq.n	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a2c0:	2b20      	cmp	r3, #32
 800a2c2:	d867      	bhi.n	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d05c      	beq.n	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a2c8:	2b10      	cmp	r3, #16
 800a2ca:	d05a      	beq.n	800a382 <HAL_TIM_ConfigClockSource+0x1de>
 800a2cc:	e062      	b.n	800a394 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2de:	f000 fddf 	bl	800aea0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a2f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	609a      	str	r2, [r3, #8]
      break;
 800a2fa:	e04f      	b.n	800a39c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a30c:	f000 fdc8 	bl	800aea0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689a      	ldr	r2, [r3, #8]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a31e:	609a      	str	r2, [r3, #8]
      break;
 800a320:	e03c      	b.n	800a39c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a32e:	461a      	mov	r2, r3
 800a330:	f000 fd3a 	bl	800ada8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2150      	movs	r1, #80	@ 0x50
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 fd93 	bl	800ae66 <TIM_ITRx_SetConfig>
      break;
 800a340:	e02c      	b.n	800a39c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a34e:	461a      	mov	r2, r3
 800a350:	f000 fd59 	bl	800ae06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2160      	movs	r1, #96	@ 0x60
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 fd83 	bl	800ae66 <TIM_ITRx_SetConfig>
      break;
 800a360:	e01c      	b.n	800a39c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a36e:	461a      	mov	r2, r3
 800a370:	f000 fd1a 	bl	800ada8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2140      	movs	r1, #64	@ 0x40
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 fd73 	bl	800ae66 <TIM_ITRx_SetConfig>
      break;
 800a380:	e00c      	b.n	800a39c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4619      	mov	r1, r3
 800a38c:	4610      	mov	r0, r2
 800a38e:	f000 fd6a 	bl	800ae66 <TIM_ITRx_SetConfig>
      break;
 800a392:	e003      	b.n	800a39c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	73fb      	strb	r3, [r7, #15]
      break;
 800a398:	e000      	b.n	800a39c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a39a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	00100070 	.word	0x00100070
 800a3bc:	00100060 	.word	0x00100060
 800a3c0:	00100050 	.word	0x00100050
 800a3c4:	00100040 	.word	0x00100040
 800a3c8:	00100030 	.word	0x00100030
 800a3cc:	00100020 	.word	0x00100020

0800a3d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a454:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d107      	bne.n	800a470 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2201      	movs	r2, #1
 800a464:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a46e:	e02a      	b.n	800a4c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	429a      	cmp	r2, r3
 800a478:	d107      	bne.n	800a48a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2202      	movs	r2, #2
 800a47e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a488:	e01d      	b.n	800a4c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	429a      	cmp	r2, r3
 800a492:	d107      	bne.n	800a4a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2204      	movs	r2, #4
 800a498:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4a2:	e010      	b.n	800a4c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d107      	bne.n	800a4be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2208      	movs	r2, #8
 800a4b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a4bc:	e003      	b.n	800a4c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f7ff ffb4 	bl	800a434 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	771a      	strb	r2, [r3, #28]
}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d10b      	bne.n	800a50a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d136      	bne.n	800a56e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a508:	e031      	b.n	800a56e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	429a      	cmp	r2, r3
 800a512:	d10b      	bne.n	800a52c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2202      	movs	r2, #2
 800a518:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d125      	bne.n	800a56e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a52a:	e020      	b.n	800a56e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	429a      	cmp	r2, r3
 800a534:	d10b      	bne.n	800a54e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2204      	movs	r2, #4
 800a53a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	69db      	ldr	r3, [r3, #28]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d114      	bne.n	800a56e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a54c:	e00f      	b.n	800a56e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	429a      	cmp	r2, r3
 800a556:	d10a      	bne.n	800a56e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2208      	movs	r2, #8
 800a55c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	69db      	ldr	r3, [r3, #28]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d103      	bne.n	800a56e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7ff ff42 	bl	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	771a      	strb	r2, [r3, #28]
}
 800a57a:	bf00      	nop
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	429a      	cmp	r2, r3
 800a598:	d103      	bne.n	800a5a2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2201      	movs	r2, #1
 800a59e:	771a      	strb	r2, [r3, #28]
 800a5a0:	e019      	b.n	800a5d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d103      	bne.n	800a5b4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	771a      	strb	r2, [r3, #28]
 800a5b2:	e010      	b.n	800a5d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d103      	bne.n	800a5c6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2204      	movs	r2, #4
 800a5c2:	771a      	strb	r2, [r3, #28]
 800a5c4:	e007      	b.n	800a5d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d102      	bne.n	800a5d6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2208      	movs	r2, #8
 800a5d4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7ff ff18 	bl	800a40c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	771a      	strb	r2, [r3, #28]
}
 800a5e2:	bf00      	nop
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a4c      	ldr	r2, [pc, #304]	@ (800a730 <TIM_Base_SetConfig+0x144>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d017      	beq.n	800a634 <TIM_Base_SetConfig+0x48>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a60a:	d013      	beq.n	800a634 <TIM_Base_SetConfig+0x48>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a49      	ldr	r2, [pc, #292]	@ (800a734 <TIM_Base_SetConfig+0x148>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d00f      	beq.n	800a634 <TIM_Base_SetConfig+0x48>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a48      	ldr	r2, [pc, #288]	@ (800a738 <TIM_Base_SetConfig+0x14c>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d00b      	beq.n	800a634 <TIM_Base_SetConfig+0x48>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a47      	ldr	r2, [pc, #284]	@ (800a73c <TIM_Base_SetConfig+0x150>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d007      	beq.n	800a634 <TIM_Base_SetConfig+0x48>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a46      	ldr	r2, [pc, #280]	@ (800a740 <TIM_Base_SetConfig+0x154>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d003      	beq.n	800a634 <TIM_Base_SetConfig+0x48>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a45      	ldr	r2, [pc, #276]	@ (800a744 <TIM_Base_SetConfig+0x158>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d108      	bne.n	800a646 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a63a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4313      	orrs	r3, r2
 800a644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a39      	ldr	r2, [pc, #228]	@ (800a730 <TIM_Base_SetConfig+0x144>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d023      	beq.n	800a696 <TIM_Base_SetConfig+0xaa>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a654:	d01f      	beq.n	800a696 <TIM_Base_SetConfig+0xaa>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a36      	ldr	r2, [pc, #216]	@ (800a734 <TIM_Base_SetConfig+0x148>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d01b      	beq.n	800a696 <TIM_Base_SetConfig+0xaa>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a35      	ldr	r2, [pc, #212]	@ (800a738 <TIM_Base_SetConfig+0x14c>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d017      	beq.n	800a696 <TIM_Base_SetConfig+0xaa>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a34      	ldr	r2, [pc, #208]	@ (800a73c <TIM_Base_SetConfig+0x150>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d013      	beq.n	800a696 <TIM_Base_SetConfig+0xaa>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a33      	ldr	r2, [pc, #204]	@ (800a740 <TIM_Base_SetConfig+0x154>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00f      	beq.n	800a696 <TIM_Base_SetConfig+0xaa>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a33      	ldr	r2, [pc, #204]	@ (800a748 <TIM_Base_SetConfig+0x15c>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d00b      	beq.n	800a696 <TIM_Base_SetConfig+0xaa>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a32      	ldr	r2, [pc, #200]	@ (800a74c <TIM_Base_SetConfig+0x160>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d007      	beq.n	800a696 <TIM_Base_SetConfig+0xaa>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a31      	ldr	r2, [pc, #196]	@ (800a750 <TIM_Base_SetConfig+0x164>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d003      	beq.n	800a696 <TIM_Base_SetConfig+0xaa>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a2c      	ldr	r2, [pc, #176]	@ (800a744 <TIM_Base_SetConfig+0x158>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d108      	bne.n	800a6a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a69c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a18      	ldr	r2, [pc, #96]	@ (800a730 <TIM_Base_SetConfig+0x144>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d013      	beq.n	800a6fc <TIM_Base_SetConfig+0x110>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a1a      	ldr	r2, [pc, #104]	@ (800a740 <TIM_Base_SetConfig+0x154>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d00f      	beq.n	800a6fc <TIM_Base_SetConfig+0x110>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a1a      	ldr	r2, [pc, #104]	@ (800a748 <TIM_Base_SetConfig+0x15c>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d00b      	beq.n	800a6fc <TIM_Base_SetConfig+0x110>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a19      	ldr	r2, [pc, #100]	@ (800a74c <TIM_Base_SetConfig+0x160>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d007      	beq.n	800a6fc <TIM_Base_SetConfig+0x110>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a18      	ldr	r2, [pc, #96]	@ (800a750 <TIM_Base_SetConfig+0x164>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d003      	beq.n	800a6fc <TIM_Base_SetConfig+0x110>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a13      	ldr	r2, [pc, #76]	@ (800a744 <TIM_Base_SetConfig+0x158>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d103      	bne.n	800a704 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	691a      	ldr	r2, [r3, #16]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b01      	cmp	r3, #1
 800a714:	d105      	bne.n	800a722 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	f023 0201 	bic.w	r2, r3, #1
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	611a      	str	r2, [r3, #16]
  }
}
 800a722:	bf00      	nop
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	40012c00 	.word	0x40012c00
 800a734:	40000400 	.word	0x40000400
 800a738:	40000800 	.word	0x40000800
 800a73c:	40000c00 	.word	0x40000c00
 800a740:	40013400 	.word	0x40013400
 800a744:	40015000 	.word	0x40015000
 800a748:	40014000 	.word	0x40014000
 800a74c:	40014400 	.word	0x40014400
 800a750:	40014800 	.word	0x40014800

0800a754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a1b      	ldr	r3, [r3, #32]
 800a768:	f023 0201 	bic.w	r2, r3, #1
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f023 0303 	bic.w	r3, r3, #3
 800a78e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	4313      	orrs	r3, r2
 800a798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f023 0302 	bic.w	r3, r3, #2
 800a7a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a30      	ldr	r2, [pc, #192]	@ (800a870 <TIM_OC1_SetConfig+0x11c>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d013      	beq.n	800a7dc <TIM_OC1_SetConfig+0x88>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a2f      	ldr	r2, [pc, #188]	@ (800a874 <TIM_OC1_SetConfig+0x120>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d00f      	beq.n	800a7dc <TIM_OC1_SetConfig+0x88>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a2e      	ldr	r2, [pc, #184]	@ (800a878 <TIM_OC1_SetConfig+0x124>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d00b      	beq.n	800a7dc <TIM_OC1_SetConfig+0x88>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a2d      	ldr	r2, [pc, #180]	@ (800a87c <TIM_OC1_SetConfig+0x128>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d007      	beq.n	800a7dc <TIM_OC1_SetConfig+0x88>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a2c      	ldr	r2, [pc, #176]	@ (800a880 <TIM_OC1_SetConfig+0x12c>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d003      	beq.n	800a7dc <TIM_OC1_SetConfig+0x88>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a2b      	ldr	r2, [pc, #172]	@ (800a884 <TIM_OC1_SetConfig+0x130>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d10c      	bne.n	800a7f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	f023 0308 	bic.w	r3, r3, #8
 800a7e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f023 0304 	bic.w	r3, r3, #4
 800a7f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a870 <TIM_OC1_SetConfig+0x11c>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d013      	beq.n	800a826 <TIM_OC1_SetConfig+0xd2>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a1c      	ldr	r2, [pc, #112]	@ (800a874 <TIM_OC1_SetConfig+0x120>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d00f      	beq.n	800a826 <TIM_OC1_SetConfig+0xd2>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a1b      	ldr	r2, [pc, #108]	@ (800a878 <TIM_OC1_SetConfig+0x124>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d00b      	beq.n	800a826 <TIM_OC1_SetConfig+0xd2>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a1a      	ldr	r2, [pc, #104]	@ (800a87c <TIM_OC1_SetConfig+0x128>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d007      	beq.n	800a826 <TIM_OC1_SetConfig+0xd2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a19      	ldr	r2, [pc, #100]	@ (800a880 <TIM_OC1_SetConfig+0x12c>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d003      	beq.n	800a826 <TIM_OC1_SetConfig+0xd2>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a18      	ldr	r2, [pc, #96]	@ (800a884 <TIM_OC1_SetConfig+0x130>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d111      	bne.n	800a84a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a82c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	4313      	orrs	r3, r2
 800a848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	685a      	ldr	r2, [r3, #4]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	621a      	str	r2, [r3, #32]
}
 800a864:	bf00      	nop
 800a866:	371c      	adds	r7, #28
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	40012c00 	.word	0x40012c00
 800a874:	40013400 	.word	0x40013400
 800a878:	40014000 	.word	0x40014000
 800a87c:	40014400 	.word	0x40014400
 800a880:	40014800 	.word	0x40014800
 800a884:	40015000 	.word	0x40015000

0800a888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a888:	b480      	push	{r7}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a1b      	ldr	r3, [r3, #32]
 800a89c:	f023 0210 	bic.w	r2, r3, #16
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f023 0320 	bic.w	r3, r3, #32
 800a8d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	011b      	lsls	r3, r3, #4
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a2c      	ldr	r2, [pc, #176]	@ (800a998 <TIM_OC2_SetConfig+0x110>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d007      	beq.n	800a8fc <TIM_OC2_SetConfig+0x74>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a2b      	ldr	r2, [pc, #172]	@ (800a99c <TIM_OC2_SetConfig+0x114>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d003      	beq.n	800a8fc <TIM_OC2_SetConfig+0x74>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a2a      	ldr	r2, [pc, #168]	@ (800a9a0 <TIM_OC2_SetConfig+0x118>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d10d      	bne.n	800a918 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a916:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a1f      	ldr	r2, [pc, #124]	@ (800a998 <TIM_OC2_SetConfig+0x110>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d013      	beq.n	800a948 <TIM_OC2_SetConfig+0xc0>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a1e      	ldr	r2, [pc, #120]	@ (800a99c <TIM_OC2_SetConfig+0x114>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d00f      	beq.n	800a948 <TIM_OC2_SetConfig+0xc0>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a1e      	ldr	r2, [pc, #120]	@ (800a9a4 <TIM_OC2_SetConfig+0x11c>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d00b      	beq.n	800a948 <TIM_OC2_SetConfig+0xc0>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a8 <TIM_OC2_SetConfig+0x120>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d007      	beq.n	800a948 <TIM_OC2_SetConfig+0xc0>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a1c      	ldr	r2, [pc, #112]	@ (800a9ac <TIM_OC2_SetConfig+0x124>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d003      	beq.n	800a948 <TIM_OC2_SetConfig+0xc0>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a17      	ldr	r2, [pc, #92]	@ (800a9a0 <TIM_OC2_SetConfig+0x118>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d113      	bne.n	800a970 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a94e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	4313      	orrs	r3, r2
 800a962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	621a      	str	r2, [r3, #32]
}
 800a98a:	bf00      	nop
 800a98c:	371c      	adds	r7, #28
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	40012c00 	.word	0x40012c00
 800a99c:	40013400 	.word	0x40013400
 800a9a0:	40015000 	.word	0x40015000
 800a9a4:	40014000 	.word	0x40014000
 800a9a8:	40014400 	.word	0x40014400
 800a9ac:	40014800 	.word	0x40014800

0800a9b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 0303 	bic.w	r3, r3, #3
 800a9ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a9fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	021b      	lsls	r3, r3, #8
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a2b      	ldr	r2, [pc, #172]	@ (800aabc <TIM_OC3_SetConfig+0x10c>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d007      	beq.n	800aa22 <TIM_OC3_SetConfig+0x72>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a2a      	ldr	r2, [pc, #168]	@ (800aac0 <TIM_OC3_SetConfig+0x110>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d003      	beq.n	800aa22 <TIM_OC3_SetConfig+0x72>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a29      	ldr	r2, [pc, #164]	@ (800aac4 <TIM_OC3_SetConfig+0x114>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d10d      	bne.n	800aa3e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	021b      	lsls	r3, r3, #8
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a1e      	ldr	r2, [pc, #120]	@ (800aabc <TIM_OC3_SetConfig+0x10c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d013      	beq.n	800aa6e <TIM_OC3_SetConfig+0xbe>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a1d      	ldr	r2, [pc, #116]	@ (800aac0 <TIM_OC3_SetConfig+0x110>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d00f      	beq.n	800aa6e <TIM_OC3_SetConfig+0xbe>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a1d      	ldr	r2, [pc, #116]	@ (800aac8 <TIM_OC3_SetConfig+0x118>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00b      	beq.n	800aa6e <TIM_OC3_SetConfig+0xbe>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a1c      	ldr	r2, [pc, #112]	@ (800aacc <TIM_OC3_SetConfig+0x11c>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d007      	beq.n	800aa6e <TIM_OC3_SetConfig+0xbe>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a1b      	ldr	r2, [pc, #108]	@ (800aad0 <TIM_OC3_SetConfig+0x120>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d003      	beq.n	800aa6e <TIM_OC3_SetConfig+0xbe>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a16      	ldr	r2, [pc, #88]	@ (800aac4 <TIM_OC3_SetConfig+0x114>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d113      	bne.n	800aa96 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	011b      	lsls	r3, r3, #4
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	011b      	lsls	r3, r3, #4
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	685a      	ldr	r2, [r3, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	697a      	ldr	r2, [r7, #20]
 800aaae:	621a      	str	r2, [r3, #32]
}
 800aab0:	bf00      	nop
 800aab2:	371c      	adds	r7, #28
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	40012c00 	.word	0x40012c00
 800aac0:	40013400 	.word	0x40013400
 800aac4:	40015000 	.word	0x40015000
 800aac8:	40014000 	.word	0x40014000
 800aacc:	40014400 	.word	0x40014400
 800aad0:	40014800 	.word	0x40014800

0800aad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	031b      	lsls	r3, r3, #12
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a2c      	ldr	r2, [pc, #176]	@ (800abe4 <TIM_OC4_SetConfig+0x110>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d007      	beq.n	800ab48 <TIM_OC4_SetConfig+0x74>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a2b      	ldr	r2, [pc, #172]	@ (800abe8 <TIM_OC4_SetConfig+0x114>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d003      	beq.n	800ab48 <TIM_OC4_SetConfig+0x74>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a2a      	ldr	r2, [pc, #168]	@ (800abec <TIM_OC4_SetConfig+0x118>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d10d      	bne.n	800ab64 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ab4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	031b      	lsls	r3, r3, #12
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a1f      	ldr	r2, [pc, #124]	@ (800abe4 <TIM_OC4_SetConfig+0x110>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d013      	beq.n	800ab94 <TIM_OC4_SetConfig+0xc0>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a1e      	ldr	r2, [pc, #120]	@ (800abe8 <TIM_OC4_SetConfig+0x114>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d00f      	beq.n	800ab94 <TIM_OC4_SetConfig+0xc0>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a1e      	ldr	r2, [pc, #120]	@ (800abf0 <TIM_OC4_SetConfig+0x11c>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d00b      	beq.n	800ab94 <TIM_OC4_SetConfig+0xc0>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a1d      	ldr	r2, [pc, #116]	@ (800abf4 <TIM_OC4_SetConfig+0x120>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d007      	beq.n	800ab94 <TIM_OC4_SetConfig+0xc0>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a1c      	ldr	r2, [pc, #112]	@ (800abf8 <TIM_OC4_SetConfig+0x124>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d003      	beq.n	800ab94 <TIM_OC4_SetConfig+0xc0>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a17      	ldr	r2, [pc, #92]	@ (800abec <TIM_OC4_SetConfig+0x118>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d113      	bne.n	800abbc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aba2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	019b      	lsls	r3, r3, #6
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	4313      	orrs	r3, r2
 800abae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	019b      	lsls	r3, r3, #6
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	4313      	orrs	r3, r2
 800abba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	621a      	str	r2, [r3, #32]
}
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40012c00 	.word	0x40012c00
 800abe8:	40013400 	.word	0x40013400
 800abec:	40015000 	.word	0x40015000
 800abf0:	40014000 	.word	0x40014000
 800abf4:	40014400 	.word	0x40014400
 800abf8:	40014800 	.word	0x40014800

0800abfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ac40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	041b      	lsls	r3, r3, #16
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a19      	ldr	r2, [pc, #100]	@ (800acb8 <TIM_OC5_SetConfig+0xbc>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d013      	beq.n	800ac7e <TIM_OC5_SetConfig+0x82>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a18      	ldr	r2, [pc, #96]	@ (800acbc <TIM_OC5_SetConfig+0xc0>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d00f      	beq.n	800ac7e <TIM_OC5_SetConfig+0x82>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a17      	ldr	r2, [pc, #92]	@ (800acc0 <TIM_OC5_SetConfig+0xc4>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d00b      	beq.n	800ac7e <TIM_OC5_SetConfig+0x82>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a16      	ldr	r2, [pc, #88]	@ (800acc4 <TIM_OC5_SetConfig+0xc8>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d007      	beq.n	800ac7e <TIM_OC5_SetConfig+0x82>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a15      	ldr	r2, [pc, #84]	@ (800acc8 <TIM_OC5_SetConfig+0xcc>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d003      	beq.n	800ac7e <TIM_OC5_SetConfig+0x82>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a14      	ldr	r2, [pc, #80]	@ (800accc <TIM_OC5_SetConfig+0xd0>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d109      	bne.n	800ac92 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	021b      	lsls	r3, r3, #8
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	621a      	str	r2, [r3, #32]
}
 800acac:	bf00      	nop
 800acae:	371c      	adds	r7, #28
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	40012c00 	.word	0x40012c00
 800acbc:	40013400 	.word	0x40013400
 800acc0:	40014000 	.word	0x40014000
 800acc4:	40014400 	.word	0x40014400
 800acc8:	40014800 	.word	0x40014800
 800accc:	40015000 	.word	0x40015000

0800acd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a1b      	ldr	r3, [r3, #32]
 800ace4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	021b      	lsls	r3, r3, #8
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ad16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	051b      	lsls	r3, r3, #20
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a1a      	ldr	r2, [pc, #104]	@ (800ad90 <TIM_OC6_SetConfig+0xc0>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d013      	beq.n	800ad54 <TIM_OC6_SetConfig+0x84>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a19      	ldr	r2, [pc, #100]	@ (800ad94 <TIM_OC6_SetConfig+0xc4>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d00f      	beq.n	800ad54 <TIM_OC6_SetConfig+0x84>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a18      	ldr	r2, [pc, #96]	@ (800ad98 <TIM_OC6_SetConfig+0xc8>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d00b      	beq.n	800ad54 <TIM_OC6_SetConfig+0x84>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a17      	ldr	r2, [pc, #92]	@ (800ad9c <TIM_OC6_SetConfig+0xcc>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d007      	beq.n	800ad54 <TIM_OC6_SetConfig+0x84>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a16      	ldr	r2, [pc, #88]	@ (800ada0 <TIM_OC6_SetConfig+0xd0>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d003      	beq.n	800ad54 <TIM_OC6_SetConfig+0x84>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a15      	ldr	r2, [pc, #84]	@ (800ada4 <TIM_OC6_SetConfig+0xd4>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d109      	bne.n	800ad68 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	029b      	lsls	r3, r3, #10
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	685a      	ldr	r2, [r3, #4]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	621a      	str	r2, [r3, #32]
}
 800ad82:	bf00      	nop
 800ad84:	371c      	adds	r7, #28
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	40012c00 	.word	0x40012c00
 800ad94:	40013400 	.word	0x40013400
 800ad98:	40014000 	.word	0x40014000
 800ad9c:	40014400 	.word	0x40014400
 800ada0:	40014800 	.word	0x40014800
 800ada4:	40015000 	.word	0x40015000

0800ada8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f023 0201 	bic.w	r2, r3, #1
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800add2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	011b      	lsls	r3, r3, #4
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	4313      	orrs	r3, r2
 800addc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f023 030a 	bic.w	r3, r3, #10
 800ade4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4313      	orrs	r3, r2
 800adec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	621a      	str	r2, [r3, #32]
}
 800adfa:	bf00      	nop
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b087      	sub	sp, #28
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	60b9      	str	r1, [r7, #8]
 800ae10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	f023 0210 	bic.w	r2, r3, #16
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ae30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	031b      	lsls	r3, r3, #12
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ae42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	621a      	str	r2, [r3, #32]
}
 800ae5a:	bf00      	nop
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b085      	sub	sp, #20
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ae7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	f043 0307 	orr.w	r3, r3, #7
 800ae8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	609a      	str	r2, [r3, #8]
}
 800ae94:	bf00      	nop
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
 800aeac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aeba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	021a      	lsls	r2, r3, #8
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	431a      	orrs	r2, r3
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	697a      	ldr	r2, [r7, #20]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	609a      	str	r2, [r3, #8]
}
 800aed4:	bf00      	nop
 800aed6:	371c      	adds	r7, #28
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b087      	sub	sp, #28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f003 031f 	and.w	r3, r3, #31
 800aef2:	2201      	movs	r2, #1
 800aef4:	fa02 f303 	lsl.w	r3, r2, r3
 800aef8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6a1a      	ldr	r2, [r3, #32]
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	43db      	mvns	r3, r3
 800af02:	401a      	ands	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6a1a      	ldr	r2, [r3, #32]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	f003 031f 	and.w	r3, r3, #31
 800af12:	6879      	ldr	r1, [r7, #4]
 800af14:	fa01 f303 	lsl.w	r3, r1, r3
 800af18:	431a      	orrs	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	621a      	str	r2, [r3, #32]
}
 800af1e:	bf00      	nop
 800af20:	371c      	adds	r7, #28
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
	...

0800af2c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d109      	bne.n	800af50 <HAL_TIMEx_PWMN_Start+0x24>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af42:	b2db      	uxtb	r3, r3
 800af44:	2b01      	cmp	r3, #1
 800af46:	bf14      	ite	ne
 800af48:	2301      	movne	r3, #1
 800af4a:	2300      	moveq	r3, #0
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	e022      	b.n	800af96 <HAL_TIMEx_PWMN_Start+0x6a>
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	2b04      	cmp	r3, #4
 800af54:	d109      	bne.n	800af6a <HAL_TIMEx_PWMN_Start+0x3e>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b01      	cmp	r3, #1
 800af60:	bf14      	ite	ne
 800af62:	2301      	movne	r3, #1
 800af64:	2300      	moveq	r3, #0
 800af66:	b2db      	uxtb	r3, r3
 800af68:	e015      	b.n	800af96 <HAL_TIMEx_PWMN_Start+0x6a>
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b08      	cmp	r3, #8
 800af6e:	d109      	bne.n	800af84 <HAL_TIMEx_PWMN_Start+0x58>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b01      	cmp	r3, #1
 800af7a:	bf14      	ite	ne
 800af7c:	2301      	movne	r3, #1
 800af7e:	2300      	moveq	r3, #0
 800af80:	b2db      	uxtb	r3, r3
 800af82:	e008      	b.n	800af96 <HAL_TIMEx_PWMN_Start+0x6a>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	bf14      	ite	ne
 800af90:	2301      	movne	r3, #1
 800af92:	2300      	moveq	r3, #0
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d001      	beq.n	800af9e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e073      	b.n	800b086 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d104      	bne.n	800afae <HAL_TIMEx_PWMN_Start+0x82>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2202      	movs	r2, #2
 800afa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afac:	e013      	b.n	800afd6 <HAL_TIMEx_PWMN_Start+0xaa>
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b04      	cmp	r3, #4
 800afb2:	d104      	bne.n	800afbe <HAL_TIMEx_PWMN_Start+0x92>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2202      	movs	r2, #2
 800afb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afbc:	e00b      	b.n	800afd6 <HAL_TIMEx_PWMN_Start+0xaa>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b08      	cmp	r3, #8
 800afc2:	d104      	bne.n	800afce <HAL_TIMEx_PWMN_Start+0xa2>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800afcc:	e003      	b.n	800afd6 <HAL_TIMEx_PWMN_Start+0xaa>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2202      	movs	r2, #2
 800afd2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2204      	movs	r2, #4
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 fa34 	bl	800b44c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aff2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a25      	ldr	r2, [pc, #148]	@ (800b090 <HAL_TIMEx_PWMN_Start+0x164>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d022      	beq.n	800b044 <HAL_TIMEx_PWMN_Start+0x118>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b006:	d01d      	beq.n	800b044 <HAL_TIMEx_PWMN_Start+0x118>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a21      	ldr	r2, [pc, #132]	@ (800b094 <HAL_TIMEx_PWMN_Start+0x168>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d018      	beq.n	800b044 <HAL_TIMEx_PWMN_Start+0x118>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a20      	ldr	r2, [pc, #128]	@ (800b098 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d013      	beq.n	800b044 <HAL_TIMEx_PWMN_Start+0x118>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a1e      	ldr	r2, [pc, #120]	@ (800b09c <HAL_TIMEx_PWMN_Start+0x170>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d00e      	beq.n	800b044 <HAL_TIMEx_PWMN_Start+0x118>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a1d      	ldr	r2, [pc, #116]	@ (800b0a0 <HAL_TIMEx_PWMN_Start+0x174>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d009      	beq.n	800b044 <HAL_TIMEx_PWMN_Start+0x118>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a1b      	ldr	r2, [pc, #108]	@ (800b0a4 <HAL_TIMEx_PWMN_Start+0x178>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d004      	beq.n	800b044 <HAL_TIMEx_PWMN_Start+0x118>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a1a      	ldr	r2, [pc, #104]	@ (800b0a8 <HAL_TIMEx_PWMN_Start+0x17c>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d115      	bne.n	800b070 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689a      	ldr	r2, [r3, #8]
 800b04a:	4b18      	ldr	r3, [pc, #96]	@ (800b0ac <HAL_TIMEx_PWMN_Start+0x180>)
 800b04c:	4013      	ands	r3, r2
 800b04e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b06      	cmp	r3, #6
 800b054:	d015      	beq.n	800b082 <HAL_TIMEx_PWMN_Start+0x156>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b05c:	d011      	beq.n	800b082 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f042 0201 	orr.w	r2, r2, #1
 800b06c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b06e:	e008      	b.n	800b082 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	e000      	b.n	800b084 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b082:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	40012c00 	.word	0x40012c00
 800b094:	40000400 	.word	0x40000400
 800b098:	40000800 	.word	0x40000800
 800b09c:	40000c00 	.word	0x40000c00
 800b0a0:	40013400 	.word	0x40013400
 800b0a4:	40014000 	.word	0x40014000
 800b0a8:	40015000 	.word	0x40015000
 800b0ac:	00010007 	.word	0x00010007

0800b0b0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 f9c2 	bl	800b44c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6a1a      	ldr	r2, [r3, #32]
 800b0ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10f      	bne.n	800b0f8 <HAL_TIMEx_PWMN_Stop+0x48>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	6a1a      	ldr	r2, [r3, #32]
 800b0de:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d107      	bne.n	800b0f8 <HAL_TIMEx_PWMN_Stop+0x48>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b0f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6a1a      	ldr	r2, [r3, #32]
 800b0fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b102:	4013      	ands	r3, r2
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10f      	bne.n	800b128 <HAL_TIMEx_PWMN_Stop+0x78>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6a1a      	ldr	r2, [r3, #32]
 800b10e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b112:	4013      	ands	r3, r2
 800b114:	2b00      	cmp	r3, #0
 800b116:	d107      	bne.n	800b128 <HAL_TIMEx_PWMN_Stop+0x78>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f022 0201 	bic.w	r2, r2, #1
 800b126:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d104      	bne.n	800b138 <HAL_TIMEx_PWMN_Stop+0x88>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b136:	e013      	b.n	800b160 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	2b04      	cmp	r3, #4
 800b13c:	d104      	bne.n	800b148 <HAL_TIMEx_PWMN_Stop+0x98>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b146:	e00b      	b.n	800b160 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	2b08      	cmp	r3, #8
 800b14c:	d104      	bne.n	800b158 <HAL_TIMEx_PWMN_Stop+0xa8>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b156:	e003      	b.n	800b160 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d101      	bne.n	800b184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b180:	2302      	movs	r3, #2
 800b182:	e074      	b.n	800b26e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a34      	ldr	r2, [pc, #208]	@ (800b27c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d009      	beq.n	800b1c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a33      	ldr	r2, [pc, #204]	@ (800b280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d004      	beq.n	800b1c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a31      	ldr	r2, [pc, #196]	@ (800b284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d108      	bne.n	800b1d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b1c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b1da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a21      	ldr	r2, [pc, #132]	@ (800b27c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d022      	beq.n	800b242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b204:	d01d      	beq.n	800b242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a1f      	ldr	r2, [pc, #124]	@ (800b288 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d018      	beq.n	800b242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a1d      	ldr	r2, [pc, #116]	@ (800b28c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d013      	beq.n	800b242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a1c      	ldr	r2, [pc, #112]	@ (800b290 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d00e      	beq.n	800b242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a15      	ldr	r2, [pc, #84]	@ (800b280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d009      	beq.n	800b242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a18      	ldr	r2, [pc, #96]	@ (800b294 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d004      	beq.n	800b242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a11      	ldr	r2, [pc, #68]	@ (800b284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d10c      	bne.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	4313      	orrs	r3, r2
 800b252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	40012c00 	.word	0x40012c00
 800b280:	40013400 	.word	0x40013400
 800b284:	40015000 	.word	0x40015000
 800b288:	40000400 	.word	0x40000400
 800b28c:	40000800 	.word	0x40000800
 800b290:	40000c00 	.word	0x40000c00
 800b294:	40014000 	.word	0x40014000

0800b298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d101      	bne.n	800b2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	e078      	b.n	800b3a6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	695b      	ldr	r3, [r3, #20]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b31a:	4313      	orrs	r3, r2
 800b31c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	041b      	lsls	r3, r3, #16
 800b32a:	4313      	orrs	r3, r2
 800b32c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	4313      	orrs	r3, r2
 800b33a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a1c      	ldr	r2, [pc, #112]	@ (800b3b4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d009      	beq.n	800b35a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a1b      	ldr	r2, [pc, #108]	@ (800b3b8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d004      	beq.n	800b35a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a19      	ldr	r2, [pc, #100]	@ (800b3bc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d11c      	bne.n	800b394 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b364:	051b      	lsls	r3, r3, #20
 800b366:	4313      	orrs	r3, r2
 800b368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	6a1b      	ldr	r3, [r3, #32]
 800b374:	4313      	orrs	r3, r2
 800b376:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b382:	4313      	orrs	r3, r2
 800b384:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b390:	4313      	orrs	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	40012c00 	.word	0x40012c00
 800b3b8:	40013400 	.word	0x40013400
 800b3bc:	40015000 	.word	0x40015000

0800b3c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b087      	sub	sp, #28
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	f003 030f 	and.w	r3, r3, #15
 800b45e:	2204      	movs	r2, #4
 800b460:	fa02 f303 	lsl.w	r3, r2, r3
 800b464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6a1a      	ldr	r2, [r3, #32]
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	43db      	mvns	r3, r3
 800b46e:	401a      	ands	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6a1a      	ldr	r2, [r3, #32]
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	f003 030f 	and.w	r3, r3, #15
 800b47e:	6879      	ldr	r1, [r7, #4]
 800b480:	fa01 f303 	lsl.w	r3, r1, r3
 800b484:	431a      	orrs	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	621a      	str	r2, [r3, #32]
}
 800b48a:	bf00      	nop
 800b48c:	371c      	adds	r7, #28
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d101      	bne.n	800b4a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e042      	b.n	800b52e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d106      	bne.n	800b4c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7f7 fdd4 	bl	8003068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2224      	movs	r2, #36	@ 0x24
 800b4c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f022 0201 	bic.w	r2, r2, #1
 800b4d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fbb3 	bl	800bc4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f8b4 	bl	800b654 <UART_SetConfig>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d101      	bne.n	800b4f6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e01b      	b.n	800b52e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	685a      	ldr	r2, [r3, #4]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b504:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	689a      	ldr	r2, [r3, #8]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b514:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f042 0201 	orr.w	r2, r2, #1
 800b524:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fc32 	bl	800bd90 <UART_CheckIdleState>
 800b52c:	4603      	mov	r3, r0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b08a      	sub	sp, #40	@ 0x28
 800b53a:	af02      	add	r7, sp, #8
 800b53c:	60f8      	str	r0, [r7, #12]
 800b53e:	60b9      	str	r1, [r7, #8]
 800b540:	603b      	str	r3, [r7, #0]
 800b542:	4613      	mov	r3, r2
 800b544:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b54c:	2b20      	cmp	r3, #32
 800b54e:	d17b      	bne.n	800b648 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <HAL_UART_Transmit+0x26>
 800b556:	88fb      	ldrh	r3, [r7, #6]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e074      	b.n	800b64a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2221      	movs	r2, #33	@ 0x21
 800b56c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b570:	f7f9 fff2 	bl	8005558 <HAL_GetTick>
 800b574:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	88fa      	ldrh	r2, [r7, #6]
 800b57a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	88fa      	ldrh	r2, [r7, #6]
 800b582:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b58e:	d108      	bne.n	800b5a2 <HAL_UART_Transmit+0x6c>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d104      	bne.n	800b5a2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b598:	2300      	movs	r3, #0
 800b59a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	61bb      	str	r3, [r7, #24]
 800b5a0:	e003      	b.n	800b5aa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b5aa:	e030      	b.n	800b60e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	2180      	movs	r1, #128	@ 0x80
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 fc94 	bl	800bee4 <UART_WaitOnFlagUntilTimeout>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d005      	beq.n	800b5ce <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e03d      	b.n	800b64a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10b      	bne.n	800b5ec <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	3302      	adds	r3, #2
 800b5e8:	61bb      	str	r3, [r7, #24]
 800b5ea:	e007      	b.n	800b5fc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	781a      	ldrb	r2, [r3, #0]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b602:	b29b      	uxth	r3, r3
 800b604:	3b01      	subs	r3, #1
 800b606:	b29a      	uxth	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b614:	b29b      	uxth	r3, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1c8      	bne.n	800b5ac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2200      	movs	r2, #0
 800b622:	2140      	movs	r1, #64	@ 0x40
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f000 fc5d 	bl	800bee4 <UART_WaitOnFlagUntilTimeout>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d005      	beq.n	800b63c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2220      	movs	r2, #32
 800b634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b638:	2303      	movs	r3, #3
 800b63a:	e006      	b.n	800b64a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2220      	movs	r2, #32
 800b640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	e000      	b.n	800b64a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b648:	2302      	movs	r3, #2
  }
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3720      	adds	r7, #32
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b658:	b08c      	sub	sp, #48	@ 0x30
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	689a      	ldr	r2, [r3, #8]
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	431a      	orrs	r2, r3
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	431a      	orrs	r2, r3
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	69db      	ldr	r3, [r3, #28]
 800b678:	4313      	orrs	r3, r2
 800b67a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	4baa      	ldr	r3, [pc, #680]	@ (800b92c <UART_SetConfig+0x2d8>)
 800b684:	4013      	ands	r3, r2
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	6812      	ldr	r2, [r2, #0]
 800b68a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b68c:	430b      	orrs	r3, r1
 800b68e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	68da      	ldr	r2, [r3, #12]
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a9f      	ldr	r2, [pc, #636]	@ (800b930 <UART_SetConfig+0x2dc>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d004      	beq.n	800b6c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b6ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	6812      	ldr	r2, [r2, #0]
 800b6d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6d4:	430b      	orrs	r3, r1
 800b6d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6de:	f023 010f 	bic.w	r1, r3, #15
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	430a      	orrs	r2, r1
 800b6ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a90      	ldr	r2, [pc, #576]	@ (800b934 <UART_SetConfig+0x2e0>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d125      	bne.n	800b744 <UART_SetConfig+0xf0>
 800b6f8:	4b8f      	ldr	r3, [pc, #572]	@ (800b938 <UART_SetConfig+0x2e4>)
 800b6fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6fe:	f003 0303 	and.w	r3, r3, #3
 800b702:	2b03      	cmp	r3, #3
 800b704:	d81a      	bhi.n	800b73c <UART_SetConfig+0xe8>
 800b706:	a201      	add	r2, pc, #4	@ (adr r2, 800b70c <UART_SetConfig+0xb8>)
 800b708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b70c:	0800b71d 	.word	0x0800b71d
 800b710:	0800b72d 	.word	0x0800b72d
 800b714:	0800b725 	.word	0x0800b725
 800b718:	0800b735 	.word	0x0800b735
 800b71c:	2301      	movs	r3, #1
 800b71e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b722:	e116      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b724:	2302      	movs	r3, #2
 800b726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b72a:	e112      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b72c:	2304      	movs	r3, #4
 800b72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b732:	e10e      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b734:	2308      	movs	r3, #8
 800b736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b73a:	e10a      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b73c:	2310      	movs	r3, #16
 800b73e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b742:	e106      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a7c      	ldr	r2, [pc, #496]	@ (800b93c <UART_SetConfig+0x2e8>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d138      	bne.n	800b7c0 <UART_SetConfig+0x16c>
 800b74e:	4b7a      	ldr	r3, [pc, #488]	@ (800b938 <UART_SetConfig+0x2e4>)
 800b750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b754:	f003 030c 	and.w	r3, r3, #12
 800b758:	2b0c      	cmp	r3, #12
 800b75a:	d82d      	bhi.n	800b7b8 <UART_SetConfig+0x164>
 800b75c:	a201      	add	r2, pc, #4	@ (adr r2, 800b764 <UART_SetConfig+0x110>)
 800b75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b762:	bf00      	nop
 800b764:	0800b799 	.word	0x0800b799
 800b768:	0800b7b9 	.word	0x0800b7b9
 800b76c:	0800b7b9 	.word	0x0800b7b9
 800b770:	0800b7b9 	.word	0x0800b7b9
 800b774:	0800b7a9 	.word	0x0800b7a9
 800b778:	0800b7b9 	.word	0x0800b7b9
 800b77c:	0800b7b9 	.word	0x0800b7b9
 800b780:	0800b7b9 	.word	0x0800b7b9
 800b784:	0800b7a1 	.word	0x0800b7a1
 800b788:	0800b7b9 	.word	0x0800b7b9
 800b78c:	0800b7b9 	.word	0x0800b7b9
 800b790:	0800b7b9 	.word	0x0800b7b9
 800b794:	0800b7b1 	.word	0x0800b7b1
 800b798:	2300      	movs	r3, #0
 800b79a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b79e:	e0d8      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7a6:	e0d4      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b7a8:	2304      	movs	r3, #4
 800b7aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ae:	e0d0      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b7b0:	2308      	movs	r3, #8
 800b7b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7b6:	e0cc      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b7b8:	2310      	movs	r3, #16
 800b7ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7be:	e0c8      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a5e      	ldr	r2, [pc, #376]	@ (800b940 <UART_SetConfig+0x2ec>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d125      	bne.n	800b816 <UART_SetConfig+0x1c2>
 800b7ca:	4b5b      	ldr	r3, [pc, #364]	@ (800b938 <UART_SetConfig+0x2e4>)
 800b7cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b7d4:	2b30      	cmp	r3, #48	@ 0x30
 800b7d6:	d016      	beq.n	800b806 <UART_SetConfig+0x1b2>
 800b7d8:	2b30      	cmp	r3, #48	@ 0x30
 800b7da:	d818      	bhi.n	800b80e <UART_SetConfig+0x1ba>
 800b7dc:	2b20      	cmp	r3, #32
 800b7de:	d00a      	beq.n	800b7f6 <UART_SetConfig+0x1a2>
 800b7e0:	2b20      	cmp	r3, #32
 800b7e2:	d814      	bhi.n	800b80e <UART_SetConfig+0x1ba>
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d002      	beq.n	800b7ee <UART_SetConfig+0x19a>
 800b7e8:	2b10      	cmp	r3, #16
 800b7ea:	d008      	beq.n	800b7fe <UART_SetConfig+0x1aa>
 800b7ec:	e00f      	b.n	800b80e <UART_SetConfig+0x1ba>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7f4:	e0ad      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7fc:	e0a9      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b7fe:	2304      	movs	r3, #4
 800b800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b804:	e0a5      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b806:	2308      	movs	r3, #8
 800b808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b80c:	e0a1      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b80e:	2310      	movs	r3, #16
 800b810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b814:	e09d      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a4a      	ldr	r2, [pc, #296]	@ (800b944 <UART_SetConfig+0x2f0>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d125      	bne.n	800b86c <UART_SetConfig+0x218>
 800b820:	4b45      	ldr	r3, [pc, #276]	@ (800b938 <UART_SetConfig+0x2e4>)
 800b822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b826:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b82a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b82c:	d016      	beq.n	800b85c <UART_SetConfig+0x208>
 800b82e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b830:	d818      	bhi.n	800b864 <UART_SetConfig+0x210>
 800b832:	2b80      	cmp	r3, #128	@ 0x80
 800b834:	d00a      	beq.n	800b84c <UART_SetConfig+0x1f8>
 800b836:	2b80      	cmp	r3, #128	@ 0x80
 800b838:	d814      	bhi.n	800b864 <UART_SetConfig+0x210>
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d002      	beq.n	800b844 <UART_SetConfig+0x1f0>
 800b83e:	2b40      	cmp	r3, #64	@ 0x40
 800b840:	d008      	beq.n	800b854 <UART_SetConfig+0x200>
 800b842:	e00f      	b.n	800b864 <UART_SetConfig+0x210>
 800b844:	2300      	movs	r3, #0
 800b846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b84a:	e082      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b84c:	2302      	movs	r3, #2
 800b84e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b852:	e07e      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b854:	2304      	movs	r3, #4
 800b856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b85a:	e07a      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b85c:	2308      	movs	r3, #8
 800b85e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b862:	e076      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b864:	2310      	movs	r3, #16
 800b866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b86a:	e072      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a35      	ldr	r2, [pc, #212]	@ (800b948 <UART_SetConfig+0x2f4>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d12a      	bne.n	800b8cc <UART_SetConfig+0x278>
 800b876:	4b30      	ldr	r3, [pc, #192]	@ (800b938 <UART_SetConfig+0x2e4>)
 800b878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b87c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b884:	d01a      	beq.n	800b8bc <UART_SetConfig+0x268>
 800b886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b88a:	d81b      	bhi.n	800b8c4 <UART_SetConfig+0x270>
 800b88c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b890:	d00c      	beq.n	800b8ac <UART_SetConfig+0x258>
 800b892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b896:	d815      	bhi.n	800b8c4 <UART_SetConfig+0x270>
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d003      	beq.n	800b8a4 <UART_SetConfig+0x250>
 800b89c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8a0:	d008      	beq.n	800b8b4 <UART_SetConfig+0x260>
 800b8a2:	e00f      	b.n	800b8c4 <UART_SetConfig+0x270>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8aa:	e052      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8b2:	e04e      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b8b4:	2304      	movs	r3, #4
 800b8b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ba:	e04a      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b8bc:	2308      	movs	r3, #8
 800b8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8c2:	e046      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b8c4:	2310      	movs	r3, #16
 800b8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ca:	e042      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a17      	ldr	r2, [pc, #92]	@ (800b930 <UART_SetConfig+0x2dc>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d13a      	bne.n	800b94c <UART_SetConfig+0x2f8>
 800b8d6:	4b18      	ldr	r3, [pc, #96]	@ (800b938 <UART_SetConfig+0x2e4>)
 800b8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b8e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b8e4:	d01a      	beq.n	800b91c <UART_SetConfig+0x2c8>
 800b8e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b8ea:	d81b      	bhi.n	800b924 <UART_SetConfig+0x2d0>
 800b8ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8f0:	d00c      	beq.n	800b90c <UART_SetConfig+0x2b8>
 800b8f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8f6:	d815      	bhi.n	800b924 <UART_SetConfig+0x2d0>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <UART_SetConfig+0x2b0>
 800b8fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b900:	d008      	beq.n	800b914 <UART_SetConfig+0x2c0>
 800b902:	e00f      	b.n	800b924 <UART_SetConfig+0x2d0>
 800b904:	2300      	movs	r3, #0
 800b906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b90a:	e022      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b90c:	2302      	movs	r3, #2
 800b90e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b912:	e01e      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b914:	2304      	movs	r3, #4
 800b916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b91a:	e01a      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b91c:	2308      	movs	r3, #8
 800b91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b922:	e016      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b924:	2310      	movs	r3, #16
 800b926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b92a:	e012      	b.n	800b952 <UART_SetConfig+0x2fe>
 800b92c:	cfff69f3 	.word	0xcfff69f3
 800b930:	40008000 	.word	0x40008000
 800b934:	40013800 	.word	0x40013800
 800b938:	40021000 	.word	0x40021000
 800b93c:	40004400 	.word	0x40004400
 800b940:	40004800 	.word	0x40004800
 800b944:	40004c00 	.word	0x40004c00
 800b948:	40005000 	.word	0x40005000
 800b94c:	2310      	movs	r3, #16
 800b94e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4aae      	ldr	r2, [pc, #696]	@ (800bc10 <UART_SetConfig+0x5bc>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	f040 8097 	bne.w	800ba8c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b95e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b962:	2b08      	cmp	r3, #8
 800b964:	d823      	bhi.n	800b9ae <UART_SetConfig+0x35a>
 800b966:	a201      	add	r2, pc, #4	@ (adr r2, 800b96c <UART_SetConfig+0x318>)
 800b968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96c:	0800b991 	.word	0x0800b991
 800b970:	0800b9af 	.word	0x0800b9af
 800b974:	0800b999 	.word	0x0800b999
 800b978:	0800b9af 	.word	0x0800b9af
 800b97c:	0800b99f 	.word	0x0800b99f
 800b980:	0800b9af 	.word	0x0800b9af
 800b984:	0800b9af 	.word	0x0800b9af
 800b988:	0800b9af 	.word	0x0800b9af
 800b98c:	0800b9a7 	.word	0x0800b9a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b990:	f7fc fed6 	bl	8008740 <HAL_RCC_GetPCLK1Freq>
 800b994:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b996:	e010      	b.n	800b9ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b998:	4b9e      	ldr	r3, [pc, #632]	@ (800bc14 <UART_SetConfig+0x5c0>)
 800b99a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b99c:	e00d      	b.n	800b9ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b99e:	f7fc fe61 	bl	8008664 <HAL_RCC_GetSysClockFreq>
 800b9a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b9a4:	e009      	b.n	800b9ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b9aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b9ac:	e005      	b.n	800b9ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b9b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f000 8130 	beq.w	800bc22 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c6:	4a94      	ldr	r2, [pc, #592]	@ (800bc18 <UART_SetConfig+0x5c4>)
 800b9c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	685a      	ldr	r2, [r3, #4]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	005b      	lsls	r3, r3, #1
 800b9de:	4413      	add	r3, r2
 800b9e0:	69ba      	ldr	r2, [r7, #24]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d305      	bcc.n	800b9f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9ec:	69ba      	ldr	r2, [r7, #24]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d903      	bls.n	800b9fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b9f8:	e113      	b.n	800bc22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	60bb      	str	r3, [r7, #8]
 800ba00:	60fa      	str	r2, [r7, #12]
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba06:	4a84      	ldr	r2, [pc, #528]	@ (800bc18 <UART_SetConfig+0x5c4>)
 800ba08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	2200      	movs	r2, #0
 800ba10:	603b      	str	r3, [r7, #0]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba1c:	f7f5 f93c 	bl	8000c98 <__aeabi_uldivmod>
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	4610      	mov	r0, r2
 800ba26:	4619      	mov	r1, r3
 800ba28:	f04f 0200 	mov.w	r2, #0
 800ba2c:	f04f 0300 	mov.w	r3, #0
 800ba30:	020b      	lsls	r3, r1, #8
 800ba32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba36:	0202      	lsls	r2, r0, #8
 800ba38:	6979      	ldr	r1, [r7, #20]
 800ba3a:	6849      	ldr	r1, [r1, #4]
 800ba3c:	0849      	lsrs	r1, r1, #1
 800ba3e:	2000      	movs	r0, #0
 800ba40:	460c      	mov	r4, r1
 800ba42:	4605      	mov	r5, r0
 800ba44:	eb12 0804 	adds.w	r8, r2, r4
 800ba48:	eb43 0905 	adc.w	r9, r3, r5
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	469a      	mov	sl, r3
 800ba54:	4693      	mov	fp, r2
 800ba56:	4652      	mov	r2, sl
 800ba58:	465b      	mov	r3, fp
 800ba5a:	4640      	mov	r0, r8
 800ba5c:	4649      	mov	r1, r9
 800ba5e:	f7f5 f91b 	bl	8000c98 <__aeabi_uldivmod>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	4613      	mov	r3, r2
 800ba68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba6a:	6a3b      	ldr	r3, [r7, #32]
 800ba6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba70:	d308      	bcc.n	800ba84 <UART_SetConfig+0x430>
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba78:	d204      	bcs.n	800ba84 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6a3a      	ldr	r2, [r7, #32]
 800ba80:	60da      	str	r2, [r3, #12]
 800ba82:	e0ce      	b.n	800bc22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba8a:	e0ca      	b.n	800bc22 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	69db      	ldr	r3, [r3, #28]
 800ba90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba94:	d166      	bne.n	800bb64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ba96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba9a:	2b08      	cmp	r3, #8
 800ba9c:	d827      	bhi.n	800baee <UART_SetConfig+0x49a>
 800ba9e:	a201      	add	r2, pc, #4	@ (adr r2, 800baa4 <UART_SetConfig+0x450>)
 800baa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa4:	0800bac9 	.word	0x0800bac9
 800baa8:	0800bad1 	.word	0x0800bad1
 800baac:	0800bad9 	.word	0x0800bad9
 800bab0:	0800baef 	.word	0x0800baef
 800bab4:	0800badf 	.word	0x0800badf
 800bab8:	0800baef 	.word	0x0800baef
 800babc:	0800baef 	.word	0x0800baef
 800bac0:	0800baef 	.word	0x0800baef
 800bac4:	0800bae7 	.word	0x0800bae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bac8:	f7fc fe3a 	bl	8008740 <HAL_RCC_GetPCLK1Freq>
 800bacc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bace:	e014      	b.n	800bafa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bad0:	f7fc fe4c 	bl	800876c <HAL_RCC_GetPCLK2Freq>
 800bad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bad6:	e010      	b.n	800bafa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bad8:	4b4e      	ldr	r3, [pc, #312]	@ (800bc14 <UART_SetConfig+0x5c0>)
 800bada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800badc:	e00d      	b.n	800bafa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bade:	f7fc fdc1 	bl	8008664 <HAL_RCC_GetSysClockFreq>
 800bae2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bae4:	e009      	b.n	800bafa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800baea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800baec:	e005      	b.n	800bafa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800baee:	2300      	movs	r3, #0
 800baf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800baf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 8090 	beq.w	800bc22 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb06:	4a44      	ldr	r2, [pc, #272]	@ (800bc18 <UART_SetConfig+0x5c4>)
 800bb08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb10:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb14:	005a      	lsls	r2, r3, #1
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	085b      	lsrs	r3, r3, #1
 800bb1c:	441a      	add	r2, r3
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb28:	6a3b      	ldr	r3, [r7, #32]
 800bb2a:	2b0f      	cmp	r3, #15
 800bb2c:	d916      	bls.n	800bb5c <UART_SetConfig+0x508>
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb34:	d212      	bcs.n	800bb5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	f023 030f 	bic.w	r3, r3, #15
 800bb3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	085b      	lsrs	r3, r3, #1
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	f003 0307 	and.w	r3, r3, #7
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	8bfb      	ldrh	r3, [r7, #30]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	8bfa      	ldrh	r2, [r7, #30]
 800bb58:	60da      	str	r2, [r3, #12]
 800bb5a:	e062      	b.n	800bc22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb62:	e05e      	b.n	800bc22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb68:	2b08      	cmp	r3, #8
 800bb6a:	d828      	bhi.n	800bbbe <UART_SetConfig+0x56a>
 800bb6c:	a201      	add	r2, pc, #4	@ (adr r2, 800bb74 <UART_SetConfig+0x520>)
 800bb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb72:	bf00      	nop
 800bb74:	0800bb99 	.word	0x0800bb99
 800bb78:	0800bba1 	.word	0x0800bba1
 800bb7c:	0800bba9 	.word	0x0800bba9
 800bb80:	0800bbbf 	.word	0x0800bbbf
 800bb84:	0800bbaf 	.word	0x0800bbaf
 800bb88:	0800bbbf 	.word	0x0800bbbf
 800bb8c:	0800bbbf 	.word	0x0800bbbf
 800bb90:	0800bbbf 	.word	0x0800bbbf
 800bb94:	0800bbb7 	.word	0x0800bbb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb98:	f7fc fdd2 	bl	8008740 <HAL_RCC_GetPCLK1Freq>
 800bb9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb9e:	e014      	b.n	800bbca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bba0:	f7fc fde4 	bl	800876c <HAL_RCC_GetPCLK2Freq>
 800bba4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bba6:	e010      	b.n	800bbca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bba8:	4b1a      	ldr	r3, [pc, #104]	@ (800bc14 <UART_SetConfig+0x5c0>)
 800bbaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bbac:	e00d      	b.n	800bbca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbae:	f7fc fd59 	bl	8008664 <HAL_RCC_GetSysClockFreq>
 800bbb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bbb4:	e009      	b.n	800bbca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bbbc:	e005      	b.n	800bbca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bbc8:	bf00      	nop
    }

    if (pclk != 0U)
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d028      	beq.n	800bc22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd4:	4a10      	ldr	r2, [pc, #64]	@ (800bc18 <UART_SetConfig+0x5c4>)
 800bbd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbde:	fbb3 f2f2 	udiv	r2, r3, r2
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	085b      	lsrs	r3, r3, #1
 800bbe8:	441a      	add	r2, r3
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	2b0f      	cmp	r3, #15
 800bbf8:	d910      	bls.n	800bc1c <UART_SetConfig+0x5c8>
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc00:	d20c      	bcs.n	800bc1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	60da      	str	r2, [r3, #12]
 800bc0c:	e009      	b.n	800bc22 <UART_SetConfig+0x5ce>
 800bc0e:	bf00      	nop
 800bc10:	40008000 	.word	0x40008000
 800bc14:	00f42400 	.word	0x00f42400
 800bc18:	08010564 	.word	0x08010564
      }
      else
      {
        ret = HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2200      	movs	r2, #0
 800bc36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bc3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3730      	adds	r7, #48	@ 0x30
 800bc46:	46bd      	mov	sp, r7
 800bc48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bc4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc58:	f003 0308 	and.w	r3, r3, #8
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00a      	beq.n	800bc76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	430a      	orrs	r2, r1
 800bc74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc7a:	f003 0301 	and.w	r3, r3, #1
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00a      	beq.n	800bc98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	430a      	orrs	r2, r1
 800bc96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc9c:	f003 0302 	and.w	r3, r3, #2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00a      	beq.n	800bcba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	430a      	orrs	r2, r1
 800bcb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcbe:	f003 0304 	and.w	r3, r3, #4
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00a      	beq.n	800bcdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce0:	f003 0310 	and.w	r3, r3, #16
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00a      	beq.n	800bcfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	430a      	orrs	r2, r1
 800bcfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd02:	f003 0320 	and.w	r3, r3, #32
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00a      	beq.n	800bd20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	430a      	orrs	r2, r1
 800bd1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d01a      	beq.n	800bd62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	430a      	orrs	r2, r1
 800bd40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd4a:	d10a      	bne.n	800bd62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	430a      	orrs	r2, r1
 800bd60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00a      	beq.n	800bd84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	430a      	orrs	r2, r1
 800bd82:	605a      	str	r2, [r3, #4]
  }
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b098      	sub	sp, #96	@ 0x60
 800bd94:	af02      	add	r7, sp, #8
 800bd96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bda0:	f7f9 fbda 	bl	8005558 <HAL_GetTick>
 800bda4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f003 0308 	and.w	r3, r3, #8
 800bdb0:	2b08      	cmp	r3, #8
 800bdb2:	d12f      	bne.n	800be14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f88e 	bl	800bee4 <UART_WaitOnFlagUntilTimeout>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d022      	beq.n	800be14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdd6:	e853 3f00 	ldrex	r3, [r3]
 800bdda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bde2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	461a      	mov	r2, r3
 800bdea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdec:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bdf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdf4:	e841 2300 	strex	r3, r2, [r1]
 800bdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1e6      	bne.n	800bdce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2220      	movs	r2, #32
 800be04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be10:	2303      	movs	r3, #3
 800be12:	e063      	b.n	800bedc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f003 0304 	and.w	r3, r3, #4
 800be1e:	2b04      	cmp	r3, #4
 800be20:	d149      	bne.n	800beb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be2a:	2200      	movs	r2, #0
 800be2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f857 	bl	800bee4 <UART_WaitOnFlagUntilTimeout>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d03c      	beq.n	800beb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be44:	e853 3f00 	ldrex	r3, [r3]
 800be48:	623b      	str	r3, [r7, #32]
   return(result);
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	461a      	mov	r2, r3
 800be58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800be5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be62:	e841 2300 	strex	r3, r2, [r1]
 800be66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1e6      	bne.n	800be3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	3308      	adds	r3, #8
 800be74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	e853 3f00 	ldrex	r3, [r3]
 800be7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f023 0301 	bic.w	r3, r3, #1
 800be84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	3308      	adds	r3, #8
 800be8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be8e:	61fa      	str	r2, [r7, #28]
 800be90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be92:	69b9      	ldr	r1, [r7, #24]
 800be94:	69fa      	ldr	r2, [r7, #28]
 800be96:	e841 2300 	strex	r3, r2, [r1]
 800be9a:	617b      	str	r3, [r7, #20]
   return(result);
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1e5      	bne.n	800be6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2220      	movs	r2, #32
 800bea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e012      	b.n	800bedc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2220      	movs	r2, #32
 800beba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2220      	movs	r2, #32
 800bec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3758      	adds	r7, #88	@ 0x58
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	603b      	str	r3, [r7, #0]
 800bef0:	4613      	mov	r3, r2
 800bef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bef4:	e04f      	b.n	800bf96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befc:	d04b      	beq.n	800bf96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800befe:	f7f9 fb2b 	bl	8005558 <HAL_GetTick>
 800bf02:	4602      	mov	r2, r0
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	69ba      	ldr	r2, [r7, #24]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d302      	bcc.n	800bf14 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf14:	2303      	movs	r3, #3
 800bf16:	e04e      	b.n	800bfb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 0304 	and.w	r3, r3, #4
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d037      	beq.n	800bf96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	2b80      	cmp	r3, #128	@ 0x80
 800bf2a:	d034      	beq.n	800bf96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	2b40      	cmp	r3, #64	@ 0x40
 800bf30:	d031      	beq.n	800bf96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	69db      	ldr	r3, [r3, #28]
 800bf38:	f003 0308 	and.w	r3, r3, #8
 800bf3c:	2b08      	cmp	r3, #8
 800bf3e:	d110      	bne.n	800bf62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2208      	movs	r2, #8
 800bf46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 f838 	bl	800bfbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2208      	movs	r2, #8
 800bf52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e029      	b.n	800bfb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	69db      	ldr	r3, [r3, #28]
 800bf68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf70:	d111      	bne.n	800bf96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f000 f81e 	bl	800bfbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2220      	movs	r2, #32
 800bf86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e00f      	b.n	800bfb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	69da      	ldr	r2, [r3, #28]
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	4013      	ands	r3, r2
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	bf0c      	ite	eq
 800bfa6:	2301      	moveq	r3, #1
 800bfa8:	2300      	movne	r3, #0
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	461a      	mov	r2, r3
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d0a0      	beq.n	800bef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	b095      	sub	sp, #84	@ 0x54
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfce:	e853 3f00 	ldrex	r3, [r3]
 800bfd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfe4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfe6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bfea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bfec:	e841 2300 	strex	r3, r2, [r1]
 800bff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e6      	bne.n	800bfc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3308      	adds	r3, #8
 800bffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	61fb      	str	r3, [r7, #28]
   return(result);
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c00e:	f023 0301 	bic.w	r3, r3, #1
 800c012:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	3308      	adds	r3, #8
 800c01a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c01c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c024:	e841 2300 	strex	r3, r2, [r1]
 800c028:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e3      	bne.n	800bff8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c034:	2b01      	cmp	r3, #1
 800c036:	d118      	bne.n	800c06a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	e853 3f00 	ldrex	r3, [r3]
 800c044:	60bb      	str	r3, [r7, #8]
   return(result);
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	f023 0310 	bic.w	r3, r3, #16
 800c04c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	461a      	mov	r2, r3
 800c054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c056:	61bb      	str	r3, [r7, #24]
 800c058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05a:	6979      	ldr	r1, [r7, #20]
 800c05c:	69ba      	ldr	r2, [r7, #24]
 800c05e:	e841 2300 	strex	r3, r2, [r1]
 800c062:	613b      	str	r3, [r7, #16]
   return(result);
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1e6      	bne.n	800c038 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2220      	movs	r2, #32
 800c06e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c07e:	bf00      	nop
 800c080:	3754      	adds	r7, #84	@ 0x54
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr

0800c08a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c08a:	b480      	push	{r7}
 800c08c:	b085      	sub	sp, #20
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d101      	bne.n	800c0a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800c09c:	2302      	movs	r3, #2
 800c09e:	e027      	b.n	800c0f0 <HAL_UARTEx_DisableFifoMode+0x66>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2224      	movs	r2, #36	@ 0x24
 800c0ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f022 0201 	bic.w	r2, r2, #1
 800c0c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c0ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2220      	movs	r2, #32
 800c0e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d101      	bne.n	800c114 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c110:	2302      	movs	r3, #2
 800c112:	e02d      	b.n	800c170 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2224      	movs	r2, #36	@ 0x24
 800c120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f022 0201 	bic.w	r2, r2, #1
 800c13a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	430a      	orrs	r2, r1
 800c14e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f84f 	bl	800c1f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2220      	movs	r2, #32
 800c162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d101      	bne.n	800c190 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c18c:	2302      	movs	r3, #2
 800c18e:	e02d      	b.n	800c1ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2224      	movs	r2, #36	@ 0x24
 800c19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f022 0201 	bic.w	r2, r2, #1
 800c1b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	430a      	orrs	r2, r1
 800c1ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f811 	bl	800c1f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2220      	movs	r2, #32
 800c1de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c200:	2b00      	cmp	r3, #0
 800c202:	d108      	bne.n	800c216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c214:	e031      	b.n	800c27a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c216:	2308      	movs	r3, #8
 800c218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c21a:	2308      	movs	r3, #8
 800c21c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	0e5b      	lsrs	r3, r3, #25
 800c226:	b2db      	uxtb	r3, r3
 800c228:	f003 0307 	and.w	r3, r3, #7
 800c22c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	0f5b      	lsrs	r3, r3, #29
 800c236:	b2db      	uxtb	r3, r3
 800c238:	f003 0307 	and.w	r3, r3, #7
 800c23c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c23e:	7bbb      	ldrb	r3, [r7, #14]
 800c240:	7b3a      	ldrb	r2, [r7, #12]
 800c242:	4911      	ldr	r1, [pc, #68]	@ (800c288 <UARTEx_SetNbDataToProcess+0x94>)
 800c244:	5c8a      	ldrb	r2, [r1, r2]
 800c246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c24a:	7b3a      	ldrb	r2, [r7, #12]
 800c24c:	490f      	ldr	r1, [pc, #60]	@ (800c28c <UARTEx_SetNbDataToProcess+0x98>)
 800c24e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c250:	fb93 f3f2 	sdiv	r3, r3, r2
 800c254:	b29a      	uxth	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	7b7a      	ldrb	r2, [r7, #13]
 800c260:	4909      	ldr	r1, [pc, #36]	@ (800c288 <UARTEx_SetNbDataToProcess+0x94>)
 800c262:	5c8a      	ldrb	r2, [r1, r2]
 800c264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c268:	7b7a      	ldrb	r2, [r7, #13]
 800c26a:	4908      	ldr	r1, [pc, #32]	@ (800c28c <UARTEx_SetNbDataToProcess+0x98>)
 800c26c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c26e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c272:	b29a      	uxth	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c27a:	bf00      	nop
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	0801057c 	.word	0x0801057c
 800c28c:	08010584 	.word	0x08010584

0800c290 <malloc>:
 800c290:	4b02      	ldr	r3, [pc, #8]	@ (800c29c <malloc+0xc>)
 800c292:	4601      	mov	r1, r0
 800c294:	6818      	ldr	r0, [r3, #0]
 800c296:	f000 b82d 	b.w	800c2f4 <_malloc_r>
 800c29a:	bf00      	nop
 800c29c:	20000020 	.word	0x20000020

0800c2a0 <free>:
 800c2a0:	4b02      	ldr	r3, [pc, #8]	@ (800c2ac <free+0xc>)
 800c2a2:	4601      	mov	r1, r0
 800c2a4:	6818      	ldr	r0, [r3, #0]
 800c2a6:	f001 bd0b 	b.w	800dcc0 <_free_r>
 800c2aa:	bf00      	nop
 800c2ac:	20000020 	.word	0x20000020

0800c2b0 <sbrk_aligned>:
 800c2b0:	b570      	push	{r4, r5, r6, lr}
 800c2b2:	4e0f      	ldr	r6, [pc, #60]	@ (800c2f0 <sbrk_aligned+0x40>)
 800c2b4:	460c      	mov	r4, r1
 800c2b6:	6831      	ldr	r1, [r6, #0]
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	b911      	cbnz	r1, 800c2c2 <sbrk_aligned+0x12>
 800c2bc:	f000 fe64 	bl	800cf88 <_sbrk_r>
 800c2c0:	6030      	str	r0, [r6, #0]
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	f000 fe5f 	bl	800cf88 <_sbrk_r>
 800c2ca:	1c43      	adds	r3, r0, #1
 800c2cc:	d103      	bne.n	800c2d6 <sbrk_aligned+0x26>
 800c2ce:	f04f 34ff 	mov.w	r4, #4294967295
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	bd70      	pop	{r4, r5, r6, pc}
 800c2d6:	1cc4      	adds	r4, r0, #3
 800c2d8:	f024 0403 	bic.w	r4, r4, #3
 800c2dc:	42a0      	cmp	r0, r4
 800c2de:	d0f8      	beq.n	800c2d2 <sbrk_aligned+0x22>
 800c2e0:	1a21      	subs	r1, r4, r0
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f000 fe50 	bl	800cf88 <_sbrk_r>
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d1f2      	bne.n	800c2d2 <sbrk_aligned+0x22>
 800c2ec:	e7ef      	b.n	800c2ce <sbrk_aligned+0x1e>
 800c2ee:	bf00      	nop
 800c2f0:	20000854 	.word	0x20000854

0800c2f4 <_malloc_r>:
 800c2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f8:	1ccd      	adds	r5, r1, #3
 800c2fa:	f025 0503 	bic.w	r5, r5, #3
 800c2fe:	3508      	adds	r5, #8
 800c300:	2d0c      	cmp	r5, #12
 800c302:	bf38      	it	cc
 800c304:	250c      	movcc	r5, #12
 800c306:	2d00      	cmp	r5, #0
 800c308:	4606      	mov	r6, r0
 800c30a:	db01      	blt.n	800c310 <_malloc_r+0x1c>
 800c30c:	42a9      	cmp	r1, r5
 800c30e:	d904      	bls.n	800c31a <_malloc_r+0x26>
 800c310:	230c      	movs	r3, #12
 800c312:	6033      	str	r3, [r6, #0]
 800c314:	2000      	movs	r0, #0
 800c316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c31a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3f0 <_malloc_r+0xfc>
 800c31e:	f000 f869 	bl	800c3f4 <__malloc_lock>
 800c322:	f8d8 3000 	ldr.w	r3, [r8]
 800c326:	461c      	mov	r4, r3
 800c328:	bb44      	cbnz	r4, 800c37c <_malloc_r+0x88>
 800c32a:	4629      	mov	r1, r5
 800c32c:	4630      	mov	r0, r6
 800c32e:	f7ff ffbf 	bl	800c2b0 <sbrk_aligned>
 800c332:	1c43      	adds	r3, r0, #1
 800c334:	4604      	mov	r4, r0
 800c336:	d158      	bne.n	800c3ea <_malloc_r+0xf6>
 800c338:	f8d8 4000 	ldr.w	r4, [r8]
 800c33c:	4627      	mov	r7, r4
 800c33e:	2f00      	cmp	r7, #0
 800c340:	d143      	bne.n	800c3ca <_malloc_r+0xd6>
 800c342:	2c00      	cmp	r4, #0
 800c344:	d04b      	beq.n	800c3de <_malloc_r+0xea>
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	4639      	mov	r1, r7
 800c34a:	4630      	mov	r0, r6
 800c34c:	eb04 0903 	add.w	r9, r4, r3
 800c350:	f000 fe1a 	bl	800cf88 <_sbrk_r>
 800c354:	4581      	cmp	r9, r0
 800c356:	d142      	bne.n	800c3de <_malloc_r+0xea>
 800c358:	6821      	ldr	r1, [r4, #0]
 800c35a:	1a6d      	subs	r5, r5, r1
 800c35c:	4629      	mov	r1, r5
 800c35e:	4630      	mov	r0, r6
 800c360:	f7ff ffa6 	bl	800c2b0 <sbrk_aligned>
 800c364:	3001      	adds	r0, #1
 800c366:	d03a      	beq.n	800c3de <_malloc_r+0xea>
 800c368:	6823      	ldr	r3, [r4, #0]
 800c36a:	442b      	add	r3, r5
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	f8d8 3000 	ldr.w	r3, [r8]
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	bb62      	cbnz	r2, 800c3d0 <_malloc_r+0xdc>
 800c376:	f8c8 7000 	str.w	r7, [r8]
 800c37a:	e00f      	b.n	800c39c <_malloc_r+0xa8>
 800c37c:	6822      	ldr	r2, [r4, #0]
 800c37e:	1b52      	subs	r2, r2, r5
 800c380:	d420      	bmi.n	800c3c4 <_malloc_r+0xd0>
 800c382:	2a0b      	cmp	r2, #11
 800c384:	d917      	bls.n	800c3b6 <_malloc_r+0xc2>
 800c386:	1961      	adds	r1, r4, r5
 800c388:	42a3      	cmp	r3, r4
 800c38a:	6025      	str	r5, [r4, #0]
 800c38c:	bf18      	it	ne
 800c38e:	6059      	strne	r1, [r3, #4]
 800c390:	6863      	ldr	r3, [r4, #4]
 800c392:	bf08      	it	eq
 800c394:	f8c8 1000 	streq.w	r1, [r8]
 800c398:	5162      	str	r2, [r4, r5]
 800c39a:	604b      	str	r3, [r1, #4]
 800c39c:	4630      	mov	r0, r6
 800c39e:	f000 f82f 	bl	800c400 <__malloc_unlock>
 800c3a2:	f104 000b 	add.w	r0, r4, #11
 800c3a6:	1d23      	adds	r3, r4, #4
 800c3a8:	f020 0007 	bic.w	r0, r0, #7
 800c3ac:	1ac2      	subs	r2, r0, r3
 800c3ae:	bf1c      	itt	ne
 800c3b0:	1a1b      	subne	r3, r3, r0
 800c3b2:	50a3      	strne	r3, [r4, r2]
 800c3b4:	e7af      	b.n	800c316 <_malloc_r+0x22>
 800c3b6:	6862      	ldr	r2, [r4, #4]
 800c3b8:	42a3      	cmp	r3, r4
 800c3ba:	bf0c      	ite	eq
 800c3bc:	f8c8 2000 	streq.w	r2, [r8]
 800c3c0:	605a      	strne	r2, [r3, #4]
 800c3c2:	e7eb      	b.n	800c39c <_malloc_r+0xa8>
 800c3c4:	4623      	mov	r3, r4
 800c3c6:	6864      	ldr	r4, [r4, #4]
 800c3c8:	e7ae      	b.n	800c328 <_malloc_r+0x34>
 800c3ca:	463c      	mov	r4, r7
 800c3cc:	687f      	ldr	r7, [r7, #4]
 800c3ce:	e7b6      	b.n	800c33e <_malloc_r+0x4a>
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	42a3      	cmp	r3, r4
 800c3d6:	d1fb      	bne.n	800c3d0 <_malloc_r+0xdc>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	6053      	str	r3, [r2, #4]
 800c3dc:	e7de      	b.n	800c39c <_malloc_r+0xa8>
 800c3de:	230c      	movs	r3, #12
 800c3e0:	6033      	str	r3, [r6, #0]
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	f000 f80c 	bl	800c400 <__malloc_unlock>
 800c3e8:	e794      	b.n	800c314 <_malloc_r+0x20>
 800c3ea:	6005      	str	r5, [r0, #0]
 800c3ec:	e7d6      	b.n	800c39c <_malloc_r+0xa8>
 800c3ee:	bf00      	nop
 800c3f0:	20000858 	.word	0x20000858

0800c3f4 <__malloc_lock>:
 800c3f4:	4801      	ldr	r0, [pc, #4]	@ (800c3fc <__malloc_lock+0x8>)
 800c3f6:	f000 be14 	b.w	800d022 <__retarget_lock_acquire_recursive>
 800c3fa:	bf00      	nop
 800c3fc:	2000099c 	.word	0x2000099c

0800c400 <__malloc_unlock>:
 800c400:	4801      	ldr	r0, [pc, #4]	@ (800c408 <__malloc_unlock+0x8>)
 800c402:	f000 be0f 	b.w	800d024 <__retarget_lock_release_recursive>
 800c406:	bf00      	nop
 800c408:	2000099c 	.word	0x2000099c

0800c40c <__cvt>:
 800c40c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c410:	ec57 6b10 	vmov	r6, r7, d0
 800c414:	2f00      	cmp	r7, #0
 800c416:	460c      	mov	r4, r1
 800c418:	4619      	mov	r1, r3
 800c41a:	463b      	mov	r3, r7
 800c41c:	bfbb      	ittet	lt
 800c41e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c422:	461f      	movlt	r7, r3
 800c424:	2300      	movge	r3, #0
 800c426:	232d      	movlt	r3, #45	@ 0x2d
 800c428:	700b      	strb	r3, [r1, #0]
 800c42a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c42c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c430:	4691      	mov	r9, r2
 800c432:	f023 0820 	bic.w	r8, r3, #32
 800c436:	bfbc      	itt	lt
 800c438:	4632      	movlt	r2, r6
 800c43a:	4616      	movlt	r6, r2
 800c43c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c440:	d005      	beq.n	800c44e <__cvt+0x42>
 800c442:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c446:	d100      	bne.n	800c44a <__cvt+0x3e>
 800c448:	3401      	adds	r4, #1
 800c44a:	2102      	movs	r1, #2
 800c44c:	e000      	b.n	800c450 <__cvt+0x44>
 800c44e:	2103      	movs	r1, #3
 800c450:	ab03      	add	r3, sp, #12
 800c452:	9301      	str	r3, [sp, #4]
 800c454:	ab02      	add	r3, sp, #8
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	ec47 6b10 	vmov	d0, r6, r7
 800c45c:	4653      	mov	r3, sl
 800c45e:	4622      	mov	r2, r4
 800c460:	f000 fe6a 	bl	800d138 <_dtoa_r>
 800c464:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c468:	4605      	mov	r5, r0
 800c46a:	d119      	bne.n	800c4a0 <__cvt+0x94>
 800c46c:	f019 0f01 	tst.w	r9, #1
 800c470:	d00e      	beq.n	800c490 <__cvt+0x84>
 800c472:	eb00 0904 	add.w	r9, r0, r4
 800c476:	2200      	movs	r2, #0
 800c478:	2300      	movs	r3, #0
 800c47a:	4630      	mov	r0, r6
 800c47c:	4639      	mov	r1, r7
 800c47e:	f7f4 fb4b 	bl	8000b18 <__aeabi_dcmpeq>
 800c482:	b108      	cbz	r0, 800c488 <__cvt+0x7c>
 800c484:	f8cd 900c 	str.w	r9, [sp, #12]
 800c488:	2230      	movs	r2, #48	@ 0x30
 800c48a:	9b03      	ldr	r3, [sp, #12]
 800c48c:	454b      	cmp	r3, r9
 800c48e:	d31e      	bcc.n	800c4ce <__cvt+0xc2>
 800c490:	9b03      	ldr	r3, [sp, #12]
 800c492:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c494:	1b5b      	subs	r3, r3, r5
 800c496:	4628      	mov	r0, r5
 800c498:	6013      	str	r3, [r2, #0]
 800c49a:	b004      	add	sp, #16
 800c49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c4a4:	eb00 0904 	add.w	r9, r0, r4
 800c4a8:	d1e5      	bne.n	800c476 <__cvt+0x6a>
 800c4aa:	7803      	ldrb	r3, [r0, #0]
 800c4ac:	2b30      	cmp	r3, #48	@ 0x30
 800c4ae:	d10a      	bne.n	800c4c6 <__cvt+0xba>
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f7f4 fb2e 	bl	8000b18 <__aeabi_dcmpeq>
 800c4bc:	b918      	cbnz	r0, 800c4c6 <__cvt+0xba>
 800c4be:	f1c4 0401 	rsb	r4, r4, #1
 800c4c2:	f8ca 4000 	str.w	r4, [sl]
 800c4c6:	f8da 3000 	ldr.w	r3, [sl]
 800c4ca:	4499      	add	r9, r3
 800c4cc:	e7d3      	b.n	800c476 <__cvt+0x6a>
 800c4ce:	1c59      	adds	r1, r3, #1
 800c4d0:	9103      	str	r1, [sp, #12]
 800c4d2:	701a      	strb	r2, [r3, #0]
 800c4d4:	e7d9      	b.n	800c48a <__cvt+0x7e>

0800c4d6 <__exponent>:
 800c4d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4d8:	2900      	cmp	r1, #0
 800c4da:	bfba      	itte	lt
 800c4dc:	4249      	neglt	r1, r1
 800c4de:	232d      	movlt	r3, #45	@ 0x2d
 800c4e0:	232b      	movge	r3, #43	@ 0x2b
 800c4e2:	2909      	cmp	r1, #9
 800c4e4:	7002      	strb	r2, [r0, #0]
 800c4e6:	7043      	strb	r3, [r0, #1]
 800c4e8:	dd29      	ble.n	800c53e <__exponent+0x68>
 800c4ea:	f10d 0307 	add.w	r3, sp, #7
 800c4ee:	461d      	mov	r5, r3
 800c4f0:	270a      	movs	r7, #10
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	fbb1 f6f7 	udiv	r6, r1, r7
 800c4f8:	fb07 1416 	mls	r4, r7, r6, r1
 800c4fc:	3430      	adds	r4, #48	@ 0x30
 800c4fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c502:	460c      	mov	r4, r1
 800c504:	2c63      	cmp	r4, #99	@ 0x63
 800c506:	f103 33ff 	add.w	r3, r3, #4294967295
 800c50a:	4631      	mov	r1, r6
 800c50c:	dcf1      	bgt.n	800c4f2 <__exponent+0x1c>
 800c50e:	3130      	adds	r1, #48	@ 0x30
 800c510:	1e94      	subs	r4, r2, #2
 800c512:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c516:	1c41      	adds	r1, r0, #1
 800c518:	4623      	mov	r3, r4
 800c51a:	42ab      	cmp	r3, r5
 800c51c:	d30a      	bcc.n	800c534 <__exponent+0x5e>
 800c51e:	f10d 0309 	add.w	r3, sp, #9
 800c522:	1a9b      	subs	r3, r3, r2
 800c524:	42ac      	cmp	r4, r5
 800c526:	bf88      	it	hi
 800c528:	2300      	movhi	r3, #0
 800c52a:	3302      	adds	r3, #2
 800c52c:	4403      	add	r3, r0
 800c52e:	1a18      	subs	r0, r3, r0
 800c530:	b003      	add	sp, #12
 800c532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c534:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c538:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c53c:	e7ed      	b.n	800c51a <__exponent+0x44>
 800c53e:	2330      	movs	r3, #48	@ 0x30
 800c540:	3130      	adds	r1, #48	@ 0x30
 800c542:	7083      	strb	r3, [r0, #2]
 800c544:	70c1      	strb	r1, [r0, #3]
 800c546:	1d03      	adds	r3, r0, #4
 800c548:	e7f1      	b.n	800c52e <__exponent+0x58>
	...

0800c54c <_printf_float>:
 800c54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c550:	b08d      	sub	sp, #52	@ 0x34
 800c552:	460c      	mov	r4, r1
 800c554:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c558:	4616      	mov	r6, r2
 800c55a:	461f      	mov	r7, r3
 800c55c:	4605      	mov	r5, r0
 800c55e:	f000 fcdb 	bl	800cf18 <_localeconv_r>
 800c562:	6803      	ldr	r3, [r0, #0]
 800c564:	9304      	str	r3, [sp, #16]
 800c566:	4618      	mov	r0, r3
 800c568:	f7f3 feaa 	bl	80002c0 <strlen>
 800c56c:	2300      	movs	r3, #0
 800c56e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c570:	f8d8 3000 	ldr.w	r3, [r8]
 800c574:	9005      	str	r0, [sp, #20]
 800c576:	3307      	adds	r3, #7
 800c578:	f023 0307 	bic.w	r3, r3, #7
 800c57c:	f103 0208 	add.w	r2, r3, #8
 800c580:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c584:	f8d4 b000 	ldr.w	fp, [r4]
 800c588:	f8c8 2000 	str.w	r2, [r8]
 800c58c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c590:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c594:	9307      	str	r3, [sp, #28]
 800c596:	f8cd 8018 	str.w	r8, [sp, #24]
 800c59a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c59e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5a2:	4b9c      	ldr	r3, [pc, #624]	@ (800c814 <_printf_float+0x2c8>)
 800c5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a8:	f7f4 fae8 	bl	8000b7c <__aeabi_dcmpun>
 800c5ac:	bb70      	cbnz	r0, 800c60c <_printf_float+0xc0>
 800c5ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5b2:	4b98      	ldr	r3, [pc, #608]	@ (800c814 <_printf_float+0x2c8>)
 800c5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b8:	f7f4 fac2 	bl	8000b40 <__aeabi_dcmple>
 800c5bc:	bb30      	cbnz	r0, 800c60c <_printf_float+0xc0>
 800c5be:	2200      	movs	r2, #0
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	4640      	mov	r0, r8
 800c5c4:	4649      	mov	r1, r9
 800c5c6:	f7f4 fab1 	bl	8000b2c <__aeabi_dcmplt>
 800c5ca:	b110      	cbz	r0, 800c5d2 <_printf_float+0x86>
 800c5cc:	232d      	movs	r3, #45	@ 0x2d
 800c5ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5d2:	4a91      	ldr	r2, [pc, #580]	@ (800c818 <_printf_float+0x2cc>)
 800c5d4:	4b91      	ldr	r3, [pc, #580]	@ (800c81c <_printf_float+0x2d0>)
 800c5d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c5da:	bf94      	ite	ls
 800c5dc:	4690      	movls	r8, r2
 800c5de:	4698      	movhi	r8, r3
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	6123      	str	r3, [r4, #16]
 800c5e4:	f02b 0304 	bic.w	r3, fp, #4
 800c5e8:	6023      	str	r3, [r4, #0]
 800c5ea:	f04f 0900 	mov.w	r9, #0
 800c5ee:	9700      	str	r7, [sp, #0]
 800c5f0:	4633      	mov	r3, r6
 800c5f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f000 f9d2 	bl	800c9a0 <_printf_common>
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	f040 808d 	bne.w	800c71c <_printf_float+0x1d0>
 800c602:	f04f 30ff 	mov.w	r0, #4294967295
 800c606:	b00d      	add	sp, #52	@ 0x34
 800c608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60c:	4642      	mov	r2, r8
 800c60e:	464b      	mov	r3, r9
 800c610:	4640      	mov	r0, r8
 800c612:	4649      	mov	r1, r9
 800c614:	f7f4 fab2 	bl	8000b7c <__aeabi_dcmpun>
 800c618:	b140      	cbz	r0, 800c62c <_printf_float+0xe0>
 800c61a:	464b      	mov	r3, r9
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	bfbc      	itt	lt
 800c620:	232d      	movlt	r3, #45	@ 0x2d
 800c622:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c626:	4a7e      	ldr	r2, [pc, #504]	@ (800c820 <_printf_float+0x2d4>)
 800c628:	4b7e      	ldr	r3, [pc, #504]	@ (800c824 <_printf_float+0x2d8>)
 800c62a:	e7d4      	b.n	800c5d6 <_printf_float+0x8a>
 800c62c:	6863      	ldr	r3, [r4, #4]
 800c62e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c632:	9206      	str	r2, [sp, #24]
 800c634:	1c5a      	adds	r2, r3, #1
 800c636:	d13b      	bne.n	800c6b0 <_printf_float+0x164>
 800c638:	2306      	movs	r3, #6
 800c63a:	6063      	str	r3, [r4, #4]
 800c63c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c640:	2300      	movs	r3, #0
 800c642:	6022      	str	r2, [r4, #0]
 800c644:	9303      	str	r3, [sp, #12]
 800c646:	ab0a      	add	r3, sp, #40	@ 0x28
 800c648:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c64c:	ab09      	add	r3, sp, #36	@ 0x24
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	6861      	ldr	r1, [r4, #4]
 800c652:	ec49 8b10 	vmov	d0, r8, r9
 800c656:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c65a:	4628      	mov	r0, r5
 800c65c:	f7ff fed6 	bl	800c40c <__cvt>
 800c660:	9b06      	ldr	r3, [sp, #24]
 800c662:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c664:	2b47      	cmp	r3, #71	@ 0x47
 800c666:	4680      	mov	r8, r0
 800c668:	d129      	bne.n	800c6be <_printf_float+0x172>
 800c66a:	1cc8      	adds	r0, r1, #3
 800c66c:	db02      	blt.n	800c674 <_printf_float+0x128>
 800c66e:	6863      	ldr	r3, [r4, #4]
 800c670:	4299      	cmp	r1, r3
 800c672:	dd41      	ble.n	800c6f8 <_printf_float+0x1ac>
 800c674:	f1aa 0a02 	sub.w	sl, sl, #2
 800c678:	fa5f fa8a 	uxtb.w	sl, sl
 800c67c:	3901      	subs	r1, #1
 800c67e:	4652      	mov	r2, sl
 800c680:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c684:	9109      	str	r1, [sp, #36]	@ 0x24
 800c686:	f7ff ff26 	bl	800c4d6 <__exponent>
 800c68a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c68c:	1813      	adds	r3, r2, r0
 800c68e:	2a01      	cmp	r2, #1
 800c690:	4681      	mov	r9, r0
 800c692:	6123      	str	r3, [r4, #16]
 800c694:	dc02      	bgt.n	800c69c <_printf_float+0x150>
 800c696:	6822      	ldr	r2, [r4, #0]
 800c698:	07d2      	lsls	r2, r2, #31
 800c69a:	d501      	bpl.n	800c6a0 <_printf_float+0x154>
 800c69c:	3301      	adds	r3, #1
 800c69e:	6123      	str	r3, [r4, #16]
 800c6a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d0a2      	beq.n	800c5ee <_printf_float+0xa2>
 800c6a8:	232d      	movs	r3, #45	@ 0x2d
 800c6aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6ae:	e79e      	b.n	800c5ee <_printf_float+0xa2>
 800c6b0:	9a06      	ldr	r2, [sp, #24]
 800c6b2:	2a47      	cmp	r2, #71	@ 0x47
 800c6b4:	d1c2      	bne.n	800c63c <_printf_float+0xf0>
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1c0      	bne.n	800c63c <_printf_float+0xf0>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e7bd      	b.n	800c63a <_printf_float+0xee>
 800c6be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c6c2:	d9db      	bls.n	800c67c <_printf_float+0x130>
 800c6c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c6c8:	d118      	bne.n	800c6fc <_printf_float+0x1b0>
 800c6ca:	2900      	cmp	r1, #0
 800c6cc:	6863      	ldr	r3, [r4, #4]
 800c6ce:	dd0b      	ble.n	800c6e8 <_printf_float+0x19c>
 800c6d0:	6121      	str	r1, [r4, #16]
 800c6d2:	b913      	cbnz	r3, 800c6da <_printf_float+0x18e>
 800c6d4:	6822      	ldr	r2, [r4, #0]
 800c6d6:	07d0      	lsls	r0, r2, #31
 800c6d8:	d502      	bpl.n	800c6e0 <_printf_float+0x194>
 800c6da:	3301      	adds	r3, #1
 800c6dc:	440b      	add	r3, r1
 800c6de:	6123      	str	r3, [r4, #16]
 800c6e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c6e2:	f04f 0900 	mov.w	r9, #0
 800c6e6:	e7db      	b.n	800c6a0 <_printf_float+0x154>
 800c6e8:	b913      	cbnz	r3, 800c6f0 <_printf_float+0x1a4>
 800c6ea:	6822      	ldr	r2, [r4, #0]
 800c6ec:	07d2      	lsls	r2, r2, #31
 800c6ee:	d501      	bpl.n	800c6f4 <_printf_float+0x1a8>
 800c6f0:	3302      	adds	r3, #2
 800c6f2:	e7f4      	b.n	800c6de <_printf_float+0x192>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e7f2      	b.n	800c6de <_printf_float+0x192>
 800c6f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c6fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6fe:	4299      	cmp	r1, r3
 800c700:	db05      	blt.n	800c70e <_printf_float+0x1c2>
 800c702:	6823      	ldr	r3, [r4, #0]
 800c704:	6121      	str	r1, [r4, #16]
 800c706:	07d8      	lsls	r0, r3, #31
 800c708:	d5ea      	bpl.n	800c6e0 <_printf_float+0x194>
 800c70a:	1c4b      	adds	r3, r1, #1
 800c70c:	e7e7      	b.n	800c6de <_printf_float+0x192>
 800c70e:	2900      	cmp	r1, #0
 800c710:	bfd4      	ite	le
 800c712:	f1c1 0202 	rsble	r2, r1, #2
 800c716:	2201      	movgt	r2, #1
 800c718:	4413      	add	r3, r2
 800c71a:	e7e0      	b.n	800c6de <_printf_float+0x192>
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	055a      	lsls	r2, r3, #21
 800c720:	d407      	bmi.n	800c732 <_printf_float+0x1e6>
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	4642      	mov	r2, r8
 800c726:	4631      	mov	r1, r6
 800c728:	4628      	mov	r0, r5
 800c72a:	47b8      	blx	r7
 800c72c:	3001      	adds	r0, #1
 800c72e:	d12b      	bne.n	800c788 <_printf_float+0x23c>
 800c730:	e767      	b.n	800c602 <_printf_float+0xb6>
 800c732:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c736:	f240 80dd 	bls.w	800c8f4 <_printf_float+0x3a8>
 800c73a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c73e:	2200      	movs	r2, #0
 800c740:	2300      	movs	r3, #0
 800c742:	f7f4 f9e9 	bl	8000b18 <__aeabi_dcmpeq>
 800c746:	2800      	cmp	r0, #0
 800c748:	d033      	beq.n	800c7b2 <_printf_float+0x266>
 800c74a:	4a37      	ldr	r2, [pc, #220]	@ (800c828 <_printf_float+0x2dc>)
 800c74c:	2301      	movs	r3, #1
 800c74e:	4631      	mov	r1, r6
 800c750:	4628      	mov	r0, r5
 800c752:	47b8      	blx	r7
 800c754:	3001      	adds	r0, #1
 800c756:	f43f af54 	beq.w	800c602 <_printf_float+0xb6>
 800c75a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c75e:	4543      	cmp	r3, r8
 800c760:	db02      	blt.n	800c768 <_printf_float+0x21c>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	07d8      	lsls	r0, r3, #31
 800c766:	d50f      	bpl.n	800c788 <_printf_float+0x23c>
 800c768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c76c:	4631      	mov	r1, r6
 800c76e:	4628      	mov	r0, r5
 800c770:	47b8      	blx	r7
 800c772:	3001      	adds	r0, #1
 800c774:	f43f af45 	beq.w	800c602 <_printf_float+0xb6>
 800c778:	f04f 0900 	mov.w	r9, #0
 800c77c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c780:	f104 0a1a 	add.w	sl, r4, #26
 800c784:	45c8      	cmp	r8, r9
 800c786:	dc09      	bgt.n	800c79c <_printf_float+0x250>
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	079b      	lsls	r3, r3, #30
 800c78c:	f100 8103 	bmi.w	800c996 <_printf_float+0x44a>
 800c790:	68e0      	ldr	r0, [r4, #12]
 800c792:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c794:	4298      	cmp	r0, r3
 800c796:	bfb8      	it	lt
 800c798:	4618      	movlt	r0, r3
 800c79a:	e734      	b.n	800c606 <_printf_float+0xba>
 800c79c:	2301      	movs	r3, #1
 800c79e:	4652      	mov	r2, sl
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	47b8      	blx	r7
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	f43f af2b 	beq.w	800c602 <_printf_float+0xb6>
 800c7ac:	f109 0901 	add.w	r9, r9, #1
 800c7b0:	e7e8      	b.n	800c784 <_printf_float+0x238>
 800c7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dc39      	bgt.n	800c82c <_printf_float+0x2e0>
 800c7b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c828 <_printf_float+0x2dc>)
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	4631      	mov	r1, r6
 800c7be:	4628      	mov	r0, r5
 800c7c0:	47b8      	blx	r7
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	f43f af1d 	beq.w	800c602 <_printf_float+0xb6>
 800c7c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c7cc:	ea59 0303 	orrs.w	r3, r9, r3
 800c7d0:	d102      	bne.n	800c7d8 <_printf_float+0x28c>
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	07d9      	lsls	r1, r3, #31
 800c7d6:	d5d7      	bpl.n	800c788 <_printf_float+0x23c>
 800c7d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4628      	mov	r0, r5
 800c7e0:	47b8      	blx	r7
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	f43f af0d 	beq.w	800c602 <_printf_float+0xb6>
 800c7e8:	f04f 0a00 	mov.w	sl, #0
 800c7ec:	f104 0b1a 	add.w	fp, r4, #26
 800c7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f2:	425b      	negs	r3, r3
 800c7f4:	4553      	cmp	r3, sl
 800c7f6:	dc01      	bgt.n	800c7fc <_printf_float+0x2b0>
 800c7f8:	464b      	mov	r3, r9
 800c7fa:	e793      	b.n	800c724 <_printf_float+0x1d8>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	465a      	mov	r2, fp
 800c800:	4631      	mov	r1, r6
 800c802:	4628      	mov	r0, r5
 800c804:	47b8      	blx	r7
 800c806:	3001      	adds	r0, #1
 800c808:	f43f aefb 	beq.w	800c602 <_printf_float+0xb6>
 800c80c:	f10a 0a01 	add.w	sl, sl, #1
 800c810:	e7ee      	b.n	800c7f0 <_printf_float+0x2a4>
 800c812:	bf00      	nop
 800c814:	7fefffff 	.word	0x7fefffff
 800c818:	0801058c 	.word	0x0801058c
 800c81c:	08010590 	.word	0x08010590
 800c820:	08010594 	.word	0x08010594
 800c824:	08010598 	.word	0x08010598
 800c828:	0801059c 	.word	0x0801059c
 800c82c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c82e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c832:	4553      	cmp	r3, sl
 800c834:	bfa8      	it	ge
 800c836:	4653      	movge	r3, sl
 800c838:	2b00      	cmp	r3, #0
 800c83a:	4699      	mov	r9, r3
 800c83c:	dc36      	bgt.n	800c8ac <_printf_float+0x360>
 800c83e:	f04f 0b00 	mov.w	fp, #0
 800c842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c846:	f104 021a 	add.w	r2, r4, #26
 800c84a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c84c:	9306      	str	r3, [sp, #24]
 800c84e:	eba3 0309 	sub.w	r3, r3, r9
 800c852:	455b      	cmp	r3, fp
 800c854:	dc31      	bgt.n	800c8ba <_printf_float+0x36e>
 800c856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c858:	459a      	cmp	sl, r3
 800c85a:	dc3a      	bgt.n	800c8d2 <_printf_float+0x386>
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	07da      	lsls	r2, r3, #31
 800c860:	d437      	bmi.n	800c8d2 <_printf_float+0x386>
 800c862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c864:	ebaa 0903 	sub.w	r9, sl, r3
 800c868:	9b06      	ldr	r3, [sp, #24]
 800c86a:	ebaa 0303 	sub.w	r3, sl, r3
 800c86e:	4599      	cmp	r9, r3
 800c870:	bfa8      	it	ge
 800c872:	4699      	movge	r9, r3
 800c874:	f1b9 0f00 	cmp.w	r9, #0
 800c878:	dc33      	bgt.n	800c8e2 <_printf_float+0x396>
 800c87a:	f04f 0800 	mov.w	r8, #0
 800c87e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c882:	f104 0b1a 	add.w	fp, r4, #26
 800c886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c888:	ebaa 0303 	sub.w	r3, sl, r3
 800c88c:	eba3 0309 	sub.w	r3, r3, r9
 800c890:	4543      	cmp	r3, r8
 800c892:	f77f af79 	ble.w	800c788 <_printf_float+0x23c>
 800c896:	2301      	movs	r3, #1
 800c898:	465a      	mov	r2, fp
 800c89a:	4631      	mov	r1, r6
 800c89c:	4628      	mov	r0, r5
 800c89e:	47b8      	blx	r7
 800c8a0:	3001      	adds	r0, #1
 800c8a2:	f43f aeae 	beq.w	800c602 <_printf_float+0xb6>
 800c8a6:	f108 0801 	add.w	r8, r8, #1
 800c8aa:	e7ec      	b.n	800c886 <_printf_float+0x33a>
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	47b8      	blx	r7
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d1c2      	bne.n	800c83e <_printf_float+0x2f2>
 800c8b8:	e6a3      	b.n	800c602 <_printf_float+0xb6>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	4631      	mov	r1, r6
 800c8be:	4628      	mov	r0, r5
 800c8c0:	9206      	str	r2, [sp, #24]
 800c8c2:	47b8      	blx	r7
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	f43f ae9c 	beq.w	800c602 <_printf_float+0xb6>
 800c8ca:	9a06      	ldr	r2, [sp, #24]
 800c8cc:	f10b 0b01 	add.w	fp, fp, #1
 800c8d0:	e7bb      	b.n	800c84a <_printf_float+0x2fe>
 800c8d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8d6:	4631      	mov	r1, r6
 800c8d8:	4628      	mov	r0, r5
 800c8da:	47b8      	blx	r7
 800c8dc:	3001      	adds	r0, #1
 800c8de:	d1c0      	bne.n	800c862 <_printf_float+0x316>
 800c8e0:	e68f      	b.n	800c602 <_printf_float+0xb6>
 800c8e2:	9a06      	ldr	r2, [sp, #24]
 800c8e4:	464b      	mov	r3, r9
 800c8e6:	4442      	add	r2, r8
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	47b8      	blx	r7
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	d1c3      	bne.n	800c87a <_printf_float+0x32e>
 800c8f2:	e686      	b.n	800c602 <_printf_float+0xb6>
 800c8f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c8f8:	f1ba 0f01 	cmp.w	sl, #1
 800c8fc:	dc01      	bgt.n	800c902 <_printf_float+0x3b6>
 800c8fe:	07db      	lsls	r3, r3, #31
 800c900:	d536      	bpl.n	800c970 <_printf_float+0x424>
 800c902:	2301      	movs	r3, #1
 800c904:	4642      	mov	r2, r8
 800c906:	4631      	mov	r1, r6
 800c908:	4628      	mov	r0, r5
 800c90a:	47b8      	blx	r7
 800c90c:	3001      	adds	r0, #1
 800c90e:	f43f ae78 	beq.w	800c602 <_printf_float+0xb6>
 800c912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c916:	4631      	mov	r1, r6
 800c918:	4628      	mov	r0, r5
 800c91a:	47b8      	blx	r7
 800c91c:	3001      	adds	r0, #1
 800c91e:	f43f ae70 	beq.w	800c602 <_printf_float+0xb6>
 800c922:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c926:	2200      	movs	r2, #0
 800c928:	2300      	movs	r3, #0
 800c92a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c92e:	f7f4 f8f3 	bl	8000b18 <__aeabi_dcmpeq>
 800c932:	b9c0      	cbnz	r0, 800c966 <_printf_float+0x41a>
 800c934:	4653      	mov	r3, sl
 800c936:	f108 0201 	add.w	r2, r8, #1
 800c93a:	4631      	mov	r1, r6
 800c93c:	4628      	mov	r0, r5
 800c93e:	47b8      	blx	r7
 800c940:	3001      	adds	r0, #1
 800c942:	d10c      	bne.n	800c95e <_printf_float+0x412>
 800c944:	e65d      	b.n	800c602 <_printf_float+0xb6>
 800c946:	2301      	movs	r3, #1
 800c948:	465a      	mov	r2, fp
 800c94a:	4631      	mov	r1, r6
 800c94c:	4628      	mov	r0, r5
 800c94e:	47b8      	blx	r7
 800c950:	3001      	adds	r0, #1
 800c952:	f43f ae56 	beq.w	800c602 <_printf_float+0xb6>
 800c956:	f108 0801 	add.w	r8, r8, #1
 800c95a:	45d0      	cmp	r8, sl
 800c95c:	dbf3      	blt.n	800c946 <_printf_float+0x3fa>
 800c95e:	464b      	mov	r3, r9
 800c960:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c964:	e6df      	b.n	800c726 <_printf_float+0x1da>
 800c966:	f04f 0800 	mov.w	r8, #0
 800c96a:	f104 0b1a 	add.w	fp, r4, #26
 800c96e:	e7f4      	b.n	800c95a <_printf_float+0x40e>
 800c970:	2301      	movs	r3, #1
 800c972:	4642      	mov	r2, r8
 800c974:	e7e1      	b.n	800c93a <_printf_float+0x3ee>
 800c976:	2301      	movs	r3, #1
 800c978:	464a      	mov	r2, r9
 800c97a:	4631      	mov	r1, r6
 800c97c:	4628      	mov	r0, r5
 800c97e:	47b8      	blx	r7
 800c980:	3001      	adds	r0, #1
 800c982:	f43f ae3e 	beq.w	800c602 <_printf_float+0xb6>
 800c986:	f108 0801 	add.w	r8, r8, #1
 800c98a:	68e3      	ldr	r3, [r4, #12]
 800c98c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c98e:	1a5b      	subs	r3, r3, r1
 800c990:	4543      	cmp	r3, r8
 800c992:	dcf0      	bgt.n	800c976 <_printf_float+0x42a>
 800c994:	e6fc      	b.n	800c790 <_printf_float+0x244>
 800c996:	f04f 0800 	mov.w	r8, #0
 800c99a:	f104 0919 	add.w	r9, r4, #25
 800c99e:	e7f4      	b.n	800c98a <_printf_float+0x43e>

0800c9a0 <_printf_common>:
 800c9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a4:	4616      	mov	r6, r2
 800c9a6:	4698      	mov	r8, r3
 800c9a8:	688a      	ldr	r2, [r1, #8]
 800c9aa:	690b      	ldr	r3, [r1, #16]
 800c9ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	bfb8      	it	lt
 800c9b4:	4613      	movlt	r3, r2
 800c9b6:	6033      	str	r3, [r6, #0]
 800c9b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c9bc:	4607      	mov	r7, r0
 800c9be:	460c      	mov	r4, r1
 800c9c0:	b10a      	cbz	r2, 800c9c6 <_printf_common+0x26>
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	6033      	str	r3, [r6, #0]
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	0699      	lsls	r1, r3, #26
 800c9ca:	bf42      	ittt	mi
 800c9cc:	6833      	ldrmi	r3, [r6, #0]
 800c9ce:	3302      	addmi	r3, #2
 800c9d0:	6033      	strmi	r3, [r6, #0]
 800c9d2:	6825      	ldr	r5, [r4, #0]
 800c9d4:	f015 0506 	ands.w	r5, r5, #6
 800c9d8:	d106      	bne.n	800c9e8 <_printf_common+0x48>
 800c9da:	f104 0a19 	add.w	sl, r4, #25
 800c9de:	68e3      	ldr	r3, [r4, #12]
 800c9e0:	6832      	ldr	r2, [r6, #0]
 800c9e2:	1a9b      	subs	r3, r3, r2
 800c9e4:	42ab      	cmp	r3, r5
 800c9e6:	dc26      	bgt.n	800ca36 <_printf_common+0x96>
 800c9e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c9ec:	6822      	ldr	r2, [r4, #0]
 800c9ee:	3b00      	subs	r3, #0
 800c9f0:	bf18      	it	ne
 800c9f2:	2301      	movne	r3, #1
 800c9f4:	0692      	lsls	r2, r2, #26
 800c9f6:	d42b      	bmi.n	800ca50 <_printf_common+0xb0>
 800c9f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c9fc:	4641      	mov	r1, r8
 800c9fe:	4638      	mov	r0, r7
 800ca00:	47c8      	blx	r9
 800ca02:	3001      	adds	r0, #1
 800ca04:	d01e      	beq.n	800ca44 <_printf_common+0xa4>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	6922      	ldr	r2, [r4, #16]
 800ca0a:	f003 0306 	and.w	r3, r3, #6
 800ca0e:	2b04      	cmp	r3, #4
 800ca10:	bf02      	ittt	eq
 800ca12:	68e5      	ldreq	r5, [r4, #12]
 800ca14:	6833      	ldreq	r3, [r6, #0]
 800ca16:	1aed      	subeq	r5, r5, r3
 800ca18:	68a3      	ldr	r3, [r4, #8]
 800ca1a:	bf0c      	ite	eq
 800ca1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca20:	2500      	movne	r5, #0
 800ca22:	4293      	cmp	r3, r2
 800ca24:	bfc4      	itt	gt
 800ca26:	1a9b      	subgt	r3, r3, r2
 800ca28:	18ed      	addgt	r5, r5, r3
 800ca2a:	2600      	movs	r6, #0
 800ca2c:	341a      	adds	r4, #26
 800ca2e:	42b5      	cmp	r5, r6
 800ca30:	d11a      	bne.n	800ca68 <_printf_common+0xc8>
 800ca32:	2000      	movs	r0, #0
 800ca34:	e008      	b.n	800ca48 <_printf_common+0xa8>
 800ca36:	2301      	movs	r3, #1
 800ca38:	4652      	mov	r2, sl
 800ca3a:	4641      	mov	r1, r8
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	47c8      	blx	r9
 800ca40:	3001      	adds	r0, #1
 800ca42:	d103      	bne.n	800ca4c <_printf_common+0xac>
 800ca44:	f04f 30ff 	mov.w	r0, #4294967295
 800ca48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca4c:	3501      	adds	r5, #1
 800ca4e:	e7c6      	b.n	800c9de <_printf_common+0x3e>
 800ca50:	18e1      	adds	r1, r4, r3
 800ca52:	1c5a      	adds	r2, r3, #1
 800ca54:	2030      	movs	r0, #48	@ 0x30
 800ca56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca5a:	4422      	add	r2, r4
 800ca5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ca64:	3302      	adds	r3, #2
 800ca66:	e7c7      	b.n	800c9f8 <_printf_common+0x58>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	4622      	mov	r2, r4
 800ca6c:	4641      	mov	r1, r8
 800ca6e:	4638      	mov	r0, r7
 800ca70:	47c8      	blx	r9
 800ca72:	3001      	adds	r0, #1
 800ca74:	d0e6      	beq.n	800ca44 <_printf_common+0xa4>
 800ca76:	3601      	adds	r6, #1
 800ca78:	e7d9      	b.n	800ca2e <_printf_common+0x8e>
	...

0800ca7c <_printf_i>:
 800ca7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca80:	7e0f      	ldrb	r7, [r1, #24]
 800ca82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca84:	2f78      	cmp	r7, #120	@ 0x78
 800ca86:	4691      	mov	r9, r2
 800ca88:	4680      	mov	r8, r0
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	469a      	mov	sl, r3
 800ca8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca92:	d807      	bhi.n	800caa4 <_printf_i+0x28>
 800ca94:	2f62      	cmp	r7, #98	@ 0x62
 800ca96:	d80a      	bhi.n	800caae <_printf_i+0x32>
 800ca98:	2f00      	cmp	r7, #0
 800ca9a:	f000 80d2 	beq.w	800cc42 <_printf_i+0x1c6>
 800ca9e:	2f58      	cmp	r7, #88	@ 0x58
 800caa0:	f000 80b9 	beq.w	800cc16 <_printf_i+0x19a>
 800caa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800caa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800caac:	e03a      	b.n	800cb24 <_printf_i+0xa8>
 800caae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cab2:	2b15      	cmp	r3, #21
 800cab4:	d8f6      	bhi.n	800caa4 <_printf_i+0x28>
 800cab6:	a101      	add	r1, pc, #4	@ (adr r1, 800cabc <_printf_i+0x40>)
 800cab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cabc:	0800cb15 	.word	0x0800cb15
 800cac0:	0800cb29 	.word	0x0800cb29
 800cac4:	0800caa5 	.word	0x0800caa5
 800cac8:	0800caa5 	.word	0x0800caa5
 800cacc:	0800caa5 	.word	0x0800caa5
 800cad0:	0800caa5 	.word	0x0800caa5
 800cad4:	0800cb29 	.word	0x0800cb29
 800cad8:	0800caa5 	.word	0x0800caa5
 800cadc:	0800caa5 	.word	0x0800caa5
 800cae0:	0800caa5 	.word	0x0800caa5
 800cae4:	0800caa5 	.word	0x0800caa5
 800cae8:	0800cc29 	.word	0x0800cc29
 800caec:	0800cb53 	.word	0x0800cb53
 800caf0:	0800cbe3 	.word	0x0800cbe3
 800caf4:	0800caa5 	.word	0x0800caa5
 800caf8:	0800caa5 	.word	0x0800caa5
 800cafc:	0800cc4b 	.word	0x0800cc4b
 800cb00:	0800caa5 	.word	0x0800caa5
 800cb04:	0800cb53 	.word	0x0800cb53
 800cb08:	0800caa5 	.word	0x0800caa5
 800cb0c:	0800caa5 	.word	0x0800caa5
 800cb10:	0800cbeb 	.word	0x0800cbeb
 800cb14:	6833      	ldr	r3, [r6, #0]
 800cb16:	1d1a      	adds	r2, r3, #4
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	6032      	str	r2, [r6, #0]
 800cb1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb24:	2301      	movs	r3, #1
 800cb26:	e09d      	b.n	800cc64 <_printf_i+0x1e8>
 800cb28:	6833      	ldr	r3, [r6, #0]
 800cb2a:	6820      	ldr	r0, [r4, #0]
 800cb2c:	1d19      	adds	r1, r3, #4
 800cb2e:	6031      	str	r1, [r6, #0]
 800cb30:	0606      	lsls	r6, r0, #24
 800cb32:	d501      	bpl.n	800cb38 <_printf_i+0xbc>
 800cb34:	681d      	ldr	r5, [r3, #0]
 800cb36:	e003      	b.n	800cb40 <_printf_i+0xc4>
 800cb38:	0645      	lsls	r5, r0, #25
 800cb3a:	d5fb      	bpl.n	800cb34 <_printf_i+0xb8>
 800cb3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb40:	2d00      	cmp	r5, #0
 800cb42:	da03      	bge.n	800cb4c <_printf_i+0xd0>
 800cb44:	232d      	movs	r3, #45	@ 0x2d
 800cb46:	426d      	negs	r5, r5
 800cb48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb4c:	4859      	ldr	r0, [pc, #356]	@ (800ccb4 <_printf_i+0x238>)
 800cb4e:	230a      	movs	r3, #10
 800cb50:	e011      	b.n	800cb76 <_printf_i+0xfa>
 800cb52:	6821      	ldr	r1, [r4, #0]
 800cb54:	6833      	ldr	r3, [r6, #0]
 800cb56:	0608      	lsls	r0, r1, #24
 800cb58:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb5c:	d402      	bmi.n	800cb64 <_printf_i+0xe8>
 800cb5e:	0649      	lsls	r1, r1, #25
 800cb60:	bf48      	it	mi
 800cb62:	b2ad      	uxthmi	r5, r5
 800cb64:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb66:	4853      	ldr	r0, [pc, #332]	@ (800ccb4 <_printf_i+0x238>)
 800cb68:	6033      	str	r3, [r6, #0]
 800cb6a:	bf14      	ite	ne
 800cb6c:	230a      	movne	r3, #10
 800cb6e:	2308      	moveq	r3, #8
 800cb70:	2100      	movs	r1, #0
 800cb72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cb76:	6866      	ldr	r6, [r4, #4]
 800cb78:	60a6      	str	r6, [r4, #8]
 800cb7a:	2e00      	cmp	r6, #0
 800cb7c:	bfa2      	ittt	ge
 800cb7e:	6821      	ldrge	r1, [r4, #0]
 800cb80:	f021 0104 	bicge.w	r1, r1, #4
 800cb84:	6021      	strge	r1, [r4, #0]
 800cb86:	b90d      	cbnz	r5, 800cb8c <_printf_i+0x110>
 800cb88:	2e00      	cmp	r6, #0
 800cb8a:	d04b      	beq.n	800cc24 <_printf_i+0x1a8>
 800cb8c:	4616      	mov	r6, r2
 800cb8e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb92:	fb03 5711 	mls	r7, r3, r1, r5
 800cb96:	5dc7      	ldrb	r7, [r0, r7]
 800cb98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb9c:	462f      	mov	r7, r5
 800cb9e:	42bb      	cmp	r3, r7
 800cba0:	460d      	mov	r5, r1
 800cba2:	d9f4      	bls.n	800cb8e <_printf_i+0x112>
 800cba4:	2b08      	cmp	r3, #8
 800cba6:	d10b      	bne.n	800cbc0 <_printf_i+0x144>
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	07df      	lsls	r7, r3, #31
 800cbac:	d508      	bpl.n	800cbc0 <_printf_i+0x144>
 800cbae:	6923      	ldr	r3, [r4, #16]
 800cbb0:	6861      	ldr	r1, [r4, #4]
 800cbb2:	4299      	cmp	r1, r3
 800cbb4:	bfde      	ittt	le
 800cbb6:	2330      	movle	r3, #48	@ 0x30
 800cbb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cbbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cbc0:	1b92      	subs	r2, r2, r6
 800cbc2:	6122      	str	r2, [r4, #16]
 800cbc4:	f8cd a000 	str.w	sl, [sp]
 800cbc8:	464b      	mov	r3, r9
 800cbca:	aa03      	add	r2, sp, #12
 800cbcc:	4621      	mov	r1, r4
 800cbce:	4640      	mov	r0, r8
 800cbd0:	f7ff fee6 	bl	800c9a0 <_printf_common>
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	d14a      	bne.n	800cc6e <_printf_i+0x1f2>
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbdc:	b004      	add	sp, #16
 800cbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	f043 0320 	orr.w	r3, r3, #32
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	4833      	ldr	r0, [pc, #204]	@ (800ccb8 <_printf_i+0x23c>)
 800cbec:	2778      	movs	r7, #120	@ 0x78
 800cbee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	6831      	ldr	r1, [r6, #0]
 800cbf6:	061f      	lsls	r7, r3, #24
 800cbf8:	f851 5b04 	ldr.w	r5, [r1], #4
 800cbfc:	d402      	bmi.n	800cc04 <_printf_i+0x188>
 800cbfe:	065f      	lsls	r7, r3, #25
 800cc00:	bf48      	it	mi
 800cc02:	b2ad      	uxthmi	r5, r5
 800cc04:	6031      	str	r1, [r6, #0]
 800cc06:	07d9      	lsls	r1, r3, #31
 800cc08:	bf44      	itt	mi
 800cc0a:	f043 0320 	orrmi.w	r3, r3, #32
 800cc0e:	6023      	strmi	r3, [r4, #0]
 800cc10:	b11d      	cbz	r5, 800cc1a <_printf_i+0x19e>
 800cc12:	2310      	movs	r3, #16
 800cc14:	e7ac      	b.n	800cb70 <_printf_i+0xf4>
 800cc16:	4827      	ldr	r0, [pc, #156]	@ (800ccb4 <_printf_i+0x238>)
 800cc18:	e7e9      	b.n	800cbee <_printf_i+0x172>
 800cc1a:	6823      	ldr	r3, [r4, #0]
 800cc1c:	f023 0320 	bic.w	r3, r3, #32
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	e7f6      	b.n	800cc12 <_printf_i+0x196>
 800cc24:	4616      	mov	r6, r2
 800cc26:	e7bd      	b.n	800cba4 <_printf_i+0x128>
 800cc28:	6833      	ldr	r3, [r6, #0]
 800cc2a:	6825      	ldr	r5, [r4, #0]
 800cc2c:	6961      	ldr	r1, [r4, #20]
 800cc2e:	1d18      	adds	r0, r3, #4
 800cc30:	6030      	str	r0, [r6, #0]
 800cc32:	062e      	lsls	r6, r5, #24
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	d501      	bpl.n	800cc3c <_printf_i+0x1c0>
 800cc38:	6019      	str	r1, [r3, #0]
 800cc3a:	e002      	b.n	800cc42 <_printf_i+0x1c6>
 800cc3c:	0668      	lsls	r0, r5, #25
 800cc3e:	d5fb      	bpl.n	800cc38 <_printf_i+0x1bc>
 800cc40:	8019      	strh	r1, [r3, #0]
 800cc42:	2300      	movs	r3, #0
 800cc44:	6123      	str	r3, [r4, #16]
 800cc46:	4616      	mov	r6, r2
 800cc48:	e7bc      	b.n	800cbc4 <_printf_i+0x148>
 800cc4a:	6833      	ldr	r3, [r6, #0]
 800cc4c:	1d1a      	adds	r2, r3, #4
 800cc4e:	6032      	str	r2, [r6, #0]
 800cc50:	681e      	ldr	r6, [r3, #0]
 800cc52:	6862      	ldr	r2, [r4, #4]
 800cc54:	2100      	movs	r1, #0
 800cc56:	4630      	mov	r0, r6
 800cc58:	f7f3 fae2 	bl	8000220 <memchr>
 800cc5c:	b108      	cbz	r0, 800cc62 <_printf_i+0x1e6>
 800cc5e:	1b80      	subs	r0, r0, r6
 800cc60:	6060      	str	r0, [r4, #4]
 800cc62:	6863      	ldr	r3, [r4, #4]
 800cc64:	6123      	str	r3, [r4, #16]
 800cc66:	2300      	movs	r3, #0
 800cc68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc6c:	e7aa      	b.n	800cbc4 <_printf_i+0x148>
 800cc6e:	6923      	ldr	r3, [r4, #16]
 800cc70:	4632      	mov	r2, r6
 800cc72:	4649      	mov	r1, r9
 800cc74:	4640      	mov	r0, r8
 800cc76:	47d0      	blx	sl
 800cc78:	3001      	adds	r0, #1
 800cc7a:	d0ad      	beq.n	800cbd8 <_printf_i+0x15c>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	079b      	lsls	r3, r3, #30
 800cc80:	d413      	bmi.n	800ccaa <_printf_i+0x22e>
 800cc82:	68e0      	ldr	r0, [r4, #12]
 800cc84:	9b03      	ldr	r3, [sp, #12]
 800cc86:	4298      	cmp	r0, r3
 800cc88:	bfb8      	it	lt
 800cc8a:	4618      	movlt	r0, r3
 800cc8c:	e7a6      	b.n	800cbdc <_printf_i+0x160>
 800cc8e:	2301      	movs	r3, #1
 800cc90:	4632      	mov	r2, r6
 800cc92:	4649      	mov	r1, r9
 800cc94:	4640      	mov	r0, r8
 800cc96:	47d0      	blx	sl
 800cc98:	3001      	adds	r0, #1
 800cc9a:	d09d      	beq.n	800cbd8 <_printf_i+0x15c>
 800cc9c:	3501      	adds	r5, #1
 800cc9e:	68e3      	ldr	r3, [r4, #12]
 800cca0:	9903      	ldr	r1, [sp, #12]
 800cca2:	1a5b      	subs	r3, r3, r1
 800cca4:	42ab      	cmp	r3, r5
 800cca6:	dcf2      	bgt.n	800cc8e <_printf_i+0x212>
 800cca8:	e7eb      	b.n	800cc82 <_printf_i+0x206>
 800ccaa:	2500      	movs	r5, #0
 800ccac:	f104 0619 	add.w	r6, r4, #25
 800ccb0:	e7f5      	b.n	800cc9e <_printf_i+0x222>
 800ccb2:	bf00      	nop
 800ccb4:	0801059e 	.word	0x0801059e
 800ccb8:	080105af 	.word	0x080105af

0800ccbc <std>:
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	b510      	push	{r4, lr}
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	e9c0 3300 	strd	r3, r3, [r0]
 800ccc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccca:	6083      	str	r3, [r0, #8]
 800cccc:	8181      	strh	r1, [r0, #12]
 800ccce:	6643      	str	r3, [r0, #100]	@ 0x64
 800ccd0:	81c2      	strh	r2, [r0, #14]
 800ccd2:	6183      	str	r3, [r0, #24]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	2208      	movs	r2, #8
 800ccd8:	305c      	adds	r0, #92	@ 0x5c
 800ccda:	f000 f914 	bl	800cf06 <memset>
 800ccde:	4b0d      	ldr	r3, [pc, #52]	@ (800cd14 <std+0x58>)
 800cce0:	6263      	str	r3, [r4, #36]	@ 0x24
 800cce2:	4b0d      	ldr	r3, [pc, #52]	@ (800cd18 <std+0x5c>)
 800cce4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cce6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd1c <std+0x60>)
 800cce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ccea:	4b0d      	ldr	r3, [pc, #52]	@ (800cd20 <std+0x64>)
 800ccec:	6323      	str	r3, [r4, #48]	@ 0x30
 800ccee:	4b0d      	ldr	r3, [pc, #52]	@ (800cd24 <std+0x68>)
 800ccf0:	6224      	str	r4, [r4, #32]
 800ccf2:	429c      	cmp	r4, r3
 800ccf4:	d006      	beq.n	800cd04 <std+0x48>
 800ccf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ccfa:	4294      	cmp	r4, r2
 800ccfc:	d002      	beq.n	800cd04 <std+0x48>
 800ccfe:	33d0      	adds	r3, #208	@ 0xd0
 800cd00:	429c      	cmp	r4, r3
 800cd02:	d105      	bne.n	800cd10 <std+0x54>
 800cd04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd0c:	f000 b988 	b.w	800d020 <__retarget_lock_init_recursive>
 800cd10:	bd10      	pop	{r4, pc}
 800cd12:	bf00      	nop
 800cd14:	0800ce81 	.word	0x0800ce81
 800cd18:	0800cea3 	.word	0x0800cea3
 800cd1c:	0800cedb 	.word	0x0800cedb
 800cd20:	0800ceff 	.word	0x0800ceff
 800cd24:	2000085c 	.word	0x2000085c

0800cd28 <stdio_exit_handler>:
 800cd28:	4a02      	ldr	r2, [pc, #8]	@ (800cd34 <stdio_exit_handler+0xc>)
 800cd2a:	4903      	ldr	r1, [pc, #12]	@ (800cd38 <stdio_exit_handler+0x10>)
 800cd2c:	4803      	ldr	r0, [pc, #12]	@ (800cd3c <stdio_exit_handler+0x14>)
 800cd2e:	f000 b869 	b.w	800ce04 <_fwalk_sglue>
 800cd32:	bf00      	nop
 800cd34:	20000014 	.word	0x20000014
 800cd38:	0800e811 	.word	0x0800e811
 800cd3c:	20000024 	.word	0x20000024

0800cd40 <cleanup_stdio>:
 800cd40:	6841      	ldr	r1, [r0, #4]
 800cd42:	4b0c      	ldr	r3, [pc, #48]	@ (800cd74 <cleanup_stdio+0x34>)
 800cd44:	4299      	cmp	r1, r3
 800cd46:	b510      	push	{r4, lr}
 800cd48:	4604      	mov	r4, r0
 800cd4a:	d001      	beq.n	800cd50 <cleanup_stdio+0x10>
 800cd4c:	f001 fd60 	bl	800e810 <_fflush_r>
 800cd50:	68a1      	ldr	r1, [r4, #8]
 800cd52:	4b09      	ldr	r3, [pc, #36]	@ (800cd78 <cleanup_stdio+0x38>)
 800cd54:	4299      	cmp	r1, r3
 800cd56:	d002      	beq.n	800cd5e <cleanup_stdio+0x1e>
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f001 fd59 	bl	800e810 <_fflush_r>
 800cd5e:	68e1      	ldr	r1, [r4, #12]
 800cd60:	4b06      	ldr	r3, [pc, #24]	@ (800cd7c <cleanup_stdio+0x3c>)
 800cd62:	4299      	cmp	r1, r3
 800cd64:	d004      	beq.n	800cd70 <cleanup_stdio+0x30>
 800cd66:	4620      	mov	r0, r4
 800cd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd6c:	f001 bd50 	b.w	800e810 <_fflush_r>
 800cd70:	bd10      	pop	{r4, pc}
 800cd72:	bf00      	nop
 800cd74:	2000085c 	.word	0x2000085c
 800cd78:	200008c4 	.word	0x200008c4
 800cd7c:	2000092c 	.word	0x2000092c

0800cd80 <global_stdio_init.part.0>:
 800cd80:	b510      	push	{r4, lr}
 800cd82:	4b0b      	ldr	r3, [pc, #44]	@ (800cdb0 <global_stdio_init.part.0+0x30>)
 800cd84:	4c0b      	ldr	r4, [pc, #44]	@ (800cdb4 <global_stdio_init.part.0+0x34>)
 800cd86:	4a0c      	ldr	r2, [pc, #48]	@ (800cdb8 <global_stdio_init.part.0+0x38>)
 800cd88:	601a      	str	r2, [r3, #0]
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	2104      	movs	r1, #4
 800cd90:	f7ff ff94 	bl	800ccbc <std>
 800cd94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd98:	2201      	movs	r2, #1
 800cd9a:	2109      	movs	r1, #9
 800cd9c:	f7ff ff8e 	bl	800ccbc <std>
 800cda0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cda4:	2202      	movs	r2, #2
 800cda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdaa:	2112      	movs	r1, #18
 800cdac:	f7ff bf86 	b.w	800ccbc <std>
 800cdb0:	20000994 	.word	0x20000994
 800cdb4:	2000085c 	.word	0x2000085c
 800cdb8:	0800cd29 	.word	0x0800cd29

0800cdbc <__sfp_lock_acquire>:
 800cdbc:	4801      	ldr	r0, [pc, #4]	@ (800cdc4 <__sfp_lock_acquire+0x8>)
 800cdbe:	f000 b930 	b.w	800d022 <__retarget_lock_acquire_recursive>
 800cdc2:	bf00      	nop
 800cdc4:	2000099d 	.word	0x2000099d

0800cdc8 <__sfp_lock_release>:
 800cdc8:	4801      	ldr	r0, [pc, #4]	@ (800cdd0 <__sfp_lock_release+0x8>)
 800cdca:	f000 b92b 	b.w	800d024 <__retarget_lock_release_recursive>
 800cdce:	bf00      	nop
 800cdd0:	2000099d 	.word	0x2000099d

0800cdd4 <__sinit>:
 800cdd4:	b510      	push	{r4, lr}
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	f7ff fff0 	bl	800cdbc <__sfp_lock_acquire>
 800cddc:	6a23      	ldr	r3, [r4, #32]
 800cdde:	b11b      	cbz	r3, 800cde8 <__sinit+0x14>
 800cde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cde4:	f7ff bff0 	b.w	800cdc8 <__sfp_lock_release>
 800cde8:	4b04      	ldr	r3, [pc, #16]	@ (800cdfc <__sinit+0x28>)
 800cdea:	6223      	str	r3, [r4, #32]
 800cdec:	4b04      	ldr	r3, [pc, #16]	@ (800ce00 <__sinit+0x2c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1f5      	bne.n	800cde0 <__sinit+0xc>
 800cdf4:	f7ff ffc4 	bl	800cd80 <global_stdio_init.part.0>
 800cdf8:	e7f2      	b.n	800cde0 <__sinit+0xc>
 800cdfa:	bf00      	nop
 800cdfc:	0800cd41 	.word	0x0800cd41
 800ce00:	20000994 	.word	0x20000994

0800ce04 <_fwalk_sglue>:
 800ce04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce08:	4607      	mov	r7, r0
 800ce0a:	4688      	mov	r8, r1
 800ce0c:	4614      	mov	r4, r2
 800ce0e:	2600      	movs	r6, #0
 800ce10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce14:	f1b9 0901 	subs.w	r9, r9, #1
 800ce18:	d505      	bpl.n	800ce26 <_fwalk_sglue+0x22>
 800ce1a:	6824      	ldr	r4, [r4, #0]
 800ce1c:	2c00      	cmp	r4, #0
 800ce1e:	d1f7      	bne.n	800ce10 <_fwalk_sglue+0xc>
 800ce20:	4630      	mov	r0, r6
 800ce22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce26:	89ab      	ldrh	r3, [r5, #12]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d907      	bls.n	800ce3c <_fwalk_sglue+0x38>
 800ce2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce30:	3301      	adds	r3, #1
 800ce32:	d003      	beq.n	800ce3c <_fwalk_sglue+0x38>
 800ce34:	4629      	mov	r1, r5
 800ce36:	4638      	mov	r0, r7
 800ce38:	47c0      	blx	r8
 800ce3a:	4306      	orrs	r6, r0
 800ce3c:	3568      	adds	r5, #104	@ 0x68
 800ce3e:	e7e9      	b.n	800ce14 <_fwalk_sglue+0x10>

0800ce40 <siprintf>:
 800ce40:	b40e      	push	{r1, r2, r3}
 800ce42:	b500      	push	{lr}
 800ce44:	b09c      	sub	sp, #112	@ 0x70
 800ce46:	ab1d      	add	r3, sp, #116	@ 0x74
 800ce48:	9002      	str	r0, [sp, #8]
 800ce4a:	9006      	str	r0, [sp, #24]
 800ce4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce50:	4809      	ldr	r0, [pc, #36]	@ (800ce78 <siprintf+0x38>)
 800ce52:	9107      	str	r1, [sp, #28]
 800ce54:	9104      	str	r1, [sp, #16]
 800ce56:	4909      	ldr	r1, [pc, #36]	@ (800ce7c <siprintf+0x3c>)
 800ce58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce5c:	9105      	str	r1, [sp, #20]
 800ce5e:	6800      	ldr	r0, [r0, #0]
 800ce60:	9301      	str	r3, [sp, #4]
 800ce62:	a902      	add	r1, sp, #8
 800ce64:	f001 fb54 	bl	800e510 <_svfiprintf_r>
 800ce68:	9b02      	ldr	r3, [sp, #8]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	701a      	strb	r2, [r3, #0]
 800ce6e:	b01c      	add	sp, #112	@ 0x70
 800ce70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce74:	b003      	add	sp, #12
 800ce76:	4770      	bx	lr
 800ce78:	20000020 	.word	0x20000020
 800ce7c:	ffff0208 	.word	0xffff0208

0800ce80 <__sread>:
 800ce80:	b510      	push	{r4, lr}
 800ce82:	460c      	mov	r4, r1
 800ce84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce88:	f000 f86c 	bl	800cf64 <_read_r>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	bfab      	itete	ge
 800ce90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce92:	89a3      	ldrhlt	r3, [r4, #12]
 800ce94:	181b      	addge	r3, r3, r0
 800ce96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce9a:	bfac      	ite	ge
 800ce9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce9e:	81a3      	strhlt	r3, [r4, #12]
 800cea0:	bd10      	pop	{r4, pc}

0800cea2 <__swrite>:
 800cea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea6:	461f      	mov	r7, r3
 800cea8:	898b      	ldrh	r3, [r1, #12]
 800ceaa:	05db      	lsls	r3, r3, #23
 800ceac:	4605      	mov	r5, r0
 800ceae:	460c      	mov	r4, r1
 800ceb0:	4616      	mov	r6, r2
 800ceb2:	d505      	bpl.n	800cec0 <__swrite+0x1e>
 800ceb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb8:	2302      	movs	r3, #2
 800ceba:	2200      	movs	r2, #0
 800cebc:	f000 f840 	bl	800cf40 <_lseek_r>
 800cec0:	89a3      	ldrh	r3, [r4, #12]
 800cec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ceca:	81a3      	strh	r3, [r4, #12]
 800cecc:	4632      	mov	r2, r6
 800cece:	463b      	mov	r3, r7
 800ced0:	4628      	mov	r0, r5
 800ced2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ced6:	f000 b867 	b.w	800cfa8 <_write_r>

0800ceda <__sseek>:
 800ceda:	b510      	push	{r4, lr}
 800cedc:	460c      	mov	r4, r1
 800cede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee2:	f000 f82d 	bl	800cf40 <_lseek_r>
 800cee6:	1c43      	adds	r3, r0, #1
 800cee8:	89a3      	ldrh	r3, [r4, #12]
 800ceea:	bf15      	itete	ne
 800ceec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ceee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cef2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cef6:	81a3      	strheq	r3, [r4, #12]
 800cef8:	bf18      	it	ne
 800cefa:	81a3      	strhne	r3, [r4, #12]
 800cefc:	bd10      	pop	{r4, pc}

0800cefe <__sclose>:
 800cefe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf02:	f000 b80d 	b.w	800cf20 <_close_r>

0800cf06 <memset>:
 800cf06:	4402      	add	r2, r0
 800cf08:	4603      	mov	r3, r0
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d100      	bne.n	800cf10 <memset+0xa>
 800cf0e:	4770      	bx	lr
 800cf10:	f803 1b01 	strb.w	r1, [r3], #1
 800cf14:	e7f9      	b.n	800cf0a <memset+0x4>
	...

0800cf18 <_localeconv_r>:
 800cf18:	4800      	ldr	r0, [pc, #0]	@ (800cf1c <_localeconv_r+0x4>)
 800cf1a:	4770      	bx	lr
 800cf1c:	20000160 	.word	0x20000160

0800cf20 <_close_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d06      	ldr	r5, [pc, #24]	@ (800cf3c <_close_r+0x1c>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	602b      	str	r3, [r5, #0]
 800cf2c:	f7f6 fa02 	bl	8003334 <_close>
 800cf30:	1c43      	adds	r3, r0, #1
 800cf32:	d102      	bne.n	800cf3a <_close_r+0x1a>
 800cf34:	682b      	ldr	r3, [r5, #0]
 800cf36:	b103      	cbz	r3, 800cf3a <_close_r+0x1a>
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	bd38      	pop	{r3, r4, r5, pc}
 800cf3c:	20000998 	.word	0x20000998

0800cf40 <_lseek_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4d07      	ldr	r5, [pc, #28]	@ (800cf60 <_lseek_r+0x20>)
 800cf44:	4604      	mov	r4, r0
 800cf46:	4608      	mov	r0, r1
 800cf48:	4611      	mov	r1, r2
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	602a      	str	r2, [r5, #0]
 800cf4e:	461a      	mov	r2, r3
 800cf50:	f7f6 fa17 	bl	8003382 <_lseek>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_lseek_r+0x1e>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_lseek_r+0x1e>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	20000998 	.word	0x20000998

0800cf64 <_read_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4d07      	ldr	r5, [pc, #28]	@ (800cf84 <_read_r+0x20>)
 800cf68:	4604      	mov	r4, r0
 800cf6a:	4608      	mov	r0, r1
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	602a      	str	r2, [r5, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	f7f6 f9a5 	bl	80032c2 <_read>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	d102      	bne.n	800cf82 <_read_r+0x1e>
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	b103      	cbz	r3, 800cf82 <_read_r+0x1e>
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	20000998 	.word	0x20000998

0800cf88 <_sbrk_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4d06      	ldr	r5, [pc, #24]	@ (800cfa4 <_sbrk_r+0x1c>)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4604      	mov	r4, r0
 800cf90:	4608      	mov	r0, r1
 800cf92:	602b      	str	r3, [r5, #0]
 800cf94:	f7f6 fa02 	bl	800339c <_sbrk>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	d102      	bne.n	800cfa2 <_sbrk_r+0x1a>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	b103      	cbz	r3, 800cfa2 <_sbrk_r+0x1a>
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	20000998 	.word	0x20000998

0800cfa8 <_write_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d07      	ldr	r5, [pc, #28]	@ (800cfc8 <_write_r+0x20>)
 800cfac:	4604      	mov	r4, r0
 800cfae:	4608      	mov	r0, r1
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	602a      	str	r2, [r5, #0]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	f7f6 f9a0 	bl	80032fc <_write>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d102      	bne.n	800cfc6 <_write_r+0x1e>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	b103      	cbz	r3, 800cfc6 <_write_r+0x1e>
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	20000998 	.word	0x20000998

0800cfcc <__errno>:
 800cfcc:	4b01      	ldr	r3, [pc, #4]	@ (800cfd4 <__errno+0x8>)
 800cfce:	6818      	ldr	r0, [r3, #0]
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	20000020 	.word	0x20000020

0800cfd8 <__libc_init_array>:
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	4d0d      	ldr	r5, [pc, #52]	@ (800d010 <__libc_init_array+0x38>)
 800cfdc:	4c0d      	ldr	r4, [pc, #52]	@ (800d014 <__libc_init_array+0x3c>)
 800cfde:	1b64      	subs	r4, r4, r5
 800cfe0:	10a4      	asrs	r4, r4, #2
 800cfe2:	2600      	movs	r6, #0
 800cfe4:	42a6      	cmp	r6, r4
 800cfe6:	d109      	bne.n	800cffc <__libc_init_array+0x24>
 800cfe8:	4d0b      	ldr	r5, [pc, #44]	@ (800d018 <__libc_init_array+0x40>)
 800cfea:	4c0c      	ldr	r4, [pc, #48]	@ (800d01c <__libc_init_array+0x44>)
 800cfec:	f002 fcd8 	bl	800f9a0 <_init>
 800cff0:	1b64      	subs	r4, r4, r5
 800cff2:	10a4      	asrs	r4, r4, #2
 800cff4:	2600      	movs	r6, #0
 800cff6:	42a6      	cmp	r6, r4
 800cff8:	d105      	bne.n	800d006 <__libc_init_array+0x2e>
 800cffa:	bd70      	pop	{r4, r5, r6, pc}
 800cffc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d000:	4798      	blx	r3
 800d002:	3601      	adds	r6, #1
 800d004:	e7ee      	b.n	800cfe4 <__libc_init_array+0xc>
 800d006:	f855 3b04 	ldr.w	r3, [r5], #4
 800d00a:	4798      	blx	r3
 800d00c:	3601      	adds	r6, #1
 800d00e:	e7f2      	b.n	800cff6 <__libc_init_array+0x1e>
 800d010:	08010cd8 	.word	0x08010cd8
 800d014:	08010cd8 	.word	0x08010cd8
 800d018:	08010cd8 	.word	0x08010cd8
 800d01c:	08010cdc 	.word	0x08010cdc

0800d020 <__retarget_lock_init_recursive>:
 800d020:	4770      	bx	lr

0800d022 <__retarget_lock_acquire_recursive>:
 800d022:	4770      	bx	lr

0800d024 <__retarget_lock_release_recursive>:
 800d024:	4770      	bx	lr

0800d026 <quorem>:
 800d026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02a:	6903      	ldr	r3, [r0, #16]
 800d02c:	690c      	ldr	r4, [r1, #16]
 800d02e:	42a3      	cmp	r3, r4
 800d030:	4607      	mov	r7, r0
 800d032:	db7e      	blt.n	800d132 <quorem+0x10c>
 800d034:	3c01      	subs	r4, #1
 800d036:	f101 0814 	add.w	r8, r1, #20
 800d03a:	00a3      	lsls	r3, r4, #2
 800d03c:	f100 0514 	add.w	r5, r0, #20
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d046:	9301      	str	r3, [sp, #4]
 800d048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d04c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d050:	3301      	adds	r3, #1
 800d052:	429a      	cmp	r2, r3
 800d054:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d058:	fbb2 f6f3 	udiv	r6, r2, r3
 800d05c:	d32e      	bcc.n	800d0bc <quorem+0x96>
 800d05e:	f04f 0a00 	mov.w	sl, #0
 800d062:	46c4      	mov	ip, r8
 800d064:	46ae      	mov	lr, r5
 800d066:	46d3      	mov	fp, sl
 800d068:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d06c:	b298      	uxth	r0, r3
 800d06e:	fb06 a000 	mla	r0, r6, r0, sl
 800d072:	0c02      	lsrs	r2, r0, #16
 800d074:	0c1b      	lsrs	r3, r3, #16
 800d076:	fb06 2303 	mla	r3, r6, r3, r2
 800d07a:	f8de 2000 	ldr.w	r2, [lr]
 800d07e:	b280      	uxth	r0, r0
 800d080:	b292      	uxth	r2, r2
 800d082:	1a12      	subs	r2, r2, r0
 800d084:	445a      	add	r2, fp
 800d086:	f8de 0000 	ldr.w	r0, [lr]
 800d08a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d08e:	b29b      	uxth	r3, r3
 800d090:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d094:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d098:	b292      	uxth	r2, r2
 800d09a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d09e:	45e1      	cmp	r9, ip
 800d0a0:	f84e 2b04 	str.w	r2, [lr], #4
 800d0a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d0a8:	d2de      	bcs.n	800d068 <quorem+0x42>
 800d0aa:	9b00      	ldr	r3, [sp, #0]
 800d0ac:	58eb      	ldr	r3, [r5, r3]
 800d0ae:	b92b      	cbnz	r3, 800d0bc <quorem+0x96>
 800d0b0:	9b01      	ldr	r3, [sp, #4]
 800d0b2:	3b04      	subs	r3, #4
 800d0b4:	429d      	cmp	r5, r3
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	d32f      	bcc.n	800d11a <quorem+0xf4>
 800d0ba:	613c      	str	r4, [r7, #16]
 800d0bc:	4638      	mov	r0, r7
 800d0be:	f001 f8c3 	bl	800e248 <__mcmp>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	db25      	blt.n	800d112 <quorem+0xec>
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	f858 2b04 	ldr.w	r2, [r8], #4
 800d0ce:	f8d1 c000 	ldr.w	ip, [r1]
 800d0d2:	fa1f fe82 	uxth.w	lr, r2
 800d0d6:	fa1f f38c 	uxth.w	r3, ip
 800d0da:	eba3 030e 	sub.w	r3, r3, lr
 800d0de:	4403      	add	r3, r0
 800d0e0:	0c12      	lsrs	r2, r2, #16
 800d0e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d0e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0f0:	45c1      	cmp	r9, r8
 800d0f2:	f841 3b04 	str.w	r3, [r1], #4
 800d0f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d0fa:	d2e6      	bcs.n	800d0ca <quorem+0xa4>
 800d0fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d100:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d104:	b922      	cbnz	r2, 800d110 <quorem+0xea>
 800d106:	3b04      	subs	r3, #4
 800d108:	429d      	cmp	r5, r3
 800d10a:	461a      	mov	r2, r3
 800d10c:	d30b      	bcc.n	800d126 <quorem+0x100>
 800d10e:	613c      	str	r4, [r7, #16]
 800d110:	3601      	adds	r6, #1
 800d112:	4630      	mov	r0, r6
 800d114:	b003      	add	sp, #12
 800d116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11a:	6812      	ldr	r2, [r2, #0]
 800d11c:	3b04      	subs	r3, #4
 800d11e:	2a00      	cmp	r2, #0
 800d120:	d1cb      	bne.n	800d0ba <quorem+0x94>
 800d122:	3c01      	subs	r4, #1
 800d124:	e7c6      	b.n	800d0b4 <quorem+0x8e>
 800d126:	6812      	ldr	r2, [r2, #0]
 800d128:	3b04      	subs	r3, #4
 800d12a:	2a00      	cmp	r2, #0
 800d12c:	d1ef      	bne.n	800d10e <quorem+0xe8>
 800d12e:	3c01      	subs	r4, #1
 800d130:	e7ea      	b.n	800d108 <quorem+0xe2>
 800d132:	2000      	movs	r0, #0
 800d134:	e7ee      	b.n	800d114 <quorem+0xee>
	...

0800d138 <_dtoa_r>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	69c7      	ldr	r7, [r0, #28]
 800d13e:	b099      	sub	sp, #100	@ 0x64
 800d140:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d144:	ec55 4b10 	vmov	r4, r5, d0
 800d148:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d14a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d14c:	4683      	mov	fp, r0
 800d14e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d150:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d152:	b97f      	cbnz	r7, 800d174 <_dtoa_r+0x3c>
 800d154:	2010      	movs	r0, #16
 800d156:	f7ff f89b 	bl	800c290 <malloc>
 800d15a:	4602      	mov	r2, r0
 800d15c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d160:	b920      	cbnz	r0, 800d16c <_dtoa_r+0x34>
 800d162:	4ba7      	ldr	r3, [pc, #668]	@ (800d400 <_dtoa_r+0x2c8>)
 800d164:	21ef      	movs	r1, #239	@ 0xef
 800d166:	48a7      	ldr	r0, [pc, #668]	@ (800d404 <_dtoa_r+0x2cc>)
 800d168:	f001 fba2 	bl	800e8b0 <__assert_func>
 800d16c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d170:	6007      	str	r7, [r0, #0]
 800d172:	60c7      	str	r7, [r0, #12]
 800d174:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d178:	6819      	ldr	r1, [r3, #0]
 800d17a:	b159      	cbz	r1, 800d194 <_dtoa_r+0x5c>
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	604a      	str	r2, [r1, #4]
 800d180:	2301      	movs	r3, #1
 800d182:	4093      	lsls	r3, r2
 800d184:	608b      	str	r3, [r1, #8]
 800d186:	4658      	mov	r0, fp
 800d188:	f000 fe24 	bl	800ddd4 <_Bfree>
 800d18c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	1e2b      	subs	r3, r5, #0
 800d196:	bfb9      	ittee	lt
 800d198:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d19c:	9303      	strlt	r3, [sp, #12]
 800d19e:	2300      	movge	r3, #0
 800d1a0:	6033      	strge	r3, [r6, #0]
 800d1a2:	9f03      	ldr	r7, [sp, #12]
 800d1a4:	4b98      	ldr	r3, [pc, #608]	@ (800d408 <_dtoa_r+0x2d0>)
 800d1a6:	bfbc      	itt	lt
 800d1a8:	2201      	movlt	r2, #1
 800d1aa:	6032      	strlt	r2, [r6, #0]
 800d1ac:	43bb      	bics	r3, r7
 800d1ae:	d112      	bne.n	800d1d6 <_dtoa_r+0x9e>
 800d1b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1bc:	4323      	orrs	r3, r4
 800d1be:	f000 854d 	beq.w	800dc5c <_dtoa_r+0xb24>
 800d1c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d41c <_dtoa_r+0x2e4>
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f000 854f 	beq.w	800dc6c <_dtoa_r+0xb34>
 800d1ce:	f10a 0303 	add.w	r3, sl, #3
 800d1d2:	f000 bd49 	b.w	800dc68 <_dtoa_r+0xb30>
 800d1d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	ec51 0b17 	vmov	r0, r1, d7
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d1e6:	f7f3 fc97 	bl	8000b18 <__aeabi_dcmpeq>
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	b158      	cbz	r0, 800d206 <_dtoa_r+0xce>
 800d1ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1f6:	b113      	cbz	r3, 800d1fe <_dtoa_r+0xc6>
 800d1f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d1fa:	4b84      	ldr	r3, [pc, #528]	@ (800d40c <_dtoa_r+0x2d4>)
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d420 <_dtoa_r+0x2e8>
 800d202:	f000 bd33 	b.w	800dc6c <_dtoa_r+0xb34>
 800d206:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d20a:	aa16      	add	r2, sp, #88	@ 0x58
 800d20c:	a917      	add	r1, sp, #92	@ 0x5c
 800d20e:	4658      	mov	r0, fp
 800d210:	f001 f8ca 	bl	800e3a8 <__d2b>
 800d214:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d218:	4681      	mov	r9, r0
 800d21a:	2e00      	cmp	r6, #0
 800d21c:	d077      	beq.n	800d30e <_dtoa_r+0x1d6>
 800d21e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d220:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d22c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d230:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d234:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d238:	4619      	mov	r1, r3
 800d23a:	2200      	movs	r2, #0
 800d23c:	4b74      	ldr	r3, [pc, #464]	@ (800d410 <_dtoa_r+0x2d8>)
 800d23e:	f7f3 f84b 	bl	80002d8 <__aeabi_dsub>
 800d242:	a369      	add	r3, pc, #420	@ (adr r3, 800d3e8 <_dtoa_r+0x2b0>)
 800d244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d248:	f7f3 f9fe 	bl	8000648 <__aeabi_dmul>
 800d24c:	a368      	add	r3, pc, #416	@ (adr r3, 800d3f0 <_dtoa_r+0x2b8>)
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	f7f3 f843 	bl	80002dc <__adddf3>
 800d256:	4604      	mov	r4, r0
 800d258:	4630      	mov	r0, r6
 800d25a:	460d      	mov	r5, r1
 800d25c:	f7f3 f98a 	bl	8000574 <__aeabi_i2d>
 800d260:	a365      	add	r3, pc, #404	@ (adr r3, 800d3f8 <_dtoa_r+0x2c0>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f3 f9ef 	bl	8000648 <__aeabi_dmul>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4620      	mov	r0, r4
 800d270:	4629      	mov	r1, r5
 800d272:	f7f3 f833 	bl	80002dc <__adddf3>
 800d276:	4604      	mov	r4, r0
 800d278:	460d      	mov	r5, r1
 800d27a:	f7f3 fc95 	bl	8000ba8 <__aeabi_d2iz>
 800d27e:	2200      	movs	r2, #0
 800d280:	4607      	mov	r7, r0
 800d282:	2300      	movs	r3, #0
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f7f3 fc50 	bl	8000b2c <__aeabi_dcmplt>
 800d28c:	b140      	cbz	r0, 800d2a0 <_dtoa_r+0x168>
 800d28e:	4638      	mov	r0, r7
 800d290:	f7f3 f970 	bl	8000574 <__aeabi_i2d>
 800d294:	4622      	mov	r2, r4
 800d296:	462b      	mov	r3, r5
 800d298:	f7f3 fc3e 	bl	8000b18 <__aeabi_dcmpeq>
 800d29c:	b900      	cbnz	r0, 800d2a0 <_dtoa_r+0x168>
 800d29e:	3f01      	subs	r7, #1
 800d2a0:	2f16      	cmp	r7, #22
 800d2a2:	d851      	bhi.n	800d348 <_dtoa_r+0x210>
 800d2a4:	4b5b      	ldr	r3, [pc, #364]	@ (800d414 <_dtoa_r+0x2dc>)
 800d2a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2b2:	f7f3 fc3b 	bl	8000b2c <__aeabi_dcmplt>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d048      	beq.n	800d34c <_dtoa_r+0x214>
 800d2ba:	3f01      	subs	r7, #1
 800d2bc:	2300      	movs	r3, #0
 800d2be:	9312      	str	r3, [sp, #72]	@ 0x48
 800d2c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d2c2:	1b9b      	subs	r3, r3, r6
 800d2c4:	1e5a      	subs	r2, r3, #1
 800d2c6:	bf44      	itt	mi
 800d2c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800d2cc:	2300      	movmi	r3, #0
 800d2ce:	9208      	str	r2, [sp, #32]
 800d2d0:	bf54      	ite	pl
 800d2d2:	f04f 0800 	movpl.w	r8, #0
 800d2d6:	9308      	strmi	r3, [sp, #32]
 800d2d8:	2f00      	cmp	r7, #0
 800d2da:	db39      	blt.n	800d350 <_dtoa_r+0x218>
 800d2dc:	9b08      	ldr	r3, [sp, #32]
 800d2de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d2e0:	443b      	add	r3, r7
 800d2e2:	9308      	str	r3, [sp, #32]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ea:	2b09      	cmp	r3, #9
 800d2ec:	d864      	bhi.n	800d3b8 <_dtoa_r+0x280>
 800d2ee:	2b05      	cmp	r3, #5
 800d2f0:	bfc4      	itt	gt
 800d2f2:	3b04      	subgt	r3, #4
 800d2f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f8:	f1a3 0302 	sub.w	r3, r3, #2
 800d2fc:	bfcc      	ite	gt
 800d2fe:	2400      	movgt	r4, #0
 800d300:	2401      	movle	r4, #1
 800d302:	2b03      	cmp	r3, #3
 800d304:	d863      	bhi.n	800d3ce <_dtoa_r+0x296>
 800d306:	e8df f003 	tbb	[pc, r3]
 800d30a:	372a      	.short	0x372a
 800d30c:	5535      	.short	0x5535
 800d30e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d312:	441e      	add	r6, r3
 800d314:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d318:	2b20      	cmp	r3, #32
 800d31a:	bfc1      	itttt	gt
 800d31c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d320:	409f      	lslgt	r7, r3
 800d322:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d326:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d32a:	bfd6      	itet	le
 800d32c:	f1c3 0320 	rsble	r3, r3, #32
 800d330:	ea47 0003 	orrgt.w	r0, r7, r3
 800d334:	fa04 f003 	lslle.w	r0, r4, r3
 800d338:	f7f3 f90c 	bl	8000554 <__aeabi_ui2d>
 800d33c:	2201      	movs	r2, #1
 800d33e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d342:	3e01      	subs	r6, #1
 800d344:	9214      	str	r2, [sp, #80]	@ 0x50
 800d346:	e777      	b.n	800d238 <_dtoa_r+0x100>
 800d348:	2301      	movs	r3, #1
 800d34a:	e7b8      	b.n	800d2be <_dtoa_r+0x186>
 800d34c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d34e:	e7b7      	b.n	800d2c0 <_dtoa_r+0x188>
 800d350:	427b      	negs	r3, r7
 800d352:	930a      	str	r3, [sp, #40]	@ 0x28
 800d354:	2300      	movs	r3, #0
 800d356:	eba8 0807 	sub.w	r8, r8, r7
 800d35a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d35c:	e7c4      	b.n	800d2e8 <_dtoa_r+0x1b0>
 800d35e:	2300      	movs	r3, #0
 800d360:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d364:	2b00      	cmp	r3, #0
 800d366:	dc35      	bgt.n	800d3d4 <_dtoa_r+0x29c>
 800d368:	2301      	movs	r3, #1
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	9307      	str	r3, [sp, #28]
 800d36e:	461a      	mov	r2, r3
 800d370:	920e      	str	r2, [sp, #56]	@ 0x38
 800d372:	e00b      	b.n	800d38c <_dtoa_r+0x254>
 800d374:	2301      	movs	r3, #1
 800d376:	e7f3      	b.n	800d360 <_dtoa_r+0x228>
 800d378:	2300      	movs	r3, #0
 800d37a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d37c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d37e:	18fb      	adds	r3, r7, r3
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	3301      	adds	r3, #1
 800d384:	2b01      	cmp	r3, #1
 800d386:	9307      	str	r3, [sp, #28]
 800d388:	bfb8      	it	lt
 800d38a:	2301      	movlt	r3, #1
 800d38c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d390:	2100      	movs	r1, #0
 800d392:	2204      	movs	r2, #4
 800d394:	f102 0514 	add.w	r5, r2, #20
 800d398:	429d      	cmp	r5, r3
 800d39a:	d91f      	bls.n	800d3dc <_dtoa_r+0x2a4>
 800d39c:	6041      	str	r1, [r0, #4]
 800d39e:	4658      	mov	r0, fp
 800d3a0:	f000 fcd8 	bl	800dd54 <_Balloc>
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d13c      	bne.n	800d424 <_dtoa_r+0x2ec>
 800d3aa:	4b1b      	ldr	r3, [pc, #108]	@ (800d418 <_dtoa_r+0x2e0>)
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800d3b2:	e6d8      	b.n	800d166 <_dtoa_r+0x2e>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e7e0      	b.n	800d37a <_dtoa_r+0x242>
 800d3b8:	2401      	movs	r4, #1
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	9307      	str	r3, [sp, #28]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2312      	movs	r3, #18
 800d3cc:	e7d0      	b.n	800d370 <_dtoa_r+0x238>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3d2:	e7f5      	b.n	800d3c0 <_dtoa_r+0x288>
 800d3d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	9307      	str	r3, [sp, #28]
 800d3da:	e7d7      	b.n	800d38c <_dtoa_r+0x254>
 800d3dc:	3101      	adds	r1, #1
 800d3de:	0052      	lsls	r2, r2, #1
 800d3e0:	e7d8      	b.n	800d394 <_dtoa_r+0x25c>
 800d3e2:	bf00      	nop
 800d3e4:	f3af 8000 	nop.w
 800d3e8:	636f4361 	.word	0x636f4361
 800d3ec:	3fd287a7 	.word	0x3fd287a7
 800d3f0:	8b60c8b3 	.word	0x8b60c8b3
 800d3f4:	3fc68a28 	.word	0x3fc68a28
 800d3f8:	509f79fb 	.word	0x509f79fb
 800d3fc:	3fd34413 	.word	0x3fd34413
 800d400:	080105cd 	.word	0x080105cd
 800d404:	080105e4 	.word	0x080105e4
 800d408:	7ff00000 	.word	0x7ff00000
 800d40c:	0801059d 	.word	0x0801059d
 800d410:	3ff80000 	.word	0x3ff80000
 800d414:	080106e0 	.word	0x080106e0
 800d418:	0801063c 	.word	0x0801063c
 800d41c:	080105c9 	.word	0x080105c9
 800d420:	0801059c 	.word	0x0801059c
 800d424:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d428:	6018      	str	r0, [r3, #0]
 800d42a:	9b07      	ldr	r3, [sp, #28]
 800d42c:	2b0e      	cmp	r3, #14
 800d42e:	f200 80a4 	bhi.w	800d57a <_dtoa_r+0x442>
 800d432:	2c00      	cmp	r4, #0
 800d434:	f000 80a1 	beq.w	800d57a <_dtoa_r+0x442>
 800d438:	2f00      	cmp	r7, #0
 800d43a:	dd33      	ble.n	800d4a4 <_dtoa_r+0x36c>
 800d43c:	4bad      	ldr	r3, [pc, #692]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d43e:	f007 020f 	and.w	r2, r7, #15
 800d442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d446:	ed93 7b00 	vldr	d7, [r3]
 800d44a:	05f8      	lsls	r0, r7, #23
 800d44c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d450:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d454:	d516      	bpl.n	800d484 <_dtoa_r+0x34c>
 800d456:	4ba8      	ldr	r3, [pc, #672]	@ (800d6f8 <_dtoa_r+0x5c0>)
 800d458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d45c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d460:	f7f3 fa1c 	bl	800089c <__aeabi_ddiv>
 800d464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d468:	f004 040f 	and.w	r4, r4, #15
 800d46c:	2603      	movs	r6, #3
 800d46e:	4da2      	ldr	r5, [pc, #648]	@ (800d6f8 <_dtoa_r+0x5c0>)
 800d470:	b954      	cbnz	r4, 800d488 <_dtoa_r+0x350>
 800d472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d47a:	f7f3 fa0f 	bl	800089c <__aeabi_ddiv>
 800d47e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d482:	e028      	b.n	800d4d6 <_dtoa_r+0x39e>
 800d484:	2602      	movs	r6, #2
 800d486:	e7f2      	b.n	800d46e <_dtoa_r+0x336>
 800d488:	07e1      	lsls	r1, r4, #31
 800d48a:	d508      	bpl.n	800d49e <_dtoa_r+0x366>
 800d48c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d490:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d494:	f7f3 f8d8 	bl	8000648 <__aeabi_dmul>
 800d498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d49c:	3601      	adds	r6, #1
 800d49e:	1064      	asrs	r4, r4, #1
 800d4a0:	3508      	adds	r5, #8
 800d4a2:	e7e5      	b.n	800d470 <_dtoa_r+0x338>
 800d4a4:	f000 80d2 	beq.w	800d64c <_dtoa_r+0x514>
 800d4a8:	427c      	negs	r4, r7
 800d4aa:	4b92      	ldr	r3, [pc, #584]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d4ac:	4d92      	ldr	r5, [pc, #584]	@ (800d6f8 <_dtoa_r+0x5c0>)
 800d4ae:	f004 020f 	and.w	r2, r4, #15
 800d4b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4be:	f7f3 f8c3 	bl	8000648 <__aeabi_dmul>
 800d4c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4c6:	1124      	asrs	r4, r4, #4
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	2602      	movs	r6, #2
 800d4cc:	2c00      	cmp	r4, #0
 800d4ce:	f040 80b2 	bne.w	800d636 <_dtoa_r+0x4fe>
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1d3      	bne.n	800d47e <_dtoa_r+0x346>
 800d4d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 80b7 	beq.w	800d650 <_dtoa_r+0x518>
 800d4e2:	4b86      	ldr	r3, [pc, #536]	@ (800d6fc <_dtoa_r+0x5c4>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	f7f3 fb1f 	bl	8000b2c <__aeabi_dcmplt>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	f000 80ae 	beq.w	800d650 <_dtoa_r+0x518>
 800d4f4:	9b07      	ldr	r3, [sp, #28]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f000 80aa 	beq.w	800d650 <_dtoa_r+0x518>
 800d4fc:	9b00      	ldr	r3, [sp, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	dd37      	ble.n	800d572 <_dtoa_r+0x43a>
 800d502:	1e7b      	subs	r3, r7, #1
 800d504:	9304      	str	r3, [sp, #16]
 800d506:	4620      	mov	r0, r4
 800d508:	4b7d      	ldr	r3, [pc, #500]	@ (800d700 <_dtoa_r+0x5c8>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	4629      	mov	r1, r5
 800d50e:	f7f3 f89b 	bl	8000648 <__aeabi_dmul>
 800d512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d516:	9c00      	ldr	r4, [sp, #0]
 800d518:	3601      	adds	r6, #1
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7f3 f82a 	bl	8000574 <__aeabi_i2d>
 800d520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d524:	f7f3 f890 	bl	8000648 <__aeabi_dmul>
 800d528:	4b76      	ldr	r3, [pc, #472]	@ (800d704 <_dtoa_r+0x5cc>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	f7f2 fed6 	bl	80002dc <__adddf3>
 800d530:	4605      	mov	r5, r0
 800d532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d536:	2c00      	cmp	r4, #0
 800d538:	f040 808d 	bne.w	800d656 <_dtoa_r+0x51e>
 800d53c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d540:	4b71      	ldr	r3, [pc, #452]	@ (800d708 <_dtoa_r+0x5d0>)
 800d542:	2200      	movs	r2, #0
 800d544:	f7f2 fec8 	bl	80002d8 <__aeabi_dsub>
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d550:	462a      	mov	r2, r5
 800d552:	4633      	mov	r3, r6
 800d554:	f7f3 fb08 	bl	8000b68 <__aeabi_dcmpgt>
 800d558:	2800      	cmp	r0, #0
 800d55a:	f040 828b 	bne.w	800da74 <_dtoa_r+0x93c>
 800d55e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d562:	462a      	mov	r2, r5
 800d564:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d568:	f7f3 fae0 	bl	8000b2c <__aeabi_dcmplt>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	f040 8128 	bne.w	800d7c2 <_dtoa_r+0x68a>
 800d572:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d576:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d57a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f2c0 815a 	blt.w	800d836 <_dtoa_r+0x6fe>
 800d582:	2f0e      	cmp	r7, #14
 800d584:	f300 8157 	bgt.w	800d836 <_dtoa_r+0x6fe>
 800d588:	4b5a      	ldr	r3, [pc, #360]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d58a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d58e:	ed93 7b00 	vldr	d7, [r3]
 800d592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d594:	2b00      	cmp	r3, #0
 800d596:	ed8d 7b00 	vstr	d7, [sp]
 800d59a:	da03      	bge.n	800d5a4 <_dtoa_r+0x46c>
 800d59c:	9b07      	ldr	r3, [sp, #28]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f340 8101 	ble.w	800d7a6 <_dtoa_r+0x66e>
 800d5a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d5a8:	4656      	mov	r6, sl
 800d5aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	f7f3 f973 	bl	800089c <__aeabi_ddiv>
 800d5b6:	f7f3 faf7 	bl	8000ba8 <__aeabi_d2iz>
 800d5ba:	4680      	mov	r8, r0
 800d5bc:	f7f2 ffda 	bl	8000574 <__aeabi_i2d>
 800d5c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5c4:	f7f3 f840 	bl	8000648 <__aeabi_dmul>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d5d4:	f7f2 fe80 	bl	80002d8 <__aeabi_dsub>
 800d5d8:	f806 4b01 	strb.w	r4, [r6], #1
 800d5dc:	9d07      	ldr	r5, [sp, #28]
 800d5de:	eba6 040a 	sub.w	r4, r6, sl
 800d5e2:	42a5      	cmp	r5, r4
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	f040 8117 	bne.w	800d81a <_dtoa_r+0x6e2>
 800d5ec:	f7f2 fe76 	bl	80002dc <__adddf3>
 800d5f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	460d      	mov	r5, r1
 800d5f8:	f7f3 fab6 	bl	8000b68 <__aeabi_dcmpgt>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f040 80f9 	bne.w	800d7f4 <_dtoa_r+0x6bc>
 800d602:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d606:	4620      	mov	r0, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	f7f3 fa85 	bl	8000b18 <__aeabi_dcmpeq>
 800d60e:	b118      	cbz	r0, 800d618 <_dtoa_r+0x4e0>
 800d610:	f018 0f01 	tst.w	r8, #1
 800d614:	f040 80ee 	bne.w	800d7f4 <_dtoa_r+0x6bc>
 800d618:	4649      	mov	r1, r9
 800d61a:	4658      	mov	r0, fp
 800d61c:	f000 fbda 	bl	800ddd4 <_Bfree>
 800d620:	2300      	movs	r3, #0
 800d622:	7033      	strb	r3, [r6, #0]
 800d624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d626:	3701      	adds	r7, #1
 800d628:	601f      	str	r7, [r3, #0]
 800d62a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 831d 	beq.w	800dc6c <_dtoa_r+0xb34>
 800d632:	601e      	str	r6, [r3, #0]
 800d634:	e31a      	b.n	800dc6c <_dtoa_r+0xb34>
 800d636:	07e2      	lsls	r2, r4, #31
 800d638:	d505      	bpl.n	800d646 <_dtoa_r+0x50e>
 800d63a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d63e:	f7f3 f803 	bl	8000648 <__aeabi_dmul>
 800d642:	3601      	adds	r6, #1
 800d644:	2301      	movs	r3, #1
 800d646:	1064      	asrs	r4, r4, #1
 800d648:	3508      	adds	r5, #8
 800d64a:	e73f      	b.n	800d4cc <_dtoa_r+0x394>
 800d64c:	2602      	movs	r6, #2
 800d64e:	e742      	b.n	800d4d6 <_dtoa_r+0x39e>
 800d650:	9c07      	ldr	r4, [sp, #28]
 800d652:	9704      	str	r7, [sp, #16]
 800d654:	e761      	b.n	800d51a <_dtoa_r+0x3e2>
 800d656:	4b27      	ldr	r3, [pc, #156]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d658:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d65a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d65e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d662:	4454      	add	r4, sl
 800d664:	2900      	cmp	r1, #0
 800d666:	d053      	beq.n	800d710 <_dtoa_r+0x5d8>
 800d668:	4928      	ldr	r1, [pc, #160]	@ (800d70c <_dtoa_r+0x5d4>)
 800d66a:	2000      	movs	r0, #0
 800d66c:	f7f3 f916 	bl	800089c <__aeabi_ddiv>
 800d670:	4633      	mov	r3, r6
 800d672:	462a      	mov	r2, r5
 800d674:	f7f2 fe30 	bl	80002d8 <__aeabi_dsub>
 800d678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d67c:	4656      	mov	r6, sl
 800d67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d682:	f7f3 fa91 	bl	8000ba8 <__aeabi_d2iz>
 800d686:	4605      	mov	r5, r0
 800d688:	f7f2 ff74 	bl	8000574 <__aeabi_i2d>
 800d68c:	4602      	mov	r2, r0
 800d68e:	460b      	mov	r3, r1
 800d690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d694:	f7f2 fe20 	bl	80002d8 <__aeabi_dsub>
 800d698:	3530      	adds	r5, #48	@ 0x30
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6a2:	f806 5b01 	strb.w	r5, [r6], #1
 800d6a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6aa:	f7f3 fa3f 	bl	8000b2c <__aeabi_dcmplt>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d171      	bne.n	800d796 <_dtoa_r+0x65e>
 800d6b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6b6:	4911      	ldr	r1, [pc, #68]	@ (800d6fc <_dtoa_r+0x5c4>)
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	f7f2 fe0d 	bl	80002d8 <__aeabi_dsub>
 800d6be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6c2:	f7f3 fa33 	bl	8000b2c <__aeabi_dcmplt>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	f040 8095 	bne.w	800d7f6 <_dtoa_r+0x6be>
 800d6cc:	42a6      	cmp	r6, r4
 800d6ce:	f43f af50 	beq.w	800d572 <_dtoa_r+0x43a>
 800d6d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d6d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d700 <_dtoa_r+0x5c8>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f7f2 ffb5 	bl	8000648 <__aeabi_dmul>
 800d6de:	4b08      	ldr	r3, [pc, #32]	@ (800d700 <_dtoa_r+0x5c8>)
 800d6e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ea:	f7f2 ffad 	bl	8000648 <__aeabi_dmul>
 800d6ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6f2:	e7c4      	b.n	800d67e <_dtoa_r+0x546>
 800d6f4:	080106e0 	.word	0x080106e0
 800d6f8:	080106b8 	.word	0x080106b8
 800d6fc:	3ff00000 	.word	0x3ff00000
 800d700:	40240000 	.word	0x40240000
 800d704:	401c0000 	.word	0x401c0000
 800d708:	40140000 	.word	0x40140000
 800d70c:	3fe00000 	.word	0x3fe00000
 800d710:	4631      	mov	r1, r6
 800d712:	4628      	mov	r0, r5
 800d714:	f7f2 ff98 	bl	8000648 <__aeabi_dmul>
 800d718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d71c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d71e:	4656      	mov	r6, sl
 800d720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d724:	f7f3 fa40 	bl	8000ba8 <__aeabi_d2iz>
 800d728:	4605      	mov	r5, r0
 800d72a:	f7f2 ff23 	bl	8000574 <__aeabi_i2d>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d736:	f7f2 fdcf 	bl	80002d8 <__aeabi_dsub>
 800d73a:	3530      	adds	r5, #48	@ 0x30
 800d73c:	f806 5b01 	strb.w	r5, [r6], #1
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	42a6      	cmp	r6, r4
 800d746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d74a:	f04f 0200 	mov.w	r2, #0
 800d74e:	d124      	bne.n	800d79a <_dtoa_r+0x662>
 800d750:	4bac      	ldr	r3, [pc, #688]	@ (800da04 <_dtoa_r+0x8cc>)
 800d752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d756:	f7f2 fdc1 	bl	80002dc <__adddf3>
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d762:	f7f3 fa01 	bl	8000b68 <__aeabi_dcmpgt>
 800d766:	2800      	cmp	r0, #0
 800d768:	d145      	bne.n	800d7f6 <_dtoa_r+0x6be>
 800d76a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d76e:	49a5      	ldr	r1, [pc, #660]	@ (800da04 <_dtoa_r+0x8cc>)
 800d770:	2000      	movs	r0, #0
 800d772:	f7f2 fdb1 	bl	80002d8 <__aeabi_dsub>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d77e:	f7f3 f9d5 	bl	8000b2c <__aeabi_dcmplt>
 800d782:	2800      	cmp	r0, #0
 800d784:	f43f aef5 	beq.w	800d572 <_dtoa_r+0x43a>
 800d788:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d78a:	1e73      	subs	r3, r6, #1
 800d78c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d78e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d792:	2b30      	cmp	r3, #48	@ 0x30
 800d794:	d0f8      	beq.n	800d788 <_dtoa_r+0x650>
 800d796:	9f04      	ldr	r7, [sp, #16]
 800d798:	e73e      	b.n	800d618 <_dtoa_r+0x4e0>
 800d79a:	4b9b      	ldr	r3, [pc, #620]	@ (800da08 <_dtoa_r+0x8d0>)
 800d79c:	f7f2 ff54 	bl	8000648 <__aeabi_dmul>
 800d7a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7a4:	e7bc      	b.n	800d720 <_dtoa_r+0x5e8>
 800d7a6:	d10c      	bne.n	800d7c2 <_dtoa_r+0x68a>
 800d7a8:	4b98      	ldr	r3, [pc, #608]	@ (800da0c <_dtoa_r+0x8d4>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7b0:	f7f2 ff4a 	bl	8000648 <__aeabi_dmul>
 800d7b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7b8:	f7f3 f9cc 	bl	8000b54 <__aeabi_dcmpge>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	f000 8157 	beq.w	800da70 <_dtoa_r+0x938>
 800d7c2:	2400      	movs	r4, #0
 800d7c4:	4625      	mov	r5, r4
 800d7c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7c8:	43db      	mvns	r3, r3
 800d7ca:	9304      	str	r3, [sp, #16]
 800d7cc:	4656      	mov	r6, sl
 800d7ce:	2700      	movs	r7, #0
 800d7d0:	4621      	mov	r1, r4
 800d7d2:	4658      	mov	r0, fp
 800d7d4:	f000 fafe 	bl	800ddd4 <_Bfree>
 800d7d8:	2d00      	cmp	r5, #0
 800d7da:	d0dc      	beq.n	800d796 <_dtoa_r+0x65e>
 800d7dc:	b12f      	cbz	r7, 800d7ea <_dtoa_r+0x6b2>
 800d7de:	42af      	cmp	r7, r5
 800d7e0:	d003      	beq.n	800d7ea <_dtoa_r+0x6b2>
 800d7e2:	4639      	mov	r1, r7
 800d7e4:	4658      	mov	r0, fp
 800d7e6:	f000 faf5 	bl	800ddd4 <_Bfree>
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	4658      	mov	r0, fp
 800d7ee:	f000 faf1 	bl	800ddd4 <_Bfree>
 800d7f2:	e7d0      	b.n	800d796 <_dtoa_r+0x65e>
 800d7f4:	9704      	str	r7, [sp, #16]
 800d7f6:	4633      	mov	r3, r6
 800d7f8:	461e      	mov	r6, r3
 800d7fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7fe:	2a39      	cmp	r2, #57	@ 0x39
 800d800:	d107      	bne.n	800d812 <_dtoa_r+0x6da>
 800d802:	459a      	cmp	sl, r3
 800d804:	d1f8      	bne.n	800d7f8 <_dtoa_r+0x6c0>
 800d806:	9a04      	ldr	r2, [sp, #16]
 800d808:	3201      	adds	r2, #1
 800d80a:	9204      	str	r2, [sp, #16]
 800d80c:	2230      	movs	r2, #48	@ 0x30
 800d80e:	f88a 2000 	strb.w	r2, [sl]
 800d812:	781a      	ldrb	r2, [r3, #0]
 800d814:	3201      	adds	r2, #1
 800d816:	701a      	strb	r2, [r3, #0]
 800d818:	e7bd      	b.n	800d796 <_dtoa_r+0x65e>
 800d81a:	4b7b      	ldr	r3, [pc, #492]	@ (800da08 <_dtoa_r+0x8d0>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	f7f2 ff13 	bl	8000648 <__aeabi_dmul>
 800d822:	2200      	movs	r2, #0
 800d824:	2300      	movs	r3, #0
 800d826:	4604      	mov	r4, r0
 800d828:	460d      	mov	r5, r1
 800d82a:	f7f3 f975 	bl	8000b18 <__aeabi_dcmpeq>
 800d82e:	2800      	cmp	r0, #0
 800d830:	f43f aebb 	beq.w	800d5aa <_dtoa_r+0x472>
 800d834:	e6f0      	b.n	800d618 <_dtoa_r+0x4e0>
 800d836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d838:	2a00      	cmp	r2, #0
 800d83a:	f000 80db 	beq.w	800d9f4 <_dtoa_r+0x8bc>
 800d83e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d840:	2a01      	cmp	r2, #1
 800d842:	f300 80bf 	bgt.w	800d9c4 <_dtoa_r+0x88c>
 800d846:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d848:	2a00      	cmp	r2, #0
 800d84a:	f000 80b7 	beq.w	800d9bc <_dtoa_r+0x884>
 800d84e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d852:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d854:	4646      	mov	r6, r8
 800d856:	9a08      	ldr	r2, [sp, #32]
 800d858:	2101      	movs	r1, #1
 800d85a:	441a      	add	r2, r3
 800d85c:	4658      	mov	r0, fp
 800d85e:	4498      	add	r8, r3
 800d860:	9208      	str	r2, [sp, #32]
 800d862:	f000 fb6b 	bl	800df3c <__i2b>
 800d866:	4605      	mov	r5, r0
 800d868:	b15e      	cbz	r6, 800d882 <_dtoa_r+0x74a>
 800d86a:	9b08      	ldr	r3, [sp, #32]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	dd08      	ble.n	800d882 <_dtoa_r+0x74a>
 800d870:	42b3      	cmp	r3, r6
 800d872:	9a08      	ldr	r2, [sp, #32]
 800d874:	bfa8      	it	ge
 800d876:	4633      	movge	r3, r6
 800d878:	eba8 0803 	sub.w	r8, r8, r3
 800d87c:	1af6      	subs	r6, r6, r3
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	9308      	str	r3, [sp, #32]
 800d882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d884:	b1f3      	cbz	r3, 800d8c4 <_dtoa_r+0x78c>
 800d886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 80b7 	beq.w	800d9fc <_dtoa_r+0x8c4>
 800d88e:	b18c      	cbz	r4, 800d8b4 <_dtoa_r+0x77c>
 800d890:	4629      	mov	r1, r5
 800d892:	4622      	mov	r2, r4
 800d894:	4658      	mov	r0, fp
 800d896:	f000 fc11 	bl	800e0bc <__pow5mult>
 800d89a:	464a      	mov	r2, r9
 800d89c:	4601      	mov	r1, r0
 800d89e:	4605      	mov	r5, r0
 800d8a0:	4658      	mov	r0, fp
 800d8a2:	f000 fb61 	bl	800df68 <__multiply>
 800d8a6:	4649      	mov	r1, r9
 800d8a8:	9004      	str	r0, [sp, #16]
 800d8aa:	4658      	mov	r0, fp
 800d8ac:	f000 fa92 	bl	800ddd4 <_Bfree>
 800d8b0:	9b04      	ldr	r3, [sp, #16]
 800d8b2:	4699      	mov	r9, r3
 800d8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8b6:	1b1a      	subs	r2, r3, r4
 800d8b8:	d004      	beq.n	800d8c4 <_dtoa_r+0x78c>
 800d8ba:	4649      	mov	r1, r9
 800d8bc:	4658      	mov	r0, fp
 800d8be:	f000 fbfd 	bl	800e0bc <__pow5mult>
 800d8c2:	4681      	mov	r9, r0
 800d8c4:	2101      	movs	r1, #1
 800d8c6:	4658      	mov	r0, fp
 800d8c8:	f000 fb38 	bl	800df3c <__i2b>
 800d8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 81cf 	beq.w	800dc74 <_dtoa_r+0xb3c>
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	4601      	mov	r1, r0
 800d8da:	4658      	mov	r0, fp
 800d8dc:	f000 fbee 	bl	800e0bc <__pow5mult>
 800d8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	f300 8095 	bgt.w	800da14 <_dtoa_r+0x8dc>
 800d8ea:	9b02      	ldr	r3, [sp, #8]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f040 8087 	bne.w	800da00 <_dtoa_r+0x8c8>
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f040 8089 	bne.w	800da10 <_dtoa_r+0x8d8>
 800d8fe:	9b03      	ldr	r3, [sp, #12]
 800d900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d904:	0d1b      	lsrs	r3, r3, #20
 800d906:	051b      	lsls	r3, r3, #20
 800d908:	b12b      	cbz	r3, 800d916 <_dtoa_r+0x7de>
 800d90a:	9b08      	ldr	r3, [sp, #32]
 800d90c:	3301      	adds	r3, #1
 800d90e:	9308      	str	r3, [sp, #32]
 800d910:	f108 0801 	add.w	r8, r8, #1
 800d914:	2301      	movs	r3, #1
 800d916:	930a      	str	r3, [sp, #40]	@ 0x28
 800d918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f000 81b0 	beq.w	800dc80 <_dtoa_r+0xb48>
 800d920:	6923      	ldr	r3, [r4, #16]
 800d922:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d926:	6918      	ldr	r0, [r3, #16]
 800d928:	f000 fabc 	bl	800dea4 <__hi0bits>
 800d92c:	f1c0 0020 	rsb	r0, r0, #32
 800d930:	9b08      	ldr	r3, [sp, #32]
 800d932:	4418      	add	r0, r3
 800d934:	f010 001f 	ands.w	r0, r0, #31
 800d938:	d077      	beq.n	800da2a <_dtoa_r+0x8f2>
 800d93a:	f1c0 0320 	rsb	r3, r0, #32
 800d93e:	2b04      	cmp	r3, #4
 800d940:	dd6b      	ble.n	800da1a <_dtoa_r+0x8e2>
 800d942:	9b08      	ldr	r3, [sp, #32]
 800d944:	f1c0 001c 	rsb	r0, r0, #28
 800d948:	4403      	add	r3, r0
 800d94a:	4480      	add	r8, r0
 800d94c:	4406      	add	r6, r0
 800d94e:	9308      	str	r3, [sp, #32]
 800d950:	f1b8 0f00 	cmp.w	r8, #0
 800d954:	dd05      	ble.n	800d962 <_dtoa_r+0x82a>
 800d956:	4649      	mov	r1, r9
 800d958:	4642      	mov	r2, r8
 800d95a:	4658      	mov	r0, fp
 800d95c:	f000 fc08 	bl	800e170 <__lshift>
 800d960:	4681      	mov	r9, r0
 800d962:	9b08      	ldr	r3, [sp, #32]
 800d964:	2b00      	cmp	r3, #0
 800d966:	dd05      	ble.n	800d974 <_dtoa_r+0x83c>
 800d968:	4621      	mov	r1, r4
 800d96a:	461a      	mov	r2, r3
 800d96c:	4658      	mov	r0, fp
 800d96e:	f000 fbff 	bl	800e170 <__lshift>
 800d972:	4604      	mov	r4, r0
 800d974:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d976:	2b00      	cmp	r3, #0
 800d978:	d059      	beq.n	800da2e <_dtoa_r+0x8f6>
 800d97a:	4621      	mov	r1, r4
 800d97c:	4648      	mov	r0, r9
 800d97e:	f000 fc63 	bl	800e248 <__mcmp>
 800d982:	2800      	cmp	r0, #0
 800d984:	da53      	bge.n	800da2e <_dtoa_r+0x8f6>
 800d986:	1e7b      	subs	r3, r7, #1
 800d988:	9304      	str	r3, [sp, #16]
 800d98a:	4649      	mov	r1, r9
 800d98c:	2300      	movs	r3, #0
 800d98e:	220a      	movs	r2, #10
 800d990:	4658      	mov	r0, fp
 800d992:	f000 fa41 	bl	800de18 <__multadd>
 800d996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d998:	4681      	mov	r9, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 8172 	beq.w	800dc84 <_dtoa_r+0xb4c>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	220a      	movs	r2, #10
 800d9a6:	4658      	mov	r0, fp
 800d9a8:	f000 fa36 	bl	800de18 <__multadd>
 800d9ac:	9b00      	ldr	r3, [sp, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	4605      	mov	r5, r0
 800d9b2:	dc67      	bgt.n	800da84 <_dtoa_r+0x94c>
 800d9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	dc41      	bgt.n	800da3e <_dtoa_r+0x906>
 800d9ba:	e063      	b.n	800da84 <_dtoa_r+0x94c>
 800d9bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d9be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d9c2:	e746      	b.n	800d852 <_dtoa_r+0x71a>
 800d9c4:	9b07      	ldr	r3, [sp, #28]
 800d9c6:	1e5c      	subs	r4, r3, #1
 800d9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9ca:	42a3      	cmp	r3, r4
 800d9cc:	bfbf      	itttt	lt
 800d9ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d9d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d9d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d9d4:	1ae3      	sublt	r3, r4, r3
 800d9d6:	bfb4      	ite	lt
 800d9d8:	18d2      	addlt	r2, r2, r3
 800d9da:	1b1c      	subge	r4, r3, r4
 800d9dc:	9b07      	ldr	r3, [sp, #28]
 800d9de:	bfbc      	itt	lt
 800d9e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d9e2:	2400      	movlt	r4, #0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	bfb5      	itete	lt
 800d9e8:	eba8 0603 	sublt.w	r6, r8, r3
 800d9ec:	9b07      	ldrge	r3, [sp, #28]
 800d9ee:	2300      	movlt	r3, #0
 800d9f0:	4646      	movge	r6, r8
 800d9f2:	e730      	b.n	800d856 <_dtoa_r+0x71e>
 800d9f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d9f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d9f8:	4646      	mov	r6, r8
 800d9fa:	e735      	b.n	800d868 <_dtoa_r+0x730>
 800d9fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9fe:	e75c      	b.n	800d8ba <_dtoa_r+0x782>
 800da00:	2300      	movs	r3, #0
 800da02:	e788      	b.n	800d916 <_dtoa_r+0x7de>
 800da04:	3fe00000 	.word	0x3fe00000
 800da08:	40240000 	.word	0x40240000
 800da0c:	40140000 	.word	0x40140000
 800da10:	9b02      	ldr	r3, [sp, #8]
 800da12:	e780      	b.n	800d916 <_dtoa_r+0x7de>
 800da14:	2300      	movs	r3, #0
 800da16:	930a      	str	r3, [sp, #40]	@ 0x28
 800da18:	e782      	b.n	800d920 <_dtoa_r+0x7e8>
 800da1a:	d099      	beq.n	800d950 <_dtoa_r+0x818>
 800da1c:	9a08      	ldr	r2, [sp, #32]
 800da1e:	331c      	adds	r3, #28
 800da20:	441a      	add	r2, r3
 800da22:	4498      	add	r8, r3
 800da24:	441e      	add	r6, r3
 800da26:	9208      	str	r2, [sp, #32]
 800da28:	e792      	b.n	800d950 <_dtoa_r+0x818>
 800da2a:	4603      	mov	r3, r0
 800da2c:	e7f6      	b.n	800da1c <_dtoa_r+0x8e4>
 800da2e:	9b07      	ldr	r3, [sp, #28]
 800da30:	9704      	str	r7, [sp, #16]
 800da32:	2b00      	cmp	r3, #0
 800da34:	dc20      	bgt.n	800da78 <_dtoa_r+0x940>
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	dd1e      	ble.n	800da7c <_dtoa_r+0x944>
 800da3e:	9b00      	ldr	r3, [sp, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	f47f aec0 	bne.w	800d7c6 <_dtoa_r+0x68e>
 800da46:	4621      	mov	r1, r4
 800da48:	2205      	movs	r2, #5
 800da4a:	4658      	mov	r0, fp
 800da4c:	f000 f9e4 	bl	800de18 <__multadd>
 800da50:	4601      	mov	r1, r0
 800da52:	4604      	mov	r4, r0
 800da54:	4648      	mov	r0, r9
 800da56:	f000 fbf7 	bl	800e248 <__mcmp>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	f77f aeb3 	ble.w	800d7c6 <_dtoa_r+0x68e>
 800da60:	4656      	mov	r6, sl
 800da62:	2331      	movs	r3, #49	@ 0x31
 800da64:	f806 3b01 	strb.w	r3, [r6], #1
 800da68:	9b04      	ldr	r3, [sp, #16]
 800da6a:	3301      	adds	r3, #1
 800da6c:	9304      	str	r3, [sp, #16]
 800da6e:	e6ae      	b.n	800d7ce <_dtoa_r+0x696>
 800da70:	9c07      	ldr	r4, [sp, #28]
 800da72:	9704      	str	r7, [sp, #16]
 800da74:	4625      	mov	r5, r4
 800da76:	e7f3      	b.n	800da60 <_dtoa_r+0x928>
 800da78:	9b07      	ldr	r3, [sp, #28]
 800da7a:	9300      	str	r3, [sp, #0]
 800da7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f000 8104 	beq.w	800dc8c <_dtoa_r+0xb54>
 800da84:	2e00      	cmp	r6, #0
 800da86:	dd05      	ble.n	800da94 <_dtoa_r+0x95c>
 800da88:	4629      	mov	r1, r5
 800da8a:	4632      	mov	r2, r6
 800da8c:	4658      	mov	r0, fp
 800da8e:	f000 fb6f 	bl	800e170 <__lshift>
 800da92:	4605      	mov	r5, r0
 800da94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da96:	2b00      	cmp	r3, #0
 800da98:	d05a      	beq.n	800db50 <_dtoa_r+0xa18>
 800da9a:	6869      	ldr	r1, [r5, #4]
 800da9c:	4658      	mov	r0, fp
 800da9e:	f000 f959 	bl	800dd54 <_Balloc>
 800daa2:	4606      	mov	r6, r0
 800daa4:	b928      	cbnz	r0, 800dab2 <_dtoa_r+0x97a>
 800daa6:	4b84      	ldr	r3, [pc, #528]	@ (800dcb8 <_dtoa_r+0xb80>)
 800daa8:	4602      	mov	r2, r0
 800daaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800daae:	f7ff bb5a 	b.w	800d166 <_dtoa_r+0x2e>
 800dab2:	692a      	ldr	r2, [r5, #16]
 800dab4:	3202      	adds	r2, #2
 800dab6:	0092      	lsls	r2, r2, #2
 800dab8:	f105 010c 	add.w	r1, r5, #12
 800dabc:	300c      	adds	r0, #12
 800dabe:	f000 fee9 	bl	800e894 <memcpy>
 800dac2:	2201      	movs	r2, #1
 800dac4:	4631      	mov	r1, r6
 800dac6:	4658      	mov	r0, fp
 800dac8:	f000 fb52 	bl	800e170 <__lshift>
 800dacc:	f10a 0301 	add.w	r3, sl, #1
 800dad0:	9307      	str	r3, [sp, #28]
 800dad2:	9b00      	ldr	r3, [sp, #0]
 800dad4:	4453      	add	r3, sl
 800dad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dad8:	9b02      	ldr	r3, [sp, #8]
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	462f      	mov	r7, r5
 800dae0:	930a      	str	r3, [sp, #40]	@ 0x28
 800dae2:	4605      	mov	r5, r0
 800dae4:	9b07      	ldr	r3, [sp, #28]
 800dae6:	4621      	mov	r1, r4
 800dae8:	3b01      	subs	r3, #1
 800daea:	4648      	mov	r0, r9
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	f7ff fa9a 	bl	800d026 <quorem>
 800daf2:	4639      	mov	r1, r7
 800daf4:	9002      	str	r0, [sp, #8]
 800daf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dafa:	4648      	mov	r0, r9
 800dafc:	f000 fba4 	bl	800e248 <__mcmp>
 800db00:	462a      	mov	r2, r5
 800db02:	9008      	str	r0, [sp, #32]
 800db04:	4621      	mov	r1, r4
 800db06:	4658      	mov	r0, fp
 800db08:	f000 fbba 	bl	800e280 <__mdiff>
 800db0c:	68c2      	ldr	r2, [r0, #12]
 800db0e:	4606      	mov	r6, r0
 800db10:	bb02      	cbnz	r2, 800db54 <_dtoa_r+0xa1c>
 800db12:	4601      	mov	r1, r0
 800db14:	4648      	mov	r0, r9
 800db16:	f000 fb97 	bl	800e248 <__mcmp>
 800db1a:	4602      	mov	r2, r0
 800db1c:	4631      	mov	r1, r6
 800db1e:	4658      	mov	r0, fp
 800db20:	920e      	str	r2, [sp, #56]	@ 0x38
 800db22:	f000 f957 	bl	800ddd4 <_Bfree>
 800db26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db2a:	9e07      	ldr	r6, [sp, #28]
 800db2c:	ea43 0102 	orr.w	r1, r3, r2
 800db30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db32:	4319      	orrs	r1, r3
 800db34:	d110      	bne.n	800db58 <_dtoa_r+0xa20>
 800db36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db3a:	d029      	beq.n	800db90 <_dtoa_r+0xa58>
 800db3c:	9b08      	ldr	r3, [sp, #32]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	dd02      	ble.n	800db48 <_dtoa_r+0xa10>
 800db42:	9b02      	ldr	r3, [sp, #8]
 800db44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800db48:	9b00      	ldr	r3, [sp, #0]
 800db4a:	f883 8000 	strb.w	r8, [r3]
 800db4e:	e63f      	b.n	800d7d0 <_dtoa_r+0x698>
 800db50:	4628      	mov	r0, r5
 800db52:	e7bb      	b.n	800dacc <_dtoa_r+0x994>
 800db54:	2201      	movs	r2, #1
 800db56:	e7e1      	b.n	800db1c <_dtoa_r+0x9e4>
 800db58:	9b08      	ldr	r3, [sp, #32]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	db04      	blt.n	800db68 <_dtoa_r+0xa30>
 800db5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db60:	430b      	orrs	r3, r1
 800db62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db64:	430b      	orrs	r3, r1
 800db66:	d120      	bne.n	800dbaa <_dtoa_r+0xa72>
 800db68:	2a00      	cmp	r2, #0
 800db6a:	dded      	ble.n	800db48 <_dtoa_r+0xa10>
 800db6c:	4649      	mov	r1, r9
 800db6e:	2201      	movs	r2, #1
 800db70:	4658      	mov	r0, fp
 800db72:	f000 fafd 	bl	800e170 <__lshift>
 800db76:	4621      	mov	r1, r4
 800db78:	4681      	mov	r9, r0
 800db7a:	f000 fb65 	bl	800e248 <__mcmp>
 800db7e:	2800      	cmp	r0, #0
 800db80:	dc03      	bgt.n	800db8a <_dtoa_r+0xa52>
 800db82:	d1e1      	bne.n	800db48 <_dtoa_r+0xa10>
 800db84:	f018 0f01 	tst.w	r8, #1
 800db88:	d0de      	beq.n	800db48 <_dtoa_r+0xa10>
 800db8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db8e:	d1d8      	bne.n	800db42 <_dtoa_r+0xa0a>
 800db90:	9a00      	ldr	r2, [sp, #0]
 800db92:	2339      	movs	r3, #57	@ 0x39
 800db94:	7013      	strb	r3, [r2, #0]
 800db96:	4633      	mov	r3, r6
 800db98:	461e      	mov	r6, r3
 800db9a:	3b01      	subs	r3, #1
 800db9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dba0:	2a39      	cmp	r2, #57	@ 0x39
 800dba2:	d052      	beq.n	800dc4a <_dtoa_r+0xb12>
 800dba4:	3201      	adds	r2, #1
 800dba6:	701a      	strb	r2, [r3, #0]
 800dba8:	e612      	b.n	800d7d0 <_dtoa_r+0x698>
 800dbaa:	2a00      	cmp	r2, #0
 800dbac:	dd07      	ble.n	800dbbe <_dtoa_r+0xa86>
 800dbae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbb2:	d0ed      	beq.n	800db90 <_dtoa_r+0xa58>
 800dbb4:	9a00      	ldr	r2, [sp, #0]
 800dbb6:	f108 0301 	add.w	r3, r8, #1
 800dbba:	7013      	strb	r3, [r2, #0]
 800dbbc:	e608      	b.n	800d7d0 <_dtoa_r+0x698>
 800dbbe:	9b07      	ldr	r3, [sp, #28]
 800dbc0:	9a07      	ldr	r2, [sp, #28]
 800dbc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dbc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d028      	beq.n	800dc1e <_dtoa_r+0xae6>
 800dbcc:	4649      	mov	r1, r9
 800dbce:	2300      	movs	r3, #0
 800dbd0:	220a      	movs	r2, #10
 800dbd2:	4658      	mov	r0, fp
 800dbd4:	f000 f920 	bl	800de18 <__multadd>
 800dbd8:	42af      	cmp	r7, r5
 800dbda:	4681      	mov	r9, r0
 800dbdc:	f04f 0300 	mov.w	r3, #0
 800dbe0:	f04f 020a 	mov.w	r2, #10
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	4658      	mov	r0, fp
 800dbe8:	d107      	bne.n	800dbfa <_dtoa_r+0xac2>
 800dbea:	f000 f915 	bl	800de18 <__multadd>
 800dbee:	4607      	mov	r7, r0
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	9b07      	ldr	r3, [sp, #28]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	9307      	str	r3, [sp, #28]
 800dbf8:	e774      	b.n	800dae4 <_dtoa_r+0x9ac>
 800dbfa:	f000 f90d 	bl	800de18 <__multadd>
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4607      	mov	r7, r0
 800dc02:	2300      	movs	r3, #0
 800dc04:	220a      	movs	r2, #10
 800dc06:	4658      	mov	r0, fp
 800dc08:	f000 f906 	bl	800de18 <__multadd>
 800dc0c:	4605      	mov	r5, r0
 800dc0e:	e7f0      	b.n	800dbf2 <_dtoa_r+0xaba>
 800dc10:	9b00      	ldr	r3, [sp, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	bfcc      	ite	gt
 800dc16:	461e      	movgt	r6, r3
 800dc18:	2601      	movle	r6, #1
 800dc1a:	4456      	add	r6, sl
 800dc1c:	2700      	movs	r7, #0
 800dc1e:	4649      	mov	r1, r9
 800dc20:	2201      	movs	r2, #1
 800dc22:	4658      	mov	r0, fp
 800dc24:	f000 faa4 	bl	800e170 <__lshift>
 800dc28:	4621      	mov	r1, r4
 800dc2a:	4681      	mov	r9, r0
 800dc2c:	f000 fb0c 	bl	800e248 <__mcmp>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	dcb0      	bgt.n	800db96 <_dtoa_r+0xa5e>
 800dc34:	d102      	bne.n	800dc3c <_dtoa_r+0xb04>
 800dc36:	f018 0f01 	tst.w	r8, #1
 800dc3a:	d1ac      	bne.n	800db96 <_dtoa_r+0xa5e>
 800dc3c:	4633      	mov	r3, r6
 800dc3e:	461e      	mov	r6, r3
 800dc40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc44:	2a30      	cmp	r2, #48	@ 0x30
 800dc46:	d0fa      	beq.n	800dc3e <_dtoa_r+0xb06>
 800dc48:	e5c2      	b.n	800d7d0 <_dtoa_r+0x698>
 800dc4a:	459a      	cmp	sl, r3
 800dc4c:	d1a4      	bne.n	800db98 <_dtoa_r+0xa60>
 800dc4e:	9b04      	ldr	r3, [sp, #16]
 800dc50:	3301      	adds	r3, #1
 800dc52:	9304      	str	r3, [sp, #16]
 800dc54:	2331      	movs	r3, #49	@ 0x31
 800dc56:	f88a 3000 	strb.w	r3, [sl]
 800dc5a:	e5b9      	b.n	800d7d0 <_dtoa_r+0x698>
 800dc5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dcbc <_dtoa_r+0xb84>
 800dc62:	b11b      	cbz	r3, 800dc6c <_dtoa_r+0xb34>
 800dc64:	f10a 0308 	add.w	r3, sl, #8
 800dc68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dc6a:	6013      	str	r3, [r2, #0]
 800dc6c:	4650      	mov	r0, sl
 800dc6e:	b019      	add	sp, #100	@ 0x64
 800dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	f77f ae37 	ble.w	800d8ea <_dtoa_r+0x7b2>
 800dc7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc80:	2001      	movs	r0, #1
 800dc82:	e655      	b.n	800d930 <_dtoa_r+0x7f8>
 800dc84:	9b00      	ldr	r3, [sp, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f77f aed6 	ble.w	800da38 <_dtoa_r+0x900>
 800dc8c:	4656      	mov	r6, sl
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4648      	mov	r0, r9
 800dc92:	f7ff f9c8 	bl	800d026 <quorem>
 800dc96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc9a:	f806 8b01 	strb.w	r8, [r6], #1
 800dc9e:	9b00      	ldr	r3, [sp, #0]
 800dca0:	eba6 020a 	sub.w	r2, r6, sl
 800dca4:	4293      	cmp	r3, r2
 800dca6:	ddb3      	ble.n	800dc10 <_dtoa_r+0xad8>
 800dca8:	4649      	mov	r1, r9
 800dcaa:	2300      	movs	r3, #0
 800dcac:	220a      	movs	r2, #10
 800dcae:	4658      	mov	r0, fp
 800dcb0:	f000 f8b2 	bl	800de18 <__multadd>
 800dcb4:	4681      	mov	r9, r0
 800dcb6:	e7ea      	b.n	800dc8e <_dtoa_r+0xb56>
 800dcb8:	0801063c 	.word	0x0801063c
 800dcbc:	080105c0 	.word	0x080105c0

0800dcc0 <_free_r>:
 800dcc0:	b538      	push	{r3, r4, r5, lr}
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	2900      	cmp	r1, #0
 800dcc6:	d041      	beq.n	800dd4c <_free_r+0x8c>
 800dcc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dccc:	1f0c      	subs	r4, r1, #4
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	bfb8      	it	lt
 800dcd2:	18e4      	addlt	r4, r4, r3
 800dcd4:	f7fe fb8e 	bl	800c3f4 <__malloc_lock>
 800dcd8:	4a1d      	ldr	r2, [pc, #116]	@ (800dd50 <_free_r+0x90>)
 800dcda:	6813      	ldr	r3, [r2, #0]
 800dcdc:	b933      	cbnz	r3, 800dcec <_free_r+0x2c>
 800dcde:	6063      	str	r3, [r4, #4]
 800dce0:	6014      	str	r4, [r2, #0]
 800dce2:	4628      	mov	r0, r5
 800dce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dce8:	f7fe bb8a 	b.w	800c400 <__malloc_unlock>
 800dcec:	42a3      	cmp	r3, r4
 800dcee:	d908      	bls.n	800dd02 <_free_r+0x42>
 800dcf0:	6820      	ldr	r0, [r4, #0]
 800dcf2:	1821      	adds	r1, r4, r0
 800dcf4:	428b      	cmp	r3, r1
 800dcf6:	bf01      	itttt	eq
 800dcf8:	6819      	ldreq	r1, [r3, #0]
 800dcfa:	685b      	ldreq	r3, [r3, #4]
 800dcfc:	1809      	addeq	r1, r1, r0
 800dcfe:	6021      	streq	r1, [r4, #0]
 800dd00:	e7ed      	b.n	800dcde <_free_r+0x1e>
 800dd02:	461a      	mov	r2, r3
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	b10b      	cbz	r3, 800dd0c <_free_r+0x4c>
 800dd08:	42a3      	cmp	r3, r4
 800dd0a:	d9fa      	bls.n	800dd02 <_free_r+0x42>
 800dd0c:	6811      	ldr	r1, [r2, #0]
 800dd0e:	1850      	adds	r0, r2, r1
 800dd10:	42a0      	cmp	r0, r4
 800dd12:	d10b      	bne.n	800dd2c <_free_r+0x6c>
 800dd14:	6820      	ldr	r0, [r4, #0]
 800dd16:	4401      	add	r1, r0
 800dd18:	1850      	adds	r0, r2, r1
 800dd1a:	4283      	cmp	r3, r0
 800dd1c:	6011      	str	r1, [r2, #0]
 800dd1e:	d1e0      	bne.n	800dce2 <_free_r+0x22>
 800dd20:	6818      	ldr	r0, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	6053      	str	r3, [r2, #4]
 800dd26:	4408      	add	r0, r1
 800dd28:	6010      	str	r0, [r2, #0]
 800dd2a:	e7da      	b.n	800dce2 <_free_r+0x22>
 800dd2c:	d902      	bls.n	800dd34 <_free_r+0x74>
 800dd2e:	230c      	movs	r3, #12
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	e7d6      	b.n	800dce2 <_free_r+0x22>
 800dd34:	6820      	ldr	r0, [r4, #0]
 800dd36:	1821      	adds	r1, r4, r0
 800dd38:	428b      	cmp	r3, r1
 800dd3a:	bf04      	itt	eq
 800dd3c:	6819      	ldreq	r1, [r3, #0]
 800dd3e:	685b      	ldreq	r3, [r3, #4]
 800dd40:	6063      	str	r3, [r4, #4]
 800dd42:	bf04      	itt	eq
 800dd44:	1809      	addeq	r1, r1, r0
 800dd46:	6021      	streq	r1, [r4, #0]
 800dd48:	6054      	str	r4, [r2, #4]
 800dd4a:	e7ca      	b.n	800dce2 <_free_r+0x22>
 800dd4c:	bd38      	pop	{r3, r4, r5, pc}
 800dd4e:	bf00      	nop
 800dd50:	20000858 	.word	0x20000858

0800dd54 <_Balloc>:
 800dd54:	b570      	push	{r4, r5, r6, lr}
 800dd56:	69c6      	ldr	r6, [r0, #28]
 800dd58:	4604      	mov	r4, r0
 800dd5a:	460d      	mov	r5, r1
 800dd5c:	b976      	cbnz	r6, 800dd7c <_Balloc+0x28>
 800dd5e:	2010      	movs	r0, #16
 800dd60:	f7fe fa96 	bl	800c290 <malloc>
 800dd64:	4602      	mov	r2, r0
 800dd66:	61e0      	str	r0, [r4, #28]
 800dd68:	b920      	cbnz	r0, 800dd74 <_Balloc+0x20>
 800dd6a:	4b18      	ldr	r3, [pc, #96]	@ (800ddcc <_Balloc+0x78>)
 800dd6c:	4818      	ldr	r0, [pc, #96]	@ (800ddd0 <_Balloc+0x7c>)
 800dd6e:	216b      	movs	r1, #107	@ 0x6b
 800dd70:	f000 fd9e 	bl	800e8b0 <__assert_func>
 800dd74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd78:	6006      	str	r6, [r0, #0]
 800dd7a:	60c6      	str	r6, [r0, #12]
 800dd7c:	69e6      	ldr	r6, [r4, #28]
 800dd7e:	68f3      	ldr	r3, [r6, #12]
 800dd80:	b183      	cbz	r3, 800dda4 <_Balloc+0x50>
 800dd82:	69e3      	ldr	r3, [r4, #28]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd8a:	b9b8      	cbnz	r0, 800ddbc <_Balloc+0x68>
 800dd8c:	2101      	movs	r1, #1
 800dd8e:	fa01 f605 	lsl.w	r6, r1, r5
 800dd92:	1d72      	adds	r2, r6, #5
 800dd94:	0092      	lsls	r2, r2, #2
 800dd96:	4620      	mov	r0, r4
 800dd98:	f000 fda8 	bl	800e8ec <_calloc_r>
 800dd9c:	b160      	cbz	r0, 800ddb8 <_Balloc+0x64>
 800dd9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dda2:	e00e      	b.n	800ddc2 <_Balloc+0x6e>
 800dda4:	2221      	movs	r2, #33	@ 0x21
 800dda6:	2104      	movs	r1, #4
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f000 fd9f 	bl	800e8ec <_calloc_r>
 800ddae:	69e3      	ldr	r3, [r4, #28]
 800ddb0:	60f0      	str	r0, [r6, #12]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d1e4      	bne.n	800dd82 <_Balloc+0x2e>
 800ddb8:	2000      	movs	r0, #0
 800ddba:	bd70      	pop	{r4, r5, r6, pc}
 800ddbc:	6802      	ldr	r2, [r0, #0]
 800ddbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ddc8:	e7f7      	b.n	800ddba <_Balloc+0x66>
 800ddca:	bf00      	nop
 800ddcc:	080105cd 	.word	0x080105cd
 800ddd0:	0801064d 	.word	0x0801064d

0800ddd4 <_Bfree>:
 800ddd4:	b570      	push	{r4, r5, r6, lr}
 800ddd6:	69c6      	ldr	r6, [r0, #28]
 800ddd8:	4605      	mov	r5, r0
 800ddda:	460c      	mov	r4, r1
 800dddc:	b976      	cbnz	r6, 800ddfc <_Bfree+0x28>
 800ddde:	2010      	movs	r0, #16
 800dde0:	f7fe fa56 	bl	800c290 <malloc>
 800dde4:	4602      	mov	r2, r0
 800dde6:	61e8      	str	r0, [r5, #28]
 800dde8:	b920      	cbnz	r0, 800ddf4 <_Bfree+0x20>
 800ddea:	4b09      	ldr	r3, [pc, #36]	@ (800de10 <_Bfree+0x3c>)
 800ddec:	4809      	ldr	r0, [pc, #36]	@ (800de14 <_Bfree+0x40>)
 800ddee:	218f      	movs	r1, #143	@ 0x8f
 800ddf0:	f000 fd5e 	bl	800e8b0 <__assert_func>
 800ddf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddf8:	6006      	str	r6, [r0, #0]
 800ddfa:	60c6      	str	r6, [r0, #12]
 800ddfc:	b13c      	cbz	r4, 800de0e <_Bfree+0x3a>
 800ddfe:	69eb      	ldr	r3, [r5, #28]
 800de00:	6862      	ldr	r2, [r4, #4]
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de08:	6021      	str	r1, [r4, #0]
 800de0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de0e:	bd70      	pop	{r4, r5, r6, pc}
 800de10:	080105cd 	.word	0x080105cd
 800de14:	0801064d 	.word	0x0801064d

0800de18 <__multadd>:
 800de18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de1c:	690d      	ldr	r5, [r1, #16]
 800de1e:	4607      	mov	r7, r0
 800de20:	460c      	mov	r4, r1
 800de22:	461e      	mov	r6, r3
 800de24:	f101 0c14 	add.w	ip, r1, #20
 800de28:	2000      	movs	r0, #0
 800de2a:	f8dc 3000 	ldr.w	r3, [ip]
 800de2e:	b299      	uxth	r1, r3
 800de30:	fb02 6101 	mla	r1, r2, r1, r6
 800de34:	0c1e      	lsrs	r6, r3, #16
 800de36:	0c0b      	lsrs	r3, r1, #16
 800de38:	fb02 3306 	mla	r3, r2, r6, r3
 800de3c:	b289      	uxth	r1, r1
 800de3e:	3001      	adds	r0, #1
 800de40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de44:	4285      	cmp	r5, r0
 800de46:	f84c 1b04 	str.w	r1, [ip], #4
 800de4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de4e:	dcec      	bgt.n	800de2a <__multadd+0x12>
 800de50:	b30e      	cbz	r6, 800de96 <__multadd+0x7e>
 800de52:	68a3      	ldr	r3, [r4, #8]
 800de54:	42ab      	cmp	r3, r5
 800de56:	dc19      	bgt.n	800de8c <__multadd+0x74>
 800de58:	6861      	ldr	r1, [r4, #4]
 800de5a:	4638      	mov	r0, r7
 800de5c:	3101      	adds	r1, #1
 800de5e:	f7ff ff79 	bl	800dd54 <_Balloc>
 800de62:	4680      	mov	r8, r0
 800de64:	b928      	cbnz	r0, 800de72 <__multadd+0x5a>
 800de66:	4602      	mov	r2, r0
 800de68:	4b0c      	ldr	r3, [pc, #48]	@ (800de9c <__multadd+0x84>)
 800de6a:	480d      	ldr	r0, [pc, #52]	@ (800dea0 <__multadd+0x88>)
 800de6c:	21ba      	movs	r1, #186	@ 0xba
 800de6e:	f000 fd1f 	bl	800e8b0 <__assert_func>
 800de72:	6922      	ldr	r2, [r4, #16]
 800de74:	3202      	adds	r2, #2
 800de76:	f104 010c 	add.w	r1, r4, #12
 800de7a:	0092      	lsls	r2, r2, #2
 800de7c:	300c      	adds	r0, #12
 800de7e:	f000 fd09 	bl	800e894 <memcpy>
 800de82:	4621      	mov	r1, r4
 800de84:	4638      	mov	r0, r7
 800de86:	f7ff ffa5 	bl	800ddd4 <_Bfree>
 800de8a:	4644      	mov	r4, r8
 800de8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de90:	3501      	adds	r5, #1
 800de92:	615e      	str	r6, [r3, #20]
 800de94:	6125      	str	r5, [r4, #16]
 800de96:	4620      	mov	r0, r4
 800de98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de9c:	0801063c 	.word	0x0801063c
 800dea0:	0801064d 	.word	0x0801064d

0800dea4 <__hi0bits>:
 800dea4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dea8:	4603      	mov	r3, r0
 800deaa:	bf36      	itet	cc
 800deac:	0403      	lslcc	r3, r0, #16
 800deae:	2000      	movcs	r0, #0
 800deb0:	2010      	movcc	r0, #16
 800deb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800deb6:	bf3c      	itt	cc
 800deb8:	021b      	lslcc	r3, r3, #8
 800deba:	3008      	addcc	r0, #8
 800debc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dec0:	bf3c      	itt	cc
 800dec2:	011b      	lslcc	r3, r3, #4
 800dec4:	3004      	addcc	r0, #4
 800dec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800deca:	bf3c      	itt	cc
 800decc:	009b      	lslcc	r3, r3, #2
 800dece:	3002      	addcc	r0, #2
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	db05      	blt.n	800dee0 <__hi0bits+0x3c>
 800ded4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ded8:	f100 0001 	add.w	r0, r0, #1
 800dedc:	bf08      	it	eq
 800dede:	2020      	moveq	r0, #32
 800dee0:	4770      	bx	lr

0800dee2 <__lo0bits>:
 800dee2:	6803      	ldr	r3, [r0, #0]
 800dee4:	4602      	mov	r2, r0
 800dee6:	f013 0007 	ands.w	r0, r3, #7
 800deea:	d00b      	beq.n	800df04 <__lo0bits+0x22>
 800deec:	07d9      	lsls	r1, r3, #31
 800deee:	d421      	bmi.n	800df34 <__lo0bits+0x52>
 800def0:	0798      	lsls	r0, r3, #30
 800def2:	bf49      	itett	mi
 800def4:	085b      	lsrmi	r3, r3, #1
 800def6:	089b      	lsrpl	r3, r3, #2
 800def8:	2001      	movmi	r0, #1
 800defa:	6013      	strmi	r3, [r2, #0]
 800defc:	bf5c      	itt	pl
 800defe:	6013      	strpl	r3, [r2, #0]
 800df00:	2002      	movpl	r0, #2
 800df02:	4770      	bx	lr
 800df04:	b299      	uxth	r1, r3
 800df06:	b909      	cbnz	r1, 800df0c <__lo0bits+0x2a>
 800df08:	0c1b      	lsrs	r3, r3, #16
 800df0a:	2010      	movs	r0, #16
 800df0c:	b2d9      	uxtb	r1, r3
 800df0e:	b909      	cbnz	r1, 800df14 <__lo0bits+0x32>
 800df10:	3008      	adds	r0, #8
 800df12:	0a1b      	lsrs	r3, r3, #8
 800df14:	0719      	lsls	r1, r3, #28
 800df16:	bf04      	itt	eq
 800df18:	091b      	lsreq	r3, r3, #4
 800df1a:	3004      	addeq	r0, #4
 800df1c:	0799      	lsls	r1, r3, #30
 800df1e:	bf04      	itt	eq
 800df20:	089b      	lsreq	r3, r3, #2
 800df22:	3002      	addeq	r0, #2
 800df24:	07d9      	lsls	r1, r3, #31
 800df26:	d403      	bmi.n	800df30 <__lo0bits+0x4e>
 800df28:	085b      	lsrs	r3, r3, #1
 800df2a:	f100 0001 	add.w	r0, r0, #1
 800df2e:	d003      	beq.n	800df38 <__lo0bits+0x56>
 800df30:	6013      	str	r3, [r2, #0]
 800df32:	4770      	bx	lr
 800df34:	2000      	movs	r0, #0
 800df36:	4770      	bx	lr
 800df38:	2020      	movs	r0, #32
 800df3a:	4770      	bx	lr

0800df3c <__i2b>:
 800df3c:	b510      	push	{r4, lr}
 800df3e:	460c      	mov	r4, r1
 800df40:	2101      	movs	r1, #1
 800df42:	f7ff ff07 	bl	800dd54 <_Balloc>
 800df46:	4602      	mov	r2, r0
 800df48:	b928      	cbnz	r0, 800df56 <__i2b+0x1a>
 800df4a:	4b05      	ldr	r3, [pc, #20]	@ (800df60 <__i2b+0x24>)
 800df4c:	4805      	ldr	r0, [pc, #20]	@ (800df64 <__i2b+0x28>)
 800df4e:	f240 1145 	movw	r1, #325	@ 0x145
 800df52:	f000 fcad 	bl	800e8b0 <__assert_func>
 800df56:	2301      	movs	r3, #1
 800df58:	6144      	str	r4, [r0, #20]
 800df5a:	6103      	str	r3, [r0, #16]
 800df5c:	bd10      	pop	{r4, pc}
 800df5e:	bf00      	nop
 800df60:	0801063c 	.word	0x0801063c
 800df64:	0801064d 	.word	0x0801064d

0800df68 <__multiply>:
 800df68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df6c:	4614      	mov	r4, r2
 800df6e:	690a      	ldr	r2, [r1, #16]
 800df70:	6923      	ldr	r3, [r4, #16]
 800df72:	429a      	cmp	r2, r3
 800df74:	bfa8      	it	ge
 800df76:	4623      	movge	r3, r4
 800df78:	460f      	mov	r7, r1
 800df7a:	bfa4      	itt	ge
 800df7c:	460c      	movge	r4, r1
 800df7e:	461f      	movge	r7, r3
 800df80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800df84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800df88:	68a3      	ldr	r3, [r4, #8]
 800df8a:	6861      	ldr	r1, [r4, #4]
 800df8c:	eb0a 0609 	add.w	r6, sl, r9
 800df90:	42b3      	cmp	r3, r6
 800df92:	b085      	sub	sp, #20
 800df94:	bfb8      	it	lt
 800df96:	3101      	addlt	r1, #1
 800df98:	f7ff fedc 	bl	800dd54 <_Balloc>
 800df9c:	b930      	cbnz	r0, 800dfac <__multiply+0x44>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	4b44      	ldr	r3, [pc, #272]	@ (800e0b4 <__multiply+0x14c>)
 800dfa2:	4845      	ldr	r0, [pc, #276]	@ (800e0b8 <__multiply+0x150>)
 800dfa4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dfa8:	f000 fc82 	bl	800e8b0 <__assert_func>
 800dfac:	f100 0514 	add.w	r5, r0, #20
 800dfb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dfb4:	462b      	mov	r3, r5
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	4543      	cmp	r3, r8
 800dfba:	d321      	bcc.n	800e000 <__multiply+0x98>
 800dfbc:	f107 0114 	add.w	r1, r7, #20
 800dfc0:	f104 0214 	add.w	r2, r4, #20
 800dfc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dfc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dfcc:	9302      	str	r3, [sp, #8]
 800dfce:	1b13      	subs	r3, r2, r4
 800dfd0:	3b15      	subs	r3, #21
 800dfd2:	f023 0303 	bic.w	r3, r3, #3
 800dfd6:	3304      	adds	r3, #4
 800dfd8:	f104 0715 	add.w	r7, r4, #21
 800dfdc:	42ba      	cmp	r2, r7
 800dfde:	bf38      	it	cc
 800dfe0:	2304      	movcc	r3, #4
 800dfe2:	9301      	str	r3, [sp, #4]
 800dfe4:	9b02      	ldr	r3, [sp, #8]
 800dfe6:	9103      	str	r1, [sp, #12]
 800dfe8:	428b      	cmp	r3, r1
 800dfea:	d80c      	bhi.n	800e006 <__multiply+0x9e>
 800dfec:	2e00      	cmp	r6, #0
 800dfee:	dd03      	ble.n	800dff8 <__multiply+0x90>
 800dff0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d05b      	beq.n	800e0b0 <__multiply+0x148>
 800dff8:	6106      	str	r6, [r0, #16]
 800dffa:	b005      	add	sp, #20
 800dffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e000:	f843 2b04 	str.w	r2, [r3], #4
 800e004:	e7d8      	b.n	800dfb8 <__multiply+0x50>
 800e006:	f8b1 a000 	ldrh.w	sl, [r1]
 800e00a:	f1ba 0f00 	cmp.w	sl, #0
 800e00e:	d024      	beq.n	800e05a <__multiply+0xf2>
 800e010:	f104 0e14 	add.w	lr, r4, #20
 800e014:	46a9      	mov	r9, r5
 800e016:	f04f 0c00 	mov.w	ip, #0
 800e01a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e01e:	f8d9 3000 	ldr.w	r3, [r9]
 800e022:	fa1f fb87 	uxth.w	fp, r7
 800e026:	b29b      	uxth	r3, r3
 800e028:	fb0a 330b 	mla	r3, sl, fp, r3
 800e02c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e030:	f8d9 7000 	ldr.w	r7, [r9]
 800e034:	4463      	add	r3, ip
 800e036:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e03a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e03e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e042:	b29b      	uxth	r3, r3
 800e044:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e048:	4572      	cmp	r2, lr
 800e04a:	f849 3b04 	str.w	r3, [r9], #4
 800e04e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e052:	d8e2      	bhi.n	800e01a <__multiply+0xb2>
 800e054:	9b01      	ldr	r3, [sp, #4]
 800e056:	f845 c003 	str.w	ip, [r5, r3]
 800e05a:	9b03      	ldr	r3, [sp, #12]
 800e05c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e060:	3104      	adds	r1, #4
 800e062:	f1b9 0f00 	cmp.w	r9, #0
 800e066:	d021      	beq.n	800e0ac <__multiply+0x144>
 800e068:	682b      	ldr	r3, [r5, #0]
 800e06a:	f104 0c14 	add.w	ip, r4, #20
 800e06e:	46ae      	mov	lr, r5
 800e070:	f04f 0a00 	mov.w	sl, #0
 800e074:	f8bc b000 	ldrh.w	fp, [ip]
 800e078:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e07c:	fb09 770b 	mla	r7, r9, fp, r7
 800e080:	4457      	add	r7, sl
 800e082:	b29b      	uxth	r3, r3
 800e084:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e088:	f84e 3b04 	str.w	r3, [lr], #4
 800e08c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e090:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e094:	f8be 3000 	ldrh.w	r3, [lr]
 800e098:	fb09 330a 	mla	r3, r9, sl, r3
 800e09c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e0a0:	4562      	cmp	r2, ip
 800e0a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0a6:	d8e5      	bhi.n	800e074 <__multiply+0x10c>
 800e0a8:	9f01      	ldr	r7, [sp, #4]
 800e0aa:	51eb      	str	r3, [r5, r7]
 800e0ac:	3504      	adds	r5, #4
 800e0ae:	e799      	b.n	800dfe4 <__multiply+0x7c>
 800e0b0:	3e01      	subs	r6, #1
 800e0b2:	e79b      	b.n	800dfec <__multiply+0x84>
 800e0b4:	0801063c 	.word	0x0801063c
 800e0b8:	0801064d 	.word	0x0801064d

0800e0bc <__pow5mult>:
 800e0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0c0:	4615      	mov	r5, r2
 800e0c2:	f012 0203 	ands.w	r2, r2, #3
 800e0c6:	4607      	mov	r7, r0
 800e0c8:	460e      	mov	r6, r1
 800e0ca:	d007      	beq.n	800e0dc <__pow5mult+0x20>
 800e0cc:	4c25      	ldr	r4, [pc, #148]	@ (800e164 <__pow5mult+0xa8>)
 800e0ce:	3a01      	subs	r2, #1
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0d6:	f7ff fe9f 	bl	800de18 <__multadd>
 800e0da:	4606      	mov	r6, r0
 800e0dc:	10ad      	asrs	r5, r5, #2
 800e0de:	d03d      	beq.n	800e15c <__pow5mult+0xa0>
 800e0e0:	69fc      	ldr	r4, [r7, #28]
 800e0e2:	b97c      	cbnz	r4, 800e104 <__pow5mult+0x48>
 800e0e4:	2010      	movs	r0, #16
 800e0e6:	f7fe f8d3 	bl	800c290 <malloc>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	61f8      	str	r0, [r7, #28]
 800e0ee:	b928      	cbnz	r0, 800e0fc <__pow5mult+0x40>
 800e0f0:	4b1d      	ldr	r3, [pc, #116]	@ (800e168 <__pow5mult+0xac>)
 800e0f2:	481e      	ldr	r0, [pc, #120]	@ (800e16c <__pow5mult+0xb0>)
 800e0f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e0f8:	f000 fbda 	bl	800e8b0 <__assert_func>
 800e0fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e100:	6004      	str	r4, [r0, #0]
 800e102:	60c4      	str	r4, [r0, #12]
 800e104:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e10c:	b94c      	cbnz	r4, 800e122 <__pow5mult+0x66>
 800e10e:	f240 2171 	movw	r1, #625	@ 0x271
 800e112:	4638      	mov	r0, r7
 800e114:	f7ff ff12 	bl	800df3c <__i2b>
 800e118:	2300      	movs	r3, #0
 800e11a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e11e:	4604      	mov	r4, r0
 800e120:	6003      	str	r3, [r0, #0]
 800e122:	f04f 0900 	mov.w	r9, #0
 800e126:	07eb      	lsls	r3, r5, #31
 800e128:	d50a      	bpl.n	800e140 <__pow5mult+0x84>
 800e12a:	4631      	mov	r1, r6
 800e12c:	4622      	mov	r2, r4
 800e12e:	4638      	mov	r0, r7
 800e130:	f7ff ff1a 	bl	800df68 <__multiply>
 800e134:	4631      	mov	r1, r6
 800e136:	4680      	mov	r8, r0
 800e138:	4638      	mov	r0, r7
 800e13a:	f7ff fe4b 	bl	800ddd4 <_Bfree>
 800e13e:	4646      	mov	r6, r8
 800e140:	106d      	asrs	r5, r5, #1
 800e142:	d00b      	beq.n	800e15c <__pow5mult+0xa0>
 800e144:	6820      	ldr	r0, [r4, #0]
 800e146:	b938      	cbnz	r0, 800e158 <__pow5mult+0x9c>
 800e148:	4622      	mov	r2, r4
 800e14a:	4621      	mov	r1, r4
 800e14c:	4638      	mov	r0, r7
 800e14e:	f7ff ff0b 	bl	800df68 <__multiply>
 800e152:	6020      	str	r0, [r4, #0]
 800e154:	f8c0 9000 	str.w	r9, [r0]
 800e158:	4604      	mov	r4, r0
 800e15a:	e7e4      	b.n	800e126 <__pow5mult+0x6a>
 800e15c:	4630      	mov	r0, r6
 800e15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e162:	bf00      	nop
 800e164:	080106a8 	.word	0x080106a8
 800e168:	080105cd 	.word	0x080105cd
 800e16c:	0801064d 	.word	0x0801064d

0800e170 <__lshift>:
 800e170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e174:	460c      	mov	r4, r1
 800e176:	6849      	ldr	r1, [r1, #4]
 800e178:	6923      	ldr	r3, [r4, #16]
 800e17a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e17e:	68a3      	ldr	r3, [r4, #8]
 800e180:	4607      	mov	r7, r0
 800e182:	4691      	mov	r9, r2
 800e184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e188:	f108 0601 	add.w	r6, r8, #1
 800e18c:	42b3      	cmp	r3, r6
 800e18e:	db0b      	blt.n	800e1a8 <__lshift+0x38>
 800e190:	4638      	mov	r0, r7
 800e192:	f7ff fddf 	bl	800dd54 <_Balloc>
 800e196:	4605      	mov	r5, r0
 800e198:	b948      	cbnz	r0, 800e1ae <__lshift+0x3e>
 800e19a:	4602      	mov	r2, r0
 800e19c:	4b28      	ldr	r3, [pc, #160]	@ (800e240 <__lshift+0xd0>)
 800e19e:	4829      	ldr	r0, [pc, #164]	@ (800e244 <__lshift+0xd4>)
 800e1a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e1a4:	f000 fb84 	bl	800e8b0 <__assert_func>
 800e1a8:	3101      	adds	r1, #1
 800e1aa:	005b      	lsls	r3, r3, #1
 800e1ac:	e7ee      	b.n	800e18c <__lshift+0x1c>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f100 0114 	add.w	r1, r0, #20
 800e1b4:	f100 0210 	add.w	r2, r0, #16
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	4553      	cmp	r3, sl
 800e1bc:	db33      	blt.n	800e226 <__lshift+0xb6>
 800e1be:	6920      	ldr	r0, [r4, #16]
 800e1c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1c4:	f104 0314 	add.w	r3, r4, #20
 800e1c8:	f019 091f 	ands.w	r9, r9, #31
 800e1cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1d4:	d02b      	beq.n	800e22e <__lshift+0xbe>
 800e1d6:	f1c9 0e20 	rsb	lr, r9, #32
 800e1da:	468a      	mov	sl, r1
 800e1dc:	2200      	movs	r2, #0
 800e1de:	6818      	ldr	r0, [r3, #0]
 800e1e0:	fa00 f009 	lsl.w	r0, r0, r9
 800e1e4:	4310      	orrs	r0, r2
 800e1e6:	f84a 0b04 	str.w	r0, [sl], #4
 800e1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1ee:	459c      	cmp	ip, r3
 800e1f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e1f4:	d8f3      	bhi.n	800e1de <__lshift+0x6e>
 800e1f6:	ebac 0304 	sub.w	r3, ip, r4
 800e1fa:	3b15      	subs	r3, #21
 800e1fc:	f023 0303 	bic.w	r3, r3, #3
 800e200:	3304      	adds	r3, #4
 800e202:	f104 0015 	add.w	r0, r4, #21
 800e206:	4584      	cmp	ip, r0
 800e208:	bf38      	it	cc
 800e20a:	2304      	movcc	r3, #4
 800e20c:	50ca      	str	r2, [r1, r3]
 800e20e:	b10a      	cbz	r2, 800e214 <__lshift+0xa4>
 800e210:	f108 0602 	add.w	r6, r8, #2
 800e214:	3e01      	subs	r6, #1
 800e216:	4638      	mov	r0, r7
 800e218:	612e      	str	r6, [r5, #16]
 800e21a:	4621      	mov	r1, r4
 800e21c:	f7ff fdda 	bl	800ddd4 <_Bfree>
 800e220:	4628      	mov	r0, r5
 800e222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e226:	f842 0f04 	str.w	r0, [r2, #4]!
 800e22a:	3301      	adds	r3, #1
 800e22c:	e7c5      	b.n	800e1ba <__lshift+0x4a>
 800e22e:	3904      	subs	r1, #4
 800e230:	f853 2b04 	ldr.w	r2, [r3], #4
 800e234:	f841 2f04 	str.w	r2, [r1, #4]!
 800e238:	459c      	cmp	ip, r3
 800e23a:	d8f9      	bhi.n	800e230 <__lshift+0xc0>
 800e23c:	e7ea      	b.n	800e214 <__lshift+0xa4>
 800e23e:	bf00      	nop
 800e240:	0801063c 	.word	0x0801063c
 800e244:	0801064d 	.word	0x0801064d

0800e248 <__mcmp>:
 800e248:	690a      	ldr	r2, [r1, #16]
 800e24a:	4603      	mov	r3, r0
 800e24c:	6900      	ldr	r0, [r0, #16]
 800e24e:	1a80      	subs	r0, r0, r2
 800e250:	b530      	push	{r4, r5, lr}
 800e252:	d10e      	bne.n	800e272 <__mcmp+0x2a>
 800e254:	3314      	adds	r3, #20
 800e256:	3114      	adds	r1, #20
 800e258:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e25c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e260:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e264:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e268:	4295      	cmp	r5, r2
 800e26a:	d003      	beq.n	800e274 <__mcmp+0x2c>
 800e26c:	d205      	bcs.n	800e27a <__mcmp+0x32>
 800e26e:	f04f 30ff 	mov.w	r0, #4294967295
 800e272:	bd30      	pop	{r4, r5, pc}
 800e274:	42a3      	cmp	r3, r4
 800e276:	d3f3      	bcc.n	800e260 <__mcmp+0x18>
 800e278:	e7fb      	b.n	800e272 <__mcmp+0x2a>
 800e27a:	2001      	movs	r0, #1
 800e27c:	e7f9      	b.n	800e272 <__mcmp+0x2a>
	...

0800e280 <__mdiff>:
 800e280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e284:	4689      	mov	r9, r1
 800e286:	4606      	mov	r6, r0
 800e288:	4611      	mov	r1, r2
 800e28a:	4648      	mov	r0, r9
 800e28c:	4614      	mov	r4, r2
 800e28e:	f7ff ffdb 	bl	800e248 <__mcmp>
 800e292:	1e05      	subs	r5, r0, #0
 800e294:	d112      	bne.n	800e2bc <__mdiff+0x3c>
 800e296:	4629      	mov	r1, r5
 800e298:	4630      	mov	r0, r6
 800e29a:	f7ff fd5b 	bl	800dd54 <_Balloc>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	b928      	cbnz	r0, 800e2ae <__mdiff+0x2e>
 800e2a2:	4b3f      	ldr	r3, [pc, #252]	@ (800e3a0 <__mdiff+0x120>)
 800e2a4:	f240 2137 	movw	r1, #567	@ 0x237
 800e2a8:	483e      	ldr	r0, [pc, #248]	@ (800e3a4 <__mdiff+0x124>)
 800e2aa:	f000 fb01 	bl	800e8b0 <__assert_func>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	b003      	add	sp, #12
 800e2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2bc:	bfbc      	itt	lt
 800e2be:	464b      	movlt	r3, r9
 800e2c0:	46a1      	movlt	r9, r4
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e2c8:	bfba      	itte	lt
 800e2ca:	461c      	movlt	r4, r3
 800e2cc:	2501      	movlt	r5, #1
 800e2ce:	2500      	movge	r5, #0
 800e2d0:	f7ff fd40 	bl	800dd54 <_Balloc>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	b918      	cbnz	r0, 800e2e0 <__mdiff+0x60>
 800e2d8:	4b31      	ldr	r3, [pc, #196]	@ (800e3a0 <__mdiff+0x120>)
 800e2da:	f240 2145 	movw	r1, #581	@ 0x245
 800e2de:	e7e3      	b.n	800e2a8 <__mdiff+0x28>
 800e2e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e2e4:	6926      	ldr	r6, [r4, #16]
 800e2e6:	60c5      	str	r5, [r0, #12]
 800e2e8:	f109 0310 	add.w	r3, r9, #16
 800e2ec:	f109 0514 	add.w	r5, r9, #20
 800e2f0:	f104 0e14 	add.w	lr, r4, #20
 800e2f4:	f100 0b14 	add.w	fp, r0, #20
 800e2f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e2fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e300:	9301      	str	r3, [sp, #4]
 800e302:	46d9      	mov	r9, fp
 800e304:	f04f 0c00 	mov.w	ip, #0
 800e308:	9b01      	ldr	r3, [sp, #4]
 800e30a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e30e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e312:	9301      	str	r3, [sp, #4]
 800e314:	fa1f f38a 	uxth.w	r3, sl
 800e318:	4619      	mov	r1, r3
 800e31a:	b283      	uxth	r3, r0
 800e31c:	1acb      	subs	r3, r1, r3
 800e31e:	0c00      	lsrs	r0, r0, #16
 800e320:	4463      	add	r3, ip
 800e322:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e326:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e330:	4576      	cmp	r6, lr
 800e332:	f849 3b04 	str.w	r3, [r9], #4
 800e336:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e33a:	d8e5      	bhi.n	800e308 <__mdiff+0x88>
 800e33c:	1b33      	subs	r3, r6, r4
 800e33e:	3b15      	subs	r3, #21
 800e340:	f023 0303 	bic.w	r3, r3, #3
 800e344:	3415      	adds	r4, #21
 800e346:	3304      	adds	r3, #4
 800e348:	42a6      	cmp	r6, r4
 800e34a:	bf38      	it	cc
 800e34c:	2304      	movcc	r3, #4
 800e34e:	441d      	add	r5, r3
 800e350:	445b      	add	r3, fp
 800e352:	461e      	mov	r6, r3
 800e354:	462c      	mov	r4, r5
 800e356:	4544      	cmp	r4, r8
 800e358:	d30e      	bcc.n	800e378 <__mdiff+0xf8>
 800e35a:	f108 0103 	add.w	r1, r8, #3
 800e35e:	1b49      	subs	r1, r1, r5
 800e360:	f021 0103 	bic.w	r1, r1, #3
 800e364:	3d03      	subs	r5, #3
 800e366:	45a8      	cmp	r8, r5
 800e368:	bf38      	it	cc
 800e36a:	2100      	movcc	r1, #0
 800e36c:	440b      	add	r3, r1
 800e36e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e372:	b191      	cbz	r1, 800e39a <__mdiff+0x11a>
 800e374:	6117      	str	r7, [r2, #16]
 800e376:	e79d      	b.n	800e2b4 <__mdiff+0x34>
 800e378:	f854 1b04 	ldr.w	r1, [r4], #4
 800e37c:	46e6      	mov	lr, ip
 800e37e:	0c08      	lsrs	r0, r1, #16
 800e380:	fa1c fc81 	uxtah	ip, ip, r1
 800e384:	4471      	add	r1, lr
 800e386:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e38a:	b289      	uxth	r1, r1
 800e38c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e390:	f846 1b04 	str.w	r1, [r6], #4
 800e394:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e398:	e7dd      	b.n	800e356 <__mdiff+0xd6>
 800e39a:	3f01      	subs	r7, #1
 800e39c:	e7e7      	b.n	800e36e <__mdiff+0xee>
 800e39e:	bf00      	nop
 800e3a0:	0801063c 	.word	0x0801063c
 800e3a4:	0801064d 	.word	0x0801064d

0800e3a8 <__d2b>:
 800e3a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3ac:	460f      	mov	r7, r1
 800e3ae:	2101      	movs	r1, #1
 800e3b0:	ec59 8b10 	vmov	r8, r9, d0
 800e3b4:	4616      	mov	r6, r2
 800e3b6:	f7ff fccd 	bl	800dd54 <_Balloc>
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	b930      	cbnz	r0, 800e3cc <__d2b+0x24>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	4b23      	ldr	r3, [pc, #140]	@ (800e450 <__d2b+0xa8>)
 800e3c2:	4824      	ldr	r0, [pc, #144]	@ (800e454 <__d2b+0xac>)
 800e3c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800e3c8:	f000 fa72 	bl	800e8b0 <__assert_func>
 800e3cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e3d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3d4:	b10d      	cbz	r5, 800e3da <__d2b+0x32>
 800e3d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3da:	9301      	str	r3, [sp, #4]
 800e3dc:	f1b8 0300 	subs.w	r3, r8, #0
 800e3e0:	d023      	beq.n	800e42a <__d2b+0x82>
 800e3e2:	4668      	mov	r0, sp
 800e3e4:	9300      	str	r3, [sp, #0]
 800e3e6:	f7ff fd7c 	bl	800dee2 <__lo0bits>
 800e3ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e3ee:	b1d0      	cbz	r0, 800e426 <__d2b+0x7e>
 800e3f0:	f1c0 0320 	rsb	r3, r0, #32
 800e3f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f8:	430b      	orrs	r3, r1
 800e3fa:	40c2      	lsrs	r2, r0
 800e3fc:	6163      	str	r3, [r4, #20]
 800e3fe:	9201      	str	r2, [sp, #4]
 800e400:	9b01      	ldr	r3, [sp, #4]
 800e402:	61a3      	str	r3, [r4, #24]
 800e404:	2b00      	cmp	r3, #0
 800e406:	bf0c      	ite	eq
 800e408:	2201      	moveq	r2, #1
 800e40a:	2202      	movne	r2, #2
 800e40c:	6122      	str	r2, [r4, #16]
 800e40e:	b1a5      	cbz	r5, 800e43a <__d2b+0x92>
 800e410:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e414:	4405      	add	r5, r0
 800e416:	603d      	str	r5, [r7, #0]
 800e418:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e41c:	6030      	str	r0, [r6, #0]
 800e41e:	4620      	mov	r0, r4
 800e420:	b003      	add	sp, #12
 800e422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e426:	6161      	str	r1, [r4, #20]
 800e428:	e7ea      	b.n	800e400 <__d2b+0x58>
 800e42a:	a801      	add	r0, sp, #4
 800e42c:	f7ff fd59 	bl	800dee2 <__lo0bits>
 800e430:	9b01      	ldr	r3, [sp, #4]
 800e432:	6163      	str	r3, [r4, #20]
 800e434:	3020      	adds	r0, #32
 800e436:	2201      	movs	r2, #1
 800e438:	e7e8      	b.n	800e40c <__d2b+0x64>
 800e43a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e43e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e442:	6038      	str	r0, [r7, #0]
 800e444:	6918      	ldr	r0, [r3, #16]
 800e446:	f7ff fd2d 	bl	800dea4 <__hi0bits>
 800e44a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e44e:	e7e5      	b.n	800e41c <__d2b+0x74>
 800e450:	0801063c 	.word	0x0801063c
 800e454:	0801064d 	.word	0x0801064d

0800e458 <__ssputs_r>:
 800e458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e45c:	688e      	ldr	r6, [r1, #8]
 800e45e:	461f      	mov	r7, r3
 800e460:	42be      	cmp	r6, r7
 800e462:	680b      	ldr	r3, [r1, #0]
 800e464:	4682      	mov	sl, r0
 800e466:	460c      	mov	r4, r1
 800e468:	4690      	mov	r8, r2
 800e46a:	d82d      	bhi.n	800e4c8 <__ssputs_r+0x70>
 800e46c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e470:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e474:	d026      	beq.n	800e4c4 <__ssputs_r+0x6c>
 800e476:	6965      	ldr	r5, [r4, #20]
 800e478:	6909      	ldr	r1, [r1, #16]
 800e47a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e47e:	eba3 0901 	sub.w	r9, r3, r1
 800e482:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e486:	1c7b      	adds	r3, r7, #1
 800e488:	444b      	add	r3, r9
 800e48a:	106d      	asrs	r5, r5, #1
 800e48c:	429d      	cmp	r5, r3
 800e48e:	bf38      	it	cc
 800e490:	461d      	movcc	r5, r3
 800e492:	0553      	lsls	r3, r2, #21
 800e494:	d527      	bpl.n	800e4e6 <__ssputs_r+0x8e>
 800e496:	4629      	mov	r1, r5
 800e498:	f7fd ff2c 	bl	800c2f4 <_malloc_r>
 800e49c:	4606      	mov	r6, r0
 800e49e:	b360      	cbz	r0, 800e4fa <__ssputs_r+0xa2>
 800e4a0:	6921      	ldr	r1, [r4, #16]
 800e4a2:	464a      	mov	r2, r9
 800e4a4:	f000 f9f6 	bl	800e894 <memcpy>
 800e4a8:	89a3      	ldrh	r3, [r4, #12]
 800e4aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e4ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4b2:	81a3      	strh	r3, [r4, #12]
 800e4b4:	6126      	str	r6, [r4, #16]
 800e4b6:	6165      	str	r5, [r4, #20]
 800e4b8:	444e      	add	r6, r9
 800e4ba:	eba5 0509 	sub.w	r5, r5, r9
 800e4be:	6026      	str	r6, [r4, #0]
 800e4c0:	60a5      	str	r5, [r4, #8]
 800e4c2:	463e      	mov	r6, r7
 800e4c4:	42be      	cmp	r6, r7
 800e4c6:	d900      	bls.n	800e4ca <__ssputs_r+0x72>
 800e4c8:	463e      	mov	r6, r7
 800e4ca:	6820      	ldr	r0, [r4, #0]
 800e4cc:	4632      	mov	r2, r6
 800e4ce:	4641      	mov	r1, r8
 800e4d0:	f000 f9c6 	bl	800e860 <memmove>
 800e4d4:	68a3      	ldr	r3, [r4, #8]
 800e4d6:	1b9b      	subs	r3, r3, r6
 800e4d8:	60a3      	str	r3, [r4, #8]
 800e4da:	6823      	ldr	r3, [r4, #0]
 800e4dc:	4433      	add	r3, r6
 800e4de:	6023      	str	r3, [r4, #0]
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4e6:	462a      	mov	r2, r5
 800e4e8:	f000 fa26 	bl	800e938 <_realloc_r>
 800e4ec:	4606      	mov	r6, r0
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d1e0      	bne.n	800e4b4 <__ssputs_r+0x5c>
 800e4f2:	6921      	ldr	r1, [r4, #16]
 800e4f4:	4650      	mov	r0, sl
 800e4f6:	f7ff fbe3 	bl	800dcc0 <_free_r>
 800e4fa:	230c      	movs	r3, #12
 800e4fc:	f8ca 3000 	str.w	r3, [sl]
 800e500:	89a3      	ldrh	r3, [r4, #12]
 800e502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e506:	81a3      	strh	r3, [r4, #12]
 800e508:	f04f 30ff 	mov.w	r0, #4294967295
 800e50c:	e7e9      	b.n	800e4e2 <__ssputs_r+0x8a>
	...

0800e510 <_svfiprintf_r>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	4698      	mov	r8, r3
 800e516:	898b      	ldrh	r3, [r1, #12]
 800e518:	061b      	lsls	r3, r3, #24
 800e51a:	b09d      	sub	sp, #116	@ 0x74
 800e51c:	4607      	mov	r7, r0
 800e51e:	460d      	mov	r5, r1
 800e520:	4614      	mov	r4, r2
 800e522:	d510      	bpl.n	800e546 <_svfiprintf_r+0x36>
 800e524:	690b      	ldr	r3, [r1, #16]
 800e526:	b973      	cbnz	r3, 800e546 <_svfiprintf_r+0x36>
 800e528:	2140      	movs	r1, #64	@ 0x40
 800e52a:	f7fd fee3 	bl	800c2f4 <_malloc_r>
 800e52e:	6028      	str	r0, [r5, #0]
 800e530:	6128      	str	r0, [r5, #16]
 800e532:	b930      	cbnz	r0, 800e542 <_svfiprintf_r+0x32>
 800e534:	230c      	movs	r3, #12
 800e536:	603b      	str	r3, [r7, #0]
 800e538:	f04f 30ff 	mov.w	r0, #4294967295
 800e53c:	b01d      	add	sp, #116	@ 0x74
 800e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e542:	2340      	movs	r3, #64	@ 0x40
 800e544:	616b      	str	r3, [r5, #20]
 800e546:	2300      	movs	r3, #0
 800e548:	9309      	str	r3, [sp, #36]	@ 0x24
 800e54a:	2320      	movs	r3, #32
 800e54c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e550:	f8cd 800c 	str.w	r8, [sp, #12]
 800e554:	2330      	movs	r3, #48	@ 0x30
 800e556:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e6f4 <_svfiprintf_r+0x1e4>
 800e55a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e55e:	f04f 0901 	mov.w	r9, #1
 800e562:	4623      	mov	r3, r4
 800e564:	469a      	mov	sl, r3
 800e566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e56a:	b10a      	cbz	r2, 800e570 <_svfiprintf_r+0x60>
 800e56c:	2a25      	cmp	r2, #37	@ 0x25
 800e56e:	d1f9      	bne.n	800e564 <_svfiprintf_r+0x54>
 800e570:	ebba 0b04 	subs.w	fp, sl, r4
 800e574:	d00b      	beq.n	800e58e <_svfiprintf_r+0x7e>
 800e576:	465b      	mov	r3, fp
 800e578:	4622      	mov	r2, r4
 800e57a:	4629      	mov	r1, r5
 800e57c:	4638      	mov	r0, r7
 800e57e:	f7ff ff6b 	bl	800e458 <__ssputs_r>
 800e582:	3001      	adds	r0, #1
 800e584:	f000 80a7 	beq.w	800e6d6 <_svfiprintf_r+0x1c6>
 800e588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e58a:	445a      	add	r2, fp
 800e58c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e58e:	f89a 3000 	ldrb.w	r3, [sl]
 800e592:	2b00      	cmp	r3, #0
 800e594:	f000 809f 	beq.w	800e6d6 <_svfiprintf_r+0x1c6>
 800e598:	2300      	movs	r3, #0
 800e59a:	f04f 32ff 	mov.w	r2, #4294967295
 800e59e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5a2:	f10a 0a01 	add.w	sl, sl, #1
 800e5a6:	9304      	str	r3, [sp, #16]
 800e5a8:	9307      	str	r3, [sp, #28]
 800e5aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e5ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800e5b0:	4654      	mov	r4, sl
 800e5b2:	2205      	movs	r2, #5
 800e5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5b8:	484e      	ldr	r0, [pc, #312]	@ (800e6f4 <_svfiprintf_r+0x1e4>)
 800e5ba:	f7f1 fe31 	bl	8000220 <memchr>
 800e5be:	9a04      	ldr	r2, [sp, #16]
 800e5c0:	b9d8      	cbnz	r0, 800e5fa <_svfiprintf_r+0xea>
 800e5c2:	06d0      	lsls	r0, r2, #27
 800e5c4:	bf44      	itt	mi
 800e5c6:	2320      	movmi	r3, #32
 800e5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e5cc:	0711      	lsls	r1, r2, #28
 800e5ce:	bf44      	itt	mi
 800e5d0:	232b      	movmi	r3, #43	@ 0x2b
 800e5d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e5d6:	f89a 3000 	ldrb.w	r3, [sl]
 800e5da:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5dc:	d015      	beq.n	800e60a <_svfiprintf_r+0xfa>
 800e5de:	9a07      	ldr	r2, [sp, #28]
 800e5e0:	4654      	mov	r4, sl
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	f04f 0c0a 	mov.w	ip, #10
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5ee:	3b30      	subs	r3, #48	@ 0x30
 800e5f0:	2b09      	cmp	r3, #9
 800e5f2:	d94b      	bls.n	800e68c <_svfiprintf_r+0x17c>
 800e5f4:	b1b0      	cbz	r0, 800e624 <_svfiprintf_r+0x114>
 800e5f6:	9207      	str	r2, [sp, #28]
 800e5f8:	e014      	b.n	800e624 <_svfiprintf_r+0x114>
 800e5fa:	eba0 0308 	sub.w	r3, r0, r8
 800e5fe:	fa09 f303 	lsl.w	r3, r9, r3
 800e602:	4313      	orrs	r3, r2
 800e604:	9304      	str	r3, [sp, #16]
 800e606:	46a2      	mov	sl, r4
 800e608:	e7d2      	b.n	800e5b0 <_svfiprintf_r+0xa0>
 800e60a:	9b03      	ldr	r3, [sp, #12]
 800e60c:	1d19      	adds	r1, r3, #4
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	9103      	str	r1, [sp, #12]
 800e612:	2b00      	cmp	r3, #0
 800e614:	bfbb      	ittet	lt
 800e616:	425b      	neglt	r3, r3
 800e618:	f042 0202 	orrlt.w	r2, r2, #2
 800e61c:	9307      	strge	r3, [sp, #28]
 800e61e:	9307      	strlt	r3, [sp, #28]
 800e620:	bfb8      	it	lt
 800e622:	9204      	strlt	r2, [sp, #16]
 800e624:	7823      	ldrb	r3, [r4, #0]
 800e626:	2b2e      	cmp	r3, #46	@ 0x2e
 800e628:	d10a      	bne.n	800e640 <_svfiprintf_r+0x130>
 800e62a:	7863      	ldrb	r3, [r4, #1]
 800e62c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e62e:	d132      	bne.n	800e696 <_svfiprintf_r+0x186>
 800e630:	9b03      	ldr	r3, [sp, #12]
 800e632:	1d1a      	adds	r2, r3, #4
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	9203      	str	r2, [sp, #12]
 800e638:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e63c:	3402      	adds	r4, #2
 800e63e:	9305      	str	r3, [sp, #20]
 800e640:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e704 <_svfiprintf_r+0x1f4>
 800e644:	7821      	ldrb	r1, [r4, #0]
 800e646:	2203      	movs	r2, #3
 800e648:	4650      	mov	r0, sl
 800e64a:	f7f1 fde9 	bl	8000220 <memchr>
 800e64e:	b138      	cbz	r0, 800e660 <_svfiprintf_r+0x150>
 800e650:	9b04      	ldr	r3, [sp, #16]
 800e652:	eba0 000a 	sub.w	r0, r0, sl
 800e656:	2240      	movs	r2, #64	@ 0x40
 800e658:	4082      	lsls	r2, r0
 800e65a:	4313      	orrs	r3, r2
 800e65c:	3401      	adds	r4, #1
 800e65e:	9304      	str	r3, [sp, #16]
 800e660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e664:	4824      	ldr	r0, [pc, #144]	@ (800e6f8 <_svfiprintf_r+0x1e8>)
 800e666:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e66a:	2206      	movs	r2, #6
 800e66c:	f7f1 fdd8 	bl	8000220 <memchr>
 800e670:	2800      	cmp	r0, #0
 800e672:	d036      	beq.n	800e6e2 <_svfiprintf_r+0x1d2>
 800e674:	4b21      	ldr	r3, [pc, #132]	@ (800e6fc <_svfiprintf_r+0x1ec>)
 800e676:	bb1b      	cbnz	r3, 800e6c0 <_svfiprintf_r+0x1b0>
 800e678:	9b03      	ldr	r3, [sp, #12]
 800e67a:	3307      	adds	r3, #7
 800e67c:	f023 0307 	bic.w	r3, r3, #7
 800e680:	3308      	adds	r3, #8
 800e682:	9303      	str	r3, [sp, #12]
 800e684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e686:	4433      	add	r3, r6
 800e688:	9309      	str	r3, [sp, #36]	@ 0x24
 800e68a:	e76a      	b.n	800e562 <_svfiprintf_r+0x52>
 800e68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e690:	460c      	mov	r4, r1
 800e692:	2001      	movs	r0, #1
 800e694:	e7a8      	b.n	800e5e8 <_svfiprintf_r+0xd8>
 800e696:	2300      	movs	r3, #0
 800e698:	3401      	adds	r4, #1
 800e69a:	9305      	str	r3, [sp, #20]
 800e69c:	4619      	mov	r1, r3
 800e69e:	f04f 0c0a 	mov.w	ip, #10
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6a8:	3a30      	subs	r2, #48	@ 0x30
 800e6aa:	2a09      	cmp	r2, #9
 800e6ac:	d903      	bls.n	800e6b6 <_svfiprintf_r+0x1a6>
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d0c6      	beq.n	800e640 <_svfiprintf_r+0x130>
 800e6b2:	9105      	str	r1, [sp, #20]
 800e6b4:	e7c4      	b.n	800e640 <_svfiprintf_r+0x130>
 800e6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e7f0      	b.n	800e6a2 <_svfiprintf_r+0x192>
 800e6c0:	ab03      	add	r3, sp, #12
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	462a      	mov	r2, r5
 800e6c6:	4b0e      	ldr	r3, [pc, #56]	@ (800e700 <_svfiprintf_r+0x1f0>)
 800e6c8:	a904      	add	r1, sp, #16
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	f7fd ff3e 	bl	800c54c <_printf_float>
 800e6d0:	1c42      	adds	r2, r0, #1
 800e6d2:	4606      	mov	r6, r0
 800e6d4:	d1d6      	bne.n	800e684 <_svfiprintf_r+0x174>
 800e6d6:	89ab      	ldrh	r3, [r5, #12]
 800e6d8:	065b      	lsls	r3, r3, #25
 800e6da:	f53f af2d 	bmi.w	800e538 <_svfiprintf_r+0x28>
 800e6de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e6e0:	e72c      	b.n	800e53c <_svfiprintf_r+0x2c>
 800e6e2:	ab03      	add	r3, sp, #12
 800e6e4:	9300      	str	r3, [sp, #0]
 800e6e6:	462a      	mov	r2, r5
 800e6e8:	4b05      	ldr	r3, [pc, #20]	@ (800e700 <_svfiprintf_r+0x1f0>)
 800e6ea:	a904      	add	r1, sp, #16
 800e6ec:	4638      	mov	r0, r7
 800e6ee:	f7fe f9c5 	bl	800ca7c <_printf_i>
 800e6f2:	e7ed      	b.n	800e6d0 <_svfiprintf_r+0x1c0>
 800e6f4:	080107a8 	.word	0x080107a8
 800e6f8:	080107b2 	.word	0x080107b2
 800e6fc:	0800c54d 	.word	0x0800c54d
 800e700:	0800e459 	.word	0x0800e459
 800e704:	080107ae 	.word	0x080107ae

0800e708 <__sflush_r>:
 800e708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e710:	0716      	lsls	r6, r2, #28
 800e712:	4605      	mov	r5, r0
 800e714:	460c      	mov	r4, r1
 800e716:	d454      	bmi.n	800e7c2 <__sflush_r+0xba>
 800e718:	684b      	ldr	r3, [r1, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	dc02      	bgt.n	800e724 <__sflush_r+0x1c>
 800e71e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e720:	2b00      	cmp	r3, #0
 800e722:	dd48      	ble.n	800e7b6 <__sflush_r+0xae>
 800e724:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e726:	2e00      	cmp	r6, #0
 800e728:	d045      	beq.n	800e7b6 <__sflush_r+0xae>
 800e72a:	2300      	movs	r3, #0
 800e72c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e730:	682f      	ldr	r7, [r5, #0]
 800e732:	6a21      	ldr	r1, [r4, #32]
 800e734:	602b      	str	r3, [r5, #0]
 800e736:	d030      	beq.n	800e79a <__sflush_r+0x92>
 800e738:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e73a:	89a3      	ldrh	r3, [r4, #12]
 800e73c:	0759      	lsls	r1, r3, #29
 800e73e:	d505      	bpl.n	800e74c <__sflush_r+0x44>
 800e740:	6863      	ldr	r3, [r4, #4]
 800e742:	1ad2      	subs	r2, r2, r3
 800e744:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e746:	b10b      	cbz	r3, 800e74c <__sflush_r+0x44>
 800e748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e74a:	1ad2      	subs	r2, r2, r3
 800e74c:	2300      	movs	r3, #0
 800e74e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e750:	6a21      	ldr	r1, [r4, #32]
 800e752:	4628      	mov	r0, r5
 800e754:	47b0      	blx	r6
 800e756:	1c43      	adds	r3, r0, #1
 800e758:	89a3      	ldrh	r3, [r4, #12]
 800e75a:	d106      	bne.n	800e76a <__sflush_r+0x62>
 800e75c:	6829      	ldr	r1, [r5, #0]
 800e75e:	291d      	cmp	r1, #29
 800e760:	d82b      	bhi.n	800e7ba <__sflush_r+0xb2>
 800e762:	4a2a      	ldr	r2, [pc, #168]	@ (800e80c <__sflush_r+0x104>)
 800e764:	410a      	asrs	r2, r1
 800e766:	07d6      	lsls	r6, r2, #31
 800e768:	d427      	bmi.n	800e7ba <__sflush_r+0xb2>
 800e76a:	2200      	movs	r2, #0
 800e76c:	6062      	str	r2, [r4, #4]
 800e76e:	04d9      	lsls	r1, r3, #19
 800e770:	6922      	ldr	r2, [r4, #16]
 800e772:	6022      	str	r2, [r4, #0]
 800e774:	d504      	bpl.n	800e780 <__sflush_r+0x78>
 800e776:	1c42      	adds	r2, r0, #1
 800e778:	d101      	bne.n	800e77e <__sflush_r+0x76>
 800e77a:	682b      	ldr	r3, [r5, #0]
 800e77c:	b903      	cbnz	r3, 800e780 <__sflush_r+0x78>
 800e77e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e782:	602f      	str	r7, [r5, #0]
 800e784:	b1b9      	cbz	r1, 800e7b6 <__sflush_r+0xae>
 800e786:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e78a:	4299      	cmp	r1, r3
 800e78c:	d002      	beq.n	800e794 <__sflush_r+0x8c>
 800e78e:	4628      	mov	r0, r5
 800e790:	f7ff fa96 	bl	800dcc0 <_free_r>
 800e794:	2300      	movs	r3, #0
 800e796:	6363      	str	r3, [r4, #52]	@ 0x34
 800e798:	e00d      	b.n	800e7b6 <__sflush_r+0xae>
 800e79a:	2301      	movs	r3, #1
 800e79c:	4628      	mov	r0, r5
 800e79e:	47b0      	blx	r6
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	1c50      	adds	r0, r2, #1
 800e7a4:	d1c9      	bne.n	800e73a <__sflush_r+0x32>
 800e7a6:	682b      	ldr	r3, [r5, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d0c6      	beq.n	800e73a <__sflush_r+0x32>
 800e7ac:	2b1d      	cmp	r3, #29
 800e7ae:	d001      	beq.n	800e7b4 <__sflush_r+0xac>
 800e7b0:	2b16      	cmp	r3, #22
 800e7b2:	d11e      	bne.n	800e7f2 <__sflush_r+0xea>
 800e7b4:	602f      	str	r7, [r5, #0]
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	e022      	b.n	800e800 <__sflush_r+0xf8>
 800e7ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7be:	b21b      	sxth	r3, r3
 800e7c0:	e01b      	b.n	800e7fa <__sflush_r+0xf2>
 800e7c2:	690f      	ldr	r7, [r1, #16]
 800e7c4:	2f00      	cmp	r7, #0
 800e7c6:	d0f6      	beq.n	800e7b6 <__sflush_r+0xae>
 800e7c8:	0793      	lsls	r3, r2, #30
 800e7ca:	680e      	ldr	r6, [r1, #0]
 800e7cc:	bf08      	it	eq
 800e7ce:	694b      	ldreq	r3, [r1, #20]
 800e7d0:	600f      	str	r7, [r1, #0]
 800e7d2:	bf18      	it	ne
 800e7d4:	2300      	movne	r3, #0
 800e7d6:	eba6 0807 	sub.w	r8, r6, r7
 800e7da:	608b      	str	r3, [r1, #8]
 800e7dc:	f1b8 0f00 	cmp.w	r8, #0
 800e7e0:	dde9      	ble.n	800e7b6 <__sflush_r+0xae>
 800e7e2:	6a21      	ldr	r1, [r4, #32]
 800e7e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e7e6:	4643      	mov	r3, r8
 800e7e8:	463a      	mov	r2, r7
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	47b0      	blx	r6
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	dc08      	bgt.n	800e804 <__sflush_r+0xfc>
 800e7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7fa:	81a3      	strh	r3, [r4, #12]
 800e7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e804:	4407      	add	r7, r0
 800e806:	eba8 0800 	sub.w	r8, r8, r0
 800e80a:	e7e7      	b.n	800e7dc <__sflush_r+0xd4>
 800e80c:	dfbffffe 	.word	0xdfbffffe

0800e810 <_fflush_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	690b      	ldr	r3, [r1, #16]
 800e814:	4605      	mov	r5, r0
 800e816:	460c      	mov	r4, r1
 800e818:	b913      	cbnz	r3, 800e820 <_fflush_r+0x10>
 800e81a:	2500      	movs	r5, #0
 800e81c:	4628      	mov	r0, r5
 800e81e:	bd38      	pop	{r3, r4, r5, pc}
 800e820:	b118      	cbz	r0, 800e82a <_fflush_r+0x1a>
 800e822:	6a03      	ldr	r3, [r0, #32]
 800e824:	b90b      	cbnz	r3, 800e82a <_fflush_r+0x1a>
 800e826:	f7fe fad5 	bl	800cdd4 <__sinit>
 800e82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d0f3      	beq.n	800e81a <_fflush_r+0xa>
 800e832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e834:	07d0      	lsls	r0, r2, #31
 800e836:	d404      	bmi.n	800e842 <_fflush_r+0x32>
 800e838:	0599      	lsls	r1, r3, #22
 800e83a:	d402      	bmi.n	800e842 <_fflush_r+0x32>
 800e83c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e83e:	f7fe fbf0 	bl	800d022 <__retarget_lock_acquire_recursive>
 800e842:	4628      	mov	r0, r5
 800e844:	4621      	mov	r1, r4
 800e846:	f7ff ff5f 	bl	800e708 <__sflush_r>
 800e84a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e84c:	07da      	lsls	r2, r3, #31
 800e84e:	4605      	mov	r5, r0
 800e850:	d4e4      	bmi.n	800e81c <_fflush_r+0xc>
 800e852:	89a3      	ldrh	r3, [r4, #12]
 800e854:	059b      	lsls	r3, r3, #22
 800e856:	d4e1      	bmi.n	800e81c <_fflush_r+0xc>
 800e858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e85a:	f7fe fbe3 	bl	800d024 <__retarget_lock_release_recursive>
 800e85e:	e7dd      	b.n	800e81c <_fflush_r+0xc>

0800e860 <memmove>:
 800e860:	4288      	cmp	r0, r1
 800e862:	b510      	push	{r4, lr}
 800e864:	eb01 0402 	add.w	r4, r1, r2
 800e868:	d902      	bls.n	800e870 <memmove+0x10>
 800e86a:	4284      	cmp	r4, r0
 800e86c:	4623      	mov	r3, r4
 800e86e:	d807      	bhi.n	800e880 <memmove+0x20>
 800e870:	1e43      	subs	r3, r0, #1
 800e872:	42a1      	cmp	r1, r4
 800e874:	d008      	beq.n	800e888 <memmove+0x28>
 800e876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e87a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e87e:	e7f8      	b.n	800e872 <memmove+0x12>
 800e880:	4402      	add	r2, r0
 800e882:	4601      	mov	r1, r0
 800e884:	428a      	cmp	r2, r1
 800e886:	d100      	bne.n	800e88a <memmove+0x2a>
 800e888:	bd10      	pop	{r4, pc}
 800e88a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e88e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e892:	e7f7      	b.n	800e884 <memmove+0x24>

0800e894 <memcpy>:
 800e894:	440a      	add	r2, r1
 800e896:	4291      	cmp	r1, r2
 800e898:	f100 33ff 	add.w	r3, r0, #4294967295
 800e89c:	d100      	bne.n	800e8a0 <memcpy+0xc>
 800e89e:	4770      	bx	lr
 800e8a0:	b510      	push	{r4, lr}
 800e8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8aa:	4291      	cmp	r1, r2
 800e8ac:	d1f9      	bne.n	800e8a2 <memcpy+0xe>
 800e8ae:	bd10      	pop	{r4, pc}

0800e8b0 <__assert_func>:
 800e8b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8b2:	4614      	mov	r4, r2
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	4b09      	ldr	r3, [pc, #36]	@ (800e8dc <__assert_func+0x2c>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	68d8      	ldr	r0, [r3, #12]
 800e8be:	b954      	cbnz	r4, 800e8d6 <__assert_func+0x26>
 800e8c0:	4b07      	ldr	r3, [pc, #28]	@ (800e8e0 <__assert_func+0x30>)
 800e8c2:	461c      	mov	r4, r3
 800e8c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8c8:	9100      	str	r1, [sp, #0]
 800e8ca:	462b      	mov	r3, r5
 800e8cc:	4905      	ldr	r1, [pc, #20]	@ (800e8e4 <__assert_func+0x34>)
 800e8ce:	f000 f86f 	bl	800e9b0 <fiprintf>
 800e8d2:	f000 f87f 	bl	800e9d4 <abort>
 800e8d6:	4b04      	ldr	r3, [pc, #16]	@ (800e8e8 <__assert_func+0x38>)
 800e8d8:	e7f4      	b.n	800e8c4 <__assert_func+0x14>
 800e8da:	bf00      	nop
 800e8dc:	20000020 	.word	0x20000020
 800e8e0:	080107fe 	.word	0x080107fe
 800e8e4:	080107d0 	.word	0x080107d0
 800e8e8:	080107c3 	.word	0x080107c3

0800e8ec <_calloc_r>:
 800e8ec:	b570      	push	{r4, r5, r6, lr}
 800e8ee:	fba1 5402 	umull	r5, r4, r1, r2
 800e8f2:	b93c      	cbnz	r4, 800e904 <_calloc_r+0x18>
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	f7fd fcfd 	bl	800c2f4 <_malloc_r>
 800e8fa:	4606      	mov	r6, r0
 800e8fc:	b928      	cbnz	r0, 800e90a <_calloc_r+0x1e>
 800e8fe:	2600      	movs	r6, #0
 800e900:	4630      	mov	r0, r6
 800e902:	bd70      	pop	{r4, r5, r6, pc}
 800e904:	220c      	movs	r2, #12
 800e906:	6002      	str	r2, [r0, #0]
 800e908:	e7f9      	b.n	800e8fe <_calloc_r+0x12>
 800e90a:	462a      	mov	r2, r5
 800e90c:	4621      	mov	r1, r4
 800e90e:	f7fe fafa 	bl	800cf06 <memset>
 800e912:	e7f5      	b.n	800e900 <_calloc_r+0x14>

0800e914 <__ascii_mbtowc>:
 800e914:	b082      	sub	sp, #8
 800e916:	b901      	cbnz	r1, 800e91a <__ascii_mbtowc+0x6>
 800e918:	a901      	add	r1, sp, #4
 800e91a:	b142      	cbz	r2, 800e92e <__ascii_mbtowc+0x1a>
 800e91c:	b14b      	cbz	r3, 800e932 <__ascii_mbtowc+0x1e>
 800e91e:	7813      	ldrb	r3, [r2, #0]
 800e920:	600b      	str	r3, [r1, #0]
 800e922:	7812      	ldrb	r2, [r2, #0]
 800e924:	1e10      	subs	r0, r2, #0
 800e926:	bf18      	it	ne
 800e928:	2001      	movne	r0, #1
 800e92a:	b002      	add	sp, #8
 800e92c:	4770      	bx	lr
 800e92e:	4610      	mov	r0, r2
 800e930:	e7fb      	b.n	800e92a <__ascii_mbtowc+0x16>
 800e932:	f06f 0001 	mvn.w	r0, #1
 800e936:	e7f8      	b.n	800e92a <__ascii_mbtowc+0x16>

0800e938 <_realloc_r>:
 800e938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e93c:	4680      	mov	r8, r0
 800e93e:	4615      	mov	r5, r2
 800e940:	460c      	mov	r4, r1
 800e942:	b921      	cbnz	r1, 800e94e <_realloc_r+0x16>
 800e944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e948:	4611      	mov	r1, r2
 800e94a:	f7fd bcd3 	b.w	800c2f4 <_malloc_r>
 800e94e:	b92a      	cbnz	r2, 800e95c <_realloc_r+0x24>
 800e950:	f7ff f9b6 	bl	800dcc0 <_free_r>
 800e954:	2400      	movs	r4, #0
 800e956:	4620      	mov	r0, r4
 800e958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95c:	f000 f841 	bl	800e9e2 <_malloc_usable_size_r>
 800e960:	4285      	cmp	r5, r0
 800e962:	4606      	mov	r6, r0
 800e964:	d802      	bhi.n	800e96c <_realloc_r+0x34>
 800e966:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e96a:	d8f4      	bhi.n	800e956 <_realloc_r+0x1e>
 800e96c:	4629      	mov	r1, r5
 800e96e:	4640      	mov	r0, r8
 800e970:	f7fd fcc0 	bl	800c2f4 <_malloc_r>
 800e974:	4607      	mov	r7, r0
 800e976:	2800      	cmp	r0, #0
 800e978:	d0ec      	beq.n	800e954 <_realloc_r+0x1c>
 800e97a:	42b5      	cmp	r5, r6
 800e97c:	462a      	mov	r2, r5
 800e97e:	4621      	mov	r1, r4
 800e980:	bf28      	it	cs
 800e982:	4632      	movcs	r2, r6
 800e984:	f7ff ff86 	bl	800e894 <memcpy>
 800e988:	4621      	mov	r1, r4
 800e98a:	4640      	mov	r0, r8
 800e98c:	f7ff f998 	bl	800dcc0 <_free_r>
 800e990:	463c      	mov	r4, r7
 800e992:	e7e0      	b.n	800e956 <_realloc_r+0x1e>

0800e994 <__ascii_wctomb>:
 800e994:	4603      	mov	r3, r0
 800e996:	4608      	mov	r0, r1
 800e998:	b141      	cbz	r1, 800e9ac <__ascii_wctomb+0x18>
 800e99a:	2aff      	cmp	r2, #255	@ 0xff
 800e99c:	d904      	bls.n	800e9a8 <__ascii_wctomb+0x14>
 800e99e:	228a      	movs	r2, #138	@ 0x8a
 800e9a0:	601a      	str	r2, [r3, #0]
 800e9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a6:	4770      	bx	lr
 800e9a8:	700a      	strb	r2, [r1, #0]
 800e9aa:	2001      	movs	r0, #1
 800e9ac:	4770      	bx	lr
	...

0800e9b0 <fiprintf>:
 800e9b0:	b40e      	push	{r1, r2, r3}
 800e9b2:	b503      	push	{r0, r1, lr}
 800e9b4:	4601      	mov	r1, r0
 800e9b6:	ab03      	add	r3, sp, #12
 800e9b8:	4805      	ldr	r0, [pc, #20]	@ (800e9d0 <fiprintf+0x20>)
 800e9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9be:	6800      	ldr	r0, [r0, #0]
 800e9c0:	9301      	str	r3, [sp, #4]
 800e9c2:	f000 f83f 	bl	800ea44 <_vfiprintf_r>
 800e9c6:	b002      	add	sp, #8
 800e9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9cc:	b003      	add	sp, #12
 800e9ce:	4770      	bx	lr
 800e9d0:	20000020 	.word	0x20000020

0800e9d4 <abort>:
 800e9d4:	b508      	push	{r3, lr}
 800e9d6:	2006      	movs	r0, #6
 800e9d8:	f000 fa08 	bl	800edec <raise>
 800e9dc:	2001      	movs	r0, #1
 800e9de:	f7f4 fc65 	bl	80032ac <_exit>

0800e9e2 <_malloc_usable_size_r>:
 800e9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9e6:	1f18      	subs	r0, r3, #4
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	bfbc      	itt	lt
 800e9ec:	580b      	ldrlt	r3, [r1, r0]
 800e9ee:	18c0      	addlt	r0, r0, r3
 800e9f0:	4770      	bx	lr

0800e9f2 <__sfputc_r>:
 800e9f2:	6893      	ldr	r3, [r2, #8]
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	b410      	push	{r4}
 800e9fa:	6093      	str	r3, [r2, #8]
 800e9fc:	da08      	bge.n	800ea10 <__sfputc_r+0x1e>
 800e9fe:	6994      	ldr	r4, [r2, #24]
 800ea00:	42a3      	cmp	r3, r4
 800ea02:	db01      	blt.n	800ea08 <__sfputc_r+0x16>
 800ea04:	290a      	cmp	r1, #10
 800ea06:	d103      	bne.n	800ea10 <__sfputc_r+0x1e>
 800ea08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea0c:	f000 b932 	b.w	800ec74 <__swbuf_r>
 800ea10:	6813      	ldr	r3, [r2, #0]
 800ea12:	1c58      	adds	r0, r3, #1
 800ea14:	6010      	str	r0, [r2, #0]
 800ea16:	7019      	strb	r1, [r3, #0]
 800ea18:	4608      	mov	r0, r1
 800ea1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <__sfputs_r>:
 800ea20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea22:	4606      	mov	r6, r0
 800ea24:	460f      	mov	r7, r1
 800ea26:	4614      	mov	r4, r2
 800ea28:	18d5      	adds	r5, r2, r3
 800ea2a:	42ac      	cmp	r4, r5
 800ea2c:	d101      	bne.n	800ea32 <__sfputs_r+0x12>
 800ea2e:	2000      	movs	r0, #0
 800ea30:	e007      	b.n	800ea42 <__sfputs_r+0x22>
 800ea32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea36:	463a      	mov	r2, r7
 800ea38:	4630      	mov	r0, r6
 800ea3a:	f7ff ffda 	bl	800e9f2 <__sfputc_r>
 800ea3e:	1c43      	adds	r3, r0, #1
 800ea40:	d1f3      	bne.n	800ea2a <__sfputs_r+0xa>
 800ea42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ea44 <_vfiprintf_r>:
 800ea44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea48:	460d      	mov	r5, r1
 800ea4a:	b09d      	sub	sp, #116	@ 0x74
 800ea4c:	4614      	mov	r4, r2
 800ea4e:	4698      	mov	r8, r3
 800ea50:	4606      	mov	r6, r0
 800ea52:	b118      	cbz	r0, 800ea5c <_vfiprintf_r+0x18>
 800ea54:	6a03      	ldr	r3, [r0, #32]
 800ea56:	b90b      	cbnz	r3, 800ea5c <_vfiprintf_r+0x18>
 800ea58:	f7fe f9bc 	bl	800cdd4 <__sinit>
 800ea5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea5e:	07d9      	lsls	r1, r3, #31
 800ea60:	d405      	bmi.n	800ea6e <_vfiprintf_r+0x2a>
 800ea62:	89ab      	ldrh	r3, [r5, #12]
 800ea64:	059a      	lsls	r2, r3, #22
 800ea66:	d402      	bmi.n	800ea6e <_vfiprintf_r+0x2a>
 800ea68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea6a:	f7fe fada 	bl	800d022 <__retarget_lock_acquire_recursive>
 800ea6e:	89ab      	ldrh	r3, [r5, #12]
 800ea70:	071b      	lsls	r3, r3, #28
 800ea72:	d501      	bpl.n	800ea78 <_vfiprintf_r+0x34>
 800ea74:	692b      	ldr	r3, [r5, #16]
 800ea76:	b99b      	cbnz	r3, 800eaa0 <_vfiprintf_r+0x5c>
 800ea78:	4629      	mov	r1, r5
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	f000 f938 	bl	800ecf0 <__swsetup_r>
 800ea80:	b170      	cbz	r0, 800eaa0 <_vfiprintf_r+0x5c>
 800ea82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea84:	07dc      	lsls	r4, r3, #31
 800ea86:	d504      	bpl.n	800ea92 <_vfiprintf_r+0x4e>
 800ea88:	f04f 30ff 	mov.w	r0, #4294967295
 800ea8c:	b01d      	add	sp, #116	@ 0x74
 800ea8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea92:	89ab      	ldrh	r3, [r5, #12]
 800ea94:	0598      	lsls	r0, r3, #22
 800ea96:	d4f7      	bmi.n	800ea88 <_vfiprintf_r+0x44>
 800ea98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea9a:	f7fe fac3 	bl	800d024 <__retarget_lock_release_recursive>
 800ea9e:	e7f3      	b.n	800ea88 <_vfiprintf_r+0x44>
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaa4:	2320      	movs	r3, #32
 800eaa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eaaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800eaae:	2330      	movs	r3, #48	@ 0x30
 800eab0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ec60 <_vfiprintf_r+0x21c>
 800eab4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eab8:	f04f 0901 	mov.w	r9, #1
 800eabc:	4623      	mov	r3, r4
 800eabe:	469a      	mov	sl, r3
 800eac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eac4:	b10a      	cbz	r2, 800eaca <_vfiprintf_r+0x86>
 800eac6:	2a25      	cmp	r2, #37	@ 0x25
 800eac8:	d1f9      	bne.n	800eabe <_vfiprintf_r+0x7a>
 800eaca:	ebba 0b04 	subs.w	fp, sl, r4
 800eace:	d00b      	beq.n	800eae8 <_vfiprintf_r+0xa4>
 800ead0:	465b      	mov	r3, fp
 800ead2:	4622      	mov	r2, r4
 800ead4:	4629      	mov	r1, r5
 800ead6:	4630      	mov	r0, r6
 800ead8:	f7ff ffa2 	bl	800ea20 <__sfputs_r>
 800eadc:	3001      	adds	r0, #1
 800eade:	f000 80a7 	beq.w	800ec30 <_vfiprintf_r+0x1ec>
 800eae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eae4:	445a      	add	r2, fp
 800eae6:	9209      	str	r2, [sp, #36]	@ 0x24
 800eae8:	f89a 3000 	ldrb.w	r3, [sl]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f000 809f 	beq.w	800ec30 <_vfiprintf_r+0x1ec>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eafc:	f10a 0a01 	add.w	sl, sl, #1
 800eb00:	9304      	str	r3, [sp, #16]
 800eb02:	9307      	str	r3, [sp, #28]
 800eb04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb08:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb0a:	4654      	mov	r4, sl
 800eb0c:	2205      	movs	r2, #5
 800eb0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb12:	4853      	ldr	r0, [pc, #332]	@ (800ec60 <_vfiprintf_r+0x21c>)
 800eb14:	f7f1 fb84 	bl	8000220 <memchr>
 800eb18:	9a04      	ldr	r2, [sp, #16]
 800eb1a:	b9d8      	cbnz	r0, 800eb54 <_vfiprintf_r+0x110>
 800eb1c:	06d1      	lsls	r1, r2, #27
 800eb1e:	bf44      	itt	mi
 800eb20:	2320      	movmi	r3, #32
 800eb22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb26:	0713      	lsls	r3, r2, #28
 800eb28:	bf44      	itt	mi
 800eb2a:	232b      	movmi	r3, #43	@ 0x2b
 800eb2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb30:	f89a 3000 	ldrb.w	r3, [sl]
 800eb34:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb36:	d015      	beq.n	800eb64 <_vfiprintf_r+0x120>
 800eb38:	9a07      	ldr	r2, [sp, #28]
 800eb3a:	4654      	mov	r4, sl
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	f04f 0c0a 	mov.w	ip, #10
 800eb42:	4621      	mov	r1, r4
 800eb44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb48:	3b30      	subs	r3, #48	@ 0x30
 800eb4a:	2b09      	cmp	r3, #9
 800eb4c:	d94b      	bls.n	800ebe6 <_vfiprintf_r+0x1a2>
 800eb4e:	b1b0      	cbz	r0, 800eb7e <_vfiprintf_r+0x13a>
 800eb50:	9207      	str	r2, [sp, #28]
 800eb52:	e014      	b.n	800eb7e <_vfiprintf_r+0x13a>
 800eb54:	eba0 0308 	sub.w	r3, r0, r8
 800eb58:	fa09 f303 	lsl.w	r3, r9, r3
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	9304      	str	r3, [sp, #16]
 800eb60:	46a2      	mov	sl, r4
 800eb62:	e7d2      	b.n	800eb0a <_vfiprintf_r+0xc6>
 800eb64:	9b03      	ldr	r3, [sp, #12]
 800eb66:	1d19      	adds	r1, r3, #4
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	9103      	str	r1, [sp, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	bfbb      	ittet	lt
 800eb70:	425b      	neglt	r3, r3
 800eb72:	f042 0202 	orrlt.w	r2, r2, #2
 800eb76:	9307      	strge	r3, [sp, #28]
 800eb78:	9307      	strlt	r3, [sp, #28]
 800eb7a:	bfb8      	it	lt
 800eb7c:	9204      	strlt	r2, [sp, #16]
 800eb7e:	7823      	ldrb	r3, [r4, #0]
 800eb80:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb82:	d10a      	bne.n	800eb9a <_vfiprintf_r+0x156>
 800eb84:	7863      	ldrb	r3, [r4, #1]
 800eb86:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb88:	d132      	bne.n	800ebf0 <_vfiprintf_r+0x1ac>
 800eb8a:	9b03      	ldr	r3, [sp, #12]
 800eb8c:	1d1a      	adds	r2, r3, #4
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	9203      	str	r2, [sp, #12]
 800eb92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb96:	3402      	adds	r4, #2
 800eb98:	9305      	str	r3, [sp, #20]
 800eb9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ec70 <_vfiprintf_r+0x22c>
 800eb9e:	7821      	ldrb	r1, [r4, #0]
 800eba0:	2203      	movs	r2, #3
 800eba2:	4650      	mov	r0, sl
 800eba4:	f7f1 fb3c 	bl	8000220 <memchr>
 800eba8:	b138      	cbz	r0, 800ebba <_vfiprintf_r+0x176>
 800ebaa:	9b04      	ldr	r3, [sp, #16]
 800ebac:	eba0 000a 	sub.w	r0, r0, sl
 800ebb0:	2240      	movs	r2, #64	@ 0x40
 800ebb2:	4082      	lsls	r2, r0
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	3401      	adds	r4, #1
 800ebb8:	9304      	str	r3, [sp, #16]
 800ebba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebbe:	4829      	ldr	r0, [pc, #164]	@ (800ec64 <_vfiprintf_r+0x220>)
 800ebc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebc4:	2206      	movs	r2, #6
 800ebc6:	f7f1 fb2b 	bl	8000220 <memchr>
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d03f      	beq.n	800ec4e <_vfiprintf_r+0x20a>
 800ebce:	4b26      	ldr	r3, [pc, #152]	@ (800ec68 <_vfiprintf_r+0x224>)
 800ebd0:	bb1b      	cbnz	r3, 800ec1a <_vfiprintf_r+0x1d6>
 800ebd2:	9b03      	ldr	r3, [sp, #12]
 800ebd4:	3307      	adds	r3, #7
 800ebd6:	f023 0307 	bic.w	r3, r3, #7
 800ebda:	3308      	adds	r3, #8
 800ebdc:	9303      	str	r3, [sp, #12]
 800ebde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebe0:	443b      	add	r3, r7
 800ebe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebe4:	e76a      	b.n	800eabc <_vfiprintf_r+0x78>
 800ebe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebea:	460c      	mov	r4, r1
 800ebec:	2001      	movs	r0, #1
 800ebee:	e7a8      	b.n	800eb42 <_vfiprintf_r+0xfe>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	3401      	adds	r4, #1
 800ebf4:	9305      	str	r3, [sp, #20]
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	f04f 0c0a 	mov.w	ip, #10
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec02:	3a30      	subs	r2, #48	@ 0x30
 800ec04:	2a09      	cmp	r2, #9
 800ec06:	d903      	bls.n	800ec10 <_vfiprintf_r+0x1cc>
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d0c6      	beq.n	800eb9a <_vfiprintf_r+0x156>
 800ec0c:	9105      	str	r1, [sp, #20]
 800ec0e:	e7c4      	b.n	800eb9a <_vfiprintf_r+0x156>
 800ec10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec14:	4604      	mov	r4, r0
 800ec16:	2301      	movs	r3, #1
 800ec18:	e7f0      	b.n	800ebfc <_vfiprintf_r+0x1b8>
 800ec1a:	ab03      	add	r3, sp, #12
 800ec1c:	9300      	str	r3, [sp, #0]
 800ec1e:	462a      	mov	r2, r5
 800ec20:	4b12      	ldr	r3, [pc, #72]	@ (800ec6c <_vfiprintf_r+0x228>)
 800ec22:	a904      	add	r1, sp, #16
 800ec24:	4630      	mov	r0, r6
 800ec26:	f7fd fc91 	bl	800c54c <_printf_float>
 800ec2a:	4607      	mov	r7, r0
 800ec2c:	1c78      	adds	r0, r7, #1
 800ec2e:	d1d6      	bne.n	800ebde <_vfiprintf_r+0x19a>
 800ec30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec32:	07d9      	lsls	r1, r3, #31
 800ec34:	d405      	bmi.n	800ec42 <_vfiprintf_r+0x1fe>
 800ec36:	89ab      	ldrh	r3, [r5, #12]
 800ec38:	059a      	lsls	r2, r3, #22
 800ec3a:	d402      	bmi.n	800ec42 <_vfiprintf_r+0x1fe>
 800ec3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec3e:	f7fe f9f1 	bl	800d024 <__retarget_lock_release_recursive>
 800ec42:	89ab      	ldrh	r3, [r5, #12]
 800ec44:	065b      	lsls	r3, r3, #25
 800ec46:	f53f af1f 	bmi.w	800ea88 <_vfiprintf_r+0x44>
 800ec4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec4c:	e71e      	b.n	800ea8c <_vfiprintf_r+0x48>
 800ec4e:	ab03      	add	r3, sp, #12
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	462a      	mov	r2, r5
 800ec54:	4b05      	ldr	r3, [pc, #20]	@ (800ec6c <_vfiprintf_r+0x228>)
 800ec56:	a904      	add	r1, sp, #16
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f7fd ff0f 	bl	800ca7c <_printf_i>
 800ec5e:	e7e4      	b.n	800ec2a <_vfiprintf_r+0x1e6>
 800ec60:	080107a8 	.word	0x080107a8
 800ec64:	080107b2 	.word	0x080107b2
 800ec68:	0800c54d 	.word	0x0800c54d
 800ec6c:	0800ea21 	.word	0x0800ea21
 800ec70:	080107ae 	.word	0x080107ae

0800ec74 <__swbuf_r>:
 800ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec76:	460e      	mov	r6, r1
 800ec78:	4614      	mov	r4, r2
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	b118      	cbz	r0, 800ec86 <__swbuf_r+0x12>
 800ec7e:	6a03      	ldr	r3, [r0, #32]
 800ec80:	b90b      	cbnz	r3, 800ec86 <__swbuf_r+0x12>
 800ec82:	f7fe f8a7 	bl	800cdd4 <__sinit>
 800ec86:	69a3      	ldr	r3, [r4, #24]
 800ec88:	60a3      	str	r3, [r4, #8]
 800ec8a:	89a3      	ldrh	r3, [r4, #12]
 800ec8c:	071a      	lsls	r2, r3, #28
 800ec8e:	d501      	bpl.n	800ec94 <__swbuf_r+0x20>
 800ec90:	6923      	ldr	r3, [r4, #16]
 800ec92:	b943      	cbnz	r3, 800eca6 <__swbuf_r+0x32>
 800ec94:	4621      	mov	r1, r4
 800ec96:	4628      	mov	r0, r5
 800ec98:	f000 f82a 	bl	800ecf0 <__swsetup_r>
 800ec9c:	b118      	cbz	r0, 800eca6 <__swbuf_r+0x32>
 800ec9e:	f04f 37ff 	mov.w	r7, #4294967295
 800eca2:	4638      	mov	r0, r7
 800eca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eca6:	6823      	ldr	r3, [r4, #0]
 800eca8:	6922      	ldr	r2, [r4, #16]
 800ecaa:	1a98      	subs	r0, r3, r2
 800ecac:	6963      	ldr	r3, [r4, #20]
 800ecae:	b2f6      	uxtb	r6, r6
 800ecb0:	4283      	cmp	r3, r0
 800ecb2:	4637      	mov	r7, r6
 800ecb4:	dc05      	bgt.n	800ecc2 <__swbuf_r+0x4e>
 800ecb6:	4621      	mov	r1, r4
 800ecb8:	4628      	mov	r0, r5
 800ecba:	f7ff fda9 	bl	800e810 <_fflush_r>
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d1ed      	bne.n	800ec9e <__swbuf_r+0x2a>
 800ecc2:	68a3      	ldr	r3, [r4, #8]
 800ecc4:	3b01      	subs	r3, #1
 800ecc6:	60a3      	str	r3, [r4, #8]
 800ecc8:	6823      	ldr	r3, [r4, #0]
 800ecca:	1c5a      	adds	r2, r3, #1
 800eccc:	6022      	str	r2, [r4, #0]
 800ecce:	701e      	strb	r6, [r3, #0]
 800ecd0:	6962      	ldr	r2, [r4, #20]
 800ecd2:	1c43      	adds	r3, r0, #1
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d004      	beq.n	800ece2 <__swbuf_r+0x6e>
 800ecd8:	89a3      	ldrh	r3, [r4, #12]
 800ecda:	07db      	lsls	r3, r3, #31
 800ecdc:	d5e1      	bpl.n	800eca2 <__swbuf_r+0x2e>
 800ecde:	2e0a      	cmp	r6, #10
 800ece0:	d1df      	bne.n	800eca2 <__swbuf_r+0x2e>
 800ece2:	4621      	mov	r1, r4
 800ece4:	4628      	mov	r0, r5
 800ece6:	f7ff fd93 	bl	800e810 <_fflush_r>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	d0d9      	beq.n	800eca2 <__swbuf_r+0x2e>
 800ecee:	e7d6      	b.n	800ec9e <__swbuf_r+0x2a>

0800ecf0 <__swsetup_r>:
 800ecf0:	b538      	push	{r3, r4, r5, lr}
 800ecf2:	4b29      	ldr	r3, [pc, #164]	@ (800ed98 <__swsetup_r+0xa8>)
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	6818      	ldr	r0, [r3, #0]
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	b118      	cbz	r0, 800ed04 <__swsetup_r+0x14>
 800ecfc:	6a03      	ldr	r3, [r0, #32]
 800ecfe:	b90b      	cbnz	r3, 800ed04 <__swsetup_r+0x14>
 800ed00:	f7fe f868 	bl	800cdd4 <__sinit>
 800ed04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed08:	0719      	lsls	r1, r3, #28
 800ed0a:	d422      	bmi.n	800ed52 <__swsetup_r+0x62>
 800ed0c:	06da      	lsls	r2, r3, #27
 800ed0e:	d407      	bmi.n	800ed20 <__swsetup_r+0x30>
 800ed10:	2209      	movs	r2, #9
 800ed12:	602a      	str	r2, [r5, #0]
 800ed14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed18:	81a3      	strh	r3, [r4, #12]
 800ed1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed1e:	e033      	b.n	800ed88 <__swsetup_r+0x98>
 800ed20:	0758      	lsls	r0, r3, #29
 800ed22:	d512      	bpl.n	800ed4a <__swsetup_r+0x5a>
 800ed24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed26:	b141      	cbz	r1, 800ed3a <__swsetup_r+0x4a>
 800ed28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed2c:	4299      	cmp	r1, r3
 800ed2e:	d002      	beq.n	800ed36 <__swsetup_r+0x46>
 800ed30:	4628      	mov	r0, r5
 800ed32:	f7fe ffc5 	bl	800dcc0 <_free_r>
 800ed36:	2300      	movs	r3, #0
 800ed38:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ed40:	81a3      	strh	r3, [r4, #12]
 800ed42:	2300      	movs	r3, #0
 800ed44:	6063      	str	r3, [r4, #4]
 800ed46:	6923      	ldr	r3, [r4, #16]
 800ed48:	6023      	str	r3, [r4, #0]
 800ed4a:	89a3      	ldrh	r3, [r4, #12]
 800ed4c:	f043 0308 	orr.w	r3, r3, #8
 800ed50:	81a3      	strh	r3, [r4, #12]
 800ed52:	6923      	ldr	r3, [r4, #16]
 800ed54:	b94b      	cbnz	r3, 800ed6a <__swsetup_r+0x7a>
 800ed56:	89a3      	ldrh	r3, [r4, #12]
 800ed58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ed5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed60:	d003      	beq.n	800ed6a <__swsetup_r+0x7a>
 800ed62:	4621      	mov	r1, r4
 800ed64:	4628      	mov	r0, r5
 800ed66:	f000 f883 	bl	800ee70 <__smakebuf_r>
 800ed6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed6e:	f013 0201 	ands.w	r2, r3, #1
 800ed72:	d00a      	beq.n	800ed8a <__swsetup_r+0x9a>
 800ed74:	2200      	movs	r2, #0
 800ed76:	60a2      	str	r2, [r4, #8]
 800ed78:	6962      	ldr	r2, [r4, #20]
 800ed7a:	4252      	negs	r2, r2
 800ed7c:	61a2      	str	r2, [r4, #24]
 800ed7e:	6922      	ldr	r2, [r4, #16]
 800ed80:	b942      	cbnz	r2, 800ed94 <__swsetup_r+0xa4>
 800ed82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ed86:	d1c5      	bne.n	800ed14 <__swsetup_r+0x24>
 800ed88:	bd38      	pop	{r3, r4, r5, pc}
 800ed8a:	0799      	lsls	r1, r3, #30
 800ed8c:	bf58      	it	pl
 800ed8e:	6962      	ldrpl	r2, [r4, #20]
 800ed90:	60a2      	str	r2, [r4, #8]
 800ed92:	e7f4      	b.n	800ed7e <__swsetup_r+0x8e>
 800ed94:	2000      	movs	r0, #0
 800ed96:	e7f7      	b.n	800ed88 <__swsetup_r+0x98>
 800ed98:	20000020 	.word	0x20000020

0800ed9c <_raise_r>:
 800ed9c:	291f      	cmp	r1, #31
 800ed9e:	b538      	push	{r3, r4, r5, lr}
 800eda0:	4605      	mov	r5, r0
 800eda2:	460c      	mov	r4, r1
 800eda4:	d904      	bls.n	800edb0 <_raise_r+0x14>
 800eda6:	2316      	movs	r3, #22
 800eda8:	6003      	str	r3, [r0, #0]
 800edaa:	f04f 30ff 	mov.w	r0, #4294967295
 800edae:	bd38      	pop	{r3, r4, r5, pc}
 800edb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800edb2:	b112      	cbz	r2, 800edba <_raise_r+0x1e>
 800edb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edb8:	b94b      	cbnz	r3, 800edce <_raise_r+0x32>
 800edba:	4628      	mov	r0, r5
 800edbc:	f000 f830 	bl	800ee20 <_getpid_r>
 800edc0:	4622      	mov	r2, r4
 800edc2:	4601      	mov	r1, r0
 800edc4:	4628      	mov	r0, r5
 800edc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edca:	f000 b817 	b.w	800edfc <_kill_r>
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d00a      	beq.n	800ede8 <_raise_r+0x4c>
 800edd2:	1c59      	adds	r1, r3, #1
 800edd4:	d103      	bne.n	800edde <_raise_r+0x42>
 800edd6:	2316      	movs	r3, #22
 800edd8:	6003      	str	r3, [r0, #0]
 800edda:	2001      	movs	r0, #1
 800eddc:	e7e7      	b.n	800edae <_raise_r+0x12>
 800edde:	2100      	movs	r1, #0
 800ede0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ede4:	4620      	mov	r0, r4
 800ede6:	4798      	blx	r3
 800ede8:	2000      	movs	r0, #0
 800edea:	e7e0      	b.n	800edae <_raise_r+0x12>

0800edec <raise>:
 800edec:	4b02      	ldr	r3, [pc, #8]	@ (800edf8 <raise+0xc>)
 800edee:	4601      	mov	r1, r0
 800edf0:	6818      	ldr	r0, [r3, #0]
 800edf2:	f7ff bfd3 	b.w	800ed9c <_raise_r>
 800edf6:	bf00      	nop
 800edf8:	20000020 	.word	0x20000020

0800edfc <_kill_r>:
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	4d07      	ldr	r5, [pc, #28]	@ (800ee1c <_kill_r+0x20>)
 800ee00:	2300      	movs	r3, #0
 800ee02:	4604      	mov	r4, r0
 800ee04:	4608      	mov	r0, r1
 800ee06:	4611      	mov	r1, r2
 800ee08:	602b      	str	r3, [r5, #0]
 800ee0a:	f7f4 fa3f 	bl	800328c <_kill>
 800ee0e:	1c43      	adds	r3, r0, #1
 800ee10:	d102      	bne.n	800ee18 <_kill_r+0x1c>
 800ee12:	682b      	ldr	r3, [r5, #0]
 800ee14:	b103      	cbz	r3, 800ee18 <_kill_r+0x1c>
 800ee16:	6023      	str	r3, [r4, #0]
 800ee18:	bd38      	pop	{r3, r4, r5, pc}
 800ee1a:	bf00      	nop
 800ee1c:	20000998 	.word	0x20000998

0800ee20 <_getpid_r>:
 800ee20:	f7f4 ba2c 	b.w	800327c <_getpid>

0800ee24 <__swhatbuf_r>:
 800ee24:	b570      	push	{r4, r5, r6, lr}
 800ee26:	460c      	mov	r4, r1
 800ee28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee2c:	2900      	cmp	r1, #0
 800ee2e:	b096      	sub	sp, #88	@ 0x58
 800ee30:	4615      	mov	r5, r2
 800ee32:	461e      	mov	r6, r3
 800ee34:	da0d      	bge.n	800ee52 <__swhatbuf_r+0x2e>
 800ee36:	89a3      	ldrh	r3, [r4, #12]
 800ee38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ee3c:	f04f 0100 	mov.w	r1, #0
 800ee40:	bf14      	ite	ne
 800ee42:	2340      	movne	r3, #64	@ 0x40
 800ee44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ee48:	2000      	movs	r0, #0
 800ee4a:	6031      	str	r1, [r6, #0]
 800ee4c:	602b      	str	r3, [r5, #0]
 800ee4e:	b016      	add	sp, #88	@ 0x58
 800ee50:	bd70      	pop	{r4, r5, r6, pc}
 800ee52:	466a      	mov	r2, sp
 800ee54:	f000 f848 	bl	800eee8 <_fstat_r>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	dbec      	blt.n	800ee36 <__swhatbuf_r+0x12>
 800ee5c:	9901      	ldr	r1, [sp, #4]
 800ee5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ee62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ee66:	4259      	negs	r1, r3
 800ee68:	4159      	adcs	r1, r3
 800ee6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee6e:	e7eb      	b.n	800ee48 <__swhatbuf_r+0x24>

0800ee70 <__smakebuf_r>:
 800ee70:	898b      	ldrh	r3, [r1, #12]
 800ee72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee74:	079d      	lsls	r5, r3, #30
 800ee76:	4606      	mov	r6, r0
 800ee78:	460c      	mov	r4, r1
 800ee7a:	d507      	bpl.n	800ee8c <__smakebuf_r+0x1c>
 800ee7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	6123      	str	r3, [r4, #16]
 800ee84:	2301      	movs	r3, #1
 800ee86:	6163      	str	r3, [r4, #20]
 800ee88:	b003      	add	sp, #12
 800ee8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee8c:	ab01      	add	r3, sp, #4
 800ee8e:	466a      	mov	r2, sp
 800ee90:	f7ff ffc8 	bl	800ee24 <__swhatbuf_r>
 800ee94:	9f00      	ldr	r7, [sp, #0]
 800ee96:	4605      	mov	r5, r0
 800ee98:	4639      	mov	r1, r7
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	f7fd fa2a 	bl	800c2f4 <_malloc_r>
 800eea0:	b948      	cbnz	r0, 800eeb6 <__smakebuf_r+0x46>
 800eea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eea6:	059a      	lsls	r2, r3, #22
 800eea8:	d4ee      	bmi.n	800ee88 <__smakebuf_r+0x18>
 800eeaa:	f023 0303 	bic.w	r3, r3, #3
 800eeae:	f043 0302 	orr.w	r3, r3, #2
 800eeb2:	81a3      	strh	r3, [r4, #12]
 800eeb4:	e7e2      	b.n	800ee7c <__smakebuf_r+0xc>
 800eeb6:	89a3      	ldrh	r3, [r4, #12]
 800eeb8:	6020      	str	r0, [r4, #0]
 800eeba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eebe:	81a3      	strh	r3, [r4, #12]
 800eec0:	9b01      	ldr	r3, [sp, #4]
 800eec2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eec6:	b15b      	cbz	r3, 800eee0 <__smakebuf_r+0x70>
 800eec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eecc:	4630      	mov	r0, r6
 800eece:	f000 f81d 	bl	800ef0c <_isatty_r>
 800eed2:	b128      	cbz	r0, 800eee0 <__smakebuf_r+0x70>
 800eed4:	89a3      	ldrh	r3, [r4, #12]
 800eed6:	f023 0303 	bic.w	r3, r3, #3
 800eeda:	f043 0301 	orr.w	r3, r3, #1
 800eede:	81a3      	strh	r3, [r4, #12]
 800eee0:	89a3      	ldrh	r3, [r4, #12]
 800eee2:	431d      	orrs	r5, r3
 800eee4:	81a5      	strh	r5, [r4, #12]
 800eee6:	e7cf      	b.n	800ee88 <__smakebuf_r+0x18>

0800eee8 <_fstat_r>:
 800eee8:	b538      	push	{r3, r4, r5, lr}
 800eeea:	4d07      	ldr	r5, [pc, #28]	@ (800ef08 <_fstat_r+0x20>)
 800eeec:	2300      	movs	r3, #0
 800eeee:	4604      	mov	r4, r0
 800eef0:	4608      	mov	r0, r1
 800eef2:	4611      	mov	r1, r2
 800eef4:	602b      	str	r3, [r5, #0]
 800eef6:	f7f4 fa29 	bl	800334c <_fstat>
 800eefa:	1c43      	adds	r3, r0, #1
 800eefc:	d102      	bne.n	800ef04 <_fstat_r+0x1c>
 800eefe:	682b      	ldr	r3, [r5, #0]
 800ef00:	b103      	cbz	r3, 800ef04 <_fstat_r+0x1c>
 800ef02:	6023      	str	r3, [r4, #0]
 800ef04:	bd38      	pop	{r3, r4, r5, pc}
 800ef06:	bf00      	nop
 800ef08:	20000998 	.word	0x20000998

0800ef0c <_isatty_r>:
 800ef0c:	b538      	push	{r3, r4, r5, lr}
 800ef0e:	4d06      	ldr	r5, [pc, #24]	@ (800ef28 <_isatty_r+0x1c>)
 800ef10:	2300      	movs	r3, #0
 800ef12:	4604      	mov	r4, r0
 800ef14:	4608      	mov	r0, r1
 800ef16:	602b      	str	r3, [r5, #0]
 800ef18:	f7f4 fa28 	bl	800336c <_isatty>
 800ef1c:	1c43      	adds	r3, r0, #1
 800ef1e:	d102      	bne.n	800ef26 <_isatty_r+0x1a>
 800ef20:	682b      	ldr	r3, [r5, #0]
 800ef22:	b103      	cbz	r3, 800ef26 <_isatty_r+0x1a>
 800ef24:	6023      	str	r3, [r4, #0]
 800ef26:	bd38      	pop	{r3, r4, r5, pc}
 800ef28:	20000998 	.word	0x20000998

0800ef2c <sinf>:
 800ef2c:	ee10 3a10 	vmov	r3, s0
 800ef30:	b507      	push	{r0, r1, r2, lr}
 800ef32:	4a1f      	ldr	r2, [pc, #124]	@ (800efb0 <sinf+0x84>)
 800ef34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d807      	bhi.n	800ef4c <sinf+0x20>
 800ef3c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800efb4 <sinf+0x88>
 800ef40:	2000      	movs	r0, #0
 800ef42:	b003      	add	sp, #12
 800ef44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef48:	f000 b88e 	b.w	800f068 <__kernel_sinf>
 800ef4c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ef50:	d304      	bcc.n	800ef5c <sinf+0x30>
 800ef52:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ef56:	b003      	add	sp, #12
 800ef58:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef5c:	4668      	mov	r0, sp
 800ef5e:	f000 f8cb 	bl	800f0f8 <__ieee754_rem_pio2f>
 800ef62:	f000 0003 	and.w	r0, r0, #3
 800ef66:	2801      	cmp	r0, #1
 800ef68:	d00a      	beq.n	800ef80 <sinf+0x54>
 800ef6a:	2802      	cmp	r0, #2
 800ef6c:	d00f      	beq.n	800ef8e <sinf+0x62>
 800ef6e:	b9c0      	cbnz	r0, 800efa2 <sinf+0x76>
 800ef70:	eddd 0a01 	vldr	s1, [sp, #4]
 800ef74:	ed9d 0a00 	vldr	s0, [sp]
 800ef78:	2001      	movs	r0, #1
 800ef7a:	f000 f875 	bl	800f068 <__kernel_sinf>
 800ef7e:	e7ea      	b.n	800ef56 <sinf+0x2a>
 800ef80:	eddd 0a01 	vldr	s1, [sp, #4]
 800ef84:	ed9d 0a00 	vldr	s0, [sp]
 800ef88:	f000 f816 	bl	800efb8 <__kernel_cosf>
 800ef8c:	e7e3      	b.n	800ef56 <sinf+0x2a>
 800ef8e:	eddd 0a01 	vldr	s1, [sp, #4]
 800ef92:	ed9d 0a00 	vldr	s0, [sp]
 800ef96:	2001      	movs	r0, #1
 800ef98:	f000 f866 	bl	800f068 <__kernel_sinf>
 800ef9c:	eeb1 0a40 	vneg.f32	s0, s0
 800efa0:	e7d9      	b.n	800ef56 <sinf+0x2a>
 800efa2:	eddd 0a01 	vldr	s1, [sp, #4]
 800efa6:	ed9d 0a00 	vldr	s0, [sp]
 800efaa:	f000 f805 	bl	800efb8 <__kernel_cosf>
 800efae:	e7f5      	b.n	800ef9c <sinf+0x70>
 800efb0:	3f490fd8 	.word	0x3f490fd8
 800efb4:	00000000 	.word	0x00000000

0800efb8 <__kernel_cosf>:
 800efb8:	ee10 3a10 	vmov	r3, s0
 800efbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800efc0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800efc4:	eef0 6a40 	vmov.f32	s13, s0
 800efc8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800efcc:	d204      	bcs.n	800efd8 <__kernel_cosf+0x20>
 800efce:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800efd2:	ee17 2a90 	vmov	r2, s15
 800efd6:	b342      	cbz	r2, 800f02a <__kernel_cosf+0x72>
 800efd8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800efdc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f048 <__kernel_cosf+0x90>
 800efe0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f04c <__kernel_cosf+0x94>
 800efe4:	4a1a      	ldr	r2, [pc, #104]	@ (800f050 <__kernel_cosf+0x98>)
 800efe6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800efea:	4293      	cmp	r3, r2
 800efec:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f054 <__kernel_cosf+0x9c>
 800eff0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eff4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f058 <__kernel_cosf+0xa0>
 800eff8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800effc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f05c <__kernel_cosf+0xa4>
 800f000:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f004:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f060 <__kernel_cosf+0xa8>
 800f008:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f00c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f010:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f014:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f018:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f01c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f020:	d804      	bhi.n	800f02c <__kernel_cosf+0x74>
 800f022:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f026:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f02a:	4770      	bx	lr
 800f02c:	4a0d      	ldr	r2, [pc, #52]	@ (800f064 <__kernel_cosf+0xac>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	bf9a      	itte	ls
 800f032:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f036:	ee07 3a10 	vmovls	s14, r3
 800f03a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f03e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f046:	e7ec      	b.n	800f022 <__kernel_cosf+0x6a>
 800f048:	ad47d74e 	.word	0xad47d74e
 800f04c:	310f74f6 	.word	0x310f74f6
 800f050:	3e999999 	.word	0x3e999999
 800f054:	b493f27c 	.word	0xb493f27c
 800f058:	37d00d01 	.word	0x37d00d01
 800f05c:	bab60b61 	.word	0xbab60b61
 800f060:	3d2aaaab 	.word	0x3d2aaaab
 800f064:	3f480000 	.word	0x3f480000

0800f068 <__kernel_sinf>:
 800f068:	ee10 3a10 	vmov	r3, s0
 800f06c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f070:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f074:	d204      	bcs.n	800f080 <__kernel_sinf+0x18>
 800f076:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f07a:	ee17 3a90 	vmov	r3, s15
 800f07e:	b35b      	cbz	r3, 800f0d8 <__kernel_sinf+0x70>
 800f080:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f084:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f0dc <__kernel_sinf+0x74>
 800f088:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f0e0 <__kernel_sinf+0x78>
 800f08c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f090:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f0e4 <__kernel_sinf+0x7c>
 800f094:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f098:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800f0e8 <__kernel_sinf+0x80>
 800f09c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f0a0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800f0ec <__kernel_sinf+0x84>
 800f0a4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f0a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f0ac:	b930      	cbnz	r0, 800f0bc <__kernel_sinf+0x54>
 800f0ae:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800f0f0 <__kernel_sinf+0x88>
 800f0b2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f0b6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f0ba:	4770      	bx	lr
 800f0bc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f0c0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f0c4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f0c8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f0cc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f0f4 <__kernel_sinf+0x8c>
 800f0d0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f0d4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	2f2ec9d3 	.word	0x2f2ec9d3
 800f0e0:	b2d72f34 	.word	0xb2d72f34
 800f0e4:	3638ef1b 	.word	0x3638ef1b
 800f0e8:	b9500d01 	.word	0xb9500d01
 800f0ec:	3c088889 	.word	0x3c088889
 800f0f0:	be2aaaab 	.word	0xbe2aaaab
 800f0f4:	3e2aaaab 	.word	0x3e2aaaab

0800f0f8 <__ieee754_rem_pio2f>:
 800f0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0fa:	ee10 6a10 	vmov	r6, s0
 800f0fe:	4b88      	ldr	r3, [pc, #544]	@ (800f320 <__ieee754_rem_pio2f+0x228>)
 800f100:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800f104:	429d      	cmp	r5, r3
 800f106:	b087      	sub	sp, #28
 800f108:	4604      	mov	r4, r0
 800f10a:	d805      	bhi.n	800f118 <__ieee754_rem_pio2f+0x20>
 800f10c:	2300      	movs	r3, #0
 800f10e:	ed80 0a00 	vstr	s0, [r0]
 800f112:	6043      	str	r3, [r0, #4]
 800f114:	2000      	movs	r0, #0
 800f116:	e022      	b.n	800f15e <__ieee754_rem_pio2f+0x66>
 800f118:	4b82      	ldr	r3, [pc, #520]	@ (800f324 <__ieee754_rem_pio2f+0x22c>)
 800f11a:	429d      	cmp	r5, r3
 800f11c:	d83a      	bhi.n	800f194 <__ieee754_rem_pio2f+0x9c>
 800f11e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f122:	2e00      	cmp	r6, #0
 800f124:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800f328 <__ieee754_rem_pio2f+0x230>
 800f128:	4a80      	ldr	r2, [pc, #512]	@ (800f32c <__ieee754_rem_pio2f+0x234>)
 800f12a:	f023 030f 	bic.w	r3, r3, #15
 800f12e:	dd18      	ble.n	800f162 <__ieee754_rem_pio2f+0x6a>
 800f130:	4293      	cmp	r3, r2
 800f132:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f136:	bf09      	itett	eq
 800f138:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800f330 <__ieee754_rem_pio2f+0x238>
 800f13c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800f334 <__ieee754_rem_pio2f+0x23c>
 800f140:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800f338 <__ieee754_rem_pio2f+0x240>
 800f144:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f148:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f14c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f150:	ed80 7a00 	vstr	s14, [r0]
 800f154:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f158:	edc0 7a01 	vstr	s15, [r0, #4]
 800f15c:	2001      	movs	r0, #1
 800f15e:	b007      	add	sp, #28
 800f160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f162:	4293      	cmp	r3, r2
 800f164:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f168:	bf09      	itett	eq
 800f16a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800f330 <__ieee754_rem_pio2f+0x238>
 800f16e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800f334 <__ieee754_rem_pio2f+0x23c>
 800f172:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800f338 <__ieee754_rem_pio2f+0x240>
 800f176:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f17a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f17e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f182:	ed80 7a00 	vstr	s14, [r0]
 800f186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f18a:	edc0 7a01 	vstr	s15, [r0, #4]
 800f18e:	f04f 30ff 	mov.w	r0, #4294967295
 800f192:	e7e4      	b.n	800f15e <__ieee754_rem_pio2f+0x66>
 800f194:	4b69      	ldr	r3, [pc, #420]	@ (800f33c <__ieee754_rem_pio2f+0x244>)
 800f196:	429d      	cmp	r5, r3
 800f198:	d873      	bhi.n	800f282 <__ieee754_rem_pio2f+0x18a>
 800f19a:	f000 f8dd 	bl	800f358 <fabsf>
 800f19e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f340 <__ieee754_rem_pio2f+0x248>
 800f1a2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f1a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f1aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f1b2:	ee17 0a90 	vmov	r0, s15
 800f1b6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f328 <__ieee754_rem_pio2f+0x230>
 800f1ba:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f1be:	281f      	cmp	r0, #31
 800f1c0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f334 <__ieee754_rem_pio2f+0x23c>
 800f1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1c8:	eeb1 6a47 	vneg.f32	s12, s14
 800f1cc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f1d0:	ee16 1a90 	vmov	r1, s13
 800f1d4:	dc09      	bgt.n	800f1ea <__ieee754_rem_pio2f+0xf2>
 800f1d6:	4a5b      	ldr	r2, [pc, #364]	@ (800f344 <__ieee754_rem_pio2f+0x24c>)
 800f1d8:	1e47      	subs	r7, r0, #1
 800f1da:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f1de:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f1e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d107      	bne.n	800f1fa <__ieee754_rem_pio2f+0x102>
 800f1ea:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f1ee:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f1f2:	2a08      	cmp	r2, #8
 800f1f4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f1f8:	dc14      	bgt.n	800f224 <__ieee754_rem_pio2f+0x12c>
 800f1fa:	6021      	str	r1, [r4, #0]
 800f1fc:	ed94 7a00 	vldr	s14, [r4]
 800f200:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f204:	2e00      	cmp	r6, #0
 800f206:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f20a:	ed84 0a01 	vstr	s0, [r4, #4]
 800f20e:	daa6      	bge.n	800f15e <__ieee754_rem_pio2f+0x66>
 800f210:	eeb1 7a47 	vneg.f32	s14, s14
 800f214:	eeb1 0a40 	vneg.f32	s0, s0
 800f218:	ed84 7a00 	vstr	s14, [r4]
 800f21c:	ed84 0a01 	vstr	s0, [r4, #4]
 800f220:	4240      	negs	r0, r0
 800f222:	e79c      	b.n	800f15e <__ieee754_rem_pio2f+0x66>
 800f224:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800f330 <__ieee754_rem_pio2f+0x238>
 800f228:	eef0 6a40 	vmov.f32	s13, s0
 800f22c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f230:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f234:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f238:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f338 <__ieee754_rem_pio2f+0x240>
 800f23c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f240:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f244:	ee15 2a90 	vmov	r2, s11
 800f248:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f24c:	1a5b      	subs	r3, r3, r1
 800f24e:	2b19      	cmp	r3, #25
 800f250:	dc04      	bgt.n	800f25c <__ieee754_rem_pio2f+0x164>
 800f252:	edc4 5a00 	vstr	s11, [r4]
 800f256:	eeb0 0a66 	vmov.f32	s0, s13
 800f25a:	e7cf      	b.n	800f1fc <__ieee754_rem_pio2f+0x104>
 800f25c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800f348 <__ieee754_rem_pio2f+0x250>
 800f260:	eeb0 0a66 	vmov.f32	s0, s13
 800f264:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f268:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f26c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f34c <__ieee754_rem_pio2f+0x254>
 800f270:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f274:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f278:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f27c:	ed84 7a00 	vstr	s14, [r4]
 800f280:	e7bc      	b.n	800f1fc <__ieee754_rem_pio2f+0x104>
 800f282:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800f286:	d306      	bcc.n	800f296 <__ieee754_rem_pio2f+0x19e>
 800f288:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f28c:	edc0 7a01 	vstr	s15, [r0, #4]
 800f290:	edc0 7a00 	vstr	s15, [r0]
 800f294:	e73e      	b.n	800f114 <__ieee754_rem_pio2f+0x1c>
 800f296:	15ea      	asrs	r2, r5, #23
 800f298:	3a86      	subs	r2, #134	@ 0x86
 800f29a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f29e:	ee07 3a90 	vmov	s15, r3
 800f2a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f2a6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f350 <__ieee754_rem_pio2f+0x258>
 800f2aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f2ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f2b2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f2b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f2ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f2be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f2c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f2c6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f2ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f2ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d6:	edcd 7a05 	vstr	s15, [sp, #20]
 800f2da:	d11e      	bne.n	800f31a <__ieee754_rem_pio2f+0x222>
 800f2dc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e4:	bf0c      	ite	eq
 800f2e6:	2301      	moveq	r3, #1
 800f2e8:	2302      	movne	r3, #2
 800f2ea:	491a      	ldr	r1, [pc, #104]	@ (800f354 <__ieee754_rem_pio2f+0x25c>)
 800f2ec:	9101      	str	r1, [sp, #4]
 800f2ee:	2102      	movs	r1, #2
 800f2f0:	9100      	str	r1, [sp, #0]
 800f2f2:	a803      	add	r0, sp, #12
 800f2f4:	4621      	mov	r1, r4
 800f2f6:	f000 f837 	bl	800f368 <__kernel_rem_pio2f>
 800f2fa:	2e00      	cmp	r6, #0
 800f2fc:	f6bf af2f 	bge.w	800f15e <__ieee754_rem_pio2f+0x66>
 800f300:	edd4 7a00 	vldr	s15, [r4]
 800f304:	eef1 7a67 	vneg.f32	s15, s15
 800f308:	edc4 7a00 	vstr	s15, [r4]
 800f30c:	edd4 7a01 	vldr	s15, [r4, #4]
 800f310:	eef1 7a67 	vneg.f32	s15, s15
 800f314:	edc4 7a01 	vstr	s15, [r4, #4]
 800f318:	e782      	b.n	800f220 <__ieee754_rem_pio2f+0x128>
 800f31a:	2303      	movs	r3, #3
 800f31c:	e7e5      	b.n	800f2ea <__ieee754_rem_pio2f+0x1f2>
 800f31e:	bf00      	nop
 800f320:	3f490fd8 	.word	0x3f490fd8
 800f324:	4016cbe3 	.word	0x4016cbe3
 800f328:	3fc90f80 	.word	0x3fc90f80
 800f32c:	3fc90fd0 	.word	0x3fc90fd0
 800f330:	37354400 	.word	0x37354400
 800f334:	37354443 	.word	0x37354443
 800f338:	2e85a308 	.word	0x2e85a308
 800f33c:	43490f80 	.word	0x43490f80
 800f340:	3f22f984 	.word	0x3f22f984
 800f344:	08010900 	.word	0x08010900
 800f348:	2e85a300 	.word	0x2e85a300
 800f34c:	248d3132 	.word	0x248d3132
 800f350:	43800000 	.word	0x43800000
 800f354:	08010980 	.word	0x08010980

0800f358 <fabsf>:
 800f358:	ee10 3a10 	vmov	r3, s0
 800f35c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f360:	ee00 3a10 	vmov	s0, r3
 800f364:	4770      	bx	lr
	...

0800f368 <__kernel_rem_pio2f>:
 800f368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f36c:	ed2d 8b04 	vpush	{d8-d9}
 800f370:	b0d9      	sub	sp, #356	@ 0x164
 800f372:	4690      	mov	r8, r2
 800f374:	9001      	str	r0, [sp, #4]
 800f376:	4ab9      	ldr	r2, [pc, #740]	@ (800f65c <__kernel_rem_pio2f+0x2f4>)
 800f378:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800f37a:	f118 0f04 	cmn.w	r8, #4
 800f37e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800f382:	460f      	mov	r7, r1
 800f384:	f103 3bff 	add.w	fp, r3, #4294967295
 800f388:	db27      	blt.n	800f3da <__kernel_rem_pio2f+0x72>
 800f38a:	f1b8 0203 	subs.w	r2, r8, #3
 800f38e:	bf48      	it	mi
 800f390:	f108 0204 	addmi.w	r2, r8, #4
 800f394:	10d2      	asrs	r2, r2, #3
 800f396:	1c55      	adds	r5, r2, #1
 800f398:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f39a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800f66c <__kernel_rem_pio2f+0x304>
 800f39e:	00e8      	lsls	r0, r5, #3
 800f3a0:	eba2 060b 	sub.w	r6, r2, fp
 800f3a4:	9002      	str	r0, [sp, #8]
 800f3a6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800f3aa:	eb0a 0c0b 	add.w	ip, sl, fp
 800f3ae:	ac1c      	add	r4, sp, #112	@ 0x70
 800f3b0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	4560      	cmp	r0, ip
 800f3b8:	dd11      	ble.n	800f3de <__kernel_rem_pio2f+0x76>
 800f3ba:	a91c      	add	r1, sp, #112	@ 0x70
 800f3bc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800f3c0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800f3c4:	f04f 0c00 	mov.w	ip, #0
 800f3c8:	45d4      	cmp	ip, sl
 800f3ca:	dc27      	bgt.n	800f41c <__kernel_rem_pio2f+0xb4>
 800f3cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f3d0:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800f66c <__kernel_rem_pio2f+0x304>
 800f3d4:	4606      	mov	r6, r0
 800f3d6:	2400      	movs	r4, #0
 800f3d8:	e016      	b.n	800f408 <__kernel_rem_pio2f+0xa0>
 800f3da:	2200      	movs	r2, #0
 800f3dc:	e7db      	b.n	800f396 <__kernel_rem_pio2f+0x2e>
 800f3de:	42c6      	cmn	r6, r0
 800f3e0:	bf5d      	ittte	pl
 800f3e2:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800f3e6:	ee07 1a90 	vmovpl	s15, r1
 800f3ea:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f3ee:	eef0 7a47 	vmovmi.f32	s15, s14
 800f3f2:	ece4 7a01 	vstmia	r4!, {s15}
 800f3f6:	3001      	adds	r0, #1
 800f3f8:	e7dd      	b.n	800f3b6 <__kernel_rem_pio2f+0x4e>
 800f3fa:	ecfe 6a01 	vldmia	lr!, {s13}
 800f3fe:	ed96 7a00 	vldr	s14, [r6]
 800f402:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f406:	3401      	adds	r4, #1
 800f408:	455c      	cmp	r4, fp
 800f40a:	f1a6 0604 	sub.w	r6, r6, #4
 800f40e:	ddf4      	ble.n	800f3fa <__kernel_rem_pio2f+0x92>
 800f410:	ece9 7a01 	vstmia	r9!, {s15}
 800f414:	f10c 0c01 	add.w	ip, ip, #1
 800f418:	3004      	adds	r0, #4
 800f41a:	e7d5      	b.n	800f3c8 <__kernel_rem_pio2f+0x60>
 800f41c:	a908      	add	r1, sp, #32
 800f41e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f422:	9104      	str	r1, [sp, #16]
 800f424:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f426:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800f668 <__kernel_rem_pio2f+0x300>
 800f42a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800f664 <__kernel_rem_pio2f+0x2fc>
 800f42e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f432:	9203      	str	r2, [sp, #12]
 800f434:	4654      	mov	r4, sl
 800f436:	00a2      	lsls	r2, r4, #2
 800f438:	9205      	str	r2, [sp, #20]
 800f43a:	aa58      	add	r2, sp, #352	@ 0x160
 800f43c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f440:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800f444:	a944      	add	r1, sp, #272	@ 0x110
 800f446:	aa08      	add	r2, sp, #32
 800f448:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800f44c:	4694      	mov	ip, r2
 800f44e:	4626      	mov	r6, r4
 800f450:	2e00      	cmp	r6, #0
 800f452:	f1a0 0004 	sub.w	r0, r0, #4
 800f456:	dc4c      	bgt.n	800f4f2 <__kernel_rem_pio2f+0x18a>
 800f458:	4628      	mov	r0, r5
 800f45a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f45e:	f000 f9f5 	bl	800f84c <scalbnf>
 800f462:	eeb0 8a40 	vmov.f32	s16, s0
 800f466:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800f46a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f46e:	f000 fa53 	bl	800f918 <floorf>
 800f472:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800f476:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f47a:	2d00      	cmp	r5, #0
 800f47c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f480:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f484:	ee17 9a90 	vmov	r9, s15
 800f488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f48c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f490:	dd41      	ble.n	800f516 <__kernel_rem_pio2f+0x1ae>
 800f492:	f104 3cff 	add.w	ip, r4, #4294967295
 800f496:	a908      	add	r1, sp, #32
 800f498:	f1c5 0e08 	rsb	lr, r5, #8
 800f49c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800f4a0:	fa46 f00e 	asr.w	r0, r6, lr
 800f4a4:	4481      	add	r9, r0
 800f4a6:	fa00 f00e 	lsl.w	r0, r0, lr
 800f4aa:	1a36      	subs	r6, r6, r0
 800f4ac:	f1c5 0007 	rsb	r0, r5, #7
 800f4b0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800f4b4:	4106      	asrs	r6, r0
 800f4b6:	2e00      	cmp	r6, #0
 800f4b8:	dd3c      	ble.n	800f534 <__kernel_rem_pio2f+0x1cc>
 800f4ba:	f04f 0e00 	mov.w	lr, #0
 800f4be:	f109 0901 	add.w	r9, r9, #1
 800f4c2:	4670      	mov	r0, lr
 800f4c4:	4574      	cmp	r4, lr
 800f4c6:	dc68      	bgt.n	800f59a <__kernel_rem_pio2f+0x232>
 800f4c8:	2d00      	cmp	r5, #0
 800f4ca:	dd03      	ble.n	800f4d4 <__kernel_rem_pio2f+0x16c>
 800f4cc:	2d01      	cmp	r5, #1
 800f4ce:	d074      	beq.n	800f5ba <__kernel_rem_pio2f+0x252>
 800f4d0:	2d02      	cmp	r5, #2
 800f4d2:	d07d      	beq.n	800f5d0 <__kernel_rem_pio2f+0x268>
 800f4d4:	2e02      	cmp	r6, #2
 800f4d6:	d12d      	bne.n	800f534 <__kernel_rem_pio2f+0x1cc>
 800f4d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f4dc:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f4e0:	b340      	cbz	r0, 800f534 <__kernel_rem_pio2f+0x1cc>
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	9306      	str	r3, [sp, #24]
 800f4e6:	f000 f9b1 	bl	800f84c <scalbnf>
 800f4ea:	9b06      	ldr	r3, [sp, #24]
 800f4ec:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f4f0:	e020      	b.n	800f534 <__kernel_rem_pio2f+0x1cc>
 800f4f2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f4f6:	3e01      	subs	r6, #1
 800f4f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f500:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f504:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f508:	ecac 0a01 	vstmia	ip!, {s0}
 800f50c:	ed90 0a00 	vldr	s0, [r0]
 800f510:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f514:	e79c      	b.n	800f450 <__kernel_rem_pio2f+0xe8>
 800f516:	d105      	bne.n	800f524 <__kernel_rem_pio2f+0x1bc>
 800f518:	1e60      	subs	r0, r4, #1
 800f51a:	a908      	add	r1, sp, #32
 800f51c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800f520:	11f6      	asrs	r6, r6, #7
 800f522:	e7c8      	b.n	800f4b6 <__kernel_rem_pio2f+0x14e>
 800f524:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f528:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f530:	da31      	bge.n	800f596 <__kernel_rem_pio2f+0x22e>
 800f532:	2600      	movs	r6, #0
 800f534:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f53c:	f040 8098 	bne.w	800f670 <__kernel_rem_pio2f+0x308>
 800f540:	1e60      	subs	r0, r4, #1
 800f542:	2200      	movs	r2, #0
 800f544:	4550      	cmp	r0, sl
 800f546:	da4b      	bge.n	800f5e0 <__kernel_rem_pio2f+0x278>
 800f548:	2a00      	cmp	r2, #0
 800f54a:	d065      	beq.n	800f618 <__kernel_rem_pio2f+0x2b0>
 800f54c:	3c01      	subs	r4, #1
 800f54e:	ab08      	add	r3, sp, #32
 800f550:	3d08      	subs	r5, #8
 800f552:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d0f8      	beq.n	800f54c <__kernel_rem_pio2f+0x1e4>
 800f55a:	4628      	mov	r0, r5
 800f55c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f560:	f000 f974 	bl	800f84c <scalbnf>
 800f564:	1c63      	adds	r3, r4, #1
 800f566:	aa44      	add	r2, sp, #272	@ 0x110
 800f568:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800f668 <__kernel_rem_pio2f+0x300>
 800f56c:	0099      	lsls	r1, r3, #2
 800f56e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f572:	4623      	mov	r3, r4
 800f574:	2b00      	cmp	r3, #0
 800f576:	f280 80a9 	bge.w	800f6cc <__kernel_rem_pio2f+0x364>
 800f57a:	4623      	mov	r3, r4
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	f2c0 80c7 	blt.w	800f710 <__kernel_rem_pio2f+0x3a8>
 800f582:	aa44      	add	r2, sp, #272	@ 0x110
 800f584:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f588:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800f660 <__kernel_rem_pio2f+0x2f8>
 800f58c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800f66c <__kernel_rem_pio2f+0x304>
 800f590:	2000      	movs	r0, #0
 800f592:	1ae2      	subs	r2, r4, r3
 800f594:	e0b1      	b.n	800f6fa <__kernel_rem_pio2f+0x392>
 800f596:	2602      	movs	r6, #2
 800f598:	e78f      	b.n	800f4ba <__kernel_rem_pio2f+0x152>
 800f59a:	f852 1b04 	ldr.w	r1, [r2], #4
 800f59e:	b948      	cbnz	r0, 800f5b4 <__kernel_rem_pio2f+0x24c>
 800f5a0:	b121      	cbz	r1, 800f5ac <__kernel_rem_pio2f+0x244>
 800f5a2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800f5a6:	f842 1c04 	str.w	r1, [r2, #-4]
 800f5aa:	2101      	movs	r1, #1
 800f5ac:	f10e 0e01 	add.w	lr, lr, #1
 800f5b0:	4608      	mov	r0, r1
 800f5b2:	e787      	b.n	800f4c4 <__kernel_rem_pio2f+0x15c>
 800f5b4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800f5b8:	e7f5      	b.n	800f5a6 <__kernel_rem_pio2f+0x23e>
 800f5ba:	f104 3cff 	add.w	ip, r4, #4294967295
 800f5be:	aa08      	add	r2, sp, #32
 800f5c0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800f5c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f5c8:	a908      	add	r1, sp, #32
 800f5ca:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800f5ce:	e781      	b.n	800f4d4 <__kernel_rem_pio2f+0x16c>
 800f5d0:	f104 3cff 	add.w	ip, r4, #4294967295
 800f5d4:	aa08      	add	r2, sp, #32
 800f5d6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800f5da:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f5de:	e7f3      	b.n	800f5c8 <__kernel_rem_pio2f+0x260>
 800f5e0:	a908      	add	r1, sp, #32
 800f5e2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f5e6:	3801      	subs	r0, #1
 800f5e8:	430a      	orrs	r2, r1
 800f5ea:	e7ab      	b.n	800f544 <__kernel_rem_pio2f+0x1dc>
 800f5ec:	3201      	adds	r2, #1
 800f5ee:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800f5f2:	2e00      	cmp	r6, #0
 800f5f4:	d0fa      	beq.n	800f5ec <__kernel_rem_pio2f+0x284>
 800f5f6:	9905      	ldr	r1, [sp, #20]
 800f5f8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800f5fc:	eb0d 0001 	add.w	r0, sp, r1
 800f600:	18e6      	adds	r6, r4, r3
 800f602:	a91c      	add	r1, sp, #112	@ 0x70
 800f604:	f104 0c01 	add.w	ip, r4, #1
 800f608:	384c      	subs	r0, #76	@ 0x4c
 800f60a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800f60e:	4422      	add	r2, r4
 800f610:	4562      	cmp	r2, ip
 800f612:	da04      	bge.n	800f61e <__kernel_rem_pio2f+0x2b6>
 800f614:	4614      	mov	r4, r2
 800f616:	e70e      	b.n	800f436 <__kernel_rem_pio2f+0xce>
 800f618:	9804      	ldr	r0, [sp, #16]
 800f61a:	2201      	movs	r2, #1
 800f61c:	e7e7      	b.n	800f5ee <__kernel_rem_pio2f+0x286>
 800f61e:	9903      	ldr	r1, [sp, #12]
 800f620:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f624:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800f628:	9105      	str	r1, [sp, #20]
 800f62a:	ee07 1a90 	vmov	s15, r1
 800f62e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f632:	2400      	movs	r4, #0
 800f634:	ece6 7a01 	vstmia	r6!, {s15}
 800f638:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800f66c <__kernel_rem_pio2f+0x304>
 800f63c:	46b1      	mov	r9, r6
 800f63e:	455c      	cmp	r4, fp
 800f640:	dd04      	ble.n	800f64c <__kernel_rem_pio2f+0x2e4>
 800f642:	ece0 7a01 	vstmia	r0!, {s15}
 800f646:	f10c 0c01 	add.w	ip, ip, #1
 800f64a:	e7e1      	b.n	800f610 <__kernel_rem_pio2f+0x2a8>
 800f64c:	ecfe 6a01 	vldmia	lr!, {s13}
 800f650:	ed39 7a01 	vldmdb	r9!, {s14}
 800f654:	3401      	adds	r4, #1
 800f656:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f65a:	e7f0      	b.n	800f63e <__kernel_rem_pio2f+0x2d6>
 800f65c:	08010cc4 	.word	0x08010cc4
 800f660:	08010c98 	.word	0x08010c98
 800f664:	43800000 	.word	0x43800000
 800f668:	3b800000 	.word	0x3b800000
 800f66c:	00000000 	.word	0x00000000
 800f670:	9b02      	ldr	r3, [sp, #8]
 800f672:	eeb0 0a48 	vmov.f32	s0, s16
 800f676:	eba3 0008 	sub.w	r0, r3, r8
 800f67a:	f000 f8e7 	bl	800f84c <scalbnf>
 800f67e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800f664 <__kernel_rem_pio2f+0x2fc>
 800f682:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68a:	db19      	blt.n	800f6c0 <__kernel_rem_pio2f+0x358>
 800f68c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800f668 <__kernel_rem_pio2f+0x300>
 800f690:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f694:	aa08      	add	r2, sp, #32
 800f696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f69a:	3508      	adds	r5, #8
 800f69c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f6a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f6a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f6ac:	ee10 3a10 	vmov	r3, s0
 800f6b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f6b4:	ee17 3a90 	vmov	r3, s15
 800f6b8:	3401      	adds	r4, #1
 800f6ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f6be:	e74c      	b.n	800f55a <__kernel_rem_pio2f+0x1f2>
 800f6c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f6c4:	aa08      	add	r2, sp, #32
 800f6c6:	ee10 3a10 	vmov	r3, s0
 800f6ca:	e7f6      	b.n	800f6ba <__kernel_rem_pio2f+0x352>
 800f6cc:	a808      	add	r0, sp, #32
 800f6ce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800f6d2:	9001      	str	r0, [sp, #4]
 800f6d4:	ee07 0a90 	vmov	s15, r0
 800f6d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6dc:	3b01      	subs	r3, #1
 800f6de:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f6e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f6e6:	ed62 7a01 	vstmdb	r2!, {s15}
 800f6ea:	e743      	b.n	800f574 <__kernel_rem_pio2f+0x20c>
 800f6ec:	ecfc 6a01 	vldmia	ip!, {s13}
 800f6f0:	ecb5 7a01 	vldmia	r5!, {s14}
 800f6f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f6f8:	3001      	adds	r0, #1
 800f6fa:	4550      	cmp	r0, sl
 800f6fc:	dc01      	bgt.n	800f702 <__kernel_rem_pio2f+0x39a>
 800f6fe:	4282      	cmp	r2, r0
 800f700:	daf4      	bge.n	800f6ec <__kernel_rem_pio2f+0x384>
 800f702:	a858      	add	r0, sp, #352	@ 0x160
 800f704:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f708:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800f70c:	3b01      	subs	r3, #1
 800f70e:	e735      	b.n	800f57c <__kernel_rem_pio2f+0x214>
 800f710:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800f712:	2b02      	cmp	r3, #2
 800f714:	dc09      	bgt.n	800f72a <__kernel_rem_pio2f+0x3c2>
 800f716:	2b00      	cmp	r3, #0
 800f718:	dc2b      	bgt.n	800f772 <__kernel_rem_pio2f+0x40a>
 800f71a:	d044      	beq.n	800f7a6 <__kernel_rem_pio2f+0x43e>
 800f71c:	f009 0007 	and.w	r0, r9, #7
 800f720:	b059      	add	sp, #356	@ 0x164
 800f722:	ecbd 8b04 	vpop	{d8-d9}
 800f726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f72a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800f72c:	2b03      	cmp	r3, #3
 800f72e:	d1f5      	bne.n	800f71c <__kernel_rem_pio2f+0x3b4>
 800f730:	aa30      	add	r2, sp, #192	@ 0xc0
 800f732:	1f0b      	subs	r3, r1, #4
 800f734:	4413      	add	r3, r2
 800f736:	461a      	mov	r2, r3
 800f738:	4620      	mov	r0, r4
 800f73a:	2800      	cmp	r0, #0
 800f73c:	f1a2 0204 	sub.w	r2, r2, #4
 800f740:	dc52      	bgt.n	800f7e8 <__kernel_rem_pio2f+0x480>
 800f742:	4622      	mov	r2, r4
 800f744:	2a01      	cmp	r2, #1
 800f746:	f1a3 0304 	sub.w	r3, r3, #4
 800f74a:	dc5d      	bgt.n	800f808 <__kernel_rem_pio2f+0x4a0>
 800f74c:	ab30      	add	r3, sp, #192	@ 0xc0
 800f74e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800f66c <__kernel_rem_pio2f+0x304>
 800f752:	440b      	add	r3, r1
 800f754:	2c01      	cmp	r4, #1
 800f756:	dc67      	bgt.n	800f828 <__kernel_rem_pio2f+0x4c0>
 800f758:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800f75c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800f760:	2e00      	cmp	r6, #0
 800f762:	d167      	bne.n	800f834 <__kernel_rem_pio2f+0x4cc>
 800f764:	edc7 6a00 	vstr	s13, [r7]
 800f768:	ed87 7a01 	vstr	s14, [r7, #4]
 800f76c:	edc7 7a02 	vstr	s15, [r7, #8]
 800f770:	e7d4      	b.n	800f71c <__kernel_rem_pio2f+0x3b4>
 800f772:	ab30      	add	r3, sp, #192	@ 0xc0
 800f774:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800f66c <__kernel_rem_pio2f+0x304>
 800f778:	440b      	add	r3, r1
 800f77a:	4622      	mov	r2, r4
 800f77c:	2a00      	cmp	r2, #0
 800f77e:	da24      	bge.n	800f7ca <__kernel_rem_pio2f+0x462>
 800f780:	b34e      	cbz	r6, 800f7d6 <__kernel_rem_pio2f+0x46e>
 800f782:	eef1 7a47 	vneg.f32	s15, s14
 800f786:	edc7 7a00 	vstr	s15, [r7]
 800f78a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800f78e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f792:	aa31      	add	r2, sp, #196	@ 0xc4
 800f794:	2301      	movs	r3, #1
 800f796:	429c      	cmp	r4, r3
 800f798:	da20      	bge.n	800f7dc <__kernel_rem_pio2f+0x474>
 800f79a:	b10e      	cbz	r6, 800f7a0 <__kernel_rem_pio2f+0x438>
 800f79c:	eef1 7a67 	vneg.f32	s15, s15
 800f7a0:	edc7 7a01 	vstr	s15, [r7, #4]
 800f7a4:	e7ba      	b.n	800f71c <__kernel_rem_pio2f+0x3b4>
 800f7a6:	ab30      	add	r3, sp, #192	@ 0xc0
 800f7a8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800f66c <__kernel_rem_pio2f+0x304>
 800f7ac:	440b      	add	r3, r1
 800f7ae:	2c00      	cmp	r4, #0
 800f7b0:	da05      	bge.n	800f7be <__kernel_rem_pio2f+0x456>
 800f7b2:	b10e      	cbz	r6, 800f7b8 <__kernel_rem_pio2f+0x450>
 800f7b4:	eef1 7a67 	vneg.f32	s15, s15
 800f7b8:	edc7 7a00 	vstr	s15, [r7]
 800f7bc:	e7ae      	b.n	800f71c <__kernel_rem_pio2f+0x3b4>
 800f7be:	ed33 7a01 	vldmdb	r3!, {s14}
 800f7c2:	3c01      	subs	r4, #1
 800f7c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7c8:	e7f1      	b.n	800f7ae <__kernel_rem_pio2f+0x446>
 800f7ca:	ed73 7a01 	vldmdb	r3!, {s15}
 800f7ce:	3a01      	subs	r2, #1
 800f7d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7d4:	e7d2      	b.n	800f77c <__kernel_rem_pio2f+0x414>
 800f7d6:	eef0 7a47 	vmov.f32	s15, s14
 800f7da:	e7d4      	b.n	800f786 <__kernel_rem_pio2f+0x41e>
 800f7dc:	ecb2 7a01 	vldmia	r2!, {s14}
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7e6:	e7d6      	b.n	800f796 <__kernel_rem_pio2f+0x42e>
 800f7e8:	edd2 7a00 	vldr	s15, [r2]
 800f7ec:	edd2 6a01 	vldr	s13, [r2, #4]
 800f7f0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f7f4:	3801      	subs	r0, #1
 800f7f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7fa:	ed82 7a00 	vstr	s14, [r2]
 800f7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f802:	edc2 7a01 	vstr	s15, [r2, #4]
 800f806:	e798      	b.n	800f73a <__kernel_rem_pio2f+0x3d2>
 800f808:	edd3 7a00 	vldr	s15, [r3]
 800f80c:	edd3 6a01 	vldr	s13, [r3, #4]
 800f810:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f814:	3a01      	subs	r2, #1
 800f816:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f81a:	ed83 7a00 	vstr	s14, [r3]
 800f81e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f822:	edc3 7a01 	vstr	s15, [r3, #4]
 800f826:	e78d      	b.n	800f744 <__kernel_rem_pio2f+0x3dc>
 800f828:	ed33 7a01 	vldmdb	r3!, {s14}
 800f82c:	3c01      	subs	r4, #1
 800f82e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f832:	e78f      	b.n	800f754 <__kernel_rem_pio2f+0x3ec>
 800f834:	eef1 6a66 	vneg.f32	s13, s13
 800f838:	eeb1 7a47 	vneg.f32	s14, s14
 800f83c:	edc7 6a00 	vstr	s13, [r7]
 800f840:	ed87 7a01 	vstr	s14, [r7, #4]
 800f844:	eef1 7a67 	vneg.f32	s15, s15
 800f848:	e790      	b.n	800f76c <__kernel_rem_pio2f+0x404>
 800f84a:	bf00      	nop

0800f84c <scalbnf>:
 800f84c:	ee10 3a10 	vmov	r3, s0
 800f850:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f854:	d02b      	beq.n	800f8ae <scalbnf+0x62>
 800f856:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f85a:	d302      	bcc.n	800f862 <scalbnf+0x16>
 800f85c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f860:	4770      	bx	lr
 800f862:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f866:	d123      	bne.n	800f8b0 <scalbnf+0x64>
 800f868:	4b24      	ldr	r3, [pc, #144]	@ (800f8fc <scalbnf+0xb0>)
 800f86a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f900 <scalbnf+0xb4>
 800f86e:	4298      	cmp	r0, r3
 800f870:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f874:	db17      	blt.n	800f8a6 <scalbnf+0x5a>
 800f876:	ee10 3a10 	vmov	r3, s0
 800f87a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f87e:	3a19      	subs	r2, #25
 800f880:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f884:	4288      	cmp	r0, r1
 800f886:	dd15      	ble.n	800f8b4 <scalbnf+0x68>
 800f888:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f904 <scalbnf+0xb8>
 800f88c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f908 <scalbnf+0xbc>
 800f890:	ee10 3a10 	vmov	r3, s0
 800f894:	eeb0 7a67 	vmov.f32	s14, s15
 800f898:	2b00      	cmp	r3, #0
 800f89a:	bfb8      	it	lt
 800f89c:	eef0 7a66 	vmovlt.f32	s15, s13
 800f8a0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f8a4:	4770      	bx	lr
 800f8a6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f90c <scalbnf+0xc0>
 800f8aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f8ae:	4770      	bx	lr
 800f8b0:	0dd2      	lsrs	r2, r2, #23
 800f8b2:	e7e5      	b.n	800f880 <scalbnf+0x34>
 800f8b4:	4410      	add	r0, r2
 800f8b6:	28fe      	cmp	r0, #254	@ 0xfe
 800f8b8:	dce6      	bgt.n	800f888 <scalbnf+0x3c>
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	dd06      	ble.n	800f8cc <scalbnf+0x80>
 800f8be:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f8c2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f8c6:	ee00 3a10 	vmov	s0, r3
 800f8ca:	4770      	bx	lr
 800f8cc:	f110 0f16 	cmn.w	r0, #22
 800f8d0:	da09      	bge.n	800f8e6 <scalbnf+0x9a>
 800f8d2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f90c <scalbnf+0xc0>
 800f8d6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f910 <scalbnf+0xc4>
 800f8da:	ee10 3a10 	vmov	r3, s0
 800f8de:	eeb0 7a67 	vmov.f32	s14, s15
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	e7d9      	b.n	800f89a <scalbnf+0x4e>
 800f8e6:	3019      	adds	r0, #25
 800f8e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f8ec:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f8f0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f914 <scalbnf+0xc8>
 800f8f4:	ee07 3a90 	vmov	s15, r3
 800f8f8:	e7d7      	b.n	800f8aa <scalbnf+0x5e>
 800f8fa:	bf00      	nop
 800f8fc:	ffff3cb0 	.word	0xffff3cb0
 800f900:	4c000000 	.word	0x4c000000
 800f904:	7149f2ca 	.word	0x7149f2ca
 800f908:	f149f2ca 	.word	0xf149f2ca
 800f90c:	0da24260 	.word	0x0da24260
 800f910:	8da24260 	.word	0x8da24260
 800f914:	33000000 	.word	0x33000000

0800f918 <floorf>:
 800f918:	ee10 3a10 	vmov	r3, s0
 800f91c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f920:	3a7f      	subs	r2, #127	@ 0x7f
 800f922:	2a16      	cmp	r2, #22
 800f924:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f928:	dc2b      	bgt.n	800f982 <floorf+0x6a>
 800f92a:	2a00      	cmp	r2, #0
 800f92c:	da12      	bge.n	800f954 <floorf+0x3c>
 800f92e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f994 <floorf+0x7c>
 800f932:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f936:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f93e:	dd06      	ble.n	800f94e <floorf+0x36>
 800f940:	2b00      	cmp	r3, #0
 800f942:	da24      	bge.n	800f98e <floorf+0x76>
 800f944:	2900      	cmp	r1, #0
 800f946:	4b14      	ldr	r3, [pc, #80]	@ (800f998 <floorf+0x80>)
 800f948:	bf08      	it	eq
 800f94a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800f94e:	ee00 3a10 	vmov	s0, r3
 800f952:	4770      	bx	lr
 800f954:	4911      	ldr	r1, [pc, #68]	@ (800f99c <floorf+0x84>)
 800f956:	4111      	asrs	r1, r2
 800f958:	420b      	tst	r3, r1
 800f95a:	d0fa      	beq.n	800f952 <floorf+0x3a>
 800f95c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800f994 <floorf+0x7c>
 800f960:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f964:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f96c:	ddef      	ble.n	800f94e <floorf+0x36>
 800f96e:	2b00      	cmp	r3, #0
 800f970:	bfbe      	ittt	lt
 800f972:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800f976:	fa40 f202 	asrlt.w	r2, r0, r2
 800f97a:	189b      	addlt	r3, r3, r2
 800f97c:	ea23 0301 	bic.w	r3, r3, r1
 800f980:	e7e5      	b.n	800f94e <floorf+0x36>
 800f982:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f986:	d3e4      	bcc.n	800f952 <floorf+0x3a>
 800f988:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f98c:	4770      	bx	lr
 800f98e:	2300      	movs	r3, #0
 800f990:	e7dd      	b.n	800f94e <floorf+0x36>
 800f992:	bf00      	nop
 800f994:	7149f2ca 	.word	0x7149f2ca
 800f998:	bf800000 	.word	0xbf800000
 800f99c:	007fffff 	.word	0x007fffff

0800f9a0 <_init>:
 800f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a2:	bf00      	nop
 800f9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9a6:	bc08      	pop	{r3}
 800f9a8:	469e      	mov	lr, r3
 800f9aa:	4770      	bx	lr

0800f9ac <_fini>:
 800f9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ae:	bf00      	nop
 800f9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9b2:	bc08      	pop	{r3}
 800f9b4:	469e      	mov	lr, r3
 800f9b6:	4770      	bx	lr
